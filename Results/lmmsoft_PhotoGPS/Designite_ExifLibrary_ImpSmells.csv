Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The method has 107 lines of code.
Long Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The method has 137 lines of code.
Long Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The method has 127 lines of code.
Long Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The method has 116 lines of code.
Long Method,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The method has 278 lines of code.
Complex Method,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,Cyclomatic complexity of the method is 9
Complex Method,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,Cyclomatic complexity of the method is 20
Complex Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,Cyclomatic complexity of the method is 31
Complex Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,Cyclomatic complexity of the method is 32
Complex Method,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,Cyclomatic complexity of the method is 26
Complex Method,ExifLibrary,ExifPropertyCollection,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyCollection.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,Cyclomatic complexity of the method is 12
Long Parameter List,ExifLibrary,BitConverterEx,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\BitConverterEx.cs,CheckData,The method has 5 parameters.
Long Parameter List,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The method has 5 parameters.
Long Parameter List,ExifLibrary,ExifRectangularSubjectArea,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifRectangularSubjectArea,The method has 5 parameters.
Long Parameter List,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The method has 7 parameters.
Long Statement,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The length of the statement  "			return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5])); " is 159.
Long Statement,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURational,The length of the statement  "	return new MathEx.UFraction32 (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder)); " is 163.
Long Statement,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRational,The length of the statement  "	return new MathEx.Fraction32 (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder)); " is 160.
Long Statement,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The length of the statement  "		numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder)); " is 149.
Long Statement,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The length of the statement  "		numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder)); " is 147.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The length of the statement  "		if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) { " is 152.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFIFAPP0,The length of the statement  "	jfifApp0 = Sections.Find (a => (a.Marker == JPEGMarker.APP0) && a.Header.Length >= 5 && (Encoding.ASCII.GetString (a.Header' 0' 5) == "JFIF\0")); " is 145.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFIFAPP0,The length of the statement  "	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFIFThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' jfifThumbnail))); " is 134.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The length of the statement  "	jfxxApp0 = Sections.Find (a => (a.Marker == JPEGMarker.APP0) && a.Header.Length >= 5 && (Encoding.ASCII.GetString (a.Header' 0' 5) == "JFXX\0")); " is 145.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The length of the statement  "		Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data))); " is 125.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The length of the statement  "		Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data))); " is 129.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The length of the statement  "	exifApp1 = Sections.Find (a => (a.Marker == JPEGMarker.APP1) && a.Header.Length >= 6 && (Encoding.ASCII.GetString (a.Header' 0' 6) == "Exif\0\0")); " is 147.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The length of the statement  "		if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) { " is 255.
Long Statement,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The length of the statement  "		if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) { " is 168.
Long Statement,ExifLibrary,ExifPropertyCollection,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyCollection.cs,Set,The length of the statement  "	if (key == ExifTag.WindowsTitle || key == ExifTag.WindowsTitle || key == ExifTag.WindowsComment || key == ExifTag.WindowsAuthor || key == ExifTag.WindowsKeywords || key == ExifTag.WindowsSubject) { " is 197.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0)); " is 144.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0)); " is 126.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "				return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder)); " is 120.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "				return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder)); " is 123.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true); " is 127.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder)); " is 121.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true); " is 123.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true); " is 135.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder)); " is 120.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder)); " is 121.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder)); " is 124.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder)); " is 125.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0)); " is 153.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0)); " is 135.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0)); " is 126.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "			return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)); " is 120.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "	else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator. " is 124.
Long Statement,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The length of the statement  "	else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator. " is 123.
Long Statement,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The length of the statement  "	header.IFDOffset = BitConverterEx.ToUInt32 (data' offset + 4' header.TIFFHeaderByteOrder' BitConverterEx.SystemByteOrder); " is 122.
Complex Conditional,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The conditional expression  "stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF"  is complex.
Complex Conditional,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The conditional expression  "marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)"  is complex.
Complex Conditional,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The conditional expression  "section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)"  is complex.
Complex Conditional,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The conditional expression  "ifdzeroth.Count == 0 && ifdgps.Count == 0 && ifdinterop.Count == 0 && ifdfirst.Count == 0 && Thumbnail == null"  is complex.
Complex Conditional,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The conditional expression  "!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)"  is complex.
Complex Conditional,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The conditional expression  "ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)"  is complex.
Complex Conditional,ExifLibrary,ExifPropertyCollection,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyCollection.cs,Set,The conditional expression  "key == ExifTag.WindowsTitle || key == ExifTag.WindowsTitle || key == ExifTag.WindowsComment || key == ExifTag.WindowsAuthor || key == ExifTag.WindowsKeywords || key == ExifTag.WindowsSubject"  is complex.
Complex Conditional,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The conditional expression  "tag == 0x9c9b || tag == 0x9c9c || // Windows tags  tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f"  is complex.
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint i = 0; i < fieldcount; i++) {  	uint fieldoffset = offset + 2 + 12 * i;  	ImageFileDirectoryEntry field = ImageFileDirectoryEntry.FromBytes (data' fieldoffset' byteOrder);  	ifd.Fields.Add (field);  	// Read strip offsets  	if (field.Tag == 273) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripOffsets.Add (stripOffset);  		}  	}  	// Read strip lengths  	if (field.Tag == 279) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripLengths.Add (stripLength);  		}  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint i = 0; i < fieldcount; i++) {  	uint fieldoffset = offset + 2 + 12 * i;  	ImageFileDirectoryEntry field = ImageFileDirectoryEntry.FromBytes (data' fieldoffset' byteOrder);  	ifd.Fields.Add (field);  	// Read strip offsets  	if (field.Tag == 273) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripOffsets.Add (stripOffset);  		}  	}  	// Read strip lengths  	if (field.Tag == 279) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripLengths.Add (stripLength);  		}  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint i = 0; i < fieldcount; i++) {  	uint fieldoffset = offset + 2 + 12 * i;  	ImageFileDirectoryEntry field = ImageFileDirectoryEntry.FromBytes (data' fieldoffset' byteOrder);  	ifd.Fields.Add (field);  	// Read strip offsets  	if (field.Tag == 273) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripOffsets.Add (stripOffset);  		}  	}  	// Read strip lengths  	if (field.Tag == 279) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripLengths.Add (stripLength);  		}  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint i = 0; i < fieldcount; i++) {  	uint fieldoffset = offset + 2 + 12 * i;  	ImageFileDirectoryEntry field = ImageFileDirectoryEntry.FromBytes (data' fieldoffset' byteOrder);  	ifd.Fields.Add (field);  	// Read strip offsets  	if (field.Tag == 273) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripOffsets.Add (stripOffset);  		}  	}  	// Read strip lengths  	if (field.Tag == 279) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripLengths.Add (stripLength);  		}  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint i = 0; i < fieldcount; i++) {  	uint fieldoffset = offset + 2 + 12 * i;  	ImageFileDirectoryEntry field = ImageFileDirectoryEntry.FromBytes (data' fieldoffset' byteOrder);  	ifd.Fields.Add (field);  	// Read strip offsets  	if (field.Tag == 273) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripOffsets.Add (stripOffset);  		}  	}  	// Read strip lengths  	if (field.Tag == 279) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripLengths.Add (stripLength);  		}  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint i = 0; i < fieldcount; i++) {  	uint fieldoffset = offset + 2 + 12 * i;  	ImageFileDirectoryEntry field = ImageFileDirectoryEntry.FromBytes (data' fieldoffset' byteOrder);  	ifd.Fields.Add (field);  	// Read strip offsets  	if (field.Tag == 273) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripOffsets.Add (stripOffset);  		}  	}  	// Read strip lengths  	if (field.Tag == 279) {  		int baselen = field.Data.Length / (int)field.Count;  		for (uint j = 0; j < field.Count; j++) {  			byte[] val = new byte[baselen];  			Array.Copy (field.Data' j * baselen' val' 0' baselen);  			uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  			stripLengths.Add (stripLength);  		}  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: if (field.Tag == 273) {  	int baselen = field.Data.Length / (int)field.Count;  	for (uint j = 0; j < field.Count; j++) {  		byte[] val = new byte[baselen];  		Array.Copy (field.Data' j * baselen' val' 0' baselen);  		uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  		stripOffsets.Add (stripOffset);  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: if (field.Tag == 273) {  	int baselen = field.Data.Length / (int)field.Count;  	for (uint j = 0; j < field.Count; j++) {  		byte[] val = new byte[baselen];  		Array.Copy (field.Data' j * baselen' val' 0' baselen);  		uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  		stripOffsets.Add (stripOffset);  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint j = 0; j < field.Count; j++) {  	byte[] val = new byte[baselen];  	Array.Copy (field.Data' j * baselen' val' 0' baselen);  	uint stripOffset = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  	stripOffsets.Add (stripOffset);  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: if (field.Tag == 279) {  	int baselen = field.Data.Length / (int)field.Count;  	for (uint j = 0; j < field.Count; j++) {  		byte[] val = new byte[baselen];  		Array.Copy (field.Data' j * baselen' val' 0' baselen);  		uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  		stripLengths.Add (stripLength);  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: if (field.Tag == 279) {  	int baselen = field.Data.Length / (int)field.Count;  	for (uint j = 0; j < field.Count; j++) {  		byte[] val = new byte[baselen];  		Array.Copy (field.Data' j * baselen' val' 0' baselen);  		uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  		stripLengths.Add (stripLength);  	}  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: for (uint j = 0; j < field.Count; j++) {  	byte[] val = new byte[baselen];  	Array.Copy (field.Data' j * baselen' val' 0' baselen);  	uint stripLength = (field.Type == 3 ? (uint)BitConverter.ToUInt16 (val' 0) : BitConverter.ToUInt32 (val' 0));  	stripLengths.Add (stripLength);  }  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: ifd.NextIFDOffset = conv.ToUInt32 (data' offset + 2 + 12 * fieldcount);  
Magic Number,ExifLibrary,ImageFileDirectory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectory.cs,FromBytes,The following statement contains a magic number: ifd.NextIFDOffset = conv.ToUInt32 (data' offset + 2 + 12 * fieldcount);  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,FromBytes,The following statement contains a magic number: Array.Copy (data' offset + 8' value' 0' 4);  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,FromBytes,The following statement contains a magic number: Array.Copy (data' offset + 8' value' 0' 4);  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,FromBytes,The following statement contains a magic number: if (totallength > 4) {  	uint dataoffset = BitConverterEx.ToUInt32 (value' 0' byteOrder' BitConverterEx.SystemByteOrder);  	value = new byte[totallength];  	Array.Copy (data' dataoffset' value' 0' totallength);  }  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 1 || type == 6)  	// BYTE and SBYTE  	return 1;  else if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 2 || type == 7)  	// ASCII and UNDEFINED  	return 1;  else if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 3 || type == 8)  	// SHORT and SSHORT  	return 2;  else if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: return 2;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 4 || type == 9)  	// LONG and SLONG  	return 4;  else if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: return 4;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 5 || type == 10)  	// RATIONAL (2xLONG) and SRATIONAL (2xSLONG)  	return 8;  else if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 11)  	// FLOAT  	return 4;  else if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: return 4;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: if (type == 12)  	// DOUBLE  	return 8;  
Magic Number,ExifLibrary,ImageFileDirectoryEntry,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ImageFileDirectoryEntry.cs,GetBaseLength,The following statement contains a magic number: return 8;  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write ((BitConverterEx.SystemByteOrder == BitConverterEx.ByteOrder.LittleEndian ? new byte[] {  	0x49'  	0x49  } : new byte[] {  	0x4D'  	0x4D  })' 0' 2);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes ((ushort)42)' 0' 2);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes ((ushort)42)' 0' 2);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int i = 0; i < IFDs.Count; i++) {  	ImageFileDirectory ifd = IFDs [i];  	// Save the location of IFD offset  	long ifdLocation = stream.Position - 4;  	// Write strips first  	byte[] stripOffsets = new byte[4 * ifd.Strips.Count];  	byte[] stripLengths = new byte[4 * ifd.Strips.Count];  	uint stripOffset = ifdoffset;  	for (int j = 0; j < ifd.Strips.Count; j++) {  		byte[] stripData = ifd.Strips [j].Data;  		byte[] oBytes = BitConverter.GetBytes (stripOffset);  		byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  		Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  		Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  		stream.Write (stripData' 0' stripData.Length);  		stripOffset += (uint)stripData.Length;  	}  	// Remove old strip tags  	for (int j = ifd.Fields.Count - 1; j > 0; j--) {  		ushort tag = ifd.Fields [j].Tag;  		if (tag == 273 || tag == 279)  			ifd.Fields.RemoveAt (j);  	}  	// Write new strip tags  	ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  	ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  	// Write fields after strips  	ifdoffset = stripOffset;  	// Correct IFD offset  	long currentLocation = stream.Position;  	stream.Seek (ifdLocation' SeekOrigin.Begin);  	stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  	stream.Seek (currentLocation' SeekOrigin.Begin);  	// Offset to field data  	uint dataOffset = ifdoffset + 2 + (uint)ifd.Fields.Count * 12 + 4;  	// Field count  	stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  	// Fields  	foreach (ImageFileDirectoryEntry field in ifd.Fields) {  		// Tag  		stream.Write (conv.GetBytes (field.Tag)' 0' 2);  		// Type  		stream.Write (conv.GetBytes (field.Type)' 0' 2);  		// Count  		stream.Write (conv.GetBytes (field.Count)' 0' 4);  		// Field data  		byte[] data = field.Data;  		if (data.Length <= 4) {  			stream.Write (data' 0' data.Length);  			for (int j = data.Length; j < 4; j++)  				stream.WriteByte (0);  		}  		else {  			stream.Write (conv.GetBytes (dataOffset)' 0' 4);  			long currentOffset = stream.Position;  			stream.Seek (dataOffset' SeekOrigin.Begin);  			stream.Write (data' 0' data.Length);  			dataOffset += (uint)data.Length;  			stream.Seek (currentOffset' SeekOrigin.Begin);  		}  	}  	// Offset to next IFD  	ifdoffset = dataOffset;  	stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int j = 0; j < ifd.Strips.Count; j++) {  	byte[] stripData = ifd.Strips [j].Data;  	byte[] oBytes = BitConverter.GetBytes (stripOffset);  	byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  	Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  	Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  	stream.Write (stripData' 0' stripData.Length);  	stripOffset += (uint)stripData.Length;  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int j = 0; j < ifd.Strips.Count; j++) {  	byte[] stripData = ifd.Strips [j].Data;  	byte[] oBytes = BitConverter.GetBytes (stripOffset);  	byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  	Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  	Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  	stream.Write (stripData' 0' stripData.Length);  	stripOffset += (uint)stripData.Length;  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int j = 0; j < ifd.Strips.Count; j++) {  	byte[] stripData = ifd.Strips [j].Data;  	byte[] oBytes = BitConverter.GetBytes (stripOffset);  	byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  	Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  	Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  	stream.Write (stripData' 0' stripData.Length);  	stripOffset += (uint)stripData.Length;  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int j = 0; j < ifd.Strips.Count; j++) {  	byte[] stripData = ifd.Strips [j].Data;  	byte[] oBytes = BitConverter.GetBytes (stripOffset);  	byte[] lBytes = BitConverter.GetBytes ((uint)stripData.Length);  	Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  	Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  	stream.Write (stripData' 0' stripData.Length);  	stripOffset += (uint)stripData.Length;  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: Array.Copy (oBytes' 0' stripOffsets' 4 * j' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: Array.Copy (lBytes' 0' stripLengths' 4 * j' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int j = ifd.Fields.Count - 1; j > 0; j--) {  	ushort tag = ifd.Fields [j].Tag;  	if (tag == 273 || tag == 279)  		ifd.Fields.RemoveAt (j);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int j = ifd.Fields.Count - 1; j > 0; j--) {  	ushort tag = ifd.Fields [j].Tag;  	if (tag == 273 || tag == 279)  		ifd.Fields.RemoveAt (j);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: if (tag == 273 || tag == 279)  	ifd.Fields.RemoveAt (j);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: if (tag == 273 || tag == 279)  	ifd.Fields.RemoveAt (j);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: ifd.Fields.Add (new ImageFileDirectoryEntry (273' 4' (uint)ifd.Strips.Count' stripOffsets));  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: ifd.Fields.Add (new ImageFileDirectoryEntry (279' 4' (uint)ifd.Strips.Count' stripLengths));  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes (ifdoffset)' 0' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes ((ushort)ifd.Fields.Count)' 0' 2);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: foreach (ImageFileDirectoryEntry field in ifd.Fields) {  	// Tag  	stream.Write (conv.GetBytes (field.Tag)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (field.Type)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (field.Count)' 0' 4);  	// Field data  	byte[] data = field.Data;  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int j = data.Length; j < 4; j++)  			stream.WriteByte (0);  	}  	else {  		stream.Write (conv.GetBytes (dataOffset)' 0' 4);  		long currentOffset = stream.Position;  		stream.Seek (dataOffset' SeekOrigin.Begin);  		stream.Write (data' 0' data.Length);  		dataOffset += (uint)data.Length;  		stream.Seek (currentOffset' SeekOrigin.Begin);  	}  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: foreach (ImageFileDirectoryEntry field in ifd.Fields) {  	// Tag  	stream.Write (conv.GetBytes (field.Tag)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (field.Type)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (field.Count)' 0' 4);  	// Field data  	byte[] data = field.Data;  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int j = data.Length; j < 4; j++)  			stream.WriteByte (0);  	}  	else {  		stream.Write (conv.GetBytes (dataOffset)' 0' 4);  		long currentOffset = stream.Position;  		stream.Seek (dataOffset' SeekOrigin.Begin);  		stream.Write (data' 0' data.Length);  		dataOffset += (uint)data.Length;  		stream.Seek (currentOffset' SeekOrigin.Begin);  	}  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: foreach (ImageFileDirectoryEntry field in ifd.Fields) {  	// Tag  	stream.Write (conv.GetBytes (field.Tag)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (field.Type)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (field.Count)' 0' 4);  	// Field data  	byte[] data = field.Data;  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int j = data.Length; j < 4; j++)  			stream.WriteByte (0);  	}  	else {  		stream.Write (conv.GetBytes (dataOffset)' 0' 4);  		long currentOffset = stream.Position;  		stream.Seek (dataOffset' SeekOrigin.Begin);  		stream.Write (data' 0' data.Length);  		dataOffset += (uint)data.Length;  		stream.Seek (currentOffset' SeekOrigin.Begin);  	}  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: foreach (ImageFileDirectoryEntry field in ifd.Fields) {  	// Tag  	stream.Write (conv.GetBytes (field.Tag)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (field.Type)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (field.Count)' 0' 4);  	// Field data  	byte[] data = field.Data;  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int j = data.Length; j < 4; j++)  			stream.WriteByte (0);  	}  	else {  		stream.Write (conv.GetBytes (dataOffset)' 0' 4);  		long currentOffset = stream.Position;  		stream.Seek (dataOffset' SeekOrigin.Begin);  		stream.Write (data' 0' data.Length);  		dataOffset += (uint)data.Length;  		stream.Seek (currentOffset' SeekOrigin.Begin);  	}  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: foreach (ImageFileDirectoryEntry field in ifd.Fields) {  	// Tag  	stream.Write (conv.GetBytes (field.Tag)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (field.Type)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (field.Count)' 0' 4);  	// Field data  	byte[] data = field.Data;  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int j = data.Length; j < 4; j++)  			stream.WriteByte (0);  	}  	else {  		stream.Write (conv.GetBytes (dataOffset)' 0' 4);  		long currentOffset = stream.Position;  		stream.Seek (dataOffset' SeekOrigin.Begin);  		stream.Write (data' 0' data.Length);  		dataOffset += (uint)data.Length;  		stream.Seek (currentOffset' SeekOrigin.Begin);  	}  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: foreach (ImageFileDirectoryEntry field in ifd.Fields) {  	// Tag  	stream.Write (conv.GetBytes (field.Tag)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (field.Type)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (field.Count)' 0' 4);  	// Field data  	byte[] data = field.Data;  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int j = data.Length; j < 4; j++)  			stream.WriteByte (0);  	}  	else {  		stream.Write (conv.GetBytes (dataOffset)' 0' 4);  		long currentOffset = stream.Position;  		stream.Seek (dataOffset' SeekOrigin.Begin);  		stream.Write (data' 0' data.Length);  		dataOffset += (uint)data.Length;  		stream.Seek (currentOffset' SeekOrigin.Begin);  	}  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes (field.Tag)' 0' 2);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes (field.Type)' 0' 2);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes (field.Count)' 0' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: if (data.Length <= 4) {  	stream.Write (data' 0' data.Length);  	for (int j = data.Length; j < 4; j++)  		stream.WriteByte (0);  }  else {  	stream.Write (conv.GetBytes (dataOffset)' 0' 4);  	long currentOffset = stream.Position;  	stream.Seek (dataOffset' SeekOrigin.Begin);  	stream.Write (data' 0' data.Length);  	dataOffset += (uint)data.Length;  	stream.Seek (currentOffset' SeekOrigin.Begin);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: if (data.Length <= 4) {  	stream.Write (data' 0' data.Length);  	for (int j = data.Length; j < 4; j++)  		stream.WriteByte (0);  }  else {  	stream.Write (conv.GetBytes (dataOffset)' 0' 4);  	long currentOffset = stream.Position;  	stream.Seek (dataOffset' SeekOrigin.Begin);  	stream.Write (data' 0' data.Length);  	dataOffset += (uint)data.Length;  	stream.Seek (currentOffset' SeekOrigin.Begin);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: if (data.Length <= 4) {  	stream.Write (data' 0' data.Length);  	for (int j = data.Length; j < 4; j++)  		stream.WriteByte (0);  }  else {  	stream.Write (conv.GetBytes (dataOffset)' 0' 4);  	long currentOffset = stream.Position;  	stream.Seek (dataOffset' SeekOrigin.Begin);  	stream.Write (data' 0' data.Length);  	dataOffset += (uint)data.Length;  	stream.Seek (currentOffset' SeekOrigin.Begin);  }  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: for (int j = data.Length; j < 4; j++)  	stream.WriteByte (0);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes (dataOffset)' 0' 4);  
Magic Number,ExifLibrary,TIFFFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFFile.cs,Save,The following statement contains a magic number: stream.Write (conv.GetBytes (i == IFDs.Count - 1 ? 0 : ifdoffset)' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: try {  	if (hastime && parts.Length == 6) {  		// yyyy:MM:dd HH:mm:ss  		// This is the expected format though some cameras  		// can use single digits. See Issue 21.  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  	}  	else if (!hastime && parts.Length == 3) {  		// yyyy:MM:dd  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  	}  	else {  		return DateTime.MinValue;  	}  }  catch (ArgumentOutOfRangeException) {  	return DateTime.MinValue;  }  catch (ArgumentException) {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: try {  	if (hastime && parts.Length == 6) {  		// yyyy:MM:dd HH:mm:ss  		// This is the expected format though some cameras  		// can use single digits. See Issue 21.  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  	}  	else if (!hastime && parts.Length == 3) {  		// yyyy:MM:dd  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  	}  	else {  		return DateTime.MinValue;  	}  }  catch (ArgumentOutOfRangeException) {  	return DateTime.MinValue;  }  catch (ArgumentException) {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: try {  	if (hastime && parts.Length == 6) {  		// yyyy:MM:dd HH:mm:ss  		// This is the expected format though some cameras  		// can use single digits. See Issue 21.  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  	}  	else if (!hastime && parts.Length == 3) {  		// yyyy:MM:dd  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  	}  	else {  		return DateTime.MinValue;  	}  }  catch (ArgumentOutOfRangeException) {  	return DateTime.MinValue;  }  catch (ArgumentException) {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: try {  	if (hastime && parts.Length == 6) {  		// yyyy:MM:dd HH:mm:ss  		// This is the expected format though some cameras  		// can use single digits. See Issue 21.  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  	}  	else if (!hastime && parts.Length == 3) {  		// yyyy:MM:dd  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  	}  	else {  		return DateTime.MinValue;  	}  }  catch (ArgumentOutOfRangeException) {  	return DateTime.MinValue;  }  catch (ArgumentException) {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: try {  	if (hastime && parts.Length == 6) {  		// yyyy:MM:dd HH:mm:ss  		// This is the expected format though some cameras  		// can use single digits. See Issue 21.  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  	}  	else if (!hastime && parts.Length == 3) {  		// yyyy:MM:dd  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  	}  	else {  		return DateTime.MinValue;  	}  }  catch (ArgumentOutOfRangeException) {  	return DateTime.MinValue;  }  catch (ArgumentException) {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: try {  	if (hastime && parts.Length == 6) {  		// yyyy:MM:dd HH:mm:ss  		// This is the expected format though some cameras  		// can use single digits. See Issue 21.  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  	}  	else if (!hastime && parts.Length == 3) {  		// yyyy:MM:dd  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  	}  	else {  		return DateTime.MinValue;  	}  }  catch (ArgumentOutOfRangeException) {  	return DateTime.MinValue;  }  catch (ArgumentException) {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: try {  	if (hastime && parts.Length == 6) {  		// yyyy:MM:dd HH:mm:ss  		// This is the expected format though some cameras  		// can use single digits. See Issue 21.  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  	}  	else if (!hastime && parts.Length == 3) {  		// yyyy:MM:dd  		return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  	}  	else {  		return DateTime.MinValue;  	}  }  catch (ArgumentOutOfRangeException) {  	return DateTime.MinValue;  }  catch (ArgumentException) {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (hastime && parts.Length == 6) {  	// yyyy:MM:dd HH:mm:ss  	// This is the expected format though some cameras  	// can use single digits. See Issue 21.  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  }  else if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (hastime && parts.Length == 6) {  	// yyyy:MM:dd HH:mm:ss  	// This is the expected format though some cameras  	// can use single digits. See Issue 21.  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  }  else if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (hastime && parts.Length == 6) {  	// yyyy:MM:dd HH:mm:ss  	// This is the expected format though some cameras  	// can use single digits. See Issue 21.  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  }  else if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (hastime && parts.Length == 6) {  	// yyyy:MM:dd HH:mm:ss  	// This is the expected format though some cameras  	// can use single digits. See Issue 21.  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  }  else if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (hastime && parts.Length == 6) {  	// yyyy:MM:dd HH:mm:ss  	// This is the expected format though some cameras  	// can use single digits. See Issue 21.  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  }  else if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (hastime && parts.Length == 6) {  	// yyyy:MM:dd HH:mm:ss  	// This is the expected format though some cameras  	// can use single digits. See Issue 21.  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  }  else if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (hastime && parts.Length == 6) {  	// yyyy:MM:dd HH:mm:ss  	// This is the expected format though some cameras  	// can use single digits. See Issue 21.  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  }  else if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2])' int.Parse (parts [3])' int.Parse (parts [4])' int.Parse (parts [5]));  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: if (!hastime && parts.Length == 3) {  	// yyyy:MM:dd  	return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  }  else {  	return DateTime.MinValue;  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToDateTime,The following statement contains a magic number: return new DateTime (int.Parse (parts [0])' int.Parse (parts [1])' int.Parse (parts [2]));  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURational,The following statement contains a magic number: Array.Copy (data' 0' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURational,The following statement contains a magic number: Array.Copy (data' 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURational,The following statement contains a magic number: Array.Copy (data' 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRational,The following statement contains a magic number: Array.Copy (data' 0' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRational,The following statement contains a magic number: Array.Copy (data' 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRational,The following statement contains a magic number: Array.Copy (data' 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUShortArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[2];  	Array.Copy (data' i * 2' num' 0' 2);  	numbers [i] = ToUInt16 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUShortArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[2];  	Array.Copy (data' i * 2' num' 0' 2);  	numbers [i] = ToUInt16 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUShortArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[2];  	Array.Copy (data' i * 2' num' 0' 2);  	numbers [i] = ToUInt16 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUShortArray,The following statement contains a magic number: Array.Copy (data' i * 2' num' 0' 2);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUShortArray,The following statement contains a magic number: Array.Copy (data' i * 2' num' 0' 2);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUIntArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	Array.Copy (data' i * 4' num' 0' 4);  	numbers [i] = ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUIntArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	Array.Copy (data' i * 4' num' 0' 4);  	numbers [i] = ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUIntArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	Array.Copy (data' i * 4' num' 0' 4);  	numbers [i] = ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUIntArray,The following statement contains a magic number: Array.Copy (data' i * 4' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToUIntArray,The following statement contains a magic number: Array.Copy (data' i * 4' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSIntArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	Array.Copy (data' i * 4' num' 0' 4);  	numbers [i] = ToInt32 (num' 0' byteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSIntArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	Array.Copy (data' i * 4' num' 0' 4);  	numbers [i] = ToInt32 (num' 0' byteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSIntArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	Array.Copy (data' i * 4' num' 0' 4);  	numbers [i] = ToInt32 (num' 0' byteorder' BitConverterEx.SystemByteOrder);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSIntArray,The following statement contains a magic number: Array.Copy (data' i * 4' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSIntArray,The following statement contains a magic number: Array.Copy (data' i * 4' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToUInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToUInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: Array.Copy (data' i * 8' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: Array.Copy (data' i * 8' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: Array.Copy (data' i * 8 + 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: Array.Copy (data' i * 8 + 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToURationalArray,The following statement contains a magic number: Array.Copy (data' i * 8 + 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: for (uint i = 0; i < count; i++) {  	byte[] num = new byte[4];  	byte[] den = new byte[4];  	Array.Copy (data' i * 8' num' 0' 4);  	Array.Copy (data' i * 8 + 4' den' 0' 4);  	numbers [i].Set (ToInt32 (num' 0' frombyteorder' BitConverterEx.SystemByteOrder)' ToInt32 (den' 0' frombyteorder' BitConverterEx.SystemByteOrder));  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: Array.Copy (data' i * 8' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: Array.Copy (data' i * 8' num' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: Array.Copy (data' i * 8 + 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: Array.Copy (data' i * 8 + 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,ToSRationalArray,The following statement contains a magic number: Array.Copy (data' i * 8 + 4' den' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' 0' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i]' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 2' 2);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i]' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 2' 2);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 2' 2);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 2' 2);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i]' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i]' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i]' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i]' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 8' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 8' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' i * 8 + 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' i * 8 + 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' i * 8 + 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	byte[] num = GetBytes (value [i].Numerator' BitConverterEx.SystemByteOrder' tobyteorder);  	byte[] den = GetBytes (value [i].Denominator' BitConverterEx.SystemByteOrder' tobyteorder);  	Array.Copy (num' 0' data' i * 8' 4);  	Array.Copy (den' 0' data' i * 8 + 4' 4);  }  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 8' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (num' 0' data' i * 8' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' i * 8 + 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' i * 8 + 4' 4);  
Magic Number,ExifLibrary,ExifBitConverter,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifBitConverter.cs,GetBytes,The following statement contains a magic number: Array.Copy (den' 0' data' i * 8 + 4' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] != 0xD8)  	throw new NotValidJPEGFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] != 0xD8)  	throw new NotValidJPEGFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (stream.Position != stream.Length) {  	// Read the next section marker. Section markers are two bytes   	// with values 0xFF' 0x?? where ?? must not be 0x00 or 0xFF.  	if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  		throw new NotValidJPEGFileException ();  	JPEGMarker marker = (JPEGMarker)markerbytes [1];  	byte[] header = new byte[0];  	// SOI' EOI and RST markers do not contain any header  	if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		// Length of the header including the length bytes.  		// This value is a 16-bit unsigned integer   		// in big endian byte-order.  		byte[] lengthbytes = new byte[2];  		if (stream.Read (lengthbytes' 0' 2) != 2)  			throw new NotValidJPEGFileException ();  		long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  		// Read section header.  		header = new byte[length - 2];  		int bytestoread = header.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (header' header.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  	// Start of Scan (SOS) sections and RST sections are immediately  	// followed by entropy coded data. For that' we need to read until  	// the next section marker once we reach a SOS or RST.  	byte[] entropydata = new byte[0];  	if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  		long position = stream.Position;  		// Search for the next section marker  		while (true) {  			// Search for an 0xFF indicating start of a marker  			int nextbyte = 0;  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte != 0xFF);  			// Skip filler bytes (0xFF)  			do {  				nextbyte = stream.ReadByte ();  				if (nextbyte == -1)  					throw new NotValidJPEGFileException ();  			}  			while ((byte)nextbyte == 0xFF);  			// Looks like a section marker. The next byte must not be 0x00.  			if ((byte)nextbyte != 0x00) {  				// We reached a section marker. Calculate the  				// length of the entropy coded data.  				stream.Seek (-2' SeekOrigin.Current);  				long edlength = stream.Position - position;  				stream.Seek (-edlength' SeekOrigin.Current);  				// Read entropy coded data  				entropydata = new byte[edlength];  				int bytestoread = entropydata.Length;  				while (bytestoread > 0) {  					int count = Math.Min (bytestoread' 4 * 1024);  					int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  					if (bytesread == 0)  						throw new NotValidJPEGFileException ();  					bytestoread -= bytesread;  				}  				break;  			}  		}  	}  	// Store section.  	JPEGSection section = new JPEGSection (marker' header' entropydata);  	Sections.Add (section);  	// Some propriety formats store data past the EOI marker  	if (marker == JPEGMarker.EOI) {  		int bytestoread = (int)(stream.Length - stream.Position);  		TrailingData = new byte[bytestoread];  		while (bytestoread > 0) {  			int count = (int)Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  	throw new NotValidJPEGFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (stream.Read (markerbytes' 0' 2) != 2 || markerbytes [0] != 0xFF || markerbytes [1] == 0x00 || markerbytes [1] == 0xFF)  	throw new NotValidJPEGFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	// Length of the header including the length bytes.  	// This value is a 16-bit unsigned integer   	// in big endian byte-order.  	byte[] lengthbytes = new byte[2];  	if (stream.Read (lengthbytes' 0' 2) != 2)  		throw new NotValidJPEGFileException ();  	long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  	// Read section header.  	header = new byte[length - 2];  	int bytestoread = header.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (header' header.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	// Length of the header including the length bytes.  	// This value is a 16-bit unsigned integer   	// in big endian byte-order.  	byte[] lengthbytes = new byte[2];  	if (stream.Read (lengthbytes' 0' 2) != 2)  		throw new NotValidJPEGFileException ();  	long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  	// Read section header.  	header = new byte[length - 2];  	int bytestoread = header.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (header' header.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	// Length of the header including the length bytes.  	// This value is a 16-bit unsigned integer   	// in big endian byte-order.  	byte[] lengthbytes = new byte[2];  	if (stream.Read (lengthbytes' 0' 2) != 2)  		throw new NotValidJPEGFileException ();  	long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  	// Read section header.  	header = new byte[length - 2];  	int bytestoread = header.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (header' header.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	// Length of the header including the length bytes.  	// This value is a 16-bit unsigned integer   	// in big endian byte-order.  	byte[] lengthbytes = new byte[2];  	if (stream.Read (lengthbytes' 0' 2) != 2)  		throw new NotValidJPEGFileException ();  	long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  	// Read section header.  	header = new byte[length - 2];  	int bytestoread = header.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (header' header.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	// Length of the header including the length bytes.  	// This value is a 16-bit unsigned integer   	// in big endian byte-order.  	byte[] lengthbytes = new byte[2];  	if (stream.Read (lengthbytes' 0' 2) != 2)  		throw new NotValidJPEGFileException ();  	long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  	// Read section header.  	header = new byte[length - 2];  	int bytestoread = header.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (header' header.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker != JPEGMarker.SOI && marker != JPEGMarker.EOI && !(marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	// Length of the header including the length bytes.  	// This value is a 16-bit unsigned integer   	// in big endian byte-order.  	byte[] lengthbytes = new byte[2];  	if (stream.Read (lengthbytes' 0' 2) != 2)  		throw new NotValidJPEGFileException ();  	long length = (long)BitConverterEx.BigEndian.ToUInt16 (lengthbytes' 0);  	// Read section header.  	header = new byte[length - 2];  	int bytestoread = header.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (header' header.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (stream.Read (lengthbytes' 0' 2) != 2)  	throw new NotValidJPEGFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (stream.Read (lengthbytes' 0' 2) != 2)  	throw new NotValidJPEGFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: header = new byte[length - 2];  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (bytestoread > 0) {  	int count = Math.Min (bytestoread' 4 * 1024);  	int bytesread = stream.Read (header' header.Length - bytestoread' count);  	if (bytesread == 0)  		throw new NotValidJPEGFileException ();  	bytestoread -= bytesread;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (bytestoread > 0) {  	int count = Math.Min (bytestoread' 4 * 1024);  	int bytesread = stream.Read (header' header.Length - bytestoread' count);  	if (bytesread == 0)  		throw new NotValidJPEGFileException ();  	bytestoread -= bytesread;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	long position = stream.Position;  	// Search for the next section marker  	while (true) {  		// Search for an 0xFF indicating start of a marker  		int nextbyte = 0;  		do {  			nextbyte = stream.ReadByte ();  			if (nextbyte == -1)  				throw new NotValidJPEGFileException ();  		}  		while ((byte)nextbyte != 0xFF);  		// Skip filler bytes (0xFF)  		do {  			nextbyte = stream.ReadByte ();  			if (nextbyte == -1)  				throw new NotValidJPEGFileException ();  		}  		while ((byte)nextbyte == 0xFF);  		// Looks like a section marker. The next byte must not be 0x00.  		if ((byte)nextbyte != 0x00) {  			// We reached a section marker. Calculate the  			// length of the entropy coded data.  			stream.Seek (-2' SeekOrigin.Current);  			long edlength = stream.Position - position;  			stream.Seek (-edlength' SeekOrigin.Current);  			// Read entropy coded data  			entropydata = new byte[edlength];  			int bytestoread = entropydata.Length;  			while (bytestoread > 0) {  				int count = Math.Min (bytestoread' 4 * 1024);  				int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  				if (bytesread == 0)  					throw new NotValidJPEGFileException ();  				bytestoread -= bytesread;  			}  			break;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	long position = stream.Position;  	// Search for the next section marker  	while (true) {  		// Search for an 0xFF indicating start of a marker  		int nextbyte = 0;  		do {  			nextbyte = stream.ReadByte ();  			if (nextbyte == -1)  				throw new NotValidJPEGFileException ();  		}  		while ((byte)nextbyte != 0xFF);  		// Skip filler bytes (0xFF)  		do {  			nextbyte = stream.ReadByte ();  			if (nextbyte == -1)  				throw new NotValidJPEGFileException ();  		}  		while ((byte)nextbyte == 0xFF);  		// Looks like a section marker. The next byte must not be 0x00.  		if ((byte)nextbyte != 0x00) {  			// We reached a section marker. Calculate the  			// length of the entropy coded data.  			stream.Seek (-2' SeekOrigin.Current);  			long edlength = stream.Position - position;  			stream.Seek (-edlength' SeekOrigin.Current);  			// Read entropy coded data  			entropydata = new byte[edlength];  			int bytestoread = entropydata.Length;  			while (bytestoread > 0) {  				int count = Math.Min (bytestoread' 4 * 1024);  				int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  				if (bytesread == 0)  					throw new NotValidJPEGFileException ();  				bytestoread -= bytesread;  			}  			break;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker == JPEGMarker.SOS || (marker >= JPEGMarker.RST0 && marker <= JPEGMarker.RST7)) {  	long position = stream.Position;  	// Search for the next section marker  	while (true) {  		// Search for an 0xFF indicating start of a marker  		int nextbyte = 0;  		do {  			nextbyte = stream.ReadByte ();  			if (nextbyte == -1)  				throw new NotValidJPEGFileException ();  		}  		while ((byte)nextbyte != 0xFF);  		// Skip filler bytes (0xFF)  		do {  			nextbyte = stream.ReadByte ();  			if (nextbyte == -1)  				throw new NotValidJPEGFileException ();  		}  		while ((byte)nextbyte == 0xFF);  		// Looks like a section marker. The next byte must not be 0x00.  		if ((byte)nextbyte != 0x00) {  			// We reached a section marker. Calculate the  			// length of the entropy coded data.  			stream.Seek (-2' SeekOrigin.Current);  			long edlength = stream.Position - position;  			stream.Seek (-edlength' SeekOrigin.Current);  			// Read entropy coded data  			entropydata = new byte[edlength];  			int bytestoread = entropydata.Length;  			while (bytestoread > 0) {  				int count = Math.Min (bytestoread' 4 * 1024);  				int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  				if (bytesread == 0)  					throw new NotValidJPEGFileException ();  				bytestoread -= bytesread;  			}  			break;  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (true) {  	// Search for an 0xFF indicating start of a marker  	int nextbyte = 0;  	do {  		nextbyte = stream.ReadByte ();  		if (nextbyte == -1)  			throw new NotValidJPEGFileException ();  	}  	while ((byte)nextbyte != 0xFF);  	// Skip filler bytes (0xFF)  	do {  		nextbyte = stream.ReadByte ();  		if (nextbyte == -1)  			throw new NotValidJPEGFileException ();  	}  	while ((byte)nextbyte == 0xFF);  	// Looks like a section marker. The next byte must not be 0x00.  	if ((byte)nextbyte != 0x00) {  		// We reached a section marker. Calculate the  		// length of the entropy coded data.  		stream.Seek (-2' SeekOrigin.Current);  		long edlength = stream.Position - position;  		stream.Seek (-edlength' SeekOrigin.Current);  		// Read entropy coded data  		entropydata = new byte[edlength];  		int bytestoread = entropydata.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  		break;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (true) {  	// Search for an 0xFF indicating start of a marker  	int nextbyte = 0;  	do {  		nextbyte = stream.ReadByte ();  		if (nextbyte == -1)  			throw new NotValidJPEGFileException ();  	}  	while ((byte)nextbyte != 0xFF);  	// Skip filler bytes (0xFF)  	do {  		nextbyte = stream.ReadByte ();  		if (nextbyte == -1)  			throw new NotValidJPEGFileException ();  	}  	while ((byte)nextbyte == 0xFF);  	// Looks like a section marker. The next byte must not be 0x00.  	if ((byte)nextbyte != 0x00) {  		// We reached a section marker. Calculate the  		// length of the entropy coded data.  		stream.Seek (-2' SeekOrigin.Current);  		long edlength = stream.Position - position;  		stream.Seek (-edlength' SeekOrigin.Current);  		// Read entropy coded data  		entropydata = new byte[edlength];  		int bytestoread = entropydata.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  		break;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (true) {  	// Search for an 0xFF indicating start of a marker  	int nextbyte = 0;  	do {  		nextbyte = stream.ReadByte ();  		if (nextbyte == -1)  			throw new NotValidJPEGFileException ();  	}  	while ((byte)nextbyte != 0xFF);  	// Skip filler bytes (0xFF)  	do {  		nextbyte = stream.ReadByte ();  		if (nextbyte == -1)  			throw new NotValidJPEGFileException ();  	}  	while ((byte)nextbyte == 0xFF);  	// Looks like a section marker. The next byte must not be 0x00.  	if ((byte)nextbyte != 0x00) {  		// We reached a section marker. Calculate the  		// length of the entropy coded data.  		stream.Seek (-2' SeekOrigin.Current);  		long edlength = stream.Position - position;  		stream.Seek (-edlength' SeekOrigin.Current);  		// Read entropy coded data  		entropydata = new byte[edlength];  		int bytestoread = entropydata.Length;  		while (bytestoread > 0) {  			int count = Math.Min (bytestoread' 4 * 1024);  			int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  			if (bytesread == 0)  				throw new NotValidJPEGFileException ();  			bytestoread -= bytesread;  		}  		break;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if ((byte)nextbyte != 0x00) {  	// We reached a section marker. Calculate the  	// length of the entropy coded data.  	stream.Seek (-2' SeekOrigin.Current);  	long edlength = stream.Position - position;  	stream.Seek (-edlength' SeekOrigin.Current);  	// Read entropy coded data  	entropydata = new byte[edlength];  	int bytestoread = entropydata.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  	break;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if ((byte)nextbyte != 0x00) {  	// We reached a section marker. Calculate the  	// length of the entropy coded data.  	stream.Seek (-2' SeekOrigin.Current);  	long edlength = stream.Position - position;  	stream.Seek (-edlength' SeekOrigin.Current);  	// Read entropy coded data  	entropydata = new byte[edlength];  	int bytestoread = entropydata.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  	break;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if ((byte)nextbyte != 0x00) {  	// We reached a section marker. Calculate the  	// length of the entropy coded data.  	stream.Seek (-2' SeekOrigin.Current);  	long edlength = stream.Position - position;  	stream.Seek (-edlength' SeekOrigin.Current);  	// Read entropy coded data  	entropydata = new byte[edlength];  	int bytestoread = entropydata.Length;  	while (bytestoread > 0) {  		int count = Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  	break;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: stream.Seek (-2' SeekOrigin.Current);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (bytestoread > 0) {  	int count = Math.Min (bytestoread' 4 * 1024);  	int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  	if (bytesread == 0)  		throw new NotValidJPEGFileException ();  	bytestoread -= bytesread;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (bytestoread > 0) {  	int count = Math.Min (bytestoread' 4 * 1024);  	int bytesread = stream.Read (entropydata' entropydata.Length - bytestoread' count);  	if (bytesread == 0)  		throw new NotValidJPEGFileException ();  	bytestoread -= bytesread;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker == JPEGMarker.EOI) {  	int bytestoread = (int)(stream.Length - stream.Position);  	TrailingData = new byte[bytestoread];  	while (bytestoread > 0) {  		int count = (int)Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: if (marker == JPEGMarker.EOI) {  	int bytestoread = (int)(stream.Length - stream.Position);  	TrailingData = new byte[bytestoread];  	while (bytestoread > 0) {  		int count = (int)Math.Min (bytestoread' 4 * 1024);  		int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  		if (bytesread == 0)  			throw new NotValidJPEGFileException ();  		bytestoread -= bytesread;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (bytestoread > 0) {  	int count = (int)Math.Min (bytestoread' 4 * 1024);  	int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  	if (bytesread == 0)  		throw new NotValidJPEGFileException ();  	bytestoread -= bytesread;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,JPEGFile,The following statement contains a magic number: while (bytestoread > 0) {  	int count = (int)Math.Min (bytestoread' 4 * 1024);  	int bytesread = stream.Read (TrailingData' TrailingData.Length - bytestoread' count);  	if (bytesread == 0)  		throw new NotValidJPEGFileException ();  	bytestoread -= bytesread;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: foreach (JPEGSection section in Sections) {  	// Section header (including length bytes and section marker)   	// must not exceed 64 kB.  	if (section.Header.Length + 2 + 2 > 64 * 1024)  		throw new SectionExceeds64KBException ();  	// APP sections must have a header.  	// Otherwise skip the entire section.  	if (section.Marker >= JPEGMarker.APP0 && section.Marker <= JPEGMarker.APP15 && section.Header.Length == 0)  		continue;  	// Write section marker  	stream.Write (new byte[] {  		0xFF'  		(byte)section.Marker  	}' 0' 2);  	// SOI' EOI and RST markers do not contain any header  	if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  		// Header length including the length field itself  		stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  		// Write section header  		if (section.Header.Length != 0)  			stream.Write (section.Header' 0' section.Header.Length);  	}  	// Write entropy coded data  	if (section.EntropyData.Length != 0)  		stream.Write (section.EntropyData' 0' section.EntropyData.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: foreach (JPEGSection section in Sections) {  	// Section header (including length bytes and section marker)   	// must not exceed 64 kB.  	if (section.Header.Length + 2 + 2 > 64 * 1024)  		throw new SectionExceeds64KBException ();  	// APP sections must have a header.  	// Otherwise skip the entire section.  	if (section.Marker >= JPEGMarker.APP0 && section.Marker <= JPEGMarker.APP15 && section.Header.Length == 0)  		continue;  	// Write section marker  	stream.Write (new byte[] {  		0xFF'  		(byte)section.Marker  	}' 0' 2);  	// SOI' EOI and RST markers do not contain any header  	if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  		// Header length including the length field itself  		stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  		// Write section header  		if (section.Header.Length != 0)  			stream.Write (section.Header' 0' section.Header.Length);  	}  	// Write entropy coded data  	if (section.EntropyData.Length != 0)  		stream.Write (section.EntropyData' 0' section.EntropyData.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: foreach (JPEGSection section in Sections) {  	// Section header (including length bytes and section marker)   	// must not exceed 64 kB.  	if (section.Header.Length + 2 + 2 > 64 * 1024)  		throw new SectionExceeds64KBException ();  	// APP sections must have a header.  	// Otherwise skip the entire section.  	if (section.Marker >= JPEGMarker.APP0 && section.Marker <= JPEGMarker.APP15 && section.Header.Length == 0)  		continue;  	// Write section marker  	stream.Write (new byte[] {  		0xFF'  		(byte)section.Marker  	}' 0' 2);  	// SOI' EOI and RST markers do not contain any header  	if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  		// Header length including the length field itself  		stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  		// Write section header  		if (section.Header.Length != 0)  			stream.Write (section.Header' 0' section.Header.Length);  	}  	// Write entropy coded data  	if (section.EntropyData.Length != 0)  		stream.Write (section.EntropyData' 0' section.EntropyData.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: foreach (JPEGSection section in Sections) {  	// Section header (including length bytes and section marker)   	// must not exceed 64 kB.  	if (section.Header.Length + 2 + 2 > 64 * 1024)  		throw new SectionExceeds64KBException ();  	// APP sections must have a header.  	// Otherwise skip the entire section.  	if (section.Marker >= JPEGMarker.APP0 && section.Marker <= JPEGMarker.APP15 && section.Header.Length == 0)  		continue;  	// Write section marker  	stream.Write (new byte[] {  		0xFF'  		(byte)section.Marker  	}' 0' 2);  	// SOI' EOI and RST markers do not contain any header  	if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  		// Header length including the length field itself  		stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  		// Write section header  		if (section.Header.Length != 0)  			stream.Write (section.Header' 0' section.Header.Length);  	}  	// Write entropy coded data  	if (section.EntropyData.Length != 0)  		stream.Write (section.EntropyData' 0' section.EntropyData.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: foreach (JPEGSection section in Sections) {  	// Section header (including length bytes and section marker)   	// must not exceed 64 kB.  	if (section.Header.Length + 2 + 2 > 64 * 1024)  		throw new SectionExceeds64KBException ();  	// APP sections must have a header.  	// Otherwise skip the entire section.  	if (section.Marker >= JPEGMarker.APP0 && section.Marker <= JPEGMarker.APP15 && section.Header.Length == 0)  		continue;  	// Write section marker  	stream.Write (new byte[] {  		0xFF'  		(byte)section.Marker  	}' 0' 2);  	// SOI' EOI and RST markers do not contain any header  	if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  		// Header length including the length field itself  		stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  		// Write section header  		if (section.Header.Length != 0)  			stream.Write (section.Header' 0' section.Header.Length);  	}  	// Write entropy coded data  	if (section.EntropyData.Length != 0)  		stream.Write (section.EntropyData' 0' section.EntropyData.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: foreach (JPEGSection section in Sections) {  	// Section header (including length bytes and section marker)   	// must not exceed 64 kB.  	if (section.Header.Length + 2 + 2 > 64 * 1024)  		throw new SectionExceeds64KBException ();  	// APP sections must have a header.  	// Otherwise skip the entire section.  	if (section.Marker >= JPEGMarker.APP0 && section.Marker <= JPEGMarker.APP15 && section.Header.Length == 0)  		continue;  	// Write section marker  	stream.Write (new byte[] {  		0xFF'  		(byte)section.Marker  	}' 0' 2);  	// SOI' EOI and RST markers do not contain any header  	if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  		// Header length including the length field itself  		stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  		// Write section header  		if (section.Header.Length != 0)  			stream.Write (section.Header' 0' section.Header.Length);  	}  	// Write entropy coded data  	if (section.EntropyData.Length != 0)  		stream.Write (section.EntropyData' 0' section.EntropyData.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: foreach (JPEGSection section in Sections) {  	// Section header (including length bytes and section marker)   	// must not exceed 64 kB.  	if (section.Header.Length + 2 + 2 > 64 * 1024)  		throw new SectionExceeds64KBException ();  	// APP sections must have a header.  	// Otherwise skip the entire section.  	if (section.Marker >= JPEGMarker.APP0 && section.Marker <= JPEGMarker.APP15 && section.Header.Length == 0)  		continue;  	// Write section marker  	stream.Write (new byte[] {  		0xFF'  		(byte)section.Marker  	}' 0' 2);  	// SOI' EOI and RST markers do not contain any header  	if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  		// Header length including the length field itself  		stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  		// Write section header  		if (section.Header.Length != 0)  			stream.Write (section.Header' 0' section.Header.Length);  	}  	// Write entropy coded data  	if (section.EntropyData.Length != 0)  		stream.Write (section.EntropyData' 0' section.EntropyData.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: if (section.Header.Length + 2 + 2 > 64 * 1024)  	throw new SectionExceeds64KBException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: if (section.Header.Length + 2 + 2 > 64 * 1024)  	throw new SectionExceeds64KBException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: if (section.Header.Length + 2 + 2 > 64 * 1024)  	throw new SectionExceeds64KBException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: if (section.Header.Length + 2 + 2 > 64 * 1024)  	throw new SectionExceeds64KBException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: stream.Write (new byte[] {  	0xFF'  	(byte)section.Marker  }' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  	// Header length including the length field itself  	stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  	// Write section header  	if (section.Header.Length != 0)  		stream.Write (section.Header' 0' section.Header.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: if (section.Marker != JPEGMarker.SOI && section.Marker != JPEGMarker.EOI && !(section.Marker >= JPEGMarker.RST0 && section.Marker <= JPEGMarker.RST7)) {  	// Header length including the length field itself  	stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  	// Write section header  	if (section.Header.Length != 0)  		stream.Write (section.Header' 0' section.Header.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,Save,The following statement contains a magic number: stream.Write (BitConverterEx.BigEndian.GetBytes ((ushort)(section.Header.Length + 2))' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFIFAPP0,The following statement contains a magic number: jfifApp0 = Sections.Find (a => (a.Marker == JPEGMarker.APP0) && a.Header.Length >= 5 && (Encoding.ASCII.GetString (a.Header' 0' 5) == "JFIF\0"));  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFIFAPP0,The following statement contains a magic number: jfifApp0 = Sections.Find (a => (a.Marker == JPEGMarker.APP0) && a.Header.Length >= 5 && (Encoding.ASCII.GetString (a.Header' 0' 5) == "JFIF\0"));  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFIFAPP0,The following statement contains a magic number: Array.Copy (header' 14' jfifThumbnail' 0' n);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteJFIFApp0,The following statement contains a magic number: ms.Write (Encoding.ASCII.GetBytes ("JFIF\0")' 0' 5);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteJFIFApp0,The following statement contains a magic number: foreach (ExifProperty prop in ifdjfef) {  	ExifInterOperability interop = prop.Interoperability;  	byte[] data = interop.Data;  	if (BitConverterEx.SystemByteOrder != BitConverterEx.ByteOrder.BigEndian && interop.TypeID == 3)  		Array.Reverse (data);  	ms.Write (data' 0' data.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteJFIFApp0,The following statement contains a magic number: if (BitConverterEx.SystemByteOrder != BitConverterEx.ByteOrder.BigEndian && interop.TypeID == 3)  	Array.Reverse (data);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: jfxxApp0 = Sections.Find (a => (a.Marker == JPEGMarker.APP0) && a.Header.Length >= 5 && (Encoding.ASCII.GetString (a.Header' 0' 5) == "JFXX\0"));  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: jfxxApp0 = Sections.Find (a => (a.Marker == JPEGMarker.APP0) && a.Header.Length >= 5 && (Encoding.ASCII.GetString (a.Header' 0' 5) == "JFXX\0"));  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailJPEG) {  	byte[] data = new byte[header.Length - 6];  	Array.Copy (header' 6' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.JPEG' data)));  }  else if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: Array.Copy (header' 6' data' 0' data.Length);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.Thumbnail24BitRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] data = new byte[3 * xthumbnail * ythumbnail];  	Array.Copy (header' 8' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (JFIFThumbnail.ImageFormat.BMP24Bit' data)));  }  else if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: Array.Copy (header' 8' data' 0' data.Length);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: if (version == JFIFExtension.ThumbnailPaletteRGB) {  	// Thumbnails pixel count  	byte xthumbnail = header [6];  	Properties.Add (new ExifByte (ExifTag.JFXXXThumbnail' xthumbnail));  	byte ythumbnail = header [7];  	Properties.Add (new ExifByte (ExifTag.JFXXYThumbnail' ythumbnail));  	byte[] palette = new byte[768];  	Array.Copy (header' 8' palette' 0' palette.Length);  	byte[] data = new byte[xthumbnail * ythumbnail];  	Array.Copy (header' 8 + 768' data' 0' data.Length);  	Properties.Add (new JFIFThumbnailProperty (ExifTag.JFXXThumbnail' new JFIFThumbnail (palette' data)));  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: Array.Copy (header' 8' palette' 0' palette.Length);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: Array.Copy (header' 8 + 768' data' 0' data.Length);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadJFXXAPP0,The following statement contains a magic number: Array.Copy (header' 8 + 768' data' 0' data.Length);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteJFXXApp0,The following statement contains a magic number: ms.Write (Encoding.ASCII.GetBytes ("JFXX\0")' 0' 5);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteJFXXApp0,The following statement contains a magic number: foreach (ExifProperty prop in ifdjfef) {  	ExifInterOperability interop = prop.Interoperability;  	byte[] data = interop.Data;  	if (BitConverterEx.SystemByteOrder != BitConverterEx.ByteOrder.BigEndian && interop.TypeID == 3)  		Array.Reverse (data);  	ms.Write (data' 0' data.Length);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteJFXXApp0,The following statement contains a magic number: if (BitConverterEx.SystemByteOrder != BitConverterEx.ByteOrder.BigEndian && interop.TypeID == 3)  	Array.Reverse (data);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: exifApp1 = Sections.Find (a => (a.Marker == JPEGMarker.APP1) && a.Header.Length >= 6 && (Encoding.ASCII.GetString (a.Header' 0' 6) == "Exif\0\0"));  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: exifApp1 = Sections.Find (a => (a.Marker == JPEGMarker.APP1) && a.Header.Length >= 6 && (Encoding.ASCII.GetString (a.Header' 0' 6) == "Exif\0\0"));  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidExifFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidExifFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidExifFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidExifFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (BitConverterEx.BigEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidExifFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (BitConverterEx.BigEndian.ToUInt16 (header' tiffoffset + 2) == 42)  	tiffByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidExifFileException ();  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: while (ifdqueue.Count != 0) {  	int ifdoffset = tiffoffset + ifdqueue.Keys [0];  	IFD currentifd = ifdqueue.Values [0];  	ifdqueue.RemoveAt (0);  	// Field count  	ushort fieldcount = conv.ToUInt16 (header' ifdoffset);  	for (short i = 0; i < fieldcount; i++) {  		// Read field info  		int fieldoffset = ifdoffset + 2 + 12 * i;  		ushort tag = conv.ToUInt16 (header' fieldoffset);  		ushort type = conv.ToUInt16 (header' fieldoffset + 2);  		uint count = conv.ToUInt32 (header' fieldoffset + 4);  		byte[] value = new byte[4];  		Array.Copy (header' fieldoffset + 8' value' 0' 4);  		// Fields containing offsets to other IFDs  		if (currentifd == IFD.Zeroth && tag == 0x8769) {  			int exififdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (exififdpointer' IFD.EXIF);  		}  		else if (currentifd == IFD.Zeroth && tag == 0x8825) {  			int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (gpsifdpointer' IFD.GPS);  		}  		else if (currentifd == IFD.EXIF && tag == 0xa005) {  			int interopifdpointer = (int)conv.ToUInt32 (value' 0);  			ifdqueue.Add (interopifdpointer' IFD.Interop);  		}  		// Save the offset to maker note data  		if (currentifd == IFD.EXIF && tag == 37500)  			makerNoteOffset = conv.ToUInt32 (value' 0);  		// Calculate the bytes we need to read  		uint baselength = 0;  		if (type == 1 || type == 2 || type == 7)  			baselength = 1;  		else if (type == 3)  			baselength = 2;  		else if (type == 4 || type == 9)  			baselength = 4;  		else if (type == 5 || type == 10)  			baselength = 8;  		uint totallength = count * baselength;  		// If field value does not fit in 4 bytes  		// the value field is an offset to the actual  		// field value  		int fieldposition = 0;  		if (totallength > 4) {  			fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  			value = new byte[totallength];  			Array.Copy (header' fieldposition' value' 0' totallength);  		}  		// Compressed thumbnail data  		if (currentifd == IFD.First && tag == 0x201) {  			thumbtype = 0;  			thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x202)  			thumblength = (int)conv.ToUInt32 (value' 0);  		// Uncompressed thumbnail data  		if (currentifd == IFD.First && tag == 0x111) {  			thumbtype = 1;  			// Offset to first strip  			if (type == 3)  				thumboffset = (int)conv.ToUInt16 (value' 0);  			else  				thumboffset = (int)conv.ToUInt32 (value' 0);  		}  		else if (currentifd == IFD.First && tag == 0x117) {  			thumblength = 0;  			for (int j = 0; j < count; j++) {  				if (type == 3)  					thumblength += (int)conv.ToUInt16 (value' 0);  				else  					thumblength += (int)conv.ToUInt32 (value' 0);  			}  		}  		// Create the exif property from the interop data  		ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  		Properties.Add (prop);  	}  	// 1st IFD pointer  	int firstifdpointer = (int)conv.ToUInt32 (header' ifdoffset + 2 + 12 * fieldcount);  	if (firstifdpointer != 0)  		ifdqueue.Add (firstifdpointer' IFD.First);  	// Read thumbnail  	if (thumboffset != -1 && thumblength != 0 && Thumbnail == null) {  		if (thumbtype == 0) {  			using (MemoryStream ts = new MemoryStream (header' tiffoffset + thumboffset' thumblength)) {  				Thumbnail = ImageFile.FromStream (ts);  			}  		}  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (short i = 0; i < fieldcount; i++) {  	// Read field info  	int fieldoffset = ifdoffset + 2 + 12 * i;  	ushort tag = conv.ToUInt16 (header' fieldoffset);  	ushort type = conv.ToUInt16 (header' fieldoffset + 2);  	uint count = conv.ToUInt32 (header' fieldoffset + 4);  	byte[] value = new byte[4];  	Array.Copy (header' fieldoffset + 8' value' 0' 4);  	// Fields containing offsets to other IFDs  	if (currentifd == IFD.Zeroth && tag == 0x8769) {  		int exififdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (exififdpointer' IFD.EXIF);  	}  	else if (currentifd == IFD.Zeroth && tag == 0x8825) {  		int gpsifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (gpsifdpointer' IFD.GPS);  	}  	else if (currentifd == IFD.EXIF && tag == 0xa005) {  		int interopifdpointer = (int)conv.ToUInt32 (value' 0);  		ifdqueue.Add (interopifdpointer' IFD.Interop);  	}  	// Save the offset to maker note data  	if (currentifd == IFD.EXIF && tag == 37500)  		makerNoteOffset = conv.ToUInt32 (value' 0);  	// Calculate the bytes we need to read  	uint baselength = 0;  	if (type == 1 || type == 2 || type == 7)  		baselength = 1;  	else if (type == 3)  		baselength = 2;  	else if (type == 4 || type == 9)  		baselength = 4;  	else if (type == 5 || type == 10)  		baselength = 8;  	uint totallength = count * baselength;  	// If field value does not fit in 4 bytes  	// the value field is an offset to the actual  	// field value  	int fieldposition = 0;  	if (totallength > 4) {  		fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  		value = new byte[totallength];  		Array.Copy (header' fieldposition' value' 0' totallength);  	}  	// Compressed thumbnail data  	if (currentifd == IFD.First && tag == 0x201) {  		thumbtype = 0;  		thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x202)  		thumblength = (int)conv.ToUInt32 (value' 0);  	// Uncompressed thumbnail data  	if (currentifd == IFD.First && tag == 0x111) {  		thumbtype = 1;  		// Offset to first strip  		if (type == 3)  			thumboffset = (int)conv.ToUInt16 (value' 0);  		else  			thumboffset = (int)conv.ToUInt32 (value' 0);  	}  	else if (currentifd == IFD.First && tag == 0x117) {  		thumblength = 0;  		for (int j = 0; j < count; j++) {  			if (type == 3)  				thumblength += (int)conv.ToUInt16 (value' 0);  			else  				thumblength += (int)conv.ToUInt32 (value' 0);  		}  	}  	// Create the exif property from the interop data  	ExifProperty prop = ExifPropertyFactory.Get (tag' type' count' value' ByteOrder' currentifd' Encoding);  	Properties.Add (prop);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: Array.Copy (header' fieldoffset + 8' value' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: Array.Copy (header' fieldoffset + 8' value' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (currentifd == IFD.EXIF && tag == 37500)  	makerNoteOffset = conv.ToUInt32 (value' 0);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 1 || type == 2 || type == 7)  	baselength = 1;  else if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	baselength = 2;  else if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: baselength = 2;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 4 || type == 9)  	baselength = 4;  else if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: baselength = 4;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 5 || type == 10)  	baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: baselength = 8;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (totallength > 4) {  	fieldposition = tiffoffset + (int)conv.ToUInt32 (value' 0);  	value = new byte[totallength];  	Array.Copy (header' fieldposition' value' 0' totallength);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (currentifd == IFD.First && tag == 0x111) {  	thumbtype = 1;  	// Offset to first strip  	if (type == 3)  		thumboffset = (int)conv.ToUInt16 (value' 0);  	else  		thumboffset = (int)conv.ToUInt32 (value' 0);  }  else if (currentifd == IFD.First && tag == 0x117) {  	thumblength = 0;  	for (int j = 0; j < count; j++) {  		if (type == 3)  			thumblength += (int)conv.ToUInt16 (value' 0);  		else  			thumblength += (int)conv.ToUInt32 (value' 0);  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (currentifd == IFD.First && tag == 0x111) {  	thumbtype = 1;  	// Offset to first strip  	if (type == 3)  		thumboffset = (int)conv.ToUInt16 (value' 0);  	else  		thumboffset = (int)conv.ToUInt32 (value' 0);  }  else if (currentifd == IFD.First && tag == 0x117) {  	thumblength = 0;  	for (int j = 0; j < count; j++) {  		if (type == 3)  			thumblength += (int)conv.ToUInt16 (value' 0);  		else  			thumblength += (int)conv.ToUInt32 (value' 0);  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	thumboffset = (int)conv.ToUInt16 (value' 0);  else  	thumboffset = (int)conv.ToUInt32 (value' 0);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (currentifd == IFD.First && tag == 0x117) {  	thumblength = 0;  	for (int j = 0; j < count; j++) {  		if (type == 3)  			thumblength += (int)conv.ToUInt16 (value' 0);  		else  			thumblength += (int)conv.ToUInt32 (value' 0);  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: for (int j = 0; j < count; j++) {  	if (type == 3)  		thumblength += (int)conv.ToUInt16 (value' 0);  	else  		thumblength += (int)conv.ToUInt32 (value' 0);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,ReadExifAPP1,The following statement contains a magic number: if (type == 3)  	thumblength += (int)conv.ToUInt16 (value' 0);  else  	thumblength += (int)conv.ToUInt32 (value' 0);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (Encoding.ASCII.GetBytes ("Exif\0\0")' 0' 6);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write ((ByteOrder == BitConverterEx.ByteOrder.LittleEndian ? new byte[] {  	0x49'  	0x49  } : new byte[] {  	0x4D'  	0x4D  })' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes ((ushort)42)' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes ((ushort)42)' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes ((uint)8)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes ((uint)8)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: if (exifIFDFieldOffset != 0) {  	ms.Seek (exifIFDFieldOffset' SeekOrigin.Begin);  	ms.Write (bceExif.GetBytes (exififdrelativeoffset)' 0' 4);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes (exififdrelativeoffset)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: if (gpsIFDFieldOffset != 0) {  	ms.Seek (gpsIFDFieldOffset' SeekOrigin.Begin);  	ms.Write (bceExif.GetBytes (gpsifdrelativeoffset)' 0' 4);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes (gpsifdrelativeoffset)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: if (interopIFDFieldOffset != 0) {  	ms.Seek (interopIFDFieldOffset' SeekOrigin.Begin);  	ms.Write (bceExif.GetBytes (interopifdrelativeoffset)' 0' 4);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes (interopifdrelativeoffset)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: if (firstIFDFieldOffset != 0) {  	ms.Seek (firstIFDFieldOffset' SeekOrigin.Begin);  	ms.Write (bceExif.GetBytes (firstifdrelativeoffset)' 0' 4);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes (firstifdrelativeoffset)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: if (thumbOffsetLocation != 0) {  	ms.Seek (thumbOffsetLocation' SeekOrigin.Begin);  	ms.Write (bceExif.GetBytes (thumbOffsetValue)' 0' 4);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes (thumbOffsetValue)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: if (thumbSizeLocation != 0) {  	ms.Seek (thumbSizeLocation' SeekOrigin.Begin);  	ms.Write (bceExif.GetBytes (thumbSizeValue)' 0' 4);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following statement contains a magic number: ms.Write (bceExif.GetBytes (thumbSizeValue)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: stream.Write (conv.GetBytes ((ushort)ifd.Count)' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: while (fieldqueue.Count != 0) {  	ExifProperty field = fieldqueue.Dequeue ();  	ExifInterOperability interop = field.Interoperability;  	uint fillerbytecount = 0;  	// Try to preserve the makernote data offset  	if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  		// Delay writing this field until we write makernote data  		fieldqueue.Enqueue (field);  		continue;  	}  	else if (field.Tag == ExifTag.MakerNote) {  		makernotewritten = true;  		// We may need to write filler bytes to preserve maker note offset  		if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  			fillerbytecount = makerNoteOffset - currentdataoffset;  		else  			fillerbytecount = 0;  	}  	// Tag  	stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  	// Type  	stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  	// Count  	stream.Write (conv.GetBytes (interop.Count)' 0' 4);  	// Field data  	byte[] data = interop.Data;  	if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  		int vlen = 4;  		if (interop.TypeID == 3)  			vlen = 2;  		int n = data.Length / vlen;  		for (int i = 0; i < n; i++)  			Array.Reverse (data' i * vlen' vlen);  	}  	// Fields containing offsets to other IFDs  	// Just store their offets' we will write the values later on when we know the lengths of IFDs  	if (ifdtype == IFD.Zeroth && interop.TagID == 0x8769)  		exifIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.Zeroth && interop.TagID == 0x8825)  		gpsIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.EXIF && interop.TagID == 0xa005)  		interopIFDFieldOffset = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x201)  		thumbOffsetLocation = stream.Position;  	else if (ifdtype == IFD.First && interop.TagID == 0x202)  		thumbSizeLocation = stream.Position;  	// Write 4 byte field value or field data  	if (data.Length <= 4) {  		stream.Write (data' 0' data.Length);  		for (int i = data.Length; i < 4; i++)  			stream.WriteByte (0);  	}  	else {  		// Pointer to data area relative to TIFF header  		stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  		// Actual data  		long currentoffset = stream.Position;  		stream.Seek (absolutedataoffset' SeekOrigin.Begin);  		// Write filler bytes  		for (int i = 0; i < fillerbytecount; i++)  			stream.WriteByte (0xFF);  		stream.Write (data' 0' data.Length);  		stream.Seek (currentoffset' SeekOrigin.Begin);  		// Increment pointers  		currentdataoffset += fillerbytecount + (uint)data.Length;  		absolutedataoffset += fillerbytecount + data.Length;  	}  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (!makernotewritten && !makerNoteProcessed && makerNoteOffset != 0 && ifdtype == IFD.EXIF && field.Tag != ExifTag.MakerNote && interop.Data.Length > 4 && currentdataoffset + interop.Data.Length > makerNoteOffset && ifd.ContainsKey (ExifTag.MakerNote)) {  	// Delay writing this field until we write makernote data  	fieldqueue.Enqueue (field);  	continue;  }  else if (field.Tag == ExifTag.MakerNote) {  	makernotewritten = true;  	// We may need to write filler bytes to preserve maker note offset  	if (preserveMakerNote && !makerNoteProcessed && (makerNoteOffset > currentdataoffset))  		fillerbytecount = makerNoteOffset - currentdataoffset;  	else  		fillerbytecount = 0;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: stream.Write (conv.GetBytes (interop.TagID)' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: stream.Write (conv.GetBytes (interop.TypeID)' 0' 2);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: stream.Write (conv.GetBytes (interop.Count)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (ByteOrder != BitConverterEx.SystemByteOrder && (interop.TypeID == 3 || interop.TypeID == 4 || interop.TypeID == 9 || interop.TypeID == 5 || interop.TypeID == 10)) {  	int vlen = 4;  	if (interop.TypeID == 3)  		vlen = 2;  	int n = data.Length / vlen;  	for (int i = 0; i < n; i++)  		Array.Reverse (data' i * vlen' vlen);  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (interop.TypeID == 3)  	vlen = 2;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (interop.TypeID == 3)  	vlen = 2;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: vlen = 2;  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (data.Length <= 4) {  	stream.Write (data' 0' data.Length);  	for (int i = data.Length; i < 4; i++)  		stream.WriteByte (0);  }  else {  	// Pointer to data area relative to TIFF header  	stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  	// Actual data  	long currentoffset = stream.Position;  	stream.Seek (absolutedataoffset' SeekOrigin.Begin);  	// Write filler bytes  	for (int i = 0; i < fillerbytecount; i++)  		stream.WriteByte (0xFF);  	stream.Write (data' 0' data.Length);  	stream.Seek (currentoffset' SeekOrigin.Begin);  	// Increment pointers  	currentdataoffset += fillerbytecount + (uint)data.Length;  	absolutedataoffset += fillerbytecount + data.Length;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (data.Length <= 4) {  	stream.Write (data' 0' data.Length);  	for (int i = data.Length; i < 4; i++)  		stream.WriteByte (0);  }  else {  	// Pointer to data area relative to TIFF header  	stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  	// Actual data  	long currentoffset = stream.Position;  	stream.Seek (absolutedataoffset' SeekOrigin.Begin);  	// Write filler bytes  	for (int i = 0; i < fillerbytecount; i++)  		stream.WriteByte (0xFF);  	stream.Write (data' 0' data.Length);  	stream.Seek (currentoffset' SeekOrigin.Begin);  	// Increment pointers  	currentdataoffset += fillerbytecount + (uint)data.Length;  	absolutedataoffset += fillerbytecount + data.Length;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: if (data.Length <= 4) {  	stream.Write (data' 0' data.Length);  	for (int i = data.Length; i < 4; i++)  		stream.WriteByte (0);  }  else {  	// Pointer to data area relative to TIFF header  	stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  	// Actual data  	long currentoffset = stream.Position;  	stream.Seek (absolutedataoffset' SeekOrigin.Begin);  	// Write filler bytes  	for (int i = 0; i < fillerbytecount; i++)  		stream.WriteByte (0xFF);  	stream.Write (data' 0' data.Length);  	stream.Seek (currentoffset' SeekOrigin.Begin);  	// Increment pointers  	currentdataoffset += fillerbytecount + (uint)data.Length;  	absolutedataoffset += fillerbytecount + data.Length;  }  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: for (int i = data.Length; i < 4; i++)  	stream.WriteByte (0);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: stream.Write (conv.GetBytes (currentdataoffset + fillerbytecount)' 0' 4);  
Magic Number,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteIFD,The following statement contains a magic number: stream.Write (new byte[] {  	0'  	0'  	0'  	0  }' 0' 4);  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: if (value.Length > 4)  	mValue = value.Substring (0' 4);  else if (value.Length < 4)  	mValue = value + new string (' '' 4 - value.Length);  else  	mValue = value;  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: if (value.Length > 4)  	mValue = value.Substring (0' 4);  else if (value.Length < 4)  	mValue = value + new string (' '' 4 - value.Length);  else  	mValue = value;  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: if (value.Length > 4)  	mValue = value.Substring (0' 4);  else if (value.Length < 4)  	mValue = value + new string (' '' 4 - value.Length);  else  	mValue = value;  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: if (value.Length > 4)  	mValue = value.Substring (0' 4);  else if (value.Length < 4)  	mValue = value + new string (' '' 4 - value.Length);  else  	mValue = value;  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: mValue = value.Substring (0' 4);  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: if (value.Length < 4)  	mValue = value + new string (' '' 4 - value.Length);  else  	mValue = value;  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: if (value.Length < 4)  	mValue = value + new string (' '' 4 - value.Length);  else  	mValue = value;  
Magic Number,ExifLibrary,ExifVersion,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ExifVersion,The following statement contains a magic number: mValue = value + new string (' '' 4 - value.Length);  
Magic Number,ExifLibrary,ExifCircularSubjectArea,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ToString,The following statement contains a magic number: sb.AppendFormat ("({0:d}' {1:d}) {2:d}"' mValue [0]' mValue [1]' mValue [2]);  
Magic Number,ExifLibrary,ExifRectangularSubjectArea,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ToString,The following statement contains a magic number: sb.AppendFormat ("({0:d}' {1:d}) ({2:d} x {3:d})"' mValue [0]' mValue [1]' mValue [2]' mValue [3]);  
Magic Number,ExifLibrary,ExifRectangularSubjectArea,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifExtendedProperty.cs,ToString,The following statement contains a magic number: sb.AppendFormat ("({0:d}' {1:d}) ({2:d} x {3:d})"' mValue [0]' mValue [1]' mValue [2]' mValue [3]);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Zeroth) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.Compression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.PhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.Orientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.PlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.YCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.DateTime' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9c9b || tag == 0x9c9c || // Windows tags  	tag == 0x9c9d || tag == 0x9c9e || tag == 0x9c9f)  		return new WindowsByteString (etag' Encoding.Unicode.GetString (value).TrimEnd ('\0'));  }  else if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.EXIF) {  	if (tag == 0x9000)  		// ExifVersion  		return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa000)  		// FlashpixVersion  		return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  	else if (tag == 0xa001)  		// ColorSpace  		return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  	else if (tag == 0x9286)// UserComment  	 {  		// Default to ASCII  		Encoding enc = Encoding.ASCII;  		bool hasenc;  		if (value.Length < 8)  			hasenc = false;  		else {  			hasenc = true;  			string encstr = enc.GetString (value' 0' 8);  			if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.ASCII;  			else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  			else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  				enc = Encoding.Unicode;  			else  				hasenc = false;  		}  		string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  		return new ExifEncodedString (ExifTag.UserComment' val' enc);  	}  	else if (tag == 0x9003)  		// DateTimeOriginal  		return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x9004)  		// DateTimeDigitized  		return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  	else if (tag == 0x8822)  		// ExposureProgram  		return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  	else if (tag == 0x9207)  		// MeteringMode  		return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  	else if (tag == 0x9208)  		// LightSource  		return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  	else if (tag == 0x9209)  		// Flash  		return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0x9214)// SubjectArea  	 {  		if (count == 3)  			return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else if (count == 4)  			return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  		else  			// count == 2  			return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	}  	else if (tag == 0xa210)  		// FocalPlaneResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa214)  		// SubjectLocation  		return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (tag == 0xa217)  		// SensingMethod  		return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa300)  		// FileSource  		return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa301)  		// SceneType  		return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa401)  		// CustomRendered  		return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa402)  		// ExposureMode  		return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa403)  		// WhiteBalance  		return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa406)  		// SceneCaptureType  		return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa407)  		// GainControl  		return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa408)  		// Contrast  		return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa409)  		// Saturation  		return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40a)  		// Sharpness  		return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  	else if (tag == 0xa40c)  		// SubjectDistanceRange  		return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  }  else if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9000)  	// ExifVersion  	return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9000)  	// ExifVersion  	return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9000)  	// ExifVersion  	return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9000)  	// ExifVersion  	return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9000)  	// ExifVersion  	return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9000)  	// ExifVersion  	return new ExifVersion (ExifTag.ExifVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa000)  	// FlashpixVersion  	return new ExifVersion (ExifTag.FlashpixVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  else if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0xa001)  	// ColorSpace  	return new ExifEnumProperty<ColorSpace> (ExifTag.ColorSpace' (ColorSpace)conv.ToUInt16 (value' 0));  else if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9286)// UserComment   {  	// Default to ASCII  	Encoding enc = Encoding.ASCII;  	bool hasenc;  	if (value.Length < 8)  		hasenc = false;  	else {  		hasenc = true;  		string encstr = enc.GetString (value' 0' 8);  		if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.ASCII;  		else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  		else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  			enc = Encoding.Unicode;  		else  			hasenc = false;  	}  	string val = (hasenc ? enc.GetString (value' 8' value.Length - 8) : enc.GetString (value)).Trim ('\0');  	return new ExifEncodedString (ExifTag.UserComment' val' enc);  }  else if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (value.Length < 8)  	hasenc = false;  else {  	hasenc = true;  	string encstr = enc.GetString (value' 0' 8);  	if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  		enc = Encoding.ASCII;  	else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  		enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  	else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  		enc = Encoding.Unicode;  	else  		hasenc = false;  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (value.Length < 8)  	hasenc = false;  else {  	hasenc = true;  	string encstr = enc.GetString (value' 0' 8);  	if (string.Compare (encstr' "ASCII\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  		enc = Encoding.ASCII;  	else if (string.Compare (encstr' "JIS\0\0\0\0\0"' StringComparison.OrdinalIgnoreCase) == 0)  		enc = Encoding.GetEncoding ("Japanese (JIS 0208-1990 and 0212-1990)");  	else if (string.Compare (encstr' "Unicode\0"' StringComparison.OrdinalIgnoreCase) == 0)  		enc = Encoding.Unicode;  	else  		hasenc = false;  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9003)  	// DateTimeOriginal  	return new ExifDateTime (ExifTag.DateTimeOriginal' ExifBitConverter.ToDateTime (value));  else if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9004)  	// DateTimeDigitized  	return new ExifDateTime (ExifTag.DateTimeDigitized' ExifBitConverter.ToDateTime (value));  else if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x8822)  	// ExposureProgram  	return new ExifEnumProperty<ExposureProgram> (ExifTag.ExposureProgram' (ExposureProgram)conv.ToUInt16 (value' 0));  else if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9207)  	// MeteringMode  	return new ExifEnumProperty<MeteringMode> (ExifTag.MeteringMode' (MeteringMode)conv.ToUInt16 (value' 0));  else if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9208)  	// LightSource  	return new ExifEnumProperty<LightSource> (ExifTag.LightSource' (LightSource)conv.ToUInt16 (value' 0));  else if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9209)  	// Flash  	return new ExifEnumProperty<Flash> (ExifTag.Flash' (Flash)conv.ToUInt16 (value' 0)' true);  else if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0x9214)// SubjectArea   {  	if (count == 3)  		return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else if (count == 4)  		return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  	else  		// count == 2  		return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (tag == 0xa210)  	// FocalPlaneResolutionUnit  	return new ExifEnumProperty<ResolutionUnit> (ExifTag.FocalPlaneResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa214)  	// SubjectLocation  	return new ExifPointSubjectArea (ExifTag.SubjectLocation' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (tag == 0xa217)  	// SensingMethod  	return new ExifEnumProperty<SensingMethod> (ExifTag.SensingMethod' (SensingMethod)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa300)  	// FileSource  	return new ExifEnumProperty<FileSource> (ExifTag.FileSource' (FileSource)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa301)  	// SceneType  	return new ExifEnumProperty<SceneType> (ExifTag.SceneType' (SceneType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa401)  	// CustomRendered  	return new ExifEnumProperty<CustomRendered> (ExifTag.CustomRendered' (CustomRendered)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa402)  	// ExposureMode  	return new ExifEnumProperty<ExposureMode> (ExifTag.ExposureMode' (ExposureMode)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa403)  	// WhiteBalance  	return new ExifEnumProperty<WhiteBalance> (ExifTag.WhiteBalance' (WhiteBalance)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa406)  	// SceneCaptureType  	return new ExifEnumProperty<SceneCaptureType> (ExifTag.SceneCaptureType' (SceneCaptureType)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa407)  	// GainControl  	return new ExifEnumProperty<GainControl> (ExifTag.GainControl' (GainControl)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa408)  	// Contrast  	return new ExifEnumProperty<Contrast> (ExifTag.Contrast' (Contrast)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa409)  	// Saturation  	return new ExifEnumProperty<Saturation> (ExifTag.Saturation' (Saturation)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40a)  	// Sharpness  	return new ExifEnumProperty<Sharpness> (ExifTag.Sharpness' (Sharpness)conv.ToUInt16 (value' 0)' true);  else if (tag == 0xa40c)  	// SubjectDistanceRange  	return new ExifEnumProperty<SubjectDistanceRange> (ExifTag.SubjectDistanceRange' (SubjectDistanceRange)conv.ToUInt16 (value' 0)' true);  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (count == 3)  	return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (count == 4)  	return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else  	// count == 2  	return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (count == 3)  	return new ExifCircularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else if (count == 4)  	return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else  	// count == 2  	return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (count == 4)  	return new ExifRectangularSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  else  	// count == 2  	return new ExifPointSubjectArea (ExifTag.SubjectArea' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.GPS) {  	if (tag == 0)  		// GPSVersionID  		return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  	else if (tag == 1)  		// GPSLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 2)  		// GPSLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 3)  		// GPSLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 4)  		// GPSLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 5)  		// GPSAltitudeRef  		return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  	else if (tag == 7)  		// GPSTimeStamp  		return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 9)  		// GPSStatus  		return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  	else if (tag == 10)  		// GPSMeasureMode  		return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  	else if (tag == 12)  		// GPSSpeedRef  		return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  	else if (tag == 14)  		// GPSTrackRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  	else if (tag == 16)  		// GPSImgDirectionRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  	else if (tag == 19)  		// GPSDestLatitudeRef  		return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  	else if (tag == 20)  		// GPSDestLatitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 21)  		// GPSDestLongitudeRef  		return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  	else if (tag == 22)  		// GPSDestLongitude  		return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  	else if (tag == 23)  		// GPSDestBearingRef  		return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  	else if (tag == 25)  		// GPSDestDistanceRef  		return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  	else if (tag == 29)  		// GPSDate  		return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  	else if (tag == 30)  		// GPSDifferential  		return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  }  else if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 0)  	// GPSVersionID  	return new ExifVersion (ExifTag.GPSVersionID' ExifBitConverter.ToString (value));  else if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// GPSLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// GPSLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 3)  	// GPSLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 4)  	// GPSLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 5)  	// GPSAltitudeRef  	return new ExifEnumProperty<GPSAltitudeRef> (ExifTag.GPSAltitudeRef' (GPSAltitudeRef)value [0]);  else if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 7)  	// GPSTimeStamp  	return new GPSTimeStamp (ExifTag.GPSTimeStamp' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 9)  	// GPSStatus  	return new ExifEnumProperty<GPSStatus> (ExifTag.GPSStatus' (GPSStatus)value [0]);  else if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 10)  	// GPSMeasureMode  	return new ExifEnumProperty<GPSMeasureMode> (ExifTag.GPSMeasureMode' (GPSMeasureMode)value [0]);  else if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 12)  	// GPSSpeedRef  	return new ExifEnumProperty<GPSSpeedRef> (ExifTag.GPSSpeedRef' (GPSSpeedRef)value [0]);  else if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 14)  	// GPSTrackRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSTrackRef' (GPSDirectionRef)value [0]);  else if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 16)  	// GPSImgDirectionRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSImgDirectionRef' (GPSDirectionRef)value [0]);  else if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 19)  	// GPSDestLatitudeRef  	return new ExifEnumProperty<GPSLatitudeRef> (ExifTag.GPSDestLatitudeRef' (GPSLatitudeRef)value [0]);  else if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 20)  	// GPSDestLatitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLatitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 21)  	// GPSDestLongitudeRef  	return new ExifEnumProperty<GPSLongitudeRef> (ExifTag.GPSDestLongitudeRef' (GPSLongitudeRef)value [0]);  else if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 22)  	// GPSDestLongitude  	return new GPSLatitudeLongitude (ExifTag.GPSDestLongitude' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  else if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 23)  	// GPSDestBearingRef  	return new ExifEnumProperty<GPSDirectionRef> (ExifTag.GPSDestBearingRef' (GPSDirectionRef)value [0]);  else if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 25)  	// GPSDestDistanceRef  	return new ExifEnumProperty<GPSDistanceRef> (ExifTag.GPSDestDistanceRef' (GPSDistanceRef)value [0]);  else if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 29)  	// GPSDate  	return new ExifDateTime (ExifTag.GPSDateStamp' ExifBitConverter.ToDateTime (value' false));  else if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 30)  	// GPSDifferential  	return new ExifEnumProperty<GPSDifferential> (ExifTag.GPSDifferential' (GPSDifferential)conv.ToUInt16 (value' 0));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (ifd == IFD.Interop) {  	if (tag == 1)  		// InteroperabilityIndex  		return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  	else if (tag == 2)  		// InteroperabilityVersion  		return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  }  else if (ifd == IFD.First) {  	if (tag == 0x103)  		// Compression  		return new ExifEnumProperty<Compression> (ExifTag.ThumbnailCompression' (Compression)conv.ToUInt16 (value' 0));  	else if (tag == 0x106)  		// PhotometricInterpretation  		return new ExifEnumProperty<PhotometricInterpretation> (ExifTag.ThumbnailPhotometricInterpretation' (PhotometricInterpretation)conv.ToUInt16 (value' 0));  	else if (tag == 0x112)  		// Orientation  		return new ExifEnumProperty<Orientation> (ExifTag.ThumbnailOrientation' (Orientation)conv.ToUInt16 (value' 0));  	else if (tag == 0x11c)  		// PlanarConfiguration  		return new ExifEnumProperty<PlanarConfiguration> (ExifTag.ThumbnailPlanarConfiguration' (PlanarConfiguration)conv.ToUInt16 (value' 0));  	else if (tag == 0x213)  		// YCbCrPositioning  		return new ExifEnumProperty<YCbCrPositioning> (ExifTag.ThumbnailYCbCrPositioning' (YCbCrPositioning)conv.ToUInt16 (value' 0));  	else if (tag == 0x128)  		// ResolutionUnit  		return new ExifEnumProperty<ResolutionUnit> (ExifTag.ThumbnailResolutionUnit' (ResolutionUnit)conv.ToUInt16 (value' 0));  	else if (tag == 0x132)  		// DateTime  		return new ExifDateTime (ExifTag.ThumbnailDateTime' ExifBitConverter.ToDateTime (value));  }  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 1)  	// InteroperabilityIndex  	return new ExifAscii (ExifTag.InteroperabilityIndex' ExifBitConverter.ToAscii (value' Encoding.ASCII)' Encoding.ASCII);  else if (tag == 2)  	// InteroperabilityVersion  	return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (tag == 2)  	// InteroperabilityVersion  	return new ExifVersion (ExifTag.InteroperabilityVersion' ExifBitConverter.ToAscii (value' Encoding.ASCII));  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 1)// 1 = BYTE An 8-bit unsigned integer.   {  	if (count == 1)  		return new ExifByte (etag' value [0]);  	else  		return new ExifByteArray (etag' value);  }  else if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 1)// 1 = BYTE An 8-bit unsigned integer.   {  	if (count == 1)  		return new ExifByte (etag' value [0]);  	else  		return new ExifByteArray (etag' value);  }  else if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 1)// 1 = BYTE An 8-bit unsigned integer.   {  	if (count == 1)  		return new ExifByte (etag' value [0]);  	else  		return new ExifByteArray (etag' value);  }  else if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 1)// 1 = BYTE An 8-bit unsigned integer.   {  	if (count == 1)  		return new ExifByte (etag' value [0]);  	else  		return new ExifByteArray (etag' value);  }  else if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 1)// 1 = BYTE An 8-bit unsigned integer.   {  	if (count == 1)  		return new ExifByte (etag' value [0]);  	else  		return new ExifByteArray (etag' value);  }  else if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 1)// 1 = BYTE An 8-bit unsigned integer.   {  	if (count == 1)  		return new ExifByte (etag' value [0]);  	else  		return new ExifByteArray (etag' value);  }  else if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 1)// 1 = BYTE An 8-bit unsigned integer.   {  	if (count == 1)  		return new ExifByte (etag' value [0]);  	else  		return new ExifByteArray (etag' value);  }  else if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 2)// 2 = ASCII An 8-bit byte containing one 7-bit ASCII code.    {  	return new ExifAscii (etag' ExifBitConverter.ToAscii (value' encoding)' encoding);  }  else if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 3)// 3 = SHORT A 16-bit (2-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUShort (etag' conv.ToUInt16 (value' 0));  	else  		return new ExifUShortArray (etag' ExifBitConverter.ToUShortArray (value' (int)count' byteOrder));  }  else if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 4)// 4 = LONG A 32-bit (4-byte) unsigned integer.   {  	if (count == 1)  		return new ExifUInt (etag' conv.ToUInt32 (value' 0));  	else  		return new ExifUIntArray (etag' ExifBitConverter.ToUIntArray (value' (int)count' byteOrder));  }  else if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 5)// 5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.   {  	if (count == 1)  		return new ExifURational (etag' ExifBitConverter.ToURational (value' byteOrder));  	else  		return new ExifURationalArray (etag' ExifBitConverter.ToURationalArray (value' (int)count' byteOrder));  }  else if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 7)  	// 7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition.  	return new ExifUndefined (etag' value);  else if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 9)// 9 = SLONG A 32-bit (4-byte) signed integer (2's complement notation).   {  	if (count == 1)  		return new ExifSInt (etag' conv.ToInt32 (value' 0));  	else  		return new ExifSIntArray (etag' ExifBitConverter.ToSIntArray (value' (int)count' byteOrder));  }  else if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifPropertyFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifPropertyFactory.cs,Get,The following statement contains a magic number: if (type == 10)// 10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator.   {  	if (count == 1)  		return new ExifSRational (etag' ExifBitConverter.ToSRational (value' byteOrder));  	else  		return new ExifSRationalArray (etag' ExifBitConverter.ToSRationalArray (value' (int)count' byteOrder));  }  else  	throw new ArgumentException ("Unknown property type.");  
Magic Number,ExifLibrary,ExifTagFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifTagFactory.cs,GetTagIFD,The following statement contains a magic number: return (IFD)(((int)tag / 100000) * 100000);  
Magic Number,ExifLibrary,ExifTagFactory,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\ExifTagFactory.cs,GetTagIFD,The following statement contains a magic number: return (IFD)(((int)tag / 100000) * 100000);  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,TIFFHeader,The following statement contains a magic number: if (id != 42)  	throw new NotValidTIFFHeader ();  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidTIFFHeader ();  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidTIFFHeader ();  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidTIFFHeader ();  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: if (BitConverterEx.LittleEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.LittleEndian;  else if (BitConverterEx.BigEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidTIFFHeader ();  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: if (BitConverterEx.BigEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidTIFFHeader ();  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: if (BitConverterEx.BigEndian.ToUInt16 (data' offset + 2) == 42)  	header.TIFFHeaderByteOrder = BitConverterEx.ByteOrder.BigEndian;  else  	throw new NotValidTIFFHeader ();  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: header.ID = 42;  
Magic Number,ExifLibrary,TIFFHeader,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\TIFFHeader.cs,FromBytes,The following statement contains a magic number: header.IFDOffset = BitConverterEx.ToUInt32 (data' offset + 4' header.TIFFHeaderByteOrder' BitConverterEx.SystemByteOrder);  
Magic Number,ExifLibrary,Utility,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\Utility.cs,GetStreamBytes,The following statement contains a magic number: using (MemoryStream mem = new MemoryStream ()) {  	stream.Seek (0' SeekOrigin.Begin);  	byte[] b = new byte[32768];  	int r;  	while ((r = stream.Read (b' 0' b.Length)) > 0)  		mem.Write (b' 0' r);  	return mem.ToArray ();  }  
Missing Default,ExifLibrary,JPEGFile,C:\repos\lmmsoft_PhotoGPS\PhotoGPS\ExifLibrary\JPEGFile.cs,WriteExifApp1,The following switch statement is missing a default case: switch (prop.IFD) {  case IFD.Zeroth:  	ifdzeroth.Add (prop.Tag' prop);  	break;  case IFD.EXIF:  	ifdexif.Add (prop.Tag' prop);  	break;  case IFD.GPS:  	ifdgps.Add (prop.Tag' prop);  	break;  case IFD.Interop:  	ifdinterop.Add (prop.Tag' prop);  	break;  case IFD.First:  	ifdfirst.Add (prop.Tag' prop);  	break;  }  
