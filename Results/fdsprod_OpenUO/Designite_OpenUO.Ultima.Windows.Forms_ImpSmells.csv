Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The method has 186 lines of code.
Long Method,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The method has 108 lines of code.
Long Parameter List,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Long Parameter List,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimationAsync,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Long Statement,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,ApplyHue,The length of the statement  "            var bd = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadWrite' PixelFormat.Format16bppArgb1555); " is 124.
Long Statement,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,GetText,The length of the statement  "                        *dest++ = Color.FromArgb(pixel == 0 ? 0 : 255' (pixel & 0x7C00) >> 7' (pixel & 0x3E0) >> 2' (pixel & 0x1F) << 3).ToArgb(); " is 122.
Long Statement,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The length of the statement  "            var bd = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadOnly' PixelFormat.Format16bppArgb1555); " is 123.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,ArtworkControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\ArtworkControl.cs,OnPaint,The length of the statement  "            using(Brush backBrush = new LinearGradientBrush(_cellBounds' Color.Gainsboro' Color.White' LinearGradientMode.ForwardDiagonal)) " is 127.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,ArtworkControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\ArtworkControl.cs,OnPaint,The length of the statement  "                            e.Graphics.DrawString("ArtworkControl.Factory is not set."' Font' backBrush' new RectangleF(0' 0' Width' Height)' format); " is 122.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,ArtworkControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\ArtworkControl.cs,OnPaint,The length of the statement  "                            e.Graphics.DrawString("ArtworkControl.Factory is not set."' Font' foreBrush' new RectangleF(1' 1' Width' Height)' format); " is 122.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.comboBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 150.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 44F)); " is 123.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 44F)); " is 123.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 44F)); " is 123.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 44F)); " is 123.
Long Statement,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch(fileType)              {                  default:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 2:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else                      {                          index = 22000 + ((body - 200) * 65);                      }                        break;                  }                  case 3:                  {                      if(body < 300)                      {                          index = body * 65;                      }                      else if(body < 400)                      {                          index = 33000 + ((body - 300) * 110);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 4:                  {                      if(body < 200)                      {                          index = body * 110;                      }                      else if(body < 400)                      {                          index = 22000 + ((body - 200) * 65);                      }                      else                      {                          index = 35000 + ((body - 400) * 175);                      }                        break;                  }                  case 5:                  {                      if(body < 200 && body != 34) // looks strange' though it works.                      {                          index = body * 110;                      }                      else                      {                          index = 35000 + ((body - 400) * 65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: if((index + (action * 5)) > int.MaxValue)              {                  throw new ArithmeticException();              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: index += action * 5;
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: if(direction <= 4)              {                  index += direction;              }              else              {                  index += direction - (direction - 4) * 2;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: if(direction <= 4)              {                  index += direction;              }              else              {                  index += direction - (direction - 4) * 2;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: if(direction <= 4)              {                  index += direction;              }              else              {                  index += direction - (direction - 4) * 2;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using(var stream = fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using(var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for(var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort)(bin.ReadUInt16() ^ 0x8000);                      }                        var start = (int)bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          lookups[i] = start + bin.ReadInt32();                      }                        var onlyHueGrayPixels = ((hue & 0x8000) == 0);                        hue = (hue & 0x3FFF) - 1;                        Hue hueObject = null;                        if(hue >= 0 && hue < _hues.Table.Length)                      {                          hueObject = _hues.Table[hue];                      }                        var frames = new Frame<Bitmap>[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                          var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                            var line = (ushort*)bd.Scan0;                          var delta = bd.Stride >> 1;                            int header;                            var xBase = xCenter - 0x200;                          var yBase = (yCenter + height) - 0x200;                            if(!flip)                          {                              line += xBase;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) + ((header >> 22) & 0x3FF));                                  var end = cur + (header & 0xFFF);                                    while(cur < end)                                  {                                      *cur++ = palette[bin.ReadByte()];                                  }                              }                          }                          else                          {                              line -= xBase - width + 1;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) - ((header >> 22) & 0x3FF));                                  var end = cur - (header & 0xFFF);                                    while(cur > end)                                  {                                      *cur-- = palette[bin.ReadByte()];                                  }                              }                                xCenter = width - xCenter;                          }                            bmp.UnlockBits(bd);                            if(hueObject != null)                          {                              ApplyHue(bmp' hueObject' onlyHueGrayPixels);                          }                            frames[i] = new Frame<Bitmap>(xCenter' yCenter' bmp);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using(var stream = fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using(var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for(var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort)(bin.ReadUInt16() ^ 0x8000);                      }                        var start = (int)bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          lookups[i] = start + bin.ReadInt32();                      }                        var onlyHueGrayPixels = ((hue & 0x8000) == 0);                        hue = (hue & 0x3FFF) - 1;                        Hue hueObject = null;                        if(hue >= 0 && hue < _hues.Table.Length)                      {                          hueObject = _hues.Table[hue];                      }                        var frames = new Frame<Bitmap>[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                          var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                            var line = (ushort*)bd.Scan0;                          var delta = bd.Stride >> 1;                            int header;                            var xBase = xCenter - 0x200;                          var yBase = (yCenter + height) - 0x200;                            if(!flip)                          {                              line += xBase;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) + ((header >> 22) & 0x3FF));                                  var end = cur + (header & 0xFFF);                                    while(cur < end)                                  {                                      *cur++ = palette[bin.ReadByte()];                                  }                              }                          }                          else                          {                              line -= xBase - width + 1;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) - ((header >> 22) & 0x3FF));                                  var end = cur - (header & 0xFFF);                                    while(cur > end)                                  {                                      *cur-- = palette[bin.ReadByte()];                                  }                              }                                xCenter = width - xCenter;                          }                            bmp.UnlockBits(bd);                            if(hueObject != null)                          {                              ApplyHue(bmp' hueObject' onlyHueGrayPixels);                          }                            frames[i] = new Frame<Bitmap>(xCenter' yCenter' bmp);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using(var stream = fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using(var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for(var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort)(bin.ReadUInt16() ^ 0x8000);                      }                        var start = (int)bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          lookups[i] = start + bin.ReadInt32();                      }                        var onlyHueGrayPixels = ((hue & 0x8000) == 0);                        hue = (hue & 0x3FFF) - 1;                        Hue hueObject = null;                        if(hue >= 0 && hue < _hues.Table.Length)                      {                          hueObject = _hues.Table[hue];                      }                        var frames = new Frame<Bitmap>[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                          var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                            var line = (ushort*)bd.Scan0;                          var delta = bd.Stride >> 1;                            int header;                            var xBase = xCenter - 0x200;                          var yBase = (yCenter + height) - 0x200;                            if(!flip)                          {                              line += xBase;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) + ((header >> 22) & 0x3FF));                                  var end = cur + (header & 0xFFF);                                    while(cur < end)                                  {                                      *cur++ = palette[bin.ReadByte()];                                  }                              }                          }                          else                          {                              line -= xBase - width + 1;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) - ((header >> 22) & 0x3FF));                                  var end = cur - (header & 0xFFF);                                    while(cur > end)                                  {                                      *cur-- = palette[bin.ReadByte()];                                  }                              }                                xCenter = width - xCenter;                          }                            bmp.UnlockBits(bd);                            if(hueObject != null)                          {                              ApplyHue(bmp' hueObject' onlyHueGrayPixels);                          }                            frames[i] = new Frame<Bitmap>(xCenter' yCenter' bmp);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using(var stream = fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using(var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for(var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort)(bin.ReadUInt16() ^ 0x8000);                      }                        var start = (int)bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          lookups[i] = start + bin.ReadInt32();                      }                        var onlyHueGrayPixels = ((hue & 0x8000) == 0);                        hue = (hue & 0x3FFF) - 1;                        Hue hueObject = null;                        if(hue >= 0 && hue < _hues.Table.Length)                      {                          hueObject = _hues.Table[hue];                      }                        var frames = new Frame<Bitmap>[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                          var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                            var line = (ushort*)bd.Scan0;                          var delta = bd.Stride >> 1;                            int header;                            var xBase = xCenter - 0x200;                          var yBase = (yCenter + height) - 0x200;                            if(!flip)                          {                              line += xBase;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) + ((header >> 22) & 0x3FF));                                  var end = cur + (header & 0xFFF);                                    while(cur < end)                                  {                                      *cur++ = palette[bin.ReadByte()];                                  }                              }                          }                          else                          {                              line -= xBase - width + 1;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) - ((header >> 22) & 0x3FF));                                  var end = cur - (header & 0xFFF);                                    while(cur > end)                                  {                                      *cur-- = palette[bin.ReadByte()];                                  }                              }                                xCenter = width - xCenter;                          }                            bmp.UnlockBits(bd);                            if(hueObject != null)                          {                              ApplyHue(bmp' hueObject' onlyHueGrayPixels);                          }                            frames[i] = new Frame<Bitmap>(xCenter' yCenter' bmp);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using(var stream = fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using(var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for(var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort)(bin.ReadUInt16() ^ 0x8000);                      }                        var start = (int)bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          lookups[i] = start + bin.ReadInt32();                      }                        var onlyHueGrayPixels = ((hue & 0x8000) == 0);                        hue = (hue & 0x3FFF) - 1;                        Hue hueObject = null;                        if(hue >= 0 && hue < _hues.Table.Length)                      {                          hueObject = _hues.Table[hue];                      }                        var frames = new Frame<Bitmap>[frameCount];                        for(var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                          var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                            var line = (ushort*)bd.Scan0;                          var delta = bd.Stride >> 1;                            int header;                            var xBase = xCenter - 0x200;                          var yBase = (yCenter + height) - 0x200;                            if(!flip)                          {                              line += xBase;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) + ((header >> 22) & 0x3FF));                                  var end = cur + (header & 0xFFF);                                    while(cur < end)                                  {                                      *cur++ = palette[bin.ReadByte()];                                  }                              }                          }                          else                          {                              line -= xBase - width + 1;                              line += (yBase * delta);                                while((header = bin.ReadInt32()) != 0x7FFF7FFF)                              {                                  header ^= DoubleXor;                                    var cur = line + ((((header >> 12) & 0x3FF) * delta) - ((header >> 22) & 0x3FF));                                  var end = cur - (header & 0xFFF);                                    while(cur > end)                                  {                                      *cur-- = palette[bin.ReadByte()];                                  }                              }                                xCenter = width - xCenter;                          }                            bmp.UnlockBits(bd);                            if(hueObject != null)                          {                              ApplyHue(bmp' hueObject' onlyHueGrayPixels);                          }                            frames[i] = new Frame<Bitmap>(xCenter' yCenter' bmp);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,ApplyHue,The following statement contains a magic number: fixed(ushort* pOriginal = hueColors)              {                  var pSource = pOriginal;                  var pDest = pColors;                  var pEnd = pDest + 32;                    while(pDest < pEnd)                  {                      *pDest++ = 0;                  }                    pEnd += 32;                    while(pDest < pEnd)                  {                      *pDest++ = *pSource++;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,ApplyHue,The following statement contains a magic number: fixed(ushort* pOriginal = hueColors)              {                  var pSource = pOriginal;                  var pDest = pColors;                  var pEnd = pDest + 32;                    while(pDest < pEnd)                  {                      *pDest++ = 0;                  }                    pEnd += 32;                    while(pDest < pEnd)                  {                      *pDest++ = *pSource++;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,ApplyHue,The following statement contains a magic number: if(onlyHueGrayPixels)              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          int c = *pBuffer;                          var r = (c >> 10) & 0x1F;                          var g = (c >> 5) & 0x1F;                          var b = c & 0x1F;                            if(r == g && r == b)                          {                              *pBuffer++ = pColors[c >> 10];                          }                          else                          {                              ++pBuffer;                          }                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }              else              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          *pBuffer = pColors[(*pBuffer) >> 10];                          ++pBuffer;                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,ApplyHue,The following statement contains a magic number: if(onlyHueGrayPixels)              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          int c = *pBuffer;                          var r = (c >> 10) & 0x1F;                          var g = (c >> 5) & 0x1F;                          var b = c & 0x1F;                            if(r == g && r == b)                          {                              *pBuffer++ = pColors[c >> 10];                          }                          else                          {                              ++pBuffer;                          }                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }              else              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          *pBuffer = pColors[(*pBuffer) >> 10];                          ++pBuffer;                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,ApplyHue,The following statement contains a magic number: if(onlyHueGrayPixels)              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          int c = *pBuffer;                          var r = (c >> 10) & 0x1F;                          var g = (c >> 5) & 0x1F;                          var b = c & 0x1F;                            if(r == g && r == b)                          {                              *pBuffer++ = pColors[c >> 10];                          }                          else                          {                              ++pBuffer;                          }                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }              else              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          *pBuffer = pColors[(*pBuffer) >> 10];                          ++pBuffer;                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,ApplyHue,The following statement contains a magic number: if(onlyHueGrayPixels)              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          int c = *pBuffer;                          var r = (c >> 10) & 0x1F;                          var g = (c >> 5) & 0x1F;                          var b = c & 0x1F;                            if(r == g && r == b)                          {                              *pBuffer++ = pColors[c >> 10];                          }                          else                          {                              ++pBuffer;                          }                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }              else              {                  while(pBuffer < pImageEnd)                  {                      while(pBuffer < pLineEnd)                      {                          *pBuffer = pColors[(*pBuffer) >> 10];                          ++pBuffer;                      }                        pBuffer += delta;                      pLineEnd += stride;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,Translate,The following statement contains a magic number: if((table & (1 << 31)) != 0)              {                  body = table & 0x7FFF;                    var vhue = (hue & 0x3FFF) - 1;                    //if (vhue < 0 || vhue >= Hues.List.Length)                  //    hue = (table >> 15) & 0xFFFF;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,InitializeTable,The following statement contains a magic number: var count = 400 + ((_fileIndices[0].Entries.Length - 35000) / 175);
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,InitializeTable,The following statement contains a magic number: var count = 400 + ((_fileIndices[0].Entries.Length - 35000) / 175);
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,InitializeTable,The following statement contains a magic number: var count = 400 + ((_fileIndices[0].Entries.Length - 35000) / 175);
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,InitializeTable,The following statement contains a magic number: for(var i = 0; i < count; ++i)              {                  BodyTableEntry entry;                  _bodyTable.Entries.TryGetValue(i' out entry);                    if(entry == null || _bodyConverter.Contains(i))                  {                      _table[i] = i;                  }                  else                  {                      _table[i] = entry.m_OldID | (1 << 31) | (((entry.m_NewHue ^ 0x8000) & 0xFFFF) << 15);                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,AnimationBitmapStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\AnimationBitmapStorageAdapter.cs,InitializeTable,The following statement contains a magic number: for(var i = 0; i < count; ++i)              {                  BodyTableEntry entry;                  _bodyTable.Entries.TryGetValue(i' out entry);                    if(entry == null || _bodyConverter.Contains(i))                  {                      _table[i] = i;                  }                  else                  {                      _table[i] = entry.m_OldID | (1 << 31) | (((entry.m_NewHue ^ 0x8000) & 0xFFFF) << 15);                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetLand,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var bmp = new Bitmap(44' 44' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' 44' 44)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                  var bin = new BinaryReader(stream);                    var xOffset = 21;                  var xRun = 2;                    var line = (ushort*)bd.Scan0;                  var delta = bd.Stride >> 1;                    for(var y = 0; y < 22; ++y' --xOffset' xRun += 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    xOffset = 0;                  xRun = 44;                    for(var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' line += delta)                  {                      var cur = line + xOffset;                      var end = cur + xRun;                        while(cur < end)                      {                          *cur++ = (ushort)(bin.ReadUInt16() | 0x8000);                      }                  }                    bmp.UnlockBits(bd);                    return bmp;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetStatic,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    using(var bin = new BinaryReader(stream))                  {                      bin.ReadInt32(); // Unknown                        int width = bin.ReadInt16();                      int height = bin.ReadInt16();                        if(width <= 0 || height <= 0)                      {                          return null;                      }                        var lookups = new int[height];                        var start = (int)bin.BaseStream.Position + (height * 2);                        for(var i = 0; i < height; ++i)                      {                          lookups[i] = (start + (bin.ReadUInt16() * 2));                      }                        var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                      var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                        var line = (ushort*)bd.Scan0;                      var delta = bd.Stride >> 1;                        for(var y = 0; y < height; ++y' line += delta)                      {                          bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                            var cur = line;                          ushort* end;                            int xOffset' xRun;                            while(((xOffset = bin.ReadUInt16()) + (xRun = bin.ReadUInt16())) != 0)                          {                              cur += xOffset;                              end = cur + xRun;                                while(cur < end)                              {                                  *cur++ = (ushort)(bin.ReadUInt16() ^ 0x8000);                              }                          }                      }                        bmp.UnlockBits(bd);                        return bmp;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ArtworkBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ArtworkBitmapAdapter.cs,GetStatic,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    using(var bin = new BinaryReader(stream))                  {                      bin.ReadInt32(); // Unknown                        int width = bin.ReadInt16();                      int height = bin.ReadInt16();                        if(width <= 0 || height <= 0)                      {                          return null;                      }                        var lookups = new int[height];                        var start = (int)bin.BaseStream.Position + (height * 2);                        for(var i = 0; i < height; ++i)                      {                          lookups[i] = (start + (bin.ReadUInt16() * 2));                      }                        var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                      var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                        var line = (ushort*)bd.Scan0;                      var delta = bd.Stride >> 1;                        for(var y = 0; y < height; ++y' line += delta)                      {                          bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                            var cur = line;                          ushort* end;                            int xOffset' xRun;                            while(((xOffset = bin.ReadUInt16()) + (xRun = bin.ReadUInt16())) != 0)                          {                              cur += xOffset;                              end = cur + xRun;                                while(cur < end)                              {                                  *cur++ = (ushort)(bin.ReadUInt16() ^ 0x8000);                              }                          }                      }                        bmp.UnlockBits(bd);                        return bmp;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: _fonts = new ASCIIFont[10];
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: using(var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for(var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for(var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if(width > 0 && height > 0)                          {                              if(height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for(var y = 0; y < height; ++y)                              {                                  for(var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                                         {                                             Pixels = pixels'                                             Width = width'                                             Height = height                                         };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: using(var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for(var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for(var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if(width > 0 && height > 0)                          {                              if(height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for(var y = 0; y < height; ++y)                              {                                  for(var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                                         {                                             Pixels = pixels'                                             Width = width'                                             Height = height                                         };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: using(var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for(var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for(var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if(width > 0 && height > 0)                          {                              if(height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for(var y = 0; y < height; ++y)                              {                                  for(var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                                         {                                             Pixels = pixels'                                             Width = width'                                             Height = height                                         };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: using(var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for(var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for(var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if(width > 0 && height > 0)                          {                              if(height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for(var y = 0; y < height; ++y)                              {                                  for(var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                                         {                                             Pixels = pixels'                                             Width = width'                                             Height = height                                         };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: using(var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for(var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for(var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if(width > 0 && height > 0)                          {                              if(height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for(var y = 0; y < height; ++y)                              {                                  for(var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                                         {                                             Pixels = pixels'                                             Width = width'                                             Height = height                                         };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,GetText,The following statement contains a magic number: var delta = bd.Stride >> 2;
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = ((((text[i]) - 0x20) & 0x7FFFFFFF) % 224);                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var pixels = ch.Pixels;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (font.Height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var pixel = pixels[charWidth * dy + k];                          *dest++ = Color.FromArgb(pixel == 0 ? 0 : 255' (pixel & 0x7C00) >> 7' (pixel & 0x3E0) >> 2' (pixel & 0x1F) << 3).ToArgb();                      }                  }                    dx += charWidth;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = ((((text[i]) - 0x20) & 0x7FFFFFFF) % 224);                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var pixels = ch.Pixels;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (font.Height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var pixel = pixels[charWidth * dy + k];                          *dest++ = Color.FromArgb(pixel == 0 ? 0 : 255' (pixel & 0x7C00) >> 7' (pixel & 0x3E0) >> 2' (pixel & 0x1F) << 3).ToArgb();                      }                  }                    dx += charWidth;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = ((((text[i]) - 0x20) & 0x7FFFFFFF) % 224);                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var pixels = ch.Pixels;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (font.Height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var pixel = pixels[charWidth * dy + k];                          *dest++ = Color.FromArgb(pixel == 0 ? 0 : 255' (pixel & 0x7C00) >> 7' (pixel & 0x3E0) >> 2' (pixel & 0x1F) << 3).ToArgb();                      }                  }                    dx += charWidth;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = ((((text[i]) - 0x20) & 0x7FFFFFFF) % 224);                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var pixels = ch.Pixels;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (font.Height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var pixel = pixels[charWidth * dy + k];                          *dest++ = Color.FromArgb(pixel == 0 ? 0 : 255' (pixel & 0x7C00) >> 7' (pixel & 0x3E0) >> 2' (pixel & 0x1F) << 3).ToArgb();                      }                  }                    dx += charWidth;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,ASCIIFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\ASCIIFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = ((((text[i]) - 0x20) & 0x7FFFFFFF) % 224);                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var pixels = ch.Pixels;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (font.Height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var pixel = pixels[charWidth * dy + k];                          *dest++ = Color.FromArgb(pixel == 0 ? 0 : 255' (pixel & 0x7C00) >> 7' (pixel & 0x3E0) >> 2' (pixel & 0x1F) << 3).ToArgb();                      }                  }                    dx += charWidth;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,GumpBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\GumpBitmapAdapter.cs,GetGump,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    using(var bin = new BinaryReader(stream))                  {                      var width = (extra >> 16) & 0xFFFF;                      var height = extra & 0xFFFF;                        var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                      var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                        var lookups = new int[height];                      var start = (int)bin.BaseStream.Position;                        for(var i = 0; i < height; ++i)                      {                          lookups[i] = start + (bin.ReadInt32() * 4);                      }                        var line = (ushort*)bd.Scan0;                      var delta = bd.Stride >> 1;                        for(var y = 0; y < height; ++y' line += delta)                      {                          bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                            var cur = line;                          var end = line + bd.Width;                            while(cur < end)                          {                              var color = bin.ReadUInt16();                              var next = cur + bin.ReadUInt16();                                if(color == 0)                              {                                  cur = next;                              }                              else                              {                                  color ^= 0x8000;                                    while(cur < next)                                  {                                      *cur++ = color;                                  }                              }                          }                      }                        bmp.UnlockBits(bd);                        return bmp;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,GumpBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\GumpBitmapAdapter.cs,GetGump,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    using(var bin = new BinaryReader(stream))                  {                      var width = (extra >> 16) & 0xFFFF;                      var height = extra & 0xFFFF;                        var bmp = new Bitmap(width' height' PixelFormat.Format16bppArgb1555);                      var bd = bmp.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                        var lookups = new int[height];                      var start = (int)bin.BaseStream.Position;                        for(var i = 0; i < height; ++i)                      {                          lookups[i] = start + (bin.ReadInt32() * 4);                      }                        var line = (ushort*)bd.Scan0;                      var delta = bd.Stride >> 1;                        for(var y = 0; y < height; ++y' line += delta)                      {                          bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                            var cur = line;                          var end = line + bd.Width;                            while(cur < end)                          {                              var color = bin.ReadUInt16();                              var next = cur + bin.ReadUInt16();                                if(color == 0)                              {                                  cur = next;                              }                              else                              {                                  color ^= 0x8000;                                    while(cur < next)                                  {                                      *cur++ = color;                                  }                              }                          }                      }                        bmp.UnlockBits(bd);                        return bmp;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,TexmapBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\TexmapBitmapAdapter.cs,GetTexmap,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var size = extra == 0 ? 64 : 128;                    var bmp = new Bitmap(size' size' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' size' size)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                    using(var bin = new BinaryReader(stream))                  {                      var line = (ushort*)bd.Scan0;                      var delta = bd.Stride >> 1;                        for(var y = 0; y < size; ++y' line += delta)                      {                          var cur = line;                          var end = cur + size;                            while(cur < end)                          {                              *cur++ = (ushort)(bin.ReadUInt16() ^ 0x8000);                          }                      }                        bmp.UnlockBits(bd);                        return bmp;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,TexmapBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\TexmapBitmapAdapter.cs,GetTexmap,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var size = extra == 0 ? 64 : 128;                    var bmp = new Bitmap(size' size' PixelFormat.Format16bppArgb1555);                  var bd = bmp.LockBits(new Rectangle(0' 0' size' size)' ImageLockMode.WriteOnly' PixelFormat.Format16bppArgb1555);                    using(var bin = new BinaryReader(stream))                  {                      var line = (ushort*)bd.Scan0;                      var delta = bd.Stride >> 1;                        for(var y = 0; y < size; ++y' line += delta)                      {                          var cur = line;                          var end = cur + size;                            while(cur < end)                          {                              *cur++ = (ushort)(bin.ReadUInt16() ^ 0x8000);                          }                      }                        bmp.UnlockBits(bd);                        return bmp;                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: while(File.Exists(path))              {                  var font = new UnicodeFont();                    var maxHeight = 0;                    using(var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var length = (int)fs.Length;                      var buffer = new byte[length];                        var read = fs.Read(buffer' 0' buffer.Length);                        using(var stream = new MemoryStream(buffer))                      {                          using(var bin = new BinaryReader(stream))                          {                              for(var c = 0; c < 0x10000; ++c)                              {                                  font.Chars[c] = new UnicodeChar();                                  stream.Seek(((c) * 4)' SeekOrigin.Begin);                                    var index = bin.ReadInt32();                                    if((index >= fs.Length) || (index <= 0))                                  {                                      continue;                                  }                                    stream.Seek(index' SeekOrigin.Begin);                                    var xOffset = bin.ReadSByte();                                  var yOffset = bin.ReadSByte();                                    int width = bin.ReadByte();                                  int height = bin.ReadByte();                                    maxHeight = Math.Max(height' maxHeight);                                    font.Chars[c].XOffset = xOffset;                                  font.Chars[c].YOffset = yOffset;                                  font.Chars[c].Width = width;                                  font.Chars[c].Height = height;                                    if(!((width == 0) || (height == 0)))                                  {                                      font.Chars[c].Bytes = bin.ReadBytes(height * (((width - 1) / 8) + 1));                                  }                              }                          }                      }                  }                    font.Height = maxHeight;                  fonts.Add(font);                  path = install.GetPath(FILE_NAME_FORMAT' ++i);              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,Initialize,The following statement contains a magic number: while(File.Exists(path))              {                  var font = new UnicodeFont();                    var maxHeight = 0;                    using(var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var length = (int)fs.Length;                      var buffer = new byte[length];                        var read = fs.Read(buffer' 0' buffer.Length);                        using(var stream = new MemoryStream(buffer))                      {                          using(var bin = new BinaryReader(stream))                          {                              for(var c = 0; c < 0x10000; ++c)                              {                                  font.Chars[c] = new UnicodeChar();                                  stream.Seek(((c) * 4)' SeekOrigin.Begin);                                    var index = bin.ReadInt32();                                    if((index >= fs.Length) || (index <= 0))                                  {                                      continue;                                  }                                    stream.Seek(index' SeekOrigin.Begin);                                    var xOffset = bin.ReadSByte();                                  var yOffset = bin.ReadSByte();                                    int width = bin.ReadByte();                                  int height = bin.ReadByte();                                    maxHeight = Math.Max(height' maxHeight);                                    font.Chars[c].XOffset = xOffset;                                  font.Chars[c].YOffset = yOffset;                                  font.Chars[c].Width = width;                                  font.Chars[c].Height = height;                                    if(!((width == 0) || (height == 0)))                                  {                                      font.Chars[c].Bytes = bin.ReadBytes(height * (((width - 1) / 8) + 1));                                  }                              }                          }                      }                  }                    font.Height = maxHeight;                  fonts.Add(font);                  path = install.GetPath(FILE_NAME_FORMAT' ++i);              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: var dx = 2;
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var data = ch.Bytes;                    if(c == 32)                  {                      dx += 5;                      continue;                  }                  dx += ch.XOffset;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var offset = k / 8 + dy * ((charWidth + 7) / 8);                            if(offset > data.Length)                          {                              continue;                          }                            if((data[offset] & (1 << (7 - (k % 8)))) != 0)                          {                              *dest++ = 0x8000;                          }                          else                          {                              *dest++ = 0x0000;                          }                      }                  }                    dx += ch.Width;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var data = ch.Bytes;                    if(c == 32)                  {                      dx += 5;                      continue;                  }                  dx += ch.XOffset;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var offset = k / 8 + dy * ((charWidth + 7) / 8);                            if(offset > data.Length)                          {                              continue;                          }                            if((data[offset] & (1 << (7 - (k % 8)))) != 0)                          {                              *dest++ = 0x8000;                          }                          else                          {                              *dest++ = 0x0000;                          }                      }                  }                    dx += ch.Width;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var data = ch.Bytes;                    if(c == 32)                  {                      dx += 5;                      continue;                  }                  dx += ch.XOffset;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var offset = k / 8 + dy * ((charWidth + 7) / 8);                            if(offset > data.Length)                          {                              continue;                          }                            if((data[offset] & (1 << (7 - (k % 8)))) != 0)                          {                              *dest++ = 0x8000;                          }                          else                          {                              *dest++ = 0x0000;                          }                      }                  }                    dx += ch.Width;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var data = ch.Bytes;                    if(c == 32)                  {                      dx += 5;                      continue;                  }                  dx += ch.XOffset;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var offset = k / 8 + dy * ((charWidth + 7) / 8);                            if(offset > data.Length)                          {                              continue;                          }                            if((data[offset] & (1 << (7 - (k % 8)))) != 0)                          {                              *dest++ = 0x8000;                          }                          else                          {                              *dest++ = 0x0000;                          }                      }                  }                    dx += ch.Width;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var data = ch.Bytes;                    if(c == 32)                  {                      dx += 5;                      continue;                  }                  dx += ch.XOffset;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var offset = k / 8 + dy * ((charWidth + 7) / 8);                            if(offset > data.Length)                          {                              continue;                          }                            if((data[offset] & (1 << (7 - (k % 8)))) != 0)                          {                              *dest++ = 0x8000;                          }                          else                          {                              *dest++ = 0x0000;                          }                      }                  }                    dx += ch.Width;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var data = ch.Bytes;                    if(c == 32)                  {                      dx += 5;                      continue;                  }                  dx += ch.XOffset;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var offset = k / 8 + dy * ((charWidth + 7) / 8);                            if(offset > data.Length)                          {                              continue;                          }                            if((data[offset] & (1 << (7 - (k % 8)))) != 0)                          {                              *dest++ = 0x8000;                          }                          else                          {                              *dest++ = 0x0000;                          }                      }                  }                    dx += ch.Width;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Adapters,UnicodeFontBitmapAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Adapters\UnicodeFontBitmapAdapter.cs,GetText,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                  var ch = font.Chars[c];                    var charWidth = ch.Width;                  var charHeight = ch.Height;                    var data = ch.Bytes;                    if(c == 32)                  {                      dx += 5;                      continue;                  }                  dx += ch.XOffset;                    for(var dy = 0; dy < charHeight; ++dy)                  {                      var dest = (line + (delta * (dy + (height - charHeight)))) + (dx);                        for(var k = 0; k < charWidth; ++k)                      {                          var offset = k / 8 + dy * ((charWidth + 7) / 8);                            if(offset > data.Length)                          {                              continue;                          }                            if((data[offset] & (1 << (7 - (k % 8)))) != 0)                          {                              *dest++ = 0x8000;                          }                          else                          {                              *dest++ = 0x0000;                          }                      }                  }                    dx += ch.Width;              }
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,ArtworkControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\ArtworkControl.cs,ArtworkControl,The following statement contains a magic number: _cellBounds.Inflate(new Size(-2' -2));
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,ArtworkControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\ArtworkControl.cs,ArtworkControl,The following statement contains a magic number: _cellBounds.Inflate(new Size(-2' -2));
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,ArtworkControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\ArtworkControl.cs,Recalculate,The following statement contains a magic number: _scrollBar.Location = new Point(Width - _scrollBar.Width - 2' 1);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,ArtworkControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\ArtworkControl.cs,Recalculate,The following statement contains a magic number: _scrollBar.Size = new Size(_scrollBar.Width' Height - 2);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,GumpControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\GumpControl.cs,OnResize,The following statement contains a magic number: _scrollBar.Location = new Point(Width - _scrollBar.Width - 2' 1);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,GumpControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\GumpControl.cs,OnResize,The following statement contains a magic number: _scrollBar.Size = new Size(_scrollBar.Width' Height - 2);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,GumpControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\GumpControl.cs,OnPaint,The following statement contains a magic number: var centerX = (Width - 1) / 2;
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,GumpControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\GumpControl.cs,OnPaint,The following statement contains a magic number: var centerY = (Height - 1) / 2;
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,GumpControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\GumpControl.cs,OnPaint,The following statement contains a magic number: if(_gumpFactory != null)              {                  var image = _gumpFactory.GetGump<Bitmap>(_scrollBar.Value);                    if(image != null)                  {                      var widthOver2 = image.Width / 2;                      var heightOver2 = image.Height / 2;                        e.Graphics.DrawImage(image' new Rectangle(centerX - widthOver2' centerY - heightOver2' image.Width' image.Height));                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,GumpControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\GumpControl.cs,OnPaint,The following statement contains a magic number: if(_gumpFactory != null)              {                  var image = _gumpFactory.GetGump<Bitmap>(_scrollBar.Value);                    if(image != null)                  {                      var widthOver2 = image.Width / 2;                      var heightOver2 = image.Height / 2;                        e.Graphics.DrawImage(image' new Rectangle(centerX - widthOver2' centerY - heightOver2' image.Width' image.Height));                  }              }
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(291' 21);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(291' 21);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.pausePlayButton.Location = new System.Drawing.Point(148' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.pausePlayButton.Location = new System.Drawing.Point(148' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.pausePlayButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.pausePlayButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.stopButton.Location = new System.Drawing.Point(104' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.stopButton.Location = new System.Drawing.Point(104' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.stopButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.stopButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.stopButton.TabIndex = 2;
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.previousButton.Location = new System.Drawing.Point(60' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.previousButton.Location = new System.Drawing.Point(60' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.previousButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.previousButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.previousButton.TabIndex = 3;
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Location = new System.Drawing.Point(192' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Location = new System.Drawing.Point(192' 3);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.Size = new System.Drawing.Size(38' 38);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.nextButton.TabIndex = 4;
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 6;
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.nextButton' 4' 0);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.stopButton' 2' 0);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.pausePlayButton' 3' 0);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(3' 25);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(3' 25);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(291' 44);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(291' 44);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 5;
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(297' 71);
Magic Number,OpenUO.Ultima.Windows.Forms.Controls,SoundPlayerControl,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Windows.Forms\Controls\SoundPlayerControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(297' 71);
