Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The method has 174 lines of code.
Long Parameter List,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Long Parameter List,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimationAsync,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: switch (fileType)              {                  default:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 2:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else                      {                          index = 22000 + ((body - 200)*65);                      }                        break;                  }                  case 3:                  {                      if (body < 300)                      {                          index = body*65;                      }                      else if (body < 400)                      {                          index = 33000 + ((body - 300)*110);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 4:                  {                      if (body < 200)                      {                          index = body*110;                      }                      else if (body < 400)                      {                          index = 22000 + ((body - 200)*65);                      }                      else                      {                          index = 35000 + ((body - 400)*175);                      }                        break;                  }                  case 5:                  {                      if (body < 200 && body != 34) // looks strange' though it works.                      {                          index = body*110;                      }                      else                      {                          index = 35000 + ((body - 400)*65);                      }                        break;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: index += action*5;
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: if (direction <= 4)              {                  index += direction;              }              else              {                  index += direction - (direction - 4)*2;              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: if (direction <= 4)              {                  index += direction;              }              else              {                  index += direction - (direction - 4)*2;              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: if (direction <= 4)              {                  index += direction;              }              else              {                  index += direction - (direction - 4)*2;              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using (var stream = fileIndex.Seek(index' out length' out extra))              {                  if (stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using (var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for (var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort) (bin.ReadUInt16() ^ 0x8000);                      }                        var startPosition = (int) bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          lookups[i] = startPosition + bin.ReadInt32();                      }                        var frames = new Frame<Texture>[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                          var buffer = new ushort[width*height];                            fixed (ushort* start = buffer)                          {                              var ptr = start;                              var delta = texture.Width;                                int header;                                var xBase = xCenter - 0x200;                              var yBase = (yCenter + height) - 0x200;                                if (!flip)                              {                                  ptr += xBase;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) + ((header >> 22) & 0x3FF));                                      var end = cur + (header & 0xFFF);                                        while (cur < end)                                      {                                          *cur++ = palette[bin.ReadByte()];                                      }                                  }                              }                              else                              {                                  ptr -= xBase - width + 1;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) - ((header >> 22) & 0x3FF));                                      var end = cur - (header & 0xFFF);                                        while (cur > end)                                      {                                          *cur-- = palette[bin.ReadByte()];                                      }                                  }                                    xCenter = width - xCenter;                              }                          }                            texture.SetData(buffer);                            frames[i] = new Frame<Texture>(xCenter' yCenter' texture);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using (var stream = fileIndex.Seek(index' out length' out extra))              {                  if (stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using (var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for (var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort) (bin.ReadUInt16() ^ 0x8000);                      }                        var startPosition = (int) bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          lookups[i] = startPosition + bin.ReadInt32();                      }                        var frames = new Frame<Texture>[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                          var buffer = new ushort[width*height];                            fixed (ushort* start = buffer)                          {                              var ptr = start;                              var delta = texture.Width;                                int header;                                var xBase = xCenter - 0x200;                              var yBase = (yCenter + height) - 0x200;                                if (!flip)                              {                                  ptr += xBase;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) + ((header >> 22) & 0x3FF));                                      var end = cur + (header & 0xFFF);                                        while (cur < end)                                      {                                          *cur++ = palette[bin.ReadByte()];                                      }                                  }                              }                              else                              {                                  ptr -= xBase - width + 1;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) - ((header >> 22) & 0x3FF));                                      var end = cur - (header & 0xFFF);                                        while (cur > end)                                      {                                          *cur-- = palette[bin.ReadByte()];                                      }                                  }                                    xCenter = width - xCenter;                              }                          }                            texture.SetData(buffer);                            frames[i] = new Frame<Texture>(xCenter' yCenter' texture);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using (var stream = fileIndex.Seek(index' out length' out extra))              {                  if (stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using (var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for (var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort) (bin.ReadUInt16() ^ 0x8000);                      }                        var startPosition = (int) bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          lookups[i] = startPosition + bin.ReadInt32();                      }                        var frames = new Frame<Texture>[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                          var buffer = new ushort[width*height];                            fixed (ushort* start = buffer)                          {                              var ptr = start;                              var delta = texture.Width;                                int header;                                var xBase = xCenter - 0x200;                              var yBase = (yCenter + height) - 0x200;                                if (!flip)                              {                                  ptr += xBase;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) + ((header >> 22) & 0x3FF));                                      var end = cur + (header & 0xFFF);                                        while (cur < end)                                      {                                          *cur++ = palette[bin.ReadByte()];                                      }                                  }                              }                              else                              {                                  ptr -= xBase - width + 1;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) - ((header >> 22) & 0x3FF));                                      var end = cur - (header & 0xFFF);                                        while (cur > end)                                      {                                          *cur-- = palette[bin.ReadByte()];                                      }                                  }                                    xCenter = width - xCenter;                              }                          }                            texture.SetData(buffer);                            frames[i] = new Frame<Texture>(xCenter' yCenter' texture);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using (var stream = fileIndex.Seek(index' out length' out extra))              {                  if (stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using (var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for (var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort) (bin.ReadUInt16() ^ 0x8000);                      }                        var startPosition = (int) bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          lookups[i] = startPosition + bin.ReadInt32();                      }                        var frames = new Frame<Texture>[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                          var buffer = new ushort[width*height];                            fixed (ushort* start = buffer)                          {                              var ptr = start;                              var delta = texture.Width;                                int header;                                var xBase = xCenter - 0x200;                              var yBase = (yCenter + height) - 0x200;                                if (!flip)                              {                                  ptr += xBase;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) + ((header >> 22) & 0x3FF));                                      var end = cur + (header & 0xFFF);                                        while (cur < end)                                      {                                          *cur++ = palette[bin.ReadByte()];                                      }                                  }                              }                              else                              {                                  ptr -= xBase - width + 1;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) - ((header >> 22) & 0x3FF));                                      var end = cur - (header & 0xFFF);                                        while (cur > end)                                      {                                          *cur-- = palette[bin.ReadByte()];                                      }                                  }                                    xCenter = width - xCenter;                              }                          }                            texture.SetData(buffer);                            frames[i] = new Frame<Texture>(xCenter' yCenter' texture);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,GetAnimation,The following statement contains a magic number: using (var stream = fileIndex.Seek(index' out length' out extra))              {                  if (stream == null)                  {                      return null;                  }                    var flip = (direction > 4);                    using (var bin = new BinaryReader(stream))                  {                      var palette = new ushort[0x100];                        for (var i = 0; i < 0x100; ++i)                      {                          palette[i] = (ushort) (bin.ReadUInt16() ^ 0x8000);                      }                        var startPosition = (int) bin.BaseStream.Position;                      var frameCount = bin.ReadInt32();                        var lookups = new int[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          lookups[i] = startPosition + bin.ReadInt32();                      }                        var frames = new Frame<Texture>[frameCount];                        for (var i = 0; i < frameCount; ++i)                      {                          bin.BaseStream.Seek(lookups[i]' SeekOrigin.Begin);                            int xCenter = bin.ReadInt16();                          int yCenter = bin.ReadInt16();                            int width = bin.ReadUInt16();                          int height = bin.ReadUInt16();                            var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                          var buffer = new ushort[width*height];                            fixed (ushort* start = buffer)                          {                              var ptr = start;                              var delta = texture.Width;                                int header;                                var xBase = xCenter - 0x200;                              var yBase = (yCenter + height) - 0x200;                                if (!flip)                              {                                  ptr += xBase;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) + ((header >> 22) & 0x3FF));                                      var end = cur + (header & 0xFFF);                                        while (cur < end)                                      {                                          *cur++ = palette[bin.ReadByte()];                                      }                                  }                              }                              else                              {                                  ptr -= xBase - width + 1;                                  ptr += (yBase*delta);                                    while ((header = bin.ReadInt32()) != 0x7FFF7FFF)                                  {                                      header ^= DoubleXor;                                        var cur = ptr + ((((header >> 12) & 0x3FF)*delta) - ((header >> 22) & 0x3FF));                                      var end = cur - (header & 0xFFF);                                        while (cur > end)                                      {                                          *cur-- = palette[bin.ReadByte()];                                      }                                  }                                    xCenter = width - xCenter;                              }                          }                            texture.SetData(buffer);                            frames[i] = new Frame<Texture>(xCenter' yCenter' texture);                      }                        return frames;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,Translate,The following statement contains a magic number: if ((table & (1 << 31)) != 0)              {                  body = table & 0x7FFF;                    var vhue = (hue & 0x3FFF) - 1;                    //TODO: this... Hues.List.Length not available from here.                  //if (vhue < 0 || vhue >= Hues.List.Length)                  //    hue = (table >> 15) & 0xFFFF;              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,InitializeTable,The following statement contains a magic number: var count = 400 + ((_fileIndices[0].Entries.Length - 35000)/175);
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,InitializeTable,The following statement contains a magic number: var count = 400 + ((_fileIndices[0].Entries.Length - 35000)/175);
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,InitializeTable,The following statement contains a magic number: var count = 400 + ((_fileIndices[0].Entries.Length - 35000)/175);
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,InitializeTable,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  BodyTableEntry entry;                  _bodyTable.Entries.TryGetValue(i' out entry);                    if (entry == null || _bodyConverter.Contains(i))                  {                      _table[i] = i;                  }                  else                  {                      _table[i] = entry.m_OldID | (1 << 31) | (((entry.m_NewHue ^ 0x8000) & 0xFFFF) << 15);                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,AnimationTextureStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\AnimationTextureStorageAdapter.cs,InitializeTable,The following statement contains a magic number: for (var i = 0; i < count; ++i)              {                  BodyTableEntry entry;                  _bodyTable.Entries.TryGetValue(i' out entry);                    if (entry == null || _bodyConverter.Contains(i))                  {                      _table[i] = i;                  }                  else                  {                      _table[i] = entry.m_OldID | (1 << 31) | (((entry.m_NewHue ^ 0x8000) & 0xFFFF) << 15);                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetLand,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' 44' 44' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[44*44];                        var xOffset = 21;                      var xRun = 2;                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < 22; ++y' --xOffset' xRun += 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                            xOffset = 0;                          xRun = 44;                            for (var y = 0; y < 22; ++y' ++xOffset' xRun -= 2' ptr += delta)                          {                              var cur = ptr + xOffset;                              var end = cur + xRun;                                while (cur < end)                              {                                  *cur++ = (ushort) (bin.ReadUInt16() | 0x8000);                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetStatic,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      bin.ReadInt32(); // Unknown                        int width = bin.ReadInt16();                      int height = bin.ReadInt16();                        if (width <= 0 || height <= 0)                      {                          return null;                      }                        var lookups = new int[height];                      var lookupStart = (int) bin.BaseStream.Position + (height*2);                        for (var i = 0; i < height; ++i)                      {                          lookups[i] = (lookupStart + (bin.ReadUInt16()*2));                      }                        var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[width*height];                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < height; ++y' ptr += delta)                          {                              bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                                var cur = ptr;                                int xOffset' xRun;                                while (((xOffset = bin.ReadUInt16()) + (xRun = bin.ReadUInt16())) != 0)                              {                                  cur += xOffset;                                  var end = cur + xRun;                                    while (cur < end)                                  {                                      *cur++ = (ushort) (bin.ReadUInt16() ^ 0x8000);                                  }                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ArtworkTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ArtworkTextureAdapter.cs,GetStatic,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  using (var bin = new BinaryReader(stream))                  {                      bin.ReadInt32(); // Unknown                        int width = bin.ReadInt16();                      int height = bin.ReadInt16();                        if (width <= 0 || height <= 0)                      {                          return null;                      }                        var lookups = new int[height];                      var lookupStart = (int) bin.BaseStream.Position + (height*2);                        for (var i = 0; i < height; ++i)                      {                          lookups[i] = (lookupStart + (bin.ReadUInt16()*2));                      }                        var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[width*height];                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < height; ++y' ptr += delta)                          {                              bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                                var cur = ptr;                                int xOffset' xRun;                                while (((xOffset = bin.ReadUInt16()) + (xRun = bin.ReadUInt16())) != 0)                              {                                  cur += xOffset;                                  var end = cur + xRun;                                    while (cur < end)                                  {                                      *cur++ = (ushort) (bin.ReadUInt16() ^ 0x8000);                                  }                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ASCIIFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ASCIIFontTextureAdapter.cs,Initialize,The following statement contains a magic number: _fonts = new ASCIIFont[10];
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ASCIIFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ASCIIFontTextureAdapter.cs,Initialize,The following statement contains a magic number: using (var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for (var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for (var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if (width > 0 && height > 0)                          {                              if (height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for (var y = 0; y < height; ++y)                              {                                  for (var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                              {                                  Pixels = pixels'                                  Width = width'                                  Height = height                              };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ASCIIFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ASCIIFontTextureAdapter.cs,Initialize,The following statement contains a magic number: using (var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for (var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for (var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if (width > 0 && height > 0)                          {                              if (height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for (var y = 0; y < height; ++y)                              {                                  for (var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                              {                                  Pixels = pixels'                                  Width = width'                                  Height = height                              };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ASCIIFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ASCIIFontTextureAdapter.cs,Initialize,The following statement contains a magic number: using (var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for (var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for (var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if (width > 0 && height > 0)                          {                              if (height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for (var y = 0; y < height; ++y)                              {                                  for (var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                              {                                  Pixels = pixels'                                  Width = width'                                  Height = height                              };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ASCIIFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ASCIIFontTextureAdapter.cs,Initialize,The following statement contains a magic number: using (var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for (var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for (var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if (width > 0 && height > 0)                          {                              if (height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for (var y = 0; y < height; ++y)                              {                                  for (var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                              {                                  Pixels = pixels'                                  Width = width'                                  Height = height                              };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ASCIIFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ASCIIFontTextureAdapter.cs,Initialize,The following statement contains a magic number: using (var reader = new BinaryReader(File.Open(install.GetPath("fonts.mul")' FileMode.Open)))              {                  for (var i = 0; i < 10; ++i)                  {                      reader.ReadByte(); //header                        var chars = new ASCIIChar[224];                      var fontHeight = 0;                        for (var k = 0; k < 224; ++k)                      {                          var width = reader.ReadByte();                          var height = reader.ReadByte();                            reader.ReadByte(); // delimeter?                            if (width > 0 && height > 0)                          {                              if (height > fontHeight && k < 96)                              {                                  fontHeight = height;                              }                                var pixels = new ushort[width * height];                                for (var y = 0; y < height; ++y)                              {                                  for (var x = 0; x < width; ++x)                                  {                                      pixels[y * width + x] = (ushort)(reader.ReadByte() | (reader.ReadByte() << 8));                                  }                              }                                chars[k] = new ASCIIChar                              {                                  Pixels = pixels'                                  Width = width'                                  Height = height                              };                          }                      }                        _fonts[i] = new ASCIIFont(fontHeight' chars);                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,ASCIIFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\ASCIIFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                                    var dx = 0;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = ((((text[i]) - 0x20) & 0x7FFFFFFF)%224);                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height;                        var pixels = ch.Pixels;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (font.Height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              *dest++ = pixels[charWidth*dy + k];                          }                      }                        dx += charWidth;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,GumpTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\GumpTextureAdapter.cs,GetGump,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  if (stream == null)                  {                      return null;                  }                    using (var bin = new BinaryReader(stream))                  {                      var width = (extra >> 16) & 0xFFFF;                      var height = extra & 0xFFFF;                        var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[width * height];                        var lookups = new int[height];                      var startPosition = (int)bin.BaseStream.Position;                        for (var i = 0; i < height; ++i)                      {                          lookups[i] = startPosition + (bin.ReadInt32() * 4);                      }                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < height; ++y' ptr += delta)                          {                              bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                                var cur = ptr;                              var end = ptr + delta;                                while (cur < end)                              {                                  var color = bin.ReadUInt16();                                  var next = cur + bin.ReadUInt16();                                    if (color == 0)                                  {                                      cur = next;                                  }                                  else                                  {                                      color ^= 0x8000;                                        while (cur < next)                                      {                                          *cur++ = color;                                      }                                  }                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,GumpTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\GumpTextureAdapter.cs,GetGump,The following statement contains a magic number: using (var stream = _fileIndex.Seek(index' out length' out extra))              {                  if (stream == null)                  {                      return null;                  }                    using (var bin = new BinaryReader(stream))                  {                      var width = (extra >> 16) & 0xFFFF;                      var height = extra & 0xFFFF;                        var texture = Texture.New2D(GraphicsDevice' width' height' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[width * height];                        var lookups = new int[height];                      var startPosition = (int)bin.BaseStream.Position;                        for (var i = 0; i < height; ++i)                      {                          lookups[i] = startPosition + (bin.ReadInt32() * 4);                      }                        fixed (ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for (var y = 0; y < height; ++y' ptr += delta)                          {                              bin.BaseStream.Seek(lookups[y]' SeekOrigin.Begin);                                var cur = ptr;                              var end = ptr + delta;                                while (cur < end)                              {                                  var color = bin.ReadUInt16();                                  var next = cur + bin.ReadUInt16();                                    if (color == 0)                                  {                                      cur = next;                                  }                                  else                                  {                                      color ^= 0x8000;                                        while (cur < next)                                      {                                          *cur++ = color;                                      }                                  }                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,TexmapTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\TexmapTextureAdapter.cs,GetTexmap,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var size = extra == 0 ? 64 : 128;                    using(var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' size' size' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[size * size];                        fixed(ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for(var y = 0; y < size; ++y' ptr += delta)                          {                              var cur = ptr;                              var end = cur + size;                                while(cur < end)                              {                                  *cur++ = (bin.ReadUInt16());                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,TexmapTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\TexmapTextureAdapter.cs,GetTexmap,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var size = extra == 0 ? 64 : 128;                    using(var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' size' size' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[size * size];                        fixed(ushort* start = buffer)                      {                          var ptr = start;                          var delta = texture.Width;                            for(var y = 0; y < size; ++y' ptr += delta)                          {                              var cur = ptr;                              var end = cur + size;                                while(cur < end)                              {                                  *cur++ = (bin.ReadUInt16());                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,TexmapTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\TexmapTextureAdapter.cs,GetTexmapAsync,The following statement contains a magic number: using (var result = await _fileIndex.SeekAsync(index).ConfigureAwait(false))              {                  var stream = result.Stream;                    if (stream == null)                  {                      return null;                  }                    var size = result.Extra == 0 ? 64 : 128;                    using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' size' size' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[size * size];                        unsafe                      {                          fixed (ushort* start = buffer)                          {                              var ptr = start;                              var delta = texture.Width;                                for (var y = 0; y < size; ++y' ptr += delta)                              {                                  var cur = ptr;                                  var end = cur + size;                                    while (cur < end)                                  {                                      *cur++ = (ushort)(bin.ReadUInt16() ^ 0x8000);                                  }                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,TexmapTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\TexmapTextureAdapter.cs,GetTexmapAsync,The following statement contains a magic number: using (var result = await _fileIndex.SeekAsync(index).ConfigureAwait(false))              {                  var stream = result.Stream;                    if (stream == null)                  {                      return null;                  }                    var size = result.Extra == 0 ? 64 : 128;                    using (var bin = new BinaryReader(stream))                  {                      var texture = Texture.New2D(GraphicsDevice' size' size' PixelFormat.B5G5R5A1_UNorm);                      var buffer = new ushort[size * size];                        unsafe                      {                          fixed (ushort* start = buffer)                          {                              var ptr = start;                              var delta = texture.Width;                                for (var y = 0; y < size; ++y' ptr += delta)                              {                                  var cur = ptr;                                  var end = cur + size;                                    while (cur < end)                                  {                                      *cur++ = (ushort)(bin.ReadUInt16() ^ 0x8000);                                  }                              }                          }                      }                        texture.SetData(buffer);                        return texture;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,Initialize,The following statement contains a magic number: while (File.Exists(path))              {                  var font = new UnicodeFont();                    var maxHeight = 0;                    using (var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var length = (int)fs.Length;                      var buffer = new byte[length];                        fs.Read(buffer' 0' buffer.Length);                        using (var stream = new MemoryStream(buffer))                      {                          using (var bin = new BinaryReader(stream))                          {                              for (var c = 0; c < 0x10000; ++c)                              {                                  font.Chars[c] = new UnicodeChar();                                  stream.Seek(((c) * 4)' SeekOrigin.Begin);                                    var index = bin.ReadInt32();                                    if ((index >= fs.Length) || (index <= 0))                                  {                                      continue;                                  }                                    stream.Seek(index' SeekOrigin.Begin);                                    var xOffset = bin.ReadSByte();                                  var yOffset = bin.ReadSByte();                                    int width = bin.ReadByte();                                  int height = bin.ReadByte();                                    maxHeight = Math.Max(height' maxHeight);                                    font.Chars[c].XOffset = xOffset;                                  font.Chars[c].YOffset = yOffset;                                  font.Chars[c].Width = width;                                  font.Chars[c].Height = height;                                    if (!((width == 0) || (height == 0)))                                  {                                      font.Chars[c].Bytes = bin.ReadBytes(height * (((width - 1) / 8) + 1));                                  }                              }                          }                      }                  }                    font.Height = maxHeight;                  fonts.Add(font);                  path = install.GetPath(FILE_NAME_FORMAT' ++i);              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,Initialize,The following statement contains a magic number: while (File.Exists(path))              {                  var font = new UnicodeFont();                    var maxHeight = 0;                    using (var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var length = (int)fs.Length;                      var buffer = new byte[length];                        fs.Read(buffer' 0' buffer.Length);                        using (var stream = new MemoryStream(buffer))                      {                          using (var bin = new BinaryReader(stream))                          {                              for (var c = 0; c < 0x10000; ++c)                              {                                  font.Chars[c] = new UnicodeChar();                                  stream.Seek(((c) * 4)' SeekOrigin.Begin);                                    var index = bin.ReadInt32();                                    if ((index >= fs.Length) || (index <= 0))                                  {                                      continue;                                  }                                    stream.Seek(index' SeekOrigin.Begin);                                    var xOffset = bin.ReadSByte();                                  var yOffset = bin.ReadSByte();                                    int width = bin.ReadByte();                                  int height = bin.ReadByte();                                    maxHeight = Math.Max(height' maxHeight);                                    font.Chars[c].XOffset = xOffset;                                  font.Chars[c].YOffset = yOffset;                                  font.Chars[c].Width = width;                                  font.Chars[c].Height = height;                                    if (!((width == 0) || (height == 0)))                                  {                                      font.Chars[c].Bytes = bin.ReadBytes(height * (((width - 1) / 8) + 1));                                  }                              }                          }                      }                  }                    font.Height = maxHeight;                  fonts.Add(font);                  path = install.GetPath(FILE_NAME_FORMAT' ++i);              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
Magic Number,OpenUO.Ultima.Paradox3d.Adapters,UnicodeFontTextureAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima.Paradox3d\Adapters\UnicodeFontTextureAdapter.cs,GetText,The following statement contains a magic number: fixed (ushort* start = buffer)              {                  var ptr = start;                  var delta = texture.Width;                  var dx = 2;                    for (var i = 0; i < text.Length; ++i)                  {                      var c = text[i]%0x10000;                      var ch = font.Chars[c];                        var charWidth = ch.Width;                      var charHeight = ch.Height + ch.YOffset;                        var data = ch.Bytes;                        if (c == 32)                      {                          dx += 5;                          continue;                      }                        dx += ch.XOffset;                        for (var dy = 0; dy < charHeight; ++dy)                      {                          var dest = (ptr + (delta*(dy + (height - charHeight)))) + (dx);                            for (var k = 0; k < charWidth; ++k)                          {                              var offset = k/8 + dy*((charWidth + 7)/8);                                if (offset > data.Length)                              {                                  continue;                              }                                if ((data[offset] & (1 << (7 - (k%8)))) != 0)                              {                                  *dest++ = 0x8000;                              }                              else                              {                                  *dest++ = 0x0000;                              }                          }                      }                        dx += ch.Width;                  }              }
