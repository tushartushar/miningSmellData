Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The method has 131 lines of code.
Complex Method,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,Cyclomatic complexity of the method is 10
Complex Method,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Convert,Cyclomatic complexity of the method is 9
Complex Method,OpenUO.Ultima,BodyTable,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyTable.cs,BodyTable,Cyclomatic complexity of the method is 8
Complex Method,OpenUO.Ultima,InstallationLocator,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\InstallationLocator.cs,GetExePath,Cyclomatic complexity of the method is 8
Long Parameter List,OpenUO.Ultima.Adapters,IAnimationStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\Interfaces\IAnimationStorageAdapter.cs,GetAnimation,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Long Parameter List,OpenUO.Ultima.Adapters,IAnimationStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\Interfaces\IAnimationStorageAdapter.cs,GetAnimationAsync,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Long Parameter List,OpenUO.Ultima,AnimationFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Factories\AnimationFactory.cs,GetAnimation,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Long Parameter List,OpenUO.Ultima,AnimationFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Factories\AnimationFactory.cs,GetAnimationAsync,The method has 5 parameters. Parameters: body' action' direction' hue' preserveHue
Long Parameter List,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The method has 6 parameters. Parameters: major' minor' revision' build' key1' key2
Long Parameter List,OpenUO.Ultima,ItemData,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\ItemData.cs,ItemData,The method has 8 parameters. Parameters: name' flags' weight' quality' quantity' value' height' anim
Long Parameter List,OpenUO.Ultima,Map,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Map.cs,Map,The method has 5 parameters. Parameters: install' fileIndex' mapID' width' height
Long Parameter List,OpenUO.Ultima,SkillData,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Skills\SkillData.cs,SkillData,The method has 6 parameters. Parameters: index' name' useButton' extra' unk' category
Long Parameter List,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The method has 5 parameters. Parameters: install' fileIndex' mapID' width' height
Long Statement,OpenUO.Ultima,Skill,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Skills\Skill.cs,ToString,The length of the statement  "            return String.Format("{0} ({1:X4}) {2} {3} Category: {4}"' _index' _index' HasUseButton ? "[x]" : "[ ]"' _name' Category.Name); " is 127.
Complex Conditional,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Contains,The conditional expression  "_table1 != null && body >= 0 && body < _table1.Length && _table1[body] != -1"  is complex.
Complex Conditional,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Contains,The conditional expression  "_table2 != null && body >= 0 && body < _table2.Length && _table2[body] != -1"  is complex.
Complex Conditional,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Contains,The conditional expression  "_table3 != null && body >= 0 && body < _table3.Length && _table3[body] != -1"  is complex.
Complex Conditional,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Contains,The conditional expression  "_table4 != null && body >= 0 && body < _table4.Length && _table4[body] != -1"  is complex.
Complex Conditional,OpenUO.Ultima,InstallationLocator,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\InstallationLocator.cs,GetExePath,The conditional expression  "((path == null) || (path.Length <= 0)) || (!Directory.Exists(path) && !File.Exists(path))"  is complex.
Complex Conditional,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,GetStaticBlock,The conditional expression  "x < 0 || y < 0 || x >= _blockWidth || y >= _blockHeight || _staticsStream == null || _fileIndex == null"  is complex.
Complex Conditional,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,GetLandBlock,The conditional expression  "x < 0 || y < 0 || x >= _blockWidth || y >= _blockHeight || _map == null"  is complex.
Empty Catch Block,OpenUO.Ultima,ConsoleManager,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\ConsoleManager.cs,PushColor,The method has an empty catch block.
Empty Catch Block,OpenUO.Ultima,ConsoleManager,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\ConsoleManager.cs,PopColor,The method has an empty catch block.
Magic Number,OpenUO.Ultima.Adapters,AnimationDataStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\AnimationDataStorageAdapter.cs,Initialize,The following statement contains a magic number: using (var stream = File.Open(install.GetPath("animdata.mul")' FileMode.Open))              {                  using (var reader = new BinaryReader(stream))                  {                      var totalBlocks = (int) (reader.BaseStream.Length/548);                        for (var i = 0; i < totalBlocks; i++)                      {                          var header = reader.ReadInt32();                          var frameData = reader.ReadBytes(64);                            var animData = new AnimationData                          {                              FrameData = new sbyte[64]'                              Unknown = reader.ReadByte()'                              FrameCount = reader.ReadByte()'                              FrameInterval = reader.ReadByte()'                              FrameStart = reader.ReadByte()                          };                            Buffer.BlockCopy(frameData' 0' animData.FrameData' 0' 64);                          animationData.Add(animData);                      }                  }              }
Magic Number,OpenUO.Ultima.Adapters,AnimationDataStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\AnimationDataStorageAdapter.cs,Initialize,The following statement contains a magic number: using (var stream = File.Open(install.GetPath("animdata.mul")' FileMode.Open))              {                  using (var reader = new BinaryReader(stream))                  {                      var totalBlocks = (int) (reader.BaseStream.Length/548);                        for (var i = 0; i < totalBlocks; i++)                      {                          var header = reader.ReadInt32();                          var frameData = reader.ReadBytes(64);                            var animData = new AnimationData                          {                              FrameData = new sbyte[64]'                              Unknown = reader.ReadByte()'                              FrameCount = reader.ReadByte()'                              FrameInterval = reader.ReadByte()'                              FrameStart = reader.ReadByte()                          };                            Buffer.BlockCopy(frameData' 0' animData.FrameData' 0' 64);                          animationData.Add(animData);                      }                  }              }
Magic Number,OpenUO.Ultima.Adapters,AnimationDataStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\AnimationDataStorageAdapter.cs,Initialize,The following statement contains a magic number: using (var stream = File.Open(install.GetPath("animdata.mul")' FileMode.Open))              {                  using (var reader = new BinaryReader(stream))                  {                      var totalBlocks = (int) (reader.BaseStream.Length/548);                        for (var i = 0; i < totalBlocks; i++)                      {                          var header = reader.ReadInt32();                          var frameData = reader.ReadBytes(64);                            var animData = new AnimationData                          {                              FrameData = new sbyte[64]'                              Unknown = reader.ReadByte()'                              FrameCount = reader.ReadByte()'                              FrameInterval = reader.ReadByte()'                              FrameStart = reader.ReadByte()                          };                            Buffer.BlockCopy(frameData' 0' animData.FrameData' 0' 64);                          animationData.Add(animData);                      }                  }              }
Magic Number,OpenUO.Ultima.Adapters,AnimationDataStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\AnimationDataStorageAdapter.cs,Initialize,The following statement contains a magic number: using (var stream = File.Open(install.GetPath("animdata.mul")' FileMode.Open))              {                  using (var reader = new BinaryReader(stream))                  {                      var totalBlocks = (int) (reader.BaseStream.Length/548);                        for (var i = 0; i < totalBlocks; i++)                      {                          var header = reader.ReadInt32();                          var frameData = reader.ReadBytes(64);                            var animData = new AnimationData                          {                              FrameData = new sbyte[64]'                              Unknown = reader.ReadByte()'                              FrameCount = reader.ReadByte()'                              FrameInterval = reader.ReadByte()'                              FrameStart = reader.ReadByte()                          };                            Buffer.BlockCopy(frameData' 0' animData.FrameData' 0' 64);                          animationData.Add(animData);                      }                  }              }
Magic Number,OpenUO.Ultima.Adapters,SkillStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SkillStorageAdapter.cs,ReadCategories,The following statement contains a magic number: using(var stream = new FileStream(grpPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var bin = new BinaryReader(stream);                    var categoryCount = bin.ReadInt32();                    categories.Add(new SkillCategory(new SkillCategoryData(-17' 0' "Misc.")));                    for(var i = 1; i < categoryCount; i++)                  {                      var nameReader = new BinaryReader(stream);                      var nameBuilder = new StringBuilder();                      var nameBuffer = bin.ReadBytes(17);                        for(var j = 0; j < 17; j++)                      {                          var ch = (char)nameBuffer[j];                            if(char.IsLetterOrDigit(ch) || char.IsWhiteSpace(ch) || char.IsPunctuation(ch))                          {                              nameBuilder.Append(ch);                          }                      }                        var name = nameBuilder.ToString();                      var fileIndex = stream.Position - name.Length;                      categories.Add(new SkillCategory(new SkillCategoryData(fileIndex' i' name)));                  }                    _categoryLookup = new int[(stream.Length - stream.Position) / 4];                    for(var i = 0; i < _categoryLookup.Length; i++)                  {                      _categoryLookup[i] = bin.ReadInt32();                  }              }
Magic Number,OpenUO.Ultima.Adapters,SkillStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SkillStorageAdapter.cs,ReadCategories,The following statement contains a magic number: using(var stream = new FileStream(grpPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var bin = new BinaryReader(stream);                    var categoryCount = bin.ReadInt32();                    categories.Add(new SkillCategory(new SkillCategoryData(-17' 0' "Misc.")));                    for(var i = 1; i < categoryCount; i++)                  {                      var nameReader = new BinaryReader(stream);                      var nameBuilder = new StringBuilder();                      var nameBuffer = bin.ReadBytes(17);                        for(var j = 0; j < 17; j++)                      {                          var ch = (char)nameBuffer[j];                            if(char.IsLetterOrDigit(ch) || char.IsWhiteSpace(ch) || char.IsPunctuation(ch))                          {                              nameBuilder.Append(ch);                          }                      }                        var name = nameBuilder.ToString();                      var fileIndex = stream.Position - name.Length;                      categories.Add(new SkillCategory(new SkillCategoryData(fileIndex' i' name)));                  }                    _categoryLookup = new int[(stream.Length - stream.Position) / 4];                    for(var i = 0; i < _categoryLookup.Length; i++)                  {                      _categoryLookup[i] = bin.ReadInt32();                  }              }
Magic Number,OpenUO.Ultima.Adapters,SkillStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SkillStorageAdapter.cs,ReadCategories,The following statement contains a magic number: using(var stream = new FileStream(grpPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var bin = new BinaryReader(stream);                    var categoryCount = bin.ReadInt32();                    categories.Add(new SkillCategory(new SkillCategoryData(-17' 0' "Misc.")));                    for(var i = 1; i < categoryCount; i++)                  {                      var nameReader = new BinaryReader(stream);                      var nameBuilder = new StringBuilder();                      var nameBuffer = bin.ReadBytes(17);                        for(var j = 0; j < 17; j++)                      {                          var ch = (char)nameBuffer[j];                            if(char.IsLetterOrDigit(ch) || char.IsWhiteSpace(ch) || char.IsPunctuation(ch))                          {                              nameBuilder.Append(ch);                          }                      }                        var name = nameBuilder.ToString();                      var fileIndex = stream.Position - name.Length;                      categories.Add(new SkillCategory(new SkillCategoryData(fileIndex' i' name)));                  }                    _categoryLookup = new int[(stream.Length - stream.Position) / 4];                    for(var i = 0; i < _categoryLookup.Length; i++)                  {                      _categoryLookup[i] = bin.ReadInt32();                  }              }
Magic Number,OpenUO.Ultima.Adapters,SkillStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SkillStorageAdapter.cs,ReadCategories,The following statement contains a magic number: using(var stream = new FileStream(grpPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var bin = new BinaryReader(stream);                    var categoryCount = bin.ReadInt32();                    categories.Add(new SkillCategory(new SkillCategoryData(-17' 0' "Misc.")));                    for(var i = 1; i < categoryCount; i++)                  {                      var nameReader = new BinaryReader(stream);                      var nameBuilder = new StringBuilder();                      var nameBuffer = bin.ReadBytes(17);                        for(var j = 0; j < 17; j++)                      {                          var ch = (char)nameBuffer[j];                            if(char.IsLetterOrDigit(ch) || char.IsWhiteSpace(ch) || char.IsPunctuation(ch))                          {                              nameBuilder.Append(ch);                          }                      }                        var name = nameBuilder.ToString();                      var fileIndex = stream.Position - name.Length;                      categories.Add(new SkillCategory(new SkillCategoryData(fileIndex' i' name)));                  }                    _categoryLookup = new int[(stream.Length - stream.Position) / 4];                    for(var i = 0; i < _categoryLookup.Length; i++)                  {                      _categoryLookup[i] = bin.ReadInt32();                  }              }
Magic Number,OpenUO.Ultima.Adapters,SkillStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SkillStorageAdapter.cs,ReadSkill,The following statement contains a magic number: using(var stream = fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    using(var bin = new BinaryReader(stream))                  {                      var nameLength = length - 2;                        var useBtn = bin.ReadByte();                      var nameBuffer = new byte[nameLength];                      bin.Read(nameBuffer' 0' nameLength);                      var unk = bin.ReadByte();                        var sb = new StringBuilder(nameBuffer.Length);                        for(var i = 0; i < nameBuffer.Length; i++)                      {                          sb.Append((char)nameBuffer[i]);                      }                        var category = _categories[0];                        if(index < _categoryLookup.Length)                      {                          category = _categories[_categoryLookup[index]];                      }                        var skill = new Skill(new SkillData(index' sb.ToString()' useBtn > 0' extra' unk' category));                        return skill;                  }              }
Magic Number,OpenUO.Ultima.Adapters,SoundStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SoundStorageAdapter.cs,GetSound,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var waveHeader = CreateWaveHeader(length);                    length -= 40;                    var headerLength = (waveHeader.Length << 2);                    var stringBuffer = new byte[40];                  var buffer = new byte[length + headerLength];                    Buffer.BlockCopy(waveHeader' 0' buffer' 0' headerLength);                    stream.Read(stringBuffer' 0' 40);                  stream.Read(buffer' headerLength' length);                    var name = Encoding.ASCII.GetString(stringBuffer).Trim();                  var end = name.IndexOf("\0");                  name = name.Substring(0' end);                    return new Sound(name' new MemoryStream(buffer));              }
Magic Number,OpenUO.Ultima.Adapters,SoundStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SoundStorageAdapter.cs,GetSound,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var waveHeader = CreateWaveHeader(length);                    length -= 40;                    var headerLength = (waveHeader.Length << 2);                    var stringBuffer = new byte[40];                  var buffer = new byte[length + headerLength];                    Buffer.BlockCopy(waveHeader' 0' buffer' 0' headerLength);                    stream.Read(stringBuffer' 0' 40);                  stream.Read(buffer' headerLength' length);                    var name = Encoding.ASCII.GetString(stringBuffer).Trim();                  var end = name.IndexOf("\0");                  name = name.Substring(0' end);                    return new Sound(name' new MemoryStream(buffer));              }
Magic Number,OpenUO.Ultima.Adapters,SoundStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SoundStorageAdapter.cs,GetSound,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var waveHeader = CreateWaveHeader(length);                    length -= 40;                    var headerLength = (waveHeader.Length << 2);                    var stringBuffer = new byte[40];                  var buffer = new byte[length + headerLength];                    Buffer.BlockCopy(waveHeader' 0' buffer' 0' headerLength);                    stream.Read(stringBuffer' 0' 40);                  stream.Read(buffer' headerLength' length);                    var name = Encoding.ASCII.GetString(stringBuffer).Trim();                  var end = name.IndexOf("\0");                  name = name.Substring(0' end);                    return new Sound(name' new MemoryStream(buffer));              }
Magic Number,OpenUO.Ultima.Adapters,SoundStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SoundStorageAdapter.cs,GetSound,The following statement contains a magic number: using(var stream = _fileIndex.Seek(index' out length' out extra))              {                  if(stream == null)                  {                      return null;                  }                    var waveHeader = CreateWaveHeader(length);                    length -= 40;                    var headerLength = (waveHeader.Length << 2);                    var stringBuffer = new byte[40];                  var buffer = new byte[length + headerLength];                    Buffer.BlockCopy(waveHeader' 0' buffer' 0' headerLength);                    stream.Read(stringBuffer' 0' 40);                  stream.Read(buffer' headerLength' length);                    var name = Encoding.ASCII.GetString(stringBuffer).Trim();                  var end = name.IndexOf("\0");                  name = name.Substring(0' end);                    return new Sound(name' new MemoryStream(buffer));              }
Magic Number,OpenUO.Ultima.Adapters,SoundStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SoundStorageAdapter.cs,CreateWaveHeader,The following statement contains a magic number: return new[]                     {                         0x46464952' (length + 12)' 0x45564157' 0x20746D66' 0x10' 0x010001' 0x5622' 0xAC44' 0x100002' 0x61746164' (length - 24)                     };
Magic Number,OpenUO.Ultima.Adapters,SoundStorageAdapter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Adapters\SoundStorageAdapter.cs,CreateWaveHeader,The following statement contains a magic number: return new[]                     {                         0x46464952' (length + 12)' 0x45564157' 0x20746D66' 0x10' 0x010001' 0x5622' 0xAC44' 0x100002' 0x61746164' (length - 24)                     };
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var fi = new FileInfo(dataPath);                  var uopPattern = Path.GetFileNameWithoutExtension(fi.Name).ToLowerInvariant();                    using(var br = new BinaryReader(index))                  {                      br.BaseStream.Seek(0' SeekOrigin.Begin);                        if(br.ReadInt32() != UOP_MAGIC_NUMBER)                      {                          throw new ArgumentException("Bad UOP file.");                      }                        br.ReadInt64(); // version + signature                      var nextBlock = br.ReadInt64();                      br.ReadInt32(); // block capacity                      var count = br.ReadInt32();                        var hashes = new Dictionary<ulong' int>();                        for(var i = 0; i < length; i++)                      {                          var entryName = string.Format("build/{0}/{1:D8}{2}"' uopPattern' i' _extension);                          var hash = CreateHash(entryName);                            if(!hashes.ContainsKey(hash))                          {                              hashes.Add(hash' i);                          }                      }                        br.BaseStream.Seek(nextBlock' SeekOrigin.Begin);                        do                      {                          var filesCount = br.ReadInt32();                          nextBlock = br.ReadInt64();                            for(var i = 0; i < filesCount; i++)                          {                              var offset = br.ReadInt64();                              var headerLength = br.ReadInt32();                              var compressedLength = br.ReadInt32();                              var decompressedLength = br.ReadInt32();                              var hash = br.ReadUInt64();                              br.ReadUInt32(); // Adler32                              var flag = br.ReadInt16();                                var entryLength = flag == 1 ? compressedLength : decompressedLength;                                if(offset == 0)                              {                                  continue;                              }                                int idx;                              if(hashes.TryGetValue(hash' out idx))                              {                                  if(idx < 0 || idx > entries.Length)                                  {                                      throw new IndexOutOfRangeException("hashes dictionary and files collection have different count of entries!");                                  }                                    entries[idx].Lookup = (int)(offset + headerLength);                                  entries[idx].Length = entryLength;                                    if(_hasExtra)                                  {                                      var curPos = br.BaseStream.Position;                                        br.BaseStream.Seek(offset + headerLength' SeekOrigin.Begin);                                        var extra = br.ReadBytes(8);                                        var extra1 = (ushort)((extra[3] << 24) | (extra[2] << 16) | (extra[1] << 8) | extra[0]);                                      var extra2 = (ushort)((extra[7] << 24) | (extra[6] << 16) | (extra[5] << 8) | extra[4]);                                        entries[idx].Lookup += 8;                                      entries[idx].Extra = extra1 << 16 | extra2;                                        br.BaseStream.Seek(curPos' SeekOrigin.Begin);                                  }                              }                          }                      } while(br.BaseStream.Seek(nextBlock' SeekOrigin.Begin) != 0);                  }              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: for(i = 0; i + 12 < s.Length; i += 12)              {                  edi = (uint)((s[i + 7] << 24) | (s[i + 6] << 16) | (s[i + 5] << 8) | s[i + 4]) + edi;                  esi = (uint)((s[i + 11] << 24) | (s[i + 10] << 16) | (s[i + 9] << 8) | s[i + 8]) + esi;                  edx = (uint)((s[i + 3] << 24) | (s[i + 2] << 16) | (s[i + 1] << 8) | s[i]) - esi;                    edx = (edx + ebx) ^ (esi >> 28) ^ (esi << 4);                  esi += edi;                  edi = (edi - edx) ^ (edx >> 26) ^ (edx << 6);                  edx += esi;                  esi = (esi - edi) ^ (edi >> 24) ^ (edi << 8);                  edi += edx;                  ebx = (edx - esi) ^ (esi >> 16) ^ (esi << 16);                  esi += edi;                  edi = (edi - ebx) ^ (ebx >> 13) ^ (ebx << 19);                  ebx += esi;                  esi = (esi - edi) ^ (edi >> 28) ^ (edi << 4);                  edi += ebx;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: if(s.Length - i > 0)              {                  switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }                    esi = (esi ^ edi) - ((edi >> 18) ^ (edi << 14));                  ecx = (esi ^ ebx) - ((esi >> 21) ^ (esi << 11));                  edi = (edi ^ ecx) - ((ecx >> 7) ^ (ecx << 25));                  esi = (esi ^ edi) - ((edi >> 16) ^ (edi << 16));                  edx = (esi ^ ecx) - ((esi >> 28) ^ (esi << 4));                  edi = (edi ^ edx) - ((edx >> 18) ^ (edx << 14));                  eax = (esi ^ edi) - ((edi >> 8) ^ (edi << 24));                    return ((ulong)edi << 32) | eax;              }
Magic Number,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following statement contains a magic number: return ((ulong)esi << 32) | eax;
Magic Number,OpenUO.Ultima,MulFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\MulFileIndex.cs,ReadEntries,The following statement contains a magic number: var length = (int)((new FileInfo(_indexPath).Length / 3) / 4);
Magic Number,OpenUO.Ultima,MulFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\MulFileIndex.cs,ReadEntries,The following statement contains a magic number: var length = (int)((new FileInfo(_indexPath).Length / 3) / 4);
Magic Number,OpenUO.Ultima,MulFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\MulFileIndex.cs,ReadEntries,The following statement contains a magic number: using(var index = new FileStream(_indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var bin = new BinaryReader(index);                    var count = (int)(index.Length / 12);                    for(var i = 0; i < count && i < length; ++i)                  {                      var entry = new FileIndexEntry                                  {                                      Lookup = bin.ReadInt32()'                                      Length = bin.ReadInt32()'                                      Extra = bin.ReadInt32()                                  };                        entries.Add(entry);                  }                    for(var i = count; i < length; ++i)                  {                      var entry = new FileIndexEntry                                  {                                      Lookup = -1'                                      Length = -1'                                      Extra = -1                                  };                        entries.Add(entry);                  }              }
Magic Number,OpenUO.Ultima,ClilocInfo,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Clilocs\ClilocInfo.cs,ToString,The following statement contains a magic number: while(match.Success)              {                  var i = Int32.Parse(match.Groups[2].Value);                    if(args.Length < i)                  {                      text = null;                      break;                  }                    text = text.Replace(match.Groups[1].Value' args[i - 1]);                  match = match.NextMatch();              }
Magic Number,OpenUO.Ultima,ASCIIFont,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Fonts\ASCIIFont.cs,GetWidth,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = ((((text[i]) - 0x20) & 0x7FFFFFFF) % 224);                    if(c >= Chars.Length)                  {                      continue;                  }                    width += Chars[c].Width;              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: using(var ip = new StreamReader(path))              {                  string line;                    while((line = ip.ReadLine()) != null)                  {                      lineNumber++;                        if((line = line.Trim()).Length == 0 || !numericOnly.IsMatch(line[0].ToString()))                      {                          continue;                      }                        var split = line.Split('\t');                        if(split.Length <= 1)                      {                          continue;                      }                        int original;                        if(!int.TryParse(split[0]' out original))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[0]' lineNumber);                          continue;                      }                        int anim2;                        if(!int.TryParse(split[1]' out anim2))                      {                          Tracer.Warn("ID '{0}' at line number {1} is not a valid integer"' split[1]' lineNumber);                          continue;                      }                        int anim3;                      int anim4;                      int anim5;                        if(split.Length >= 3 || !int.TryParse(split[2]' out anim3))                      {                          anim3 = -1;                      }                        if(split.Length >= 4 || !int.TryParse(split[3]' out anim4))                      {                          anim4 = -1;                      }                        if(split.Length >= 5 || !int.TryParse(split[4]' out anim5))                      {                          anim5 = -1;                      }                        if(anim2 != -1)                      {                          if(anim2 == 68)                          {                              anim2 = 122;                          }                            if(original > max1)                          {                              max1 = original;                          }                            list1.Add(original);                          list1.Add(anim2);                      }                        if(anim3 != -1)                      {                          if(original > max2)                          {                              max2 = original;                          }                            list2.Add(original);                          list2.Add(anim3);                      }                        if(anim4 != -1)                      {                          if(original > max3)                          {                              max3 = original;                          }                            list3.Add(original);                          list3.Add(anim4);                      }                        if(anim5 != -1)                      {                          if(original > max4)                          {                              max4 = original;                          }                            list4.Add(original);                          list4.Add(anim5);                      }                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: for(var i = 0; i < list1.Count; i += 2)              {                  _table1[list1[i]] = list1[i + 1];              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: for(var i = 0; i < list2.Count; i += 2)              {                  _table2[list2[i]] = list2[i + 1];              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: for(var i = 0; i < list3.Count; i += 2)              {                  _table3[list3[i]] = list3[i + 1];              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,BodyConverter,The following statement contains a magic number: for(var i = 0; i < list4.Count; i += 2)              {                  _table4[list4[i]] = list4[i + 1];              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Convert,The following statement contains a magic number: if(_table1 != null && body >= 0 && body < _table1.Length)              {                  var val = _table1[body];                    if(val != -1)                  {                      body = val;                      return 2;                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Convert,The following statement contains a magic number: if(_table2 != null && body >= 0 && body < _table2.Length)              {                  var val = _table2[body];                    if(val != -1)                  {                      body = val;                      return 3;                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Convert,The following statement contains a magic number: if(_table3 != null && body >= 0 && body < _table3.Length)              {                  var val = _table3[body];                    if(val != -1)                  {                      body = val;                      return 4;                  }              }
Magic Number,OpenUO.Ultima,BodyConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyConverter.cs,Convert,The following statement contains a magic number: if(_table4 != null && body >= 0 && body < _table4.Length)              {                  var val = _table4[body];                    if(val != -1)                  {                      body = val;                      return 5;                  }              }
Magic Number,OpenUO.Ultima,BodyTable,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyTable.cs,BodyTable,The following statement contains a magic number: while((line = def.ReadLine()) != null)              {                  lineNumber++;                    if((line = line.Trim()).Length == 0 || line.StartsWith("#"))                  {                      continue;                  }                    try                  {                      var index1 = line.IndexOf(" {");                      var index2 = line.IndexOf("} ");                        var newIdString = line.Substring(0' index1);                      var oldIdString = line.Substring(index1 + 2' index2 - index1 - 2);                      var newHueString = line.Substring(index2 + 2);                        var indexOf = oldIdString.IndexOf(''');                        if(indexOf > -1)                      {                          oldIdString = oldIdString.Substring(0' indexOf).Trim();                      }                        int newId;                      int oldId;                      int newHue;                        if(!int.TryParse(newIdString' out newId))                      {                          Tracer.Warn("New ID '{0}' at line number {1} is not a valid integer"' newIdString' lineNumber);                          continue;                      }                        if(!int.TryParse(oldIdString' out oldId))                      {                          Tracer.Warn("Old ID '{0}' at line number {1} is not a valid integer"' oldIdString' lineNumber);                          continue;                      }                        if(!int.TryParse(newHueString' out newHue))                      {                          Tracer.Warn("Hue ID '{0}' at line number {1} is not a valid integer"' newHueString' lineNumber);                          continue;                      }                        _entries[newId] = new BodyTableEntry(oldId' newId' newHue);                  }                  catch(Exception e)                  {                      Tracer.Error(e);                  }              }
Magic Number,OpenUO.Ultima,BodyTable,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyTable.cs,BodyTable,The following statement contains a magic number: while((line = def.ReadLine()) != null)              {                  lineNumber++;                    if((line = line.Trim()).Length == 0 || line.StartsWith("#"))                  {                      continue;                  }                    try                  {                      var index1 = line.IndexOf(" {");                      var index2 = line.IndexOf("} ");                        var newIdString = line.Substring(0' index1);                      var oldIdString = line.Substring(index1 + 2' index2 - index1 - 2);                      var newHueString = line.Substring(index2 + 2);                        var indexOf = oldIdString.IndexOf(''');                        if(indexOf > -1)                      {                          oldIdString = oldIdString.Substring(0' indexOf).Trim();                      }                        int newId;                      int oldId;                      int newHue;                        if(!int.TryParse(newIdString' out newId))                      {                          Tracer.Warn("New ID '{0}' at line number {1} is not a valid integer"' newIdString' lineNumber);                          continue;                      }                        if(!int.TryParse(oldIdString' out oldId))                      {                          Tracer.Warn("Old ID '{0}' at line number {1} is not a valid integer"' oldIdString' lineNumber);                          continue;                      }                        if(!int.TryParse(newHueString' out newHue))                      {                          Tracer.Warn("Hue ID '{0}' at line number {1} is not a valid integer"' newHueString' lineNumber);                          continue;                      }                        _entries[newId] = new BodyTableEntry(oldId' newId' newHue);                  }                  catch(Exception e)                  {                      Tracer.Error(e);                  }              }
Magic Number,OpenUO.Ultima,BodyTable,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Animations\BodyTable.cs,BodyTable,The following statement contains a magic number: while((line = def.ReadLine()) != null)              {                  lineNumber++;                    if((line = line.Trim()).Length == 0 || line.StartsWith("#"))                  {                      continue;                  }                    try                  {                      var index1 = line.IndexOf(" {");                      var index2 = line.IndexOf("} ");                        var newIdString = line.Substring(0' index1);                      var oldIdString = line.Substring(index1 + 2' index2 - index1 - 2);                      var newHueString = line.Substring(index2 + 2);                        var indexOf = oldIdString.IndexOf(''');                        if(indexOf > -1)                      {                          oldIdString = oldIdString.Substring(0' indexOf).Trim();                      }                        int newId;                      int oldId;                      int newHue;                        if(!int.TryParse(newIdString' out newId))                      {                          Tracer.Warn("New ID '{0}' at line number {1} is not a valid integer"' newIdString' lineNumber);                          continue;                      }                        if(!int.TryParse(oldIdString' out oldId))                      {                          Tracer.Warn("Old ID '{0}' at line number {1} is not a valid integer"' oldIdString' lineNumber);                          continue;                      }                        if(!int.TryParse(newHueString' out newHue))                      {                          Tracer.Warn("Hue ID '{0}' at line number {1} is not a valid integer"' newHueString' lineNumber);                          continue;                      }                        _entries[newId] = new BodyTableEntry(oldId' newId' newHue);                  }                  catch(Exception e)                  {                      Tracer.Error(e);                  }              }
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 = (major << 23) | (minor << 14) | (revision << 4);
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 = (major << 23) | (minor << 14) | (revision << 4);
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 = (major << 23) | (minor << 14) | (revision << 4);
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 ^= (revision * revision) << 9;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 ^= (minor * 11) << 24;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 ^= (minor * 11) << 24;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 ^= (revision * 7) << 19;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key1 ^= (revision * 7) << 19;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 = (major << 22) | (revision << 13) | (minor << 3);
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 = (major << 22) | (revision << 13) | (minor << 3);
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 = (major << 22) | (revision << 13) | (minor << 3);
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 ^= (revision * revision * 3) << 10;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 ^= (revision * revision * 3) << 10;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 ^= (minor * 13) << 23;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 ^= (minor * 13) << 23;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 ^= (revision * 7) << 18;
Magic Number,OpenUO.Ultima,LoginKeyFactory,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\LoginKeyFactory.cs,Create,The following statement contains a magic number: key2 ^= (revision * 7) << 18;
Magic Number,OpenUO.Ultima,ColorConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\ColorConverter.cs,Argb1555ToArgb8888,The following statement contains a magic number: var rgb = (r << 9) | (g << 6) | (b << 3);
Magic Number,OpenUO.Ultima,ColorConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\ColorConverter.cs,Argb1555ToArgb8888,The following statement contains a magic number: var rgb = (r << 9) | (g << 6) | (b << 3);
Magic Number,OpenUO.Ultima,ColorConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\ColorConverter.cs,Argb1555ToArgb8888,The following statement contains a magic number: var rgb = (r << 9) | (g << 6) | (b << 3);
Magic Number,OpenUO.Ultima,ColorConverter,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\ColorConverter.cs,Argb1555ToArgb8888,The following statement contains a magic number: return (a * 0x1FE00) | rgb | ((rgb >> 5) & 0x070707);
Magic Number,OpenUO.Ultima,Hue,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hue.cs,Hue,The following statement contains a magic number: _colors = new ushort[34];
Magic Number,OpenUO.Ultima,Hue,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hue.cs,Hue,The following statement contains a magic number: _colors = new ushort[34];
Magic Number,OpenUO.Ultima,Hue,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hue.cs,Hue,The following statement contains a magic number: for(var i = 0; i < 34; ++i)              {                  _colors[i] = (ushort)(bin.ReadUInt16() | 0x8000);              }
Magic Number,OpenUO.Ultima,Hue,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hue.cs,Hue,The following statement contains a magic number: var sb = new StringBuilder(20' 20);
Magic Number,OpenUO.Ultima,Hue,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hue.cs,Hue,The following statement contains a magic number: var sb = new StringBuilder(20' 20);
Magic Number,OpenUO.Ultima,Hue,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hue.cs,Hue,The following statement contains a magic number: for(var i = 0; i < 20; ++i)              {                  var c = (char)bin.ReadByte();                    if(c == 0)                  {                      nulled = true;                  }                  else if(!nulled)                  {                      sb.Append(c);                  }              }
Magic Number,OpenUO.Ultima,HuedTileList,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\HuedTileList.cs,HuedTileList,The following statement contains a magic number: _tiles = new HuedTile[8];
Magic Number,OpenUO.Ultima,HuedTileList,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\HuedTileList.cs,Add,The following statement contains a magic number: if((Count + 1) > _tiles.Length)              {                  var old = _tiles;                  _tiles = new HuedTile[old.Length * 2];                    for(var i = 0; i < old.Length; ++i)                  {                      _tiles[i] = old[i];                  }              }
Magic Number,OpenUO.Ultima,Hues,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hues.cs,Hues,The following statement contains a magic number: _hues = new Hue[3000];
Magic Number,OpenUO.Ultima,Hues,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hues.cs,Hues,The following statement contains a magic number: if(path != null)              {                  using(var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var bin = new BinaryReader(fs);                        var blockCount = (int)fs.Length / 708;                        if(blockCount > 375)                      {                          blockCount = 375;                      }                        for(var i = 0; i < blockCount; ++i)                      {                          bin.ReadInt32();                            for(var j = 0; j < 8; ++j' ++index)                          {                              _hues[index] = new Hue(index' bin);                          }                      }                  }              }
Magic Number,OpenUO.Ultima,Hues,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hues.cs,Hues,The following statement contains a magic number: if(path != null)              {                  using(var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var bin = new BinaryReader(fs);                        var blockCount = (int)fs.Length / 708;                        if(blockCount > 375)                      {                          blockCount = 375;                      }                        for(var i = 0; i < blockCount; ++i)                      {                          bin.ReadInt32();                            for(var j = 0; j < 8; ++j' ++index)                          {                              _hues[index] = new Hue(index' bin);                          }                      }                  }              }
Magic Number,OpenUO.Ultima,Hues,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hues.cs,Hues,The following statement contains a magic number: if(path != null)              {                  using(var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var bin = new BinaryReader(fs);                        var blockCount = (int)fs.Length / 708;                        if(blockCount > 375)                      {                          blockCount = 375;                      }                        for(var i = 0; i < blockCount; ++i)                      {                          bin.ReadInt32();                            for(var j = 0; j < 8; ++j' ++index)                          {                              _hues[index] = new Hue(index' bin);                          }                      }                  }              }
Magic Number,OpenUO.Ultima,Hues,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hues.cs,Hues,The following statement contains a magic number: if(path != null)              {                  using(var fs = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var bin = new BinaryReader(fs);                        var blockCount = (int)fs.Length / 708;                        if(blockCount > 375)                      {                          blockCount = 375;                      }                        for(var i = 0; i < blockCount; ++i)                      {                          bin.ReadInt32();                            for(var j = 0; j < 8; ++j' ++index)                          {                              _hues[index] = new Hue(index' bin);                          }                      }                  }              }
Magic Number,OpenUO.Ultima,Hues,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hues.cs,Hues,The following statement contains a magic number: for(; index < 3000; ++index)              {                  _hues[index] = new Hue(index);              }
Magic Number,OpenUO.Ultima,Hues,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Hues\Hues.cs,GetHue,The following statement contains a magic number: if(index >= 0 && index < 3000)              {                  return _hues[index];              }
Magic Number,OpenUO.Ultima,InstallationLocator,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\InstallationLocator.cs,Locate,The following statement contains a magic number: for(var i = 0; i < KnownInstallationRegistryKeys.Count; i++)              {                  var exePath = IntPtr.Size == 8                      ? GetExePath(@"Wow6432Node\" + KnownInstallationRegistryKeys[i])                      : GetExePath(KnownInstallationRegistryKeys[i]);                    if(!string.IsNullOrEmpty(exePath) && !installations.Contains(exePath))                  {                      installations.Add(exePath);                  }              }
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Felucca = new Map(install' 0' 0' 6144' 4096);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Felucca = new Map(install' 0' 0' 6144' 4096);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Trammel = new Map(install' 0' 1' 6144' 4096);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Trammel = new Map(install' 0' 1' 6144' 4096);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Ilshenar = new Map(install' 2' 2' 2304' 1600);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Ilshenar = new Map(install' 2' 2' 2304' 1600);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Ilshenar = new Map(install' 2' 2' 2304' 1600);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Ilshenar = new Map(install' 2' 2' 2304' 1600);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Malas = new Map(install' 3' 3' 2560' 2048);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Malas = new Map(install' 3' 3' 2560' 2048);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Malas = new Map(install' 3' 3' 2560' 2048);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Malas = new Map(install' 3' 3' 2560' 2048);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Tokuno = new Map(install' 4' 4' 1448' 1448);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Tokuno = new Map(install' 4' 4' 1448' 1448);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Tokuno = new Map(install' 4' 4' 1448' 1448);
Magic Number,OpenUO.Ultima,Maps,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\Maps.cs,Maps,The following statement contains a magic number: Tokuno = new Map(install' 4' 4' 1448' 1448);
Magic Number,OpenUO.Ultima,RadarColors,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\RadarColors.cs,Load,The following statement contains a magic number: _colors = new short[file.Length / 2];
Magic Number,OpenUO.Ultima,TileData,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\TileData\TileData.cs,TileData,The following statement contains a magic number: if(!string.IsNullOrEmpty(filePath))              {                  using(var fs = new FileStream(filePath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var x64 = fs.Length >= 3188736;                      var bin = new BinaryReader(fs);                        m_LandData = new LandData[0x4000];                        for(var i = 0; i < 0x4000; ++i)                      {                          if((i & 0x1F) == 0)                          {                              bin.ReadInt32(); // header                          }                            var flags = x64 ? (TileFlag)bin.ReadInt64() : (TileFlag)bin.ReadInt32();                          bin.ReadInt16(); // skip 2 bytes -- textureID                            m_LandData[i] = new LandData(ReadNameString(bin)' flags);                      }                        m_ItemData = new ItemData[0x4000];                      m_HeightTable = new int[0x4000];                        for(var i = 0; i < 0x4000; ++i)                      {                          if((i & 0x1F) == 0)                          {                              bin.ReadInt32(); // header                          }                            var flags = x64 ? (TileFlag)bin.ReadInt64() : (TileFlag)bin.ReadInt32();                          int weight = bin.ReadByte();                          int quality = bin.ReadByte();                          bin.ReadInt16();                          bin.ReadByte();                          int quantity = bin.ReadByte();                          int anim = bin.ReadInt16();                          bin.ReadInt16();                          bin.ReadByte();                          int value = bin.ReadByte();                          int height = bin.ReadByte();                            m_ItemData[i] = new ItemData(ReadNameString(bin)' flags' weight' quality' quantity' value' height' anim);                          m_HeightTable[i] = height;                      }                  }              }              else              {                  throw new FileNotFoundException();              }
Magic Number,OpenUO.Ultima,TileData,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\TileData\TileData.cs,ReadNameString,The following statement contains a magic number: bin.Read(m_StringBuffer' 0' 20);
Magic Number,OpenUO.Ultima,TileData,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\TileData\TileData.cs,ReadNameString,The following statement contains a magic number: for(count = 0; count < 20 && m_StringBuffer[count] != 0; ++count)              {              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The following statement contains a magic number: _blockWidth = width >> 3;
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The following statement contains a magic number: _blockHeight = height >> 3;
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The following statement contains a magic number: _emptyStaticBlock = new HuedTile[8][][];
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for(var i = 0; i < 8; ++i)              {                  _emptyStaticBlock[i] = new HuedTile[8][];                    for(var j = 0; j < 8; ++j)                  {                      _emptyStaticBlock[i][j] = new HuedTile[0];                  }              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for(var i = 0; i < 8; ++i)              {                  _emptyStaticBlock[i] = new HuedTile[8][];                    for(var j = 0; j < 8; ++j)                  {                      _emptyStaticBlock[i][j] = new HuedTile[0];                  }              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for(var i = 0; i < 8; ++i)              {                  _emptyStaticBlock[i] = new HuedTile[8][];                    for(var j = 0; j < 8; ++j)                  {                      _emptyStaticBlock[i][j] = new HuedTile[0];                  }              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,TileMatrix,The following statement contains a magic number: _invalidLandBlock = new Tile[196];
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,GetStaticTiles,The following statement contains a magic number: var tiles = GetStaticBlock(x >> 3' y >> 3);
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,GetStaticTiles,The following statement contains a magic number: var tiles = GetStaticBlock(x >> 3' y >> 3);
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,GetLandTile,The following statement contains a magic number: var tiles = GetLandBlock(x >> 3' y >> 3);
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,GetLandTile,The following statement contains a magic number: var tiles = GetLandBlock(x >> 3' y >> 3);
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,GetLandTile,The following statement contains a magic number: return tiles[((y & 0x7) << 3) + (x & 0x7)];
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: _reader.BaseStream.Seek(((x * _blockHeight) + y) * 12' SeekOrigin.Begin);
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: var count = length / 7;
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed(StaticTileData* pTiles = staTiles)              {                  NativeMethods._lread(_staticsStream.SafeFileHandle' pTiles' length);                    if(_hueTileLists == null)                  {                      _hueTileLists = new HuedTileList[8][];                        for(var i = 0; i < 8; ++i)                      {                          _hueTileLists[i] = new HuedTileList[8];                            for(var j = 0; j < 8; ++j)                          {                              _hueTileLists[i][j] = new HuedTileList();                          }                      }                  }                    var lists = _hueTileLists;                    StaticTileData* pCur = pTiles' pEnd = pTiles + count;                    while(pCur < pEnd)                  {                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                      ++pCur;                  }                    var tiles = new HuedTile[8][][];                    for(var i = 0; i < 8; ++i)                  {                      tiles[i] = new HuedTile[8][];                        for(var j = 0; j < 8; ++j)                      {                          tiles[i][j] = lists[i][j].ToArray();                      }                  }                    return tiles;              }
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: var offset = ((x * _blockHeight) + y) * 196 + 4;
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: var offset = ((x * _blockHeight) + y) * 196 + 4;
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: var tiles = new Tile[64];
Magic Number,OpenUO.Ultima,TileMatrix,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: fixed(Tile* pTiles = tiles)              {                  NativeMethods._lread(_map.SafeFileHandle' pTiles' 192);              }
Magic Number,OpenUO.Ultima,UOPIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,UOPIndex,The following statement contains a magic number: do                  {                      stream.Seek(nextTable' SeekOrigin.Begin);                      var count = _reader.ReadInt32();                      nextTable = _reader.ReadInt32();                      _reader.ReadInt32();                        for(var i = 0; i < count; ++i)                      {                          var offset = _reader.ReadInt32();                            if(offset == 0)                          {                              stream.Seek(30' SeekOrigin.Current);                              continue;                          }                            _reader.ReadInt64();                          var length = _reader.ReadInt32();                            entries.Add(new UOPEntry(offset' length));                            stream.Seek(18' SeekOrigin.Current);                      }                  } while(nextTable != 0 && nextTable < _length);
Magic Number,OpenUO.Ultima,UOPIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,UOPIndex,The following statement contains a magic number: do                  {                      stream.Seek(nextTable' SeekOrigin.Begin);                      var count = _reader.ReadInt32();                      nextTable = _reader.ReadInt32();                      _reader.ReadInt32();                        for(var i = 0; i < count; ++i)                      {                          var offset = _reader.ReadInt32();                            if(offset == 0)                          {                              stream.Seek(30' SeekOrigin.Current);                              continue;                          }                            _reader.ReadInt64();                          var length = _reader.ReadInt32();                            entries.Add(new UOPEntry(offset' length));                            stream.Seek(18' SeekOrigin.Current);                      }                  } while(nextTable != 0 && nextTable < _length);
Magic Number,OpenUO.Ultima,UOPIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for(var i = 0; i < entries.Count; ++i)                  {                      stream.Seek(entries[i].Offset + 2' SeekOrigin.Begin);                        int dataOffset = _reader.ReadInt16();                      entries[i].Offset += 4 + dataOffset;                        stream.Seek(dataOffset' SeekOrigin.Current);                      entries[i].Order = _reader.ReadInt32();                  }
Magic Number,OpenUO.Ultima,UOPIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for(var i = 0; i < entries.Count; ++i)                  {                      stream.Seek(entries[i].Offset + 2' SeekOrigin.Begin);                        int dataOffset = _reader.ReadInt16();                      entries[i].Offset += 4 + dataOffset;                        stream.Seek(dataOffset' SeekOrigin.Current);                      entries[i].Order = _reader.ReadInt32();                  }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var indexReader = new BinaryReader(fsIndex);                        var count = (int)(indexReader.BaseStream.Length / 4);                        for(var i = 0; i < count; ++i)                      {                          var blockID = indexReader.ReadInt32();                          var x = blockID / matrix.BlockHeight;                          var y = blockID % matrix.BlockHeight;                            fsData.Seek(4' SeekOrigin.Current);                            var tiles = new Tile[64];                            fixed(Tile* pTiles = tiles)                          {                              NativeMethods._lread(fsData.SafeFileHandle' pTiles' 192);                          }                            //matrix.SetLandBlock(x' y' tiles);                      }                        return count;                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var indexReader = new BinaryReader(fsIndex);                        var count = (int)(indexReader.BaseStream.Length / 4);                        for(var i = 0; i < count; ++i)                      {                          var blockID = indexReader.ReadInt32();                          var x = blockID / matrix.BlockHeight;                          var y = blockID % matrix.BlockHeight;                            fsData.Seek(4' SeekOrigin.Current);                            var tiles = new Tile[64];                            fixed(Tile* pTiles = tiles)                          {                              NativeMethods._lread(fsData.SafeFileHandle' pTiles' 192);                          }                            //matrix.SetLandBlock(x' y' tiles);                      }                        return count;                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var indexReader = new BinaryReader(fsIndex);                        var count = (int)(indexReader.BaseStream.Length / 4);                        for(var i = 0; i < count; ++i)                      {                          var blockID = indexReader.ReadInt32();                          var x = blockID / matrix.BlockHeight;                          var y = blockID % matrix.BlockHeight;                            fsData.Seek(4' SeekOrigin.Current);                            var tiles = new Tile[64];                            fixed(Tile* pTiles = tiles)                          {                              NativeMethods._lread(fsData.SafeFileHandle' pTiles' 192);                          }                            //matrix.SetLandBlock(x' y' tiles);                      }                        return count;                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var indexReader = new BinaryReader(fsIndex);                        var count = (int)(indexReader.BaseStream.Length / 4);                        for(var i = 0; i < count; ++i)                      {                          var blockID = indexReader.ReadInt32();                          var x = blockID / matrix.BlockHeight;                          var y = blockID % matrix.BlockHeight;                            fsData.Seek(4' SeekOrigin.Current);                            var tiles = new Tile[64];                            fixed(Tile* pTiles = tiles)                          {                              NativeMethods._lread(fsData.SafeFileHandle' pTiles' 192);                          }                            //matrix.SetLandBlock(x' y' tiles);                      }                        return count;                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,TileMatrixPatch,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Map\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using(var fsData = new FileStream(dataPath' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  using(var fsIndex = new FileStream(indexPath' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      using(var fsLookup = new FileStream(lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read))                      {                          var indexReader = new BinaryReader(fsIndex);                          var lookupReader = new BinaryReader(fsLookup);                            var count = (int)(indexReader.BaseStream.Length / 4);                            var lists = new HuedTileList[8][];                            for(var x = 0; x < 8; ++x)                          {                              lists[x] = new HuedTileList[8];                                for(var y = 0; y < 8; ++y)                              {                                  lists[x][y] = new HuedTileList();                              }                          }                            for(var i = 0; i < count; ++i)                          {                              var blockID = indexReader.ReadInt32();                              var blockX = blockID / matrix.BlockHeight;                              var blockY = blockID % matrix.BlockHeight;                                var offset = lookupReader.ReadInt32();                              var length = lookupReader.ReadInt32();                              lookupReader.ReadInt32(); // Extra                                if(offset < 0 || length <= 0)                              {                                  //matrix.SetStaticBlock(blockX' blockY' matrix.EmptyStaticBlock);                                  continue;                              }                                fsData.Seek(offset' SeekOrigin.Begin);                                var tileCount = length / 7;                                var staTiles = new StaticTileData[tileCount];                                fixed(StaticTileData* pTiles = staTiles)                              {                                  NativeMethods._lread(fsData.SafeFileHandle' pTiles' length);                                    StaticTileData* pCur = pTiles' pEnd = pTiles + tileCount;                                    while(pCur < pEnd)                                  {                                      lists[pCur->X & 0x7][pCur->Y & 0x7].Add((short)((pCur->Id & 0x3FFF) + 0x4000)' pCur->Hue' pCur->Z);                                      ++pCur;                                  }                                    var tiles = new HuedTile[8][][];                                    for(var x = 0; x < 8; ++x)                                  {                                      tiles[x] = new HuedTile[8][];                                        for(var y = 0; y < 8; ++y)                                      {                                          tiles[x][y] = lists[x][y].ToArray();                                      }                                  }                                    //matrix.SetStaticBlock(blockX' blockY' tiles);                              }                          }                            return count;                      }                  }              }
Magic Number,OpenUO.Ultima,UnicodeFont,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Fonts\UnicodeFont.cs,GetWidth,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                    if(c == 32)                  {                      width += 5;                  }                    width += Chars[c].Width;                  width += Chars[c].XOffset;              }
Magic Number,OpenUO.Ultima,UnicodeFont,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\Fonts\UnicodeFont.cs,GetWidth,The following statement contains a magic number: for(var i = 0; i < text.Length; ++i)              {                  var c = text[i] % 0x10000;                    if(c == 32)                  {                      width += 5;                  }                    width += Chars[c].Width;                  width += Chars[c].XOffset;              }
Missing Default,OpenUO.Ultima,UopFileIndex,C:\repos\fdsprod_OpenUO\OpenUO.Ultima\UopFileIndex.cs,CreateHash,The following switch statement is missing a default case: switch(s.Length - i)                  {                      case 12:                          esi += (uint)s[i + 11] << 24;                          goto case 11;                      case 11:                          esi += (uint)s[i + 10] << 16;                          goto case 10;                      case 10:                          esi += (uint)s[i + 9] << 8;                          goto case 9;                      case 9:                          esi += s[i + 8];                          goto case 8;                      case 8:                          edi += (uint)s[i + 7] << 24;                          goto case 7;                      case 7:                          edi += (uint)s[i + 6] << 16;                          goto case 6;                      case 6:                          edi += (uint)s[i + 5] << 8;                          goto case 5;                      case 5:                          edi += s[i + 4];                          goto case 4;                      case 4:                          ebx += (uint)s[i + 3] << 24;                          goto case 3;                      case 3:                          ebx += (uint)s[i + 2] << 16;                          goto case 2;                      case 2:                          ebx += (uint)s[i + 1] << 8;                          goto case 1;                      case 1:                          ebx += s[i];                          break;                  }
