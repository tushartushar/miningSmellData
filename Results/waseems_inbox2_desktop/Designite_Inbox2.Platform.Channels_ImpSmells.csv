Implementation smell,Namespace,Class,File,Method,Description
Long Method,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The method has 112 lines of code.
Long Method,Inbox2.Platform.Channels.Extensions,StringExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\StringExtensions.cs,StripHtml,The method has 156 lines of code.
Complex Method,Inbox2.Platform.Channels.Entities,SourceAddress,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddress.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,Cyclomatic complexity of the method is 8
Complex Method,Inbox2.Platform.Channels.Parsing,ChannelMessageParser,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Parsing\ChannelMessageParser.cs,From,Cyclomatic complexity of the method is 9
Long Parameter List,Inbox2.Platform.Channels.Connections,ChannelConnectionBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ChannelConnectionBase.cs,ChannelConnectionBase,The method has 5 parameters. Parameters: hostname' port' isSecured' username' password
Long Parameter List,Inbox2.Platform.Channels.Connections,ClientConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ClientConnectionPool.cs,AcquireLock,The method has 6 parameters. Parameters: instance' hostname' port' isSecured' username' password
Long Parameter List,Inbox2.Platform.Channels.Connections,CloudConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\CloudConnectionPool.cs,AcquireLock,The method has 6 parameters. Parameters: instance' hostname' port' isSecured' username' password
Long Parameter List,Inbox2.Platform.Channels.Connections,IConnectionPool,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\IConnectionPool.cs,AcquireLock,The method has 6 parameters. Parameters: instance' hostname' port' isSecured' username' password
Long Parameter List,Inbox2.Platform.Channels.Connections,PushConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\PushConnectionPool.cs,AcquireLock,The method has 6 parameters. Parameters: instance' hostname' port' isSecured' username' password
Long Parameter List,Inbox2.Platform.Channels.Connections,ConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ConnectionPool.cs,AcquireLock,The method has 6 parameters. Parameters: instance' hostname' port' isSecured' username' password
Long Parameter List,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,CalculateHash,The method has 5 parameters. Parameters: table' seed' buffer' start' size
Long Statement,Inbox2.Platform.Channels,ChannelInstance,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ChannelInstance.cs,BuildChannels,The length of the statement  "				StatusUpdatesChannel = ChannelBuilder.BuildWithCredentials<IClientStatusUpdatesChannel>(Configuration.StatusUpdatesChannel); " is 124.
Long Statement,Inbox2.Platform.Channels.Connections,ClientConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ClientConnectionPool.cs,AcquireLock,The length of the statement  "				var free = locks.Count(c => c.Value == false && c.Key.Hostname == hostname && c.Key.Port == port && c.Key.Username == username && c.Key.Password == password) > 0; " is 162.
Long Statement,Inbox2.Platform.Channels.Connections,ClientConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ClientConnectionPool.cs,AcquireLock,The length of the statement  "					var connection = locks.First(c => c.Value == false && c.Key.Hostname == hostname && c.Key.Port == port && c.Key.Username == username && c.Key.Password == password).Key; " is 168.
Long Statement,Inbox2.Platform.Channels.Connections,PushConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\PushConnectionPool.cs,AcquireLock,The length of the statement  "					var connection = list.FirstOrDefault(c => c.Hostname == hostname && c.Port == port && c.Username == username && c.Password == password); " is 136.
Long Statement,Inbox2.Platform.Channels.Extensions,StringExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\StringExtensions.cs,MakeLinksClickableForActivityView,The length of the statement  "               "<a onclick=\"newmessagemodal.emptymessage('${0}${1}')\">${0}${1}</a>"' RegexOptions.IgnoreCase | RegexOptions.Compiled); " is 121.
Long Statement,Inbox2.Platform.Channels.Extensions,StringExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\StringExtensions.cs,RemoveReplyText,The length of the statement  "            // Search for reply text for messages from Iphone Default Mail Client: On [DATE AND MORE] [NAME] wrote:[BODY]</blockquote> " is 122.
Long Statement,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthInterceptorBindingElement,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthInterceptorBindingElement.cs,BuildChannelFactory,The length of the statement  "			IChannelFactory<IRequestChannel> innerChannelFactory = (IChannelFactory<IRequestChannel>)base.BuildChannelFactory<TChannel>(context); " is 133.
Long Statement,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The length of the statement  "				binding.Elements.Add(new HttpsTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb " is 160.
Long Statement,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The length of the statement  "				binding.Elements.Add(new HttpTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb " is 159.
Complex Conditional,Inbox2.Platform.Channels.Connections,ClientConnectionPool<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ClientConnectionPool.cs,UnregisterAllInstances,The conditional expression  "c.Hostname == hostname && c.Port == port && c.Username == username && c.Password == password"  is complex.
Complex Conditional,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The conditional expression  "(dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")"  is complex.
Empty Catch Block,Inbox2.Platform.Channels.Text.Encoding,QuotedPrintableEncoding,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Encoding\QuotedPrintableEncoding.cs,QuotedPrintable2Unicode,The method has an empty catch block.
Magic Number,Inbox2.Platform.Channels.Connections,ConnectionPoolScavenger,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ConnectionPoolScavenger.cs,ConnectionPoolScavenger,The following statement contains a magic number: _ScavangerTimer = new Timer(1000);
Magic Number,Inbox2.Platform.Channels.Connections,ConnectionPoolScavenger,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Connections\ConnectionPoolScavenger.cs,ExtendLease,The following statement contains a magic number: lock (_SyncLock)  			{  				if (_Leases.ContainsKey(instance))  				{  					_Leases[instance].AddSeconds(_ExtendLeaseInSeconds);  				}  				else  				{  					_Leases.Add(instance' DateTime.Now.AddSeconds(15));  				}  			}
Magic Number,Inbox2.Platform.Channels.Entities,SourceAddressCollection,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddressCollection.cs,ToSummarizedString,The following statement contains a magic number: for (int i = 0; i < Count; i++)  			{  				var address = this[i];    				if (address == null)  					continue;    				if (String.IsNullOrEmpty(address.DisplayName))  				{					  					if (SourceAddress.IsValidEmail(address.Address))  					{  						// No display-name  						string[] parts = address.Address.Split('@');  						sb.Append(HttpUtility.HtmlEncode(parts[0]));  					}  					else  					{  						// Fallback' just add the address  						sb.Append(HttpUtility.HtmlEncode(address.ToString()));  					}  				}  				else  				{					  					if (SourceAddress.IsValidEmail(address.DisplayName))  					{  						// Display-name is an email address (we are being tricked)  						string[] parts = address.DisplayName.Split('@');  						sb.Append(HttpUtility.HtmlEncode(parts[0]));  					}  					else  					{  						// Have display-name' try parsing into first/lastname  						var name = PersonName.Parse(address.DisplayName);    						sb.Append(HttpUtility.HtmlEncode(name.Firstname));  					}					  				}    				if (i == 0 && Count > 3)  				{  					sb.Append(" ... ");    					// Jump to beforelast item  					i = Count - 3;  				}    				else if (i < Count - 1)  					sb.Append("' ");  			}
Magic Number,Inbox2.Platform.Channels.Entities,SourceAddressCollection,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddressCollection.cs,ToSummarizedString,The following statement contains a magic number: for (int i = 0; i < Count; i++)  			{  				var address = this[i];    				if (address == null)  					continue;    				if (String.IsNullOrEmpty(address.DisplayName))  				{					  					if (SourceAddress.IsValidEmail(address.Address))  					{  						// No display-name  						string[] parts = address.Address.Split('@');  						sb.Append(HttpUtility.HtmlEncode(parts[0]));  					}  					else  					{  						// Fallback' just add the address  						sb.Append(HttpUtility.HtmlEncode(address.ToString()));  					}  				}  				else  				{					  					if (SourceAddress.IsValidEmail(address.DisplayName))  					{  						// Display-name is an email address (we are being tricked)  						string[] parts = address.DisplayName.Split('@');  						sb.Append(HttpUtility.HtmlEncode(parts[0]));  					}  					else  					{  						// Have display-name' try parsing into first/lastname  						var name = PersonName.Parse(address.DisplayName);    						sb.Append(HttpUtility.HtmlEncode(name.Firstname));  					}					  				}    				if (i == 0 && Count > 3)  				{  					sb.Append(" ... ");    					// Jump to beforelast item  					i = Count - 3;  				}    				else if (i < Count - 1)  					sb.Append("' ");  			}
Magic Number,Inbox2.Platform.Channels.Entities,SourceAddressCollection,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddressCollection.cs,ToSummarizedString,The following statement contains a magic number: if (Count > 3)			  				sb.AppendFormat(" <em>and {0} other{1}</em>"' Count - 3' Count == 1 ? String.Empty : "s");
Magic Number,Inbox2.Platform.Channels.Entities,SourceAddressCollection,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddressCollection.cs,ToSummarizedString,The following statement contains a magic number: if (Count > 3)			  				sb.AppendFormat(" <em>and {0} other{1}</em>"' Count - 3' Count == 1 ? String.Empty : "s");
Magic Number,Inbox2.Platform.Channels.Entities,SourceAddress,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddress.cs,Parse,The following statement contains a magic number: if (rawAddress.Contains("<") && rawAddress.Contains(">"))  			{  				string[] parts = rawAddress.Split(new[] {'<'' '>'}' StringSplitOptions.RemoveEmptyEntries);    				if (parts.Length == 1)  				{  					this.Address = parts[0];  					this.DisplayName = parts[0];    					// See if the displayname is quoted' if so' remove the quotes  					if (DisplayName.StartsWith("\"") && DisplayName.EndsWith("\""))  						DisplayName = DisplayName.Substring(1' DisplayName.Length - 2);  				}  				if (parts.Length == 2)  				{					  					this.DisplayName = parts[0].Trim();  					this.Address = parts[1].Trim();    					// Can happen when you receive addresses like " <waseem@sadiq.nl>" (space in the beginning)  					if (String.IsNullOrEmpty(this.DisplayName))  						this.DisplayName = this.Address;    					// See if the displayname is quoted' if so' remove the quotes  					if (DisplayName.StartsWith("\"") && DisplayName.EndsWith("\""))  						DisplayName = DisplayName.Substring(1' DisplayName.Length - 2);    					return;  				}  			}  			else  			{  				this.DisplayName = rawAddress;  				this.Address = rawAddress;  			}
Magic Number,Inbox2.Platform.Channels.Entities,SourceAddress,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddress.cs,Parse,The following statement contains a magic number: if (rawAddress.Contains("<") && rawAddress.Contains(">"))  			{  				string[] parts = rawAddress.Split(new[] {'<'' '>'}' StringSplitOptions.RemoveEmptyEntries);    				if (parts.Length == 1)  				{  					this.Address = parts[0];  					this.DisplayName = parts[0];    					// See if the displayname is quoted' if so' remove the quotes  					if (DisplayName.StartsWith("\"") && DisplayName.EndsWith("\""))  						DisplayName = DisplayName.Substring(1' DisplayName.Length - 2);  				}  				if (parts.Length == 2)  				{					  					this.DisplayName = parts[0].Trim();  					this.Address = parts[1].Trim();    					// Can happen when you receive addresses like " <waseem@sadiq.nl>" (space in the beginning)  					if (String.IsNullOrEmpty(this.DisplayName))  						this.DisplayName = this.Address;    					// See if the displayname is quoted' if so' remove the quotes  					if (DisplayName.StartsWith("\"") && DisplayName.EndsWith("\""))  						DisplayName = DisplayName.Substring(1' DisplayName.Length - 2);    					return;  				}  			}  			else  			{  				this.DisplayName = rawAddress;  				this.Address = rawAddress;  			}
Magic Number,Inbox2.Platform.Channels.Entities,SourceAddress,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\SourceAddress.cs,Parse,The following statement contains a magic number: if (rawAddress.Contains("<") && rawAddress.Contains(">"))  			{  				string[] parts = rawAddress.Split(new[] {'<'' '>'}' StringSplitOptions.RemoveEmptyEntries);    				if (parts.Length == 1)  				{  					this.Address = parts[0];  					this.DisplayName = parts[0];    					// See if the displayname is quoted' if so' remove the quotes  					if (DisplayName.StartsWith("\"") && DisplayName.EndsWith("\""))  						DisplayName = DisplayName.Substring(1' DisplayName.Length - 2);  				}  				if (parts.Length == 2)  				{					  					this.DisplayName = parts[0].Trim();  					this.Address = parts[1].Trim();    					// Can happen when you receive addresses like " <waseem@sadiq.nl>" (space in the beginning)  					if (String.IsNullOrEmpty(this.DisplayName))  						this.DisplayName = this.Address;    					// See if the displayname is quoted' if so' remove the quotes  					if (DisplayName.StartsWith("\"") && DisplayName.EndsWith("\""))  						DisplayName = DisplayName.Substring(1' DisplayName.Length - 2);    					return;  				}  			}  			else  			{  				this.DisplayName = rawAddress;  				this.Address = rawAddress;  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: resp = tmp.Split(new char[] { ''' }' 2);
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: if (resp.Length == 2)  			{  				// there's week name  				dayName = resp[0];  				tmp = resp[1];  			}  			else dayName = "";
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following statement contains a magic number: try  			{  				// extract date and time  				int pos = tmp.LastIndexOf(" ");  				if (pos < 1) throw new FormatException("probably not a date");  				dpart = tmp.Substring(0' pos);  				timeZone = tmp.Substring(pos + 1);  				dt = Convert.ToDateTime(dpart);    				// check weekDay name  				// this must be done befor convert to GMT   				if (dayName != string.Empty)  				{  					if ((dt.DayOfWeek == DayOfWeek.Friday && dayName != "Fri") ||  						(dt.DayOfWeek == DayOfWeek.Monday && dayName != "Mon") ||  						(dt.DayOfWeek == DayOfWeek.Saturday && dayName != "Sat") ||  						(dt.DayOfWeek == DayOfWeek.Sunday && dayName != "Sun") ||  						(dt.DayOfWeek == DayOfWeek.Thursday && dayName != "Thu") ||  						(dt.DayOfWeek == DayOfWeek.Tuesday && dayName != "Tue") ||  						(dt.DayOfWeek == DayOfWeek.Wednesday && dayName != "Wed")  						)  						throw new FormatException("invalide week of day");  				}    				// adjust to localtime  				if (Regex.IsMatch(timeZone' "[+\\-][0-9][0-9][0-9][0-9]"))  				{  					// it's a modern ANSI style timezone  					int factor = 0;  					hour = timeZone.Substring(1' 2);  					minute = timeZone.Substring(3' 2);  					if (timeZone.Substring(0' 1) == "+") factor = -1;  					else if (timeZone.Substring(0' 1) == "-") factor = +1;  					else throw new FormatException("incorrect tiem zone");  					dt = dt.AddHours(factor * Convert.ToInt32(hour));  					dt = dt.AddMinutes(factor * Convert.ToInt32(minute));  				}  				else  				{  					// it's a old style military time zone ?  					switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}  				}  			}  			catch (Exception e)  			{  				throw new FormatException(string.Format("Invalide date:{0}:{1}"' e.Message' rfc2822date));  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToRelativeTime,The following statement contains a magic number: if (span.TotalDays > 3)  			{  				if (date.Year != DateTime.Now.Year)  					return date.ToString("ddd d MMM yyyy");  				else  					date.ToString("ddd d MMM");  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToRelativeTime,The following statement contains a magic number: if (span < TimeSpan.FromSeconds(0))  			{  				if (span.TotalSeconds < -60)  				{  					return String.Format("in {0} min"' Math.Abs(span.TotalMinutes).ToString("##.#"));  				}  				else  				{  					return String.Format("in {0} sec"' Math.Abs(span.TotalSeconds).ToString("##"));  				}  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToRelativeTime,The following statement contains a magic number: if (span <= TimeSpan.FromSeconds(60))  			{  				return span.Seconds + " sec ago";  			}  			else if (span <= TimeSpan.FromMinutes(60))  			{  				if (span.Minutes > 1)  				{  					return span.Minutes + " min ago";  				}  				else  				{  					return "a minute ago";  				}  			}  			else if (span <= TimeSpan.FromHours(24))  			{  				if (span.Hours > 1)  				{  					return span.Hours + " hrs ago";  				}  				else  				{  					return "an hour ago";  				}  			}  			else  			{  				if (span.Days > 1)  				{  					return span.Days + " days ago";  				}  				else  				{  					return "a day ago";  				}  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToRelativeTime,The following statement contains a magic number: if (span <= TimeSpan.FromSeconds(60))  			{  				return span.Seconds + " sec ago";  			}  			else if (span <= TimeSpan.FromMinutes(60))  			{  				if (span.Minutes > 1)  				{  					return span.Minutes + " min ago";  				}  				else  				{  					return "a minute ago";  				}  			}  			else if (span <= TimeSpan.FromHours(24))  			{  				if (span.Hours > 1)  				{  					return span.Hours + " hrs ago";  				}  				else  				{  					return "an hour ago";  				}  			}  			else  			{  				if (span.Days > 1)  				{  					return span.Days + " days ago";  				}  				else  				{  					return "a day ago";  				}  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToRelativeTime,The following statement contains a magic number: if (span <= TimeSpan.FromSeconds(60))  			{  				return span.Seconds + " sec ago";  			}  			else if (span <= TimeSpan.FromMinutes(60))  			{  				if (span.Minutes > 1)  				{  					return span.Minutes + " min ago";  				}  				else  				{  					return "a minute ago";  				}  			}  			else if (span <= TimeSpan.FromHours(24))  			{  				if (span.Hours > 1)  				{  					return span.Hours + " hrs ago";  				}  				else  				{  					return "an hour ago";  				}  			}  			else  			{  				if (span.Days > 1)  				{  					return span.Days + " days ago";  				}  				else  				{  					return "a day ago";  				}  			}
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToUnixTime,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToUnixTime,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).ToLocalTime();
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToUnixTime,The following statement contains a magic number: return ((((((ts.Days * 24) + ts.Hours) * 60) + ts.Minutes) * 60) + ts.Seconds);
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToUnixTime,The following statement contains a magic number: return ((((((ts.Days * 24) + ts.Hours) * 60) + ts.Minutes) * 60) + ts.Seconds);
Magic Number,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,ToUnixTime,The following statement contains a magic number: return ((((((ts.Days * 24) + ts.Hours) * 60) + ts.Minutes) * 60) + ts.Seconds);
Magic Number,Inbox2.Platform.Channels.Extensions,StreamExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\StreamExtensions.cs,CopyTo,The following statement contains a magic number: const int size = 4096;
Magic Number,Inbox2.Platform.Channels.Extensions,StreamExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\StreamExtensions.cs,CopyTo,The following statement contains a magic number: byte[] bytes = new byte[4096];
Magic Number,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The following statement contains a magic number: if (useHttps)  				binding.Elements.Add(new HttpsTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb  			else  				binding.Elements.Add(new HttpTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 });
Magic Number,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The following statement contains a magic number: if (useHttps)  				binding.Elements.Add(new HttpsTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb  			else  				binding.Elements.Add(new HttpTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 });
Magic Number,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The following statement contains a magic number: if (useHttps)  				binding.Elements.Add(new HttpsTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb  			else  				binding.Elements.Add(new HttpTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 });
Magic Number,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The following statement contains a magic number: if (useHttps)  				binding.Elements.Add(new HttpsTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb  			else  				binding.Elements.Add(new HttpTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 });
Magic Number,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The following statement contains a magic number: if (useHttps)  				binding.Elements.Add(new HttpsTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb  			else  				binding.Elements.Add(new HttpTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 });
Magic Number,Inbox2.Platform.Channels.ServiceModel.OAuth,OAuthRawMapper,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\ServiceModel\OAuth\OAuthRawMapper.cs,GetBinding,The following statement contains a magic number: if (useHttps)  				binding.Elements.Add(new HttpsTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 }); // MaxReceivedMessageSize = 3 Mb  			else  				binding.Elements.Add(new HttpTransportBindingElement { ManualAddressing = true' MaxReceivedMessageSize = (1024 * 1024) * 3 });
Magic Number,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,InitializeTable,The following statement contains a magic number: UInt32[] createTable = new UInt32[256];
Magic Number,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)  			{  				UInt32 entry = (UInt32)i;  				for (int j = 0; j < 8; j++)  					if ((entry & 1) == 1)  						entry = (entry >> 1) ^ polynomial;  					else  						entry = entry >> 1;  				createTable[i] = entry;  			}
Magic Number,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)  			{  				UInt32 entry = (UInt32)i;  				for (int j = 0; j < 8; j++)  					if ((entry & 1) == 1)  						entry = (entry >> 1) ^ polynomial;  					else  						entry = entry >> 1;  				createTable[i] = entry;  			}
Magic Number,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,CalculateHash,The following statement contains a magic number: for (int i = start; i < size; i++)  				unchecked  				{  					crc = (crc >> 8) ^ table[buffer[i] ^ crc & 0xff];  				}
Magic Number,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[]  			       	{  			       		(byte) ((x >> 24) & 0xff)'  			       		(byte) ((x >> 16) & 0xff)'  			       		(byte) ((x >> 8) & 0xff)'  			       		(byte) (x & 0xff)  			       	};
Magic Number,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[]  			       	{  			       		(byte) ((x >> 24) & 0xff)'  			       		(byte) ((x >> 16) & 0xff)'  			       		(byte) ((x >> 8) & 0xff)'  			       		(byte) (x & 0xff)  			       	};
Magic Number,Inbox2.Platform.Channels.Text,Crc32,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[]  			       	{  			       		(byte) ((x >> 24) & 0xff)'  			       		(byte) ((x >> 16) & 0xff)'  			       		(byte) ((x >> 8) & 0xff)'  			       		(byte) (x & 0xff)  			       	};
Magic Number,Inbox2.Platform.Channels.Text,Hashing,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Hashing.cs,ComputeSHA512,The following statement contains a magic number: return Convert.ToBase64String(buffer).Substring(0' 86);
Magic Number,Inbox2.Platform.Channels.Text,HenriFormatter,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\HenriFormatter.cs,HenriFormat,The following statement contains a magic number: StringBuilder result = new StringBuilder(format.Length * 2);
Magic Number,Inbox2.Platform.Channels.Text,NameValueParser,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\NameValueParser.cs,GetCollection,The following statement contains a magic number: foreach (var part in parts)  			{  				string[] kv = part.Split('=');    				string key;  				string value;    				if (kv.Length == 2)  				{  					key = kv[0];  					value = kv[1];  				}  				else  				{  					key = kv[0];  					kv[0] = String.Empty;  					value = String.Join(""' kv);  				}    				col.Add(key' value);  			}
Magic Number,Inbox2.Platform.Channels.Text,PersonName,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\PersonName.cs,Parse,The following statement contains a magic number: if (comma > -1)  			{  				string[] commaSep = fullname.Split(new[] { "'" }' StringSplitOptions.RemoveEmptyEntries);    				if (commaSep.Length != 2)  				{  					result.Firstname = Capitalize(fullname);    					return result;  				}    				result.Firstname = Capitalize(commaSep[0]);  				result.Lastname = Capitalize(commaSep[1]);    				return result;  			}
Magic Number,Inbox2.Platform.Channels.Text,PersonName,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\PersonName.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)  			{  				// Something like [jean-luc jesuis] [leleur]  				StringBuilder sb = new StringBuilder();  				for (int i = 0; i < parts.Length - 1; i++)  					sb.Append(parts[i] + " ");    				result.Firstname = Capitalize(sb.ToString().Trim());  				result.Lastname = Capitalize(parts[parts.Length - 1]);  				  				return result;  			}
Magic Number,Inbox2.Platform.Channels.Text.Encoding,QuotedPrintableEncoding,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Encoding\QuotedPrintableEncoding.cs,HexMatchEvaluator,The following statement contains a magic number: int dec = Convert.ToInt32(m.Groups[2].Value' 16);
Magic Number,Inbox2.Platform.Channels.Text.Encoding,QuotedPrintableEncoding,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Encoding\QuotedPrintableEncoding.cs,HexMatchEvaluator,The following statement contains a magic number: int dec = Convert.ToInt32(m.Groups[2].Value' 16);
Magic Number,Inbox2.Platform.Channels.Text.Encoding,QuotedPrintableEncoding,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Encoding\QuotedPrintableEncoding.cs,QuotedPrintable2Unicode,The following statement contains a magic number: while (i < decoded.Length - 2)  			{  				System.String decodedItem = null;  				if (decoded[i] == '=')  				{  					hexNumber = decoded.ToString(i + 1' 2);  					if (hexNumber.Equals(Environment.NewLine))  					{  						decodedItem = System.String.Empty;  						// Do not replace 3D(=)  					}  					else if (hexNumber.ToUpper().Equals("3D"))  					{  						decodedItem = null;  					}  					else  					{  						try  						{  							//TODO: this ugly workaround should disapear  							ch[0] = System.Convert.ToByte(hexNumber' 16);  							decodedItem = enc.GetString(ch);  						}  						catch (System.Exception) { }  					}  					if (decodedItem != null)  						decoded.Replace("=" + hexNumber' decodedItem);  				}  				if (decodedItem != null)  					i += decodedItem.Length;  				else  					i++;  			}
Magic Number,Inbox2.Platform.Channels.Text.Encoding,QuotedPrintableEncoding,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Encoding\QuotedPrintableEncoding.cs,QuotedPrintable2Unicode,The following statement contains a magic number: while (i < decoded.Length - 2)  			{  				System.String decodedItem = null;  				if (decoded[i] == '=')  				{  					hexNumber = decoded.ToString(i + 1' 2);  					if (hexNumber.Equals(Environment.NewLine))  					{  						decodedItem = System.String.Empty;  						// Do not replace 3D(=)  					}  					else if (hexNumber.ToUpper().Equals("3D"))  					{  						decodedItem = null;  					}  					else  					{  						try  						{  							//TODO: this ugly workaround should disapear  							ch[0] = System.Convert.ToByte(hexNumber' 16);  							decodedItem = enc.GetString(ch);  						}  						catch (System.Exception) { }  					}  					if (decodedItem != null)  						decoded.Replace("=" + hexNumber' decodedItem);  				}  				if (decodedItem != null)  					i += decodedItem.Length;  				else  					i++;  			}
Magic Number,Inbox2.Platform.Channels.Text.Encoding,QuotedPrintableEncoding,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Encoding\QuotedPrintableEncoding.cs,QuotedPrintable2Unicode,The following statement contains a magic number: while (i < decoded.Length - 2)  			{  				System.String decodedItem = null;  				if (decoded[i] == '=')  				{  					hexNumber = decoded.ToString(i + 1' 2);  					if (hexNumber.Equals(Environment.NewLine))  					{  						decodedItem = System.String.Empty;  						// Do not replace 3D(=)  					}  					else if (hexNumber.ToUpper().Equals("3D"))  					{  						decodedItem = null;  					}  					else  					{  						try  						{  							//TODO: this ugly workaround should disapear  							ch[0] = System.Convert.ToByte(hexNumber' 16);  							decodedItem = enc.GetString(ch);  						}  						catch (System.Exception) { }  					}  					if (decodedItem != null)  						decoded.Replace("=" + hexNumber' decodedItem);  				}  				if (decodedItem != null)  					i += decodedItem.Length;  				else  					i++;  			}
Missing Default,Inbox2.Platform.Channels.Entities,ChannelFolder,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Entities\ChannelFolder.cs,ToStorageFolder,The following switch statement is missing a default case: switch (FolderType)  			{  				case ChannelFolderType.Inbox:  					return Folders.Inbox;  				case ChannelFolderType.SentItems:  					return Folders.SentItems;  				case ChannelFolderType.Drafts:  					return Folders.Drafts;  				case ChannelFolderType.Trash:  					return Folders.Trash;  				case ChannelFolderType.Spam:  					return Folders.Spam;  				case ChannelFolderType.Archive:  					return Folders.Archive;  				case ChannelFolderType.Label:  					return Folders.Inbox;  			}
Missing Default,Inbox2.Platform.Channels.Extensions,DateTimeExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Extensions\DateTimeExtensions.cs,FromRFC2822String,The following switch statement is missing a default case: switch (timeZone)  					{  						case "A": dt = dt.AddHours(1); break;  						case "B": dt = dt.AddHours(2); break;  						case "C": dt = dt.AddHours(3); break;  						case "D": dt = dt.AddHours(4); break;  						case "E": dt = dt.AddHours(5); break;  						case "F": dt = dt.AddHours(6); break;  						case "G": dt = dt.AddHours(7); break;  						case "H": dt = dt.AddHours(8); break;  						case "I": dt = dt.AddHours(9); break;  						case "K": dt = dt.AddHours(10); break;  						case "L": dt = dt.AddHours(11); break;  						case "M": dt = dt.AddHours(12); break;  						case "N": dt = dt.AddHours(-1); break;  						case "O": dt = dt.AddHours(-2); break;  						case "P": dt = dt.AddHours(-3); break;  						case "Q": dt = dt.AddHours(-4); break;  						case "R": dt = dt.AddHours(-5); break;  						case "S": dt = dt.AddHours(-6); break;  						case "T": dt = dt.AddHours(-7); break;  						case "U": dt = dt.AddHours(-8); break;  						case "V": dt = dt.AddHours(-9); break;  						case "W": dt = dt.AddHours(-10); break;  						case "X": dt = dt.AddHours(-11); break;  						case "Y": dt = dt.AddHours(-12); break;  						case "Z":  						case "UT":  						case "GMT": break;    // It's UTC  						case "EST": dt = dt.AddHours(5); break;  						case "EDT": dt = dt.AddHours(4); break;  						case "CST": dt = dt.AddHours(6); break;  						case "CDT": dt = dt.AddHours(5); break;  						case "MST": dt = dt.AddHours(7); break;  						case "MDT": dt = dt.AddHours(6); break;  						case "PST": dt = dt.AddHours(8); break;  						case "PDT": dt = dt.AddHours(7); break;  					}
Missing Default,Inbox2.Platform.Channels.Text.Html,HtmlSanitizer,C:\repos\waseems_inbox2_desktop\Code\Platform\Channels\Text\Html\HtmlSanitizer.cs,WriteTo,The following switch statement is missing a default case: switch (node.NodeType)  			{  				case HtmlNodeType.Text:  					writer.WriteString(((HtmlTextNode)node).Text);  					break;    				case HtmlNodeType.Element:  					writer.WriteStartElement(node.Name);    					if (NodeVisited != null)  						NodeVisited(node.Name.ToLower()' node' writer);    					// Make links external  					if (node.Name.ToLower() == "a")  					{  						node.Attributes.Remove("target");  						node.Attributes.Append("target"' "_blank");											  					}  					else if (node.Name.ToLower() == "table")  					{  						if (node.Attributes["align"] != null)  							node.Attributes.Remove("align");    						if (node.Attributes["width"] != null)  							node.Attributes.Remove("width");  					}    					if (node.HasAttributes)  					{  						// we use _hashitems to make sure attributes are written only once  						foreach (string key in node.Attributes.Hashitems.Keys)  						{  							if (key.StartsWith("on"))  								continue;    							HtmlAttribute att = (HtmlAttribute)node.Attributes.Hashitems[key];  							writer.WriteAttributeString(att.XmlName' att.Value);  						}  					}    					if (node.HasChildNodes)  					{  						foreach (HtmlNode subnode in node.ChildNodes)  						{  							WriteTo(writer' subnode);  						}  					}  					writer.WriteEndElement();  					break;  			}
