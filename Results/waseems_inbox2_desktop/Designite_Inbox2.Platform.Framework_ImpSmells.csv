Implementation smell,Namespace,Class,File,Method,Description
Long Method,Inbox2.Platform.Framework.Extensions,ObjectDumper,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\ObjectDumper.cs,WriteObject,The method has 100 lines of code.
Complex Method,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateSignatureBase,Cyclomatic complexity of the method is 8
Complex Method,Inbox2.Platform.Framework.Text.CommandLine,Parser,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Text\CommandLine\Parser.cs,HandleSwitches,Cyclomatic complexity of the method is 9
Complex Method,Inbox2.Platform.Framework.Text.CommandLine,Parser,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Text\CommandLine\Parser.cs,Parser,Cyclomatic complexity of the method is 11
Complex Method,Inbox2.Platform.Framework.Text.iFilter,FilterReader,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Text\iFilter\FilterReader.cs,Read,Cyclomatic complexity of the method is 12
Long Parameter List,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateSignatureBase,The method has 10 parameters. Parameters: url' parameters' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' signatureType
Long Parameter List,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateSignature,The method has 9 parameters. Parameters: url' parameters' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce
Long Parameter List,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateSignature,The method has 10 parameters. Parameters: url' parameters' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' signatureType
Long Parameter List,Inbox2.Platform.Framework.OAuth,OAuthUriBuilder,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthUriBuilder.cs,Build,The method has 5 parameters. Parameters: source' consumerKey' consumerSecret' token' tokenSecret
Long Parameter List,Inbox2.Platform.Framework.Web,HttpServiceRequest,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\HttpServiceClient.cs,Send,The method has 5 parameters. Parameters: method' url' data' contentType' throwOnError
Long Statement,Inbox2.Platform.Framework.Extensions,ObjectExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\ObjectExtensions.cs,CreateFrom,The length of the statement  "					Logger.Error("Unable to deserialize property of type {0} with value {1}' Exception = {2}"' LogSource.Storage' property.PropertyType' value' ex); " is 144.
Long Statement,Inbox2.Platform.Framework.Interop,ThumbnailGenerator,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Interop\ThumbnailGenerator.cs,GenerateThumbnail,The length of the statement  "			if (version.Platform == PlatformID.Win32Windows || (version.Platform == PlatformID.Win32NT && version.Version.Major < 6)) " is 121.
Long Statement,Inbox2.Platform.Framework.Interop,ThumbnailGenerator,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Interop\ThumbnailGenerator.cs,GenerateThumbnail,The length of the statement  "				BitmapSource source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap' IntPtr.Zero' Int32Rect.Empty' " is 121.
Long Statement,Inbox2.Platform.Framework.Network.Client,ClientMessageDispatcher<R;T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Client\ClientMessageDispatcher.cs,Send,The length of the statement  "				Logger.Error("An error has occured while trying to connect to the AppServer. Exception = {0}"' LogSource.AppServer' ex); " is 120.
Long Statement,Inbox2.Platform.Framework.Network.Server,NetworkMessageHost,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Server\NetworkMessageHost.cs,OnAccept,The length of the statement  "					Logger.Error("An error has occured while trying to receive data from the client. Exception = {0}"' LogSource.AppServer' ex); " is 124.
Long Statement,Inbox2.Platform.Framework.Network.Server,NetworkMessageHost,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Server\NetworkMessageHost.cs,OnAccept,The length of the statement  "				Logger.Error("An error has occured while trying to accept a new connection from the client. Exception = {0}"' LogSource.AppServer' ex); " is 135.
Long Statement,Inbox2.Platform.Framework.Network.Server,NetworkMessageHost,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Server\NetworkMessageHost.cs,OnReceive,The length of the statement  "				Logger.Error("An error has occured while trying to receive data from the client. Exception = {0}"' LogSource.AppServer' ex); " is 124.
Long Statement,Inbox2.Platform.Framework.Network.Server,NetworkMessageHost,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Server\NetworkMessageHost.cs,OnSend,The length of the statement  "				Logger.Error("An error has occured while trying to receive data from the client. Exception = {0}"' LogSource.AppServer' ex); " is 124.
Long Statement,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateSignature,The length of the statement  "			return GenerateSignature(url' parameters' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' SignatureTypes.HMACSHA1); " is 146.
Long Statement,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateSignature,The length of the statement  "					string signatureBase = GenerateSignatureBase(url' parameters' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' HMACSHA1SignatureType); " is 164.
Long Statement,Inbox2.Platform.Framework.OAuth,OAuthUriBuilder,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthUriBuilder.cs,Build,The length of the statement  "			string signature = oauth.GenerateSignature(source' parameters' consumerKey' consumerSecret' token' tokenSecret' "POST"' timeStamp' nonce' OAuthBase.SignatureTypes.HMACSHA1); " is 173.
Long Statement,Inbox2.Platform.Framework.Text.iFilter,ComHelper,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Text\iFilter\ComHelper.cs,GetClassFactoryFromDll,The length of the statement  "			DllGetClassObject dllGetClassObject=(DllGetClassObject)Marshal.GetDelegateForFunctionPointer(dllGetClassObjectPtr' typeof(DllGetClassObject)); " is 142.
Long Statement,Inbox2.Platform.Framework.Web,HttpServiceRequest,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\HttpServiceClient.cs,Send,The length of the statement  "				Logger.Error("An error has occured while calling url. Url = {0}' Data = {1}' Exception = {2}' Message = {3}"' LogSource.ServiceCall' url' data' ex' message); " is 157.
Long Statement,Inbox2.Platform.Framework.Web,HttpServiceRequest,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\HttpServiceClient.cs,Post,The length of the statement  "				Logger.Error("An error has occured while calling url. Url = {0}' Data = {1}' Exception = {2}' Message = {3}"' LogSource.ServiceCall' url' data' ex' message); " is 157.
Long Statement,Inbox2.Platform.Framework.Web,HttpStatusClient,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\HttpStatusClient.cs,GetStatusCode,The length of the statement  "				Logger.Error("An error has occured while checking the http status code. Url = '{0}'' Exception = {1}"' LogSource.Channel' url' ex); " is 131.
Complex Conditional,Inbox2.Platform.Framework.ServiceModel.Extensions,XmlManglingWriter,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\ServiceModel\Extensions\XmlManglingWriter.cs,WriteStartAttribute,The conditional expression  "prefix.CompareTo("xmlns") == 0 || localName.CompareTo("xmlns") == 0  				|| prefix.CompareTo("nil") == 0 || localName.CompareTo("nil") == 0"  is complex.
Complex Conditional,Inbox2.Platform.Framework.Text.CommandLine,SwitchRecord,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Text\CommandLine\Parser.cs,SwitchRecord,The conditional expression  "type == typeof(bool) ||  					  type == typeof(string) ||  					  type == typeof(int) ||  					  type.IsEnum"  is complex.
Empty Catch Block,Inbox2.Platform.Framework.Collections,AdvancedObservableCollection<T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Collections\AdvancedObservableCollection.cs,OnCollectionChanged,The method has an empty catch block.
Empty Catch Block,Inbox2.Platform.Framework.Network.Client,ClientMessageDispatcher<R;T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Client\ClientMessageDispatcher.cs,Send,The method has an empty catch block.
Empty Catch Block,Inbox2.Platform.Framework.Network.Client,ClientMessageDispatcher<R;T>,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Client\ClientMessageDispatcher.cs,Send,The method has an empty catch block.
Empty Catch Block,Inbox2.Platform.Framework.Network,SocketConnection,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\SocketConnection.cs,Close,The method has an empty catch block.
Magic Number,Inbox2.Platform.Framework.Extensions,GuidExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\GuidExtensions.cs,GetHash,The following statement contains a magic number: return GetHash(guid' 12);
Magic Number,Inbox2.Platform.Framework.Extensions,ObjectDumper,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\ObjectDumper.cs,Write,The following statement contains a magic number: Write(element' 5);
Magic Number,Inbox2.Platform.Framework.Extensions,ObjectDumper,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\ObjectDumper.cs,WriteTab,The following statement contains a magic number: while (pos % 8 != 0) Write(" ");
Magic Number,Inbox2.Platform.Framework.Extensions,StreamExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\StreamExtensions.cs,CopyTo,The following statement contains a magic number: const int size = 4096;
Magic Number,Inbox2.Platform.Framework.Extensions,StreamExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\StreamExtensions.cs,CopyTo,The following statement contains a magic number: byte[] bytes = new byte[4096];
Magic Number,Inbox2.Platform.Framework.Extensions,StringExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\StringExtensions.cs,JsEncode,The following statement contains a magic number: foreach (char c in source)  			{  				switch (c)  				{  					case '\"':  						sb.Append("\\\"");  						break;  					case '\\':  						sb.Append("\\\\");  						break;  					case '\b':  						sb.Append("\\b");  						break;  					case '\f':  						sb.Append("\\f");  						break;  					case '\n':  						sb.Append("\\n");  						break;  					case '\r':  						sb.Append("\\r");  						break;  					case '\t':  						sb.Append("\\t");  						break;  					default:  						int i = (int)c;  						if (i < 32 || i > 127)  						{  							sb.AppendFormat("\\u{0:X04}"' i);  						}  						else  						{  							sb.Append(c);  						}  						break;  				}  			}
Magic Number,Inbox2.Platform.Framework.Extensions,StringExtensions,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Extensions\StringExtensions.cs,JsEncode,The following statement contains a magic number: foreach (char c in source)  			{  				switch (c)  				{  					case '\"':  						sb.Append("\\\"");  						break;  					case '\\':  						sb.Append("\\\\");  						break;  					case '\b':  						sb.Append("\\b");  						break;  					case '\f':  						sb.Append("\\f");  						break;  					case '\n':  						sb.Append("\\n");  						break;  					case '\r':  						sb.Append("\\r");  						break;  					case '\t':  						sb.Append("\\t");  						break;  					default:  						int i = (int)c;  						if (i < 32 || i > 127)  						{  							sb.AppendFormat("\\u{0:X04}"' i);  						}  						else  						{  							sb.Append(c);  						}  						break;  				}  			}
Magic Number,Inbox2.Platform.Framework.Interop,ThumbnailGenerator,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Interop\ThumbnailGenerator.cs,GenerateThumbnail,The following statement contains a magic number: if (version.Platform == PlatformID.Win32Windows || (version.Platform == PlatformID.Win32NT && version.Version.Major < 6))  			{  				BitmapFrame bi = BitmapFrame.Create(new Uri(filename)' BitmapCreateOptions.None' BitmapCacheOption.OnLoad);  				return bi.Thumbnail;  			}
Magic Number,Inbox2.Platform.Framework.Interop,ThumbnailGenerator,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Interop\ThumbnailGenerator.cs,GenerateThumbnail,The following statement contains a magic number: try  			{  				Guid uuid = new Guid("43826d1e-e718-42ee-bc55-a1e261c37bfe");    				// Create an IShellItem from the filename.  				UnsafeNativeMethods.SHCreateItemFromParsingName(Path.GetFullPath(filename)' IntPtr.Zero' uuid' out ppsi);    				// Get the thumbnail image.  				((IShellItemImageFactory)ppsi).GetImage(new SIZE(256' 256)' 0x0' out hbitmap);    				BitmapSource source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap' IntPtr.Zero' Int32Rect.Empty'  					BitmapSizeOptions.FromEmptyOptions());    				// No resize needed  				return source;  			}  			finally  			{  				// Release COM stuff to avoid memory leaks.  				if (ppsi != null)  					Marshal.ReleaseComObject(ppsi);    				if (hbitmap != IntPtr.Zero)  					Marshal.Release(hbitmap);  			}
Magic Number,Inbox2.Platform.Framework.Interop,ThumbnailGenerator,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Interop\ThumbnailGenerator.cs,GenerateThumbnail,The following statement contains a magic number: try  			{  				Guid uuid = new Guid("43826d1e-e718-42ee-bc55-a1e261c37bfe");    				// Create an IShellItem from the filename.  				UnsafeNativeMethods.SHCreateItemFromParsingName(Path.GetFullPath(filename)' IntPtr.Zero' uuid' out ppsi);    				// Get the thumbnail image.  				((IShellItemImageFactory)ppsi).GetImage(new SIZE(256' 256)' 0x0' out hbitmap);    				BitmapSource source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hbitmap' IntPtr.Zero' Int32Rect.Empty'  					BitmapSizeOptions.FromEmptyOptions());    				// No resize needed  				return source;  			}  			finally  			{  				// Release COM stuff to avoid memory leaks.  				if (ppsi != null)  					Marshal.ReleaseComObject(ppsi);    				if (hbitmap != IntPtr.Zero)  					Marshal.Release(hbitmap);  			}
Magic Number,Inbox2.Platform.Framework.Network,SocketConnection,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\SocketConnection.cs,SocketConnection,The following statement contains a magic number: this.dataBuffer = new byte[4194304];
Magic Number,Inbox2.Platform.Framework.Network.Server,NetworkMessageHost,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Server\NetworkMessageHost.cs,Start,The following statement contains a magic number: listener.Listen(1000);
Magic Number,Inbox2.Platform.Framework.Network.Utils,BufferManager,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Utils\BufferManager.cs,BufferManager,The following statement contains a magic number: Current = new BufferManager(8' 1024' 100);
Magic Number,Inbox2.Platform.Framework.Network.Utils,BufferManager,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Utils\BufferManager.cs,BufferManager,The following statement contains a magic number: Current = new BufferManager(8' 1024' 100);
Magic Number,Inbox2.Platform.Framework.Network.Utils,BufferManager,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Network\Utils\BufferManager.cs,BufferManager,The following statement contains a magic number: Current = new BufferManager(8' 1024' 100);
Magic Number,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateTimeStamp,The following statement contains a magic number: TimeSpan t = (DateTime.UtcNow - new DateTime(1970' 1' 1));
Magic Number,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next(123400' 9999999).ToString();
Magic Number,Inbox2.Platform.Framework.OAuth,OAuthBase,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next(123400' 9999999).ToString();
Magic Number,Inbox2.Platform.Framework.OAuth,OAuthUriBuilder,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\OAuth\OAuthUriBuilder.cs,Build,The following statement contains a magic number: StringBuilder requestBuilder = new StringBuilder(512);
Magic Number,Inbox2.Platform.Framework.Text.iFilter,FilterReader,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Text\iFilter\FilterReader.cs,Read,The following statement contains a magic number: while (!_done && charsRead<count)  			{  				if (_charsLeftFromLastRead!=null)  				{  					int charsToCopy=(_charsLeftFromLastRead.Length<count-charsRead)?_charsLeftFromLastRead.Length:count-charsRead;  					Array.Copy(_charsLeftFromLastRead'0' array' offset+charsRead' charsToCopy);  					charsRead+=charsToCopy;  					if (charsToCopy<_charsLeftFromLastRead.Length)  					{  						char[] tmp=new char[_charsLeftFromLastRead.Length-charsToCopy];  						Array.Copy(_charsLeftFromLastRead' charsToCopy' tmp' 0' tmp.Length);  						_charsLeftFromLastRead=tmp;  					}  					else  						_charsLeftFromLastRead=null;  					continue;  				};    				if (!_currentChunkValid)  				{  					IFilterReturnCode res=_filter.GetChunk(out _currentChunk);  					_currentChunkValid=(res==IFilterReturnCode.S_OK) && ((_currentChunk.flags & CHUNKSTATE.CHUNK_TEXT)!=0);    					if (res==IFilterReturnCode.FILTER_E_END_OF_CHUNKS)  						endOfChunksCount++;    					if (endOfChunksCount>1)  						_done=true; //That's it. no more chuncks available  				}    				if (_currentChunkValid)  				{  					uint bufLength=(uint)(count-charsRead);  					if (bufLength<8192)  						bufLength=8192; //Read ahead    					char[] buffer=new char[bufLength];  					IFilterReturnCode res=_filter.GetText(ref bufLength' buffer);  					if (res==IFilterReturnCode.S_OK || res==IFilterReturnCode.FILTER_S_LAST_TEXT)  					{  						int cRead=(int)bufLength;  						if (cRead+charsRead>count)  						{  							int charsLeft=(cRead+charsRead-count);  							_charsLeftFromLastRead=new char[charsLeft];  							Array.Copy(buffer' cRead-charsLeft' _charsLeftFromLastRead' 0' charsLeft);  							cRead-=charsLeft;  						}  						else  							_charsLeftFromLastRead=null;    						Array.Copy(buffer' 0' array' offset+charsRead' cRead);  						charsRead+=cRead;  					}    					if (res==IFilterReturnCode.FILTER_S_LAST_TEXT || res==IFilterReturnCode.FILTER_E_NO_MORE_TEXT)  						_currentChunkValid=false;  				}  			}
Magic Number,Inbox2.Platform.Framework.Text.iFilter,FilterReader,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Text\iFilter\FilterReader.cs,Read,The following statement contains a magic number: while (!_done && charsRead<count)  			{  				if (_charsLeftFromLastRead!=null)  				{  					int charsToCopy=(_charsLeftFromLastRead.Length<count-charsRead)?_charsLeftFromLastRead.Length:count-charsRead;  					Array.Copy(_charsLeftFromLastRead'0' array' offset+charsRead' charsToCopy);  					charsRead+=charsToCopy;  					if (charsToCopy<_charsLeftFromLastRead.Length)  					{  						char[] tmp=new char[_charsLeftFromLastRead.Length-charsToCopy];  						Array.Copy(_charsLeftFromLastRead' charsToCopy' tmp' 0' tmp.Length);  						_charsLeftFromLastRead=tmp;  					}  					else  						_charsLeftFromLastRead=null;  					continue;  				};    				if (!_currentChunkValid)  				{  					IFilterReturnCode res=_filter.GetChunk(out _currentChunk);  					_currentChunkValid=(res==IFilterReturnCode.S_OK) && ((_currentChunk.flags & CHUNKSTATE.CHUNK_TEXT)!=0);    					if (res==IFilterReturnCode.FILTER_E_END_OF_CHUNKS)  						endOfChunksCount++;    					if (endOfChunksCount>1)  						_done=true; //That's it. no more chuncks available  				}    				if (_currentChunkValid)  				{  					uint bufLength=(uint)(count-charsRead);  					if (bufLength<8192)  						bufLength=8192; //Read ahead    					char[] buffer=new char[bufLength];  					IFilterReturnCode res=_filter.GetText(ref bufLength' buffer);  					if (res==IFilterReturnCode.S_OK || res==IFilterReturnCode.FILTER_S_LAST_TEXT)  					{  						int cRead=(int)bufLength;  						if (cRead+charsRead>count)  						{  							int charsLeft=(cRead+charsRead-count);  							_charsLeftFromLastRead=new char[charsLeft];  							Array.Copy(buffer' cRead-charsLeft' _charsLeftFromLastRead' 0' charsLeft);  							cRead-=charsLeft;  						}  						else  							_charsLeftFromLastRead=null;    						Array.Copy(buffer' 0' array' offset+charsRead' cRead);  						charsRead+=cRead;  					}    					if (res==IFilterReturnCode.FILTER_S_LAST_TEXT || res==IFilterReturnCode.FILTER_E_NO_MORE_TEXT)  						_currentChunkValid=false;  				}  			}
Magic Number,Inbox2.Platform.Framework.Web,HttpStatusClient,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\HttpStatusClient.cs,GetStatusCode,The following statement contains a magic number: try  			{  				string host = String.Empty;  				string path = String.Empty;  				int pos = 0;    				  // parse up the request string  				if (url.StartsWith ("http://"))  					host = url.Substring (7);    				else  					host = url;  				  				// split at the first path delimiter  				if (-1 != (pos = host.IndexOf ('/')))  				{   					path = host.Substring (pos);  					host = host.Substring(0' pos);  				}  				  				// make sure path is correct  				if (String.IsNullOrEmpty (path) || !path.StartsWith ("/"))  					path = String.Concat ("/"' (path ?? ""));  				  				// connect to server   				var sock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  				sock.Blocking = true;    				// Build headers string  				StringBuilder sb = new StringBuilder();				  				if (headers.Count > 0)  				{  					sb.AppendLine();    					foreach (var key in headers.Keys)  						sb.AppendFormat("{0}: {1}{2}"' key' headers[key]' Environment.NewLine);  				}    				// build request  				string request = String.Format (  @"GET {0} HTTP/1.0  HOST: {1}{2}    "' path' host' sb);    				// Convert the string data to byte data using ASCII encoding  				sock.Connect(host' 80);  				sock.Send(Encoding.ASCII.GetBytes (request));    				byte[] receiveBuffer = new byte[1024];  				int received = sock.Receive(receiveBuffer);  				string response = Encoding.ASCII.GetString(receiveBuffer' 0' received);    				// read the first line from the response and read the statuscode  				string[] lines = response.Split('\n');  				string[] parts = lines.First().Split(' ');    				return Int32.Parse(parts[1]);  			}  			catch (Exception ex)  			{				  				Logger.Error("An error has occured while checking the http status code. Url = '{0}'' Exception = {1}"' LogSource.Channel' url' ex);    				return null;				  			}
Magic Number,Inbox2.Platform.Framework.Web,HttpStatusClient,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\HttpStatusClient.cs,GetStatusCode,The following statement contains a magic number: try  			{  				string host = String.Empty;  				string path = String.Empty;  				int pos = 0;    				  // parse up the request string  				if (url.StartsWith ("http://"))  					host = url.Substring (7);    				else  					host = url;  				  				// split at the first path delimiter  				if (-1 != (pos = host.IndexOf ('/')))  				{   					path = host.Substring (pos);  					host = host.Substring(0' pos);  				}  				  				// make sure path is correct  				if (String.IsNullOrEmpty (path) || !path.StartsWith ("/"))  					path = String.Concat ("/"' (path ?? ""));  				  				// connect to server   				var sock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  				sock.Blocking = true;    				// Build headers string  				StringBuilder sb = new StringBuilder();				  				if (headers.Count > 0)  				{  					sb.AppendLine();    					foreach (var key in headers.Keys)  						sb.AppendFormat("{0}: {1}{2}"' key' headers[key]' Environment.NewLine);  				}    				// build request  				string request = String.Format (  @"GET {0} HTTP/1.0  HOST: {1}{2}    "' path' host' sb);    				// Convert the string data to byte data using ASCII encoding  				sock.Connect(host' 80);  				sock.Send(Encoding.ASCII.GetBytes (request));    				byte[] receiveBuffer = new byte[1024];  				int received = sock.Receive(receiveBuffer);  				string response = Encoding.ASCII.GetString(receiveBuffer' 0' received);    				// read the first line from the response and read the statuscode  				string[] lines = response.Split('\n');  				string[] parts = lines.First().Split(' ');    				return Int32.Parse(parts[1]);  			}  			catch (Exception ex)  			{				  				Logger.Error("An error has occured while checking the http status code. Url = '{0}'' Exception = {1}"' LogSource.Channel' url' ex);    				return null;				  			}
Magic Number,Inbox2.Platform.Framework.Web,HttpStatusClient,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\HttpStatusClient.cs,GetStatusCode,The following statement contains a magic number: try  			{  				string host = String.Empty;  				string path = String.Empty;  				int pos = 0;    				  // parse up the request string  				if (url.StartsWith ("http://"))  					host = url.Substring (7);    				else  					host = url;  				  				// split at the first path delimiter  				if (-1 != (pos = host.IndexOf ('/')))  				{   					path = host.Substring (pos);  					host = host.Substring(0' pos);  				}  				  				// make sure path is correct  				if (String.IsNullOrEmpty (path) || !path.StartsWith ("/"))  					path = String.Concat ("/"' (path ?? ""));  				  				// connect to server   				var sock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  				sock.Blocking = true;    				// Build headers string  				StringBuilder sb = new StringBuilder();				  				if (headers.Count > 0)  				{  					sb.AppendLine();    					foreach (var key in headers.Keys)  						sb.AppendFormat("{0}: {1}{2}"' key' headers[key]' Environment.NewLine);  				}    				// build request  				string request = String.Format (  @"GET {0} HTTP/1.0  HOST: {1}{2}    "' path' host' sb);    				// Convert the string data to byte data using ASCII encoding  				sock.Connect(host' 80);  				sock.Send(Encoding.ASCII.GetBytes (request));    				byte[] receiveBuffer = new byte[1024];  				int received = sock.Receive(receiveBuffer);  				string response = Encoding.ASCII.GetString(receiveBuffer' 0' received);    				// read the first line from the response and read the statuscode  				string[] lines = response.Split('\n');  				string[] parts = lines.First().Split(' ');    				return Int32.Parse(parts[1]);  			}  			catch (Exception ex)  			{				  				Logger.Error("An error has occured while checking the http status code. Url = '{0}'' Exception = {1}"' LogSource.Channel' url' ex);    				return null;				  			}
Magic Number,Inbox2.Platform.Framework.Web.Upload,HttpUploadHelper,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\Upload\HttpUploadHelper.cs,Upload,The following statement contains a magic number: try              {                  foreach (string key in form.AllKeys)                  {                      var part = new StringMimePart();                        part.Headers["Content-Disposition"] = "form-data; name=\"" + key + "\"";  					// MWA fix: always send the values as url decoded                      part.StringData = HttpUtility.UrlDecode(form[key]);                        mimeParts.Add(part);                  }                    var nameIndex = 0;                    foreach (var file in files)                  {                      var part = new StreamMimePart();                        if (string.IsNullOrEmpty(file.FieldName))                          file.FieldName = "file" + nameIndex++;                        part.Headers["Content-Disposition"] = "form-data; name=\"" + file.FieldName + "\"; filename=\"" + file.FileName + "\"";                      part.Headers["Content-Type"] = file.ContentType;                        part.SetStream(file.Data);                        mimeParts.Add(part);                  }                    string boundary = "----------" + DateTime.Now.Ticks.ToString("x");                    req.ContentType = "multipart/form-data; boundary=" + boundary;                  req.Method = "POST";                	byte[] footer = Encoding.UTF8.GetBytes("--" + boundary + "--\r\n");                	long contentLength = mimeParts.Sum(part => part.GenerateHeaderFooterData(boundary));                	req.ContentLength = contentLength + footer.Length;                    var buffer = new byte[8192];                  var afterFile = Encoding.UTF8.GetBytes("\r\n");                	using (var s = req.GetRequestStream())                  {                      foreach (var part in mimeParts)                      {                          s.Write(part.Header' 0' part.Header.Length);                        	int read;                      	while ((read = part.Data.Read(buffer' 0' buffer.Length)) > 0)                              s.Write(buffer' 0' read);                            part.Data.Dispose();                            s.Write(afterFile' 0' afterFile.Length);                      }                        s.Write(footer' 0' footer.Length);                  }                    return (HttpWebResponse)req.GetResponse();              }              catch              {                  foreach (MimePart part in mimeParts)                      if (part.Data != null)                          part.Data.Dispose();                    throw;              }
Magic Number,Inbox2.Platform.Framework.Web.Upload,MimePart,C:\repos\waseems_inbox2_desktop\Code\Platform\Framework\Web\Upload\MimePart.cs,GenerateHeaderFooterData,The following statement contains a magic number: return _header.Length + Data.Length + 2;
