Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,Inbox2.Core.Threading.Tasks.Receive,ProcessLabelsTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ProcessLabelsTask.cs,ExecuteCore,Cyclomatic complexity of the method is 9
Complex Method,Inbox2.Core.Threading.Tasks.Receive,ReceiveMessageDetailsTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveMessageDetailsTask.cs,ExecuteCore,Cyclomatic complexity of the method is 9
Complex Method,Inbox2.Core.Threading.Tasks.Receive,UpdateMessageStateTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\UpdateMessageStateTask.cs,ExecuteCore,Cyclomatic complexity of the method is 11
Long Statement,Inbox2.Core.Threading.Commands,SendMessageCommand,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Commands\SendMessageCommand.cs,SendCloudMessage,The length of the statement  "			var data = String.Format("wrap_access_token={0}&targetchannelkey={1}&from={2}&to={3}&cc={4}&bcc={5}&subject={6}&inreplyto={7}&conversationidentifier={8}&body={9}"' " is 163.
Long Statement,Inbox2.Core.Threading.Commands,SyncEntityCommand,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Commands\SyncEntityCommand.cs,ExecuteCore,The length of the statement  "					Logger.Error("An error has occured while executing cloud command. Error = {0}"' LogSource.Command' stream.ReadString()); " is 120.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,Execute,The length of the statement  "				Logger.Warn("Contact for channelprofilekey [{0}] has an empty name and an invalid sourceaddress' ignoring entry"' LogSource.Sync' contact.Profile.ChannelProfileKey); " is 165.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,Execute,The length of the statement  "				Logger.Debug("Profile for person [{0}] did not have a valid ChannelProfileKey' ignoring entry"' LogSource.Sync' contact.Person.Name); " is 133.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,Execute,The length of the statement  "				Logger.Warn("Contact for channelprofilekey [{0}] has an invalid sourceaddress' ignoring entry"' LogSource.Sync' contact.Profile.ChannelProfileKey); " is 147.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,Execute,The length of the statement  "					Logger.Debug("Found soft profile [{0}] for person [{1}] on address match [{2}]' removing from mailbox and recreating new one..."' LogSource.Sync' " is 145.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,Execute,The length of the statement  "				Logger.Debug("Found new profile [{0}] for person [{1}]"' LogSource.Sync' contact.Profile.ChannelProfileKey' contact.Person.Name); " is 129.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,Execute,The length of the statement  "				profile = mailbox.Profiles.FirstOrDefault(p => p.Address.Equals(contact.Profile.SourceAddress.Address' StringComparison.InvariantCultureIgnoreCase)); " is 149.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,FindPersonByName,The length of the statement  "			person = mailbox.Persons.FirstOrDefault(p => p.Name.Equals(contact.Person.Name' StringComparison.InvariantCultureIgnoreCase) " is 124.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,SaveProfile,The length of the statement  "					(channelContact.Profile.ChannelAvatar.ContentStream != null || !String.IsNullOrEmpty(channelContact.Profile.ChannelAvatar.Url))) " is 128.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,SaveProfile,The length of the statement  "				Logger.Error("An error occured while trying to save avatar. ChannelProfileKey = {0} Exception = {1}"' LogSource.Sync' channelContact.Profile.ChannelProfileKey' ex); " is 164.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,SaveProfile,The length of the statement  "			Logger.Debug("Profile saved successfully in ContactMatcher. Person = {0}' Profile.SourceAddress = {1}"' LogSource.Sync' person.PersonId' profile.SourceAddress); " is 160.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnConversationId,The length of the statement  "			Logger.Debug("MatchOnConversationId: Message {0} had ConversationIdentifier {1}"' LogSource.MessageMatcher' message' message.ConversationIdentifier); " is 149.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnConversationId,The length of the statement  "				Logger.Debug("MatchOnConversationId: Conversation did not exist' creating a new one with ConversationIdentifier {0}"' LogSource.MessageMatcher' message.ConversationIdentifier); " is 176.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnInReplyTo,The length of the statement  "			Logger.Debug("MatchOnInReplyTo: Message {0} had In-Reply-To {1}"' LogSource.MessageMatcher' message' message.InReplyTo); " is 120.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnInReplyTo,The length of the statement  "				Logger.Debug("MatchOnInReplyTo: Found conversation with ConversationIdentifier [{0}] for Message {1}"' LogSource.MessageMatcher' conversation' message); " is 152.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "				Logger.Debug("MatchOnSubject: Message {0} is a sent item. Creating new conversation because it is not a reply but a new message"' LogSource.MessageMatcher' message); " is 165.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "				Logger.Debug("MatchOnSubject: Message {0} is a concept message. Creating new conversation"' LogSource.MessageMatcher' message); " is 127.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "			if (String.IsNullOrEmpty(message.Context) || String.IsNullOrEmpty(message.Context.ToClearSubject()) || message.Context.Trim().Length == 0) " is 138.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "				Logger.Debug("MatchOnSubject: Message {0} has an empty context. Creating new conversation"' LogSource.MessageMatcher' message); " is 127.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "			Logger.Debug("MatchOnSubject: trying to find conversation for Message {0} with Context {1}"' LogSource.MessageMatcher' message' message.Context.ToClearSubject()); " is 162.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "			var recentRelatedMessage = messagesWithSameContext.Where(m => DateTime.Compare((m.SortDate).AddDays(3)' DateTime.Now) >= 0).FirstOrDefault(); " is 141.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "				Logger.Debug("MatchOnSubject: Message {0} has no matching conversation' creating a new one"' LogSource.MessageMatcher' message); " is 128.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "				Logger.Debug("MatchOnSubject: Message {0} has matching conversation with ConversationId {1}"' LogSource.MessageMatcher' message' conversation.ConversationId); " is 158.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The length of the statement  "				Logger.Debug("MatchOnSubject: Message {0} now has ConversationId {1}"' LogSource.MessageMatcher' message' message.ConversationIdentifier); " is 138.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,CreateNewConversation,The length of the statement  "			Debug.Assert(!String.IsNullOrEmpty(message.ConversationIdentifier)' "Message can not have an empty ConversationIdentifier!"); " is 125.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ProfileMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ProfileMatcher.cs,ProcessSourceAddress,The length of the statement  "					// The non spaced matche helps with contacts that are for instance called waseemsadiq on twitter and Waseem Sadiq elsewhere " is 123.
Long Statement,Inbox2.Core.Threading.Handlers.Matchers,ProfileMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ProfileMatcher.cs,SaveProfile,The length of the statement  "			Logger.Debug("Profile saved successfully in ProfileMatcher. Person = {0}' Profile.SourceAddress = {1}"' LogSource.Sync' person.PersonId' profile.SourceAddress); " is 160.
Long Statement,Inbox2.Core.Threading,TaskQueue,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\TaskQueue.cs,Enqueue,The length of the statement  "					Trace.WriteLine(String.Format("Task {0} has allready reached maximum allowed instances in the queue' ignoring enqueue..."' backgroundTask.GetType())); " is 150.
Long Statement,Inbox2.Core.Threading.Tasks.Application,CheckForUpdateTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\CheckForUpdateTask.cs,CheckNeedsUpgrade,The length of the statement  "			versionString = wc.DownloadString(AssetBaseUrl + String.Format("version/latest?clientId={0}&version={1}"' clientId' currentVersion)); " is 133.
Long Statement,Inbox2.Core.Threading.Tasks.Application,CheckForUpdateTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\CheckForUpdateTask.cs,DownloadUpdate,The length of the statement  "				url = String.Format("http://download.{0}.inbox2.com/client/x86/upgrade {1}.zip"' CommandLine.Current.Environment' versionString); " is 129.
Long Statement,Inbox2.Core.Threading.Tasks.Application,PurgeDataTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\PurgeDataTask.cs,ExecuteCore,The length of the statement  "				messages = mailbox.Messages.Where(m => m.ConversationIdentifier == String.Empty && m.DateCreated < DateTime.Now.AddMinutes(1)).ToList(); " is 136.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			ClientState.Current.DataService.ExecuteNonQuery("DELETE FROM UserStatus WHERE SourceChannelId=" + config.ChannelConfigId); " is 122.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			ClientState.Current.DataService.ExecuteNonQuery("DELETE FROM Profiles WHERE SourceChannelId=" + config.ChannelConfigId); " is 120.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			ClientState.Current.DataService.ExecuteNonQuery("DELETE FROM Conversations WHERE ConversationIdentifier IN (SELECT ConversationIdentifier FROM Messages WHERE Messages.SourceChannelId=" + config.ChannelConfigId + " OR TargetChannelId=" + config.ChannelConfigId + ")"); " is 267.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			ClientState.Current.DataService.ExecuteNonQuery("DELETE FROM Messages WHERE SourceChannelId=" + config.ChannelConfigId + " OR TargetChannelId=" + config.ChannelConfigId); " is 170.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			ClientState.Current.DataService.ExecuteNonQuery("DELETE FROM Documents WHERE SourceChannelId=" + config.ChannelConfigId); " is 121.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			ClientState.Current.DataService.ExecuteNonQuery("DELETE FROM DocumentVersions WHERE SourceChannelId=" + config.ChannelConfigId); " is 128.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			mailbox.StatusUpdates.RemoveAll(u => u.SourceChannelId == config.ChannelConfigId || u.TargetChannelId == config.ChannelConfigId.ToString()); " is 140.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			mailbox.Messages.RemoveAll(m => m.SourceChannelId == config.ChannelConfigId || m.TargetChannelId == config.ChannelConfigId); " is 124.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			mailbox.Documents.RemoveAll(d => d.SourceChannelId == config.ChannelConfigId || d.TargetChannelId == config.ChannelConfigId); " is 125.
Long Statement,Inbox2.Core.Threading.Tasks.Application,RemoveChannelTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\RemoveChannelTask.cs,ExecuteCore,The length of the statement  "			mailbox.DocumentVersions.RemoveAll(d => d.SourceChannelId == config.ChannelConfigId || d.TargetChannelId == config.ChannelConfigId); " is 132.
Long Statement,Inbox2.Core.Threading.Tasks.Commands,CleanupCommandsTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Commands\CleanupCommandsTask.cs,ExecuteCore,The length of the statement  "			ClientState.Current.DataService.ExecuteNonQuery("delete from CommandQueue where Status='Success' or (Status='Error' and ActualRetries >= MaxRetries) "); " is 152.
Long Statement,Inbox2.Core.Threading.Tasks.Commands,CleanupCommandsTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Commands\CleanupCommandsTask.cs,ExecuteCore,The length of the statement  "			command.CommandText = "update CommandQueue set Status='Pending' where Status='Running' and DateScheduled > @DateScheduled"; " is 123.
Long Statement,Inbox2.Core.Threading.Tasks,Tasks,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Tasks.cs,ReceivePrio,The length of the statement  "			new ReceiveTask(new ReceiveRange { OnlyNew = true' PageSize = DebugKeys.DefaultPageSize }) { OverrideCanExecute = true }.ExecuteAsync(); " is 136.
Long Statement,Inbox2.Core.Threading.Tasks,Tasks,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Tasks.cs,Receive,The length of the statement  "			new ReceiveTask(new ReceiveRange { OnlyNew = true' PageSize = DebugKeys.DefaultPageSize }' channel) { OverrideCanExecute = true }.ExecuteAsync(); " is 145.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,EnumerateLabelsFolderTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\EnumerateLabelsFolderTask.cs,GetHeadersToDownload,The length of the statement  "					message = mailbox.Messages.FirstOrDefault(m => (m.SourceChannelId == config.ChannelId || m.TargetChannelId == config.ChannelId) " is 127.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,EnumerateMessagesFolderTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\EnumerateMessagesFolderTask.cs,GetHeadersToDownload,The length of the statement  "					message = mailbox.Messages.FirstOrDefault(m => (m.SourceChannelId == config.ChannelId || m.TargetChannelId == config.ChannelId) " is 127.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,ReceiveFoldersTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveFoldersTask.cs,ExecuteChannelCore,The length of the statement  "									Logger.Error("An error has occured while trying to update message state. Message = {0}' Exception = {1}"' LogSource.BackgroundTask' message' ex); " is 145.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,ReceiveMessageDetailsTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveMessageDetailsTask.cs,ExecuteCore,The length of the statement  "				Logger.Error("An error occured when trying to download header {0}. Exception = {1}"' LogSource.BackgroundTask' header' ex); " is 123.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,ReceiveMessagesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveMessagesTask.cs,GetHeadersToDownload,The length of the statement  "						message = mailbox.Messages.FirstOrDefault(m => (m.SourceChannelId == config.ChannelId || m.TargetChannelId == config.ChannelId) " is 127.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,ReceiveMessagesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveMessagesTask.cs,GetHeadersToDownload,The length of the statement  "						message = mailbox.Messages.FirstOrDefault(m => (m.SourceChannelId == config.ChannelId || m.TargetChannelId == config.ChannelId) " is 127.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,ReceiveTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveTask.cs,OnCompleted,The length of the statement  "			new Run("Receive").After(SettingsManager.ClientSettings.AppConfiguration.ReceiveConfiguration.ReceiveInterval).Minutes().Call(Tasks.Receive); " is 141.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,UpdateMessageStateTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\UpdateMessageStateTask.cs,ChangeLabels,The length of the statement  "						Logger.Error("An error has occured while trying to apply label. Action = {0}' Exception = {1}"' LogSource.Channel' action' ex); " is 127.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,UpdateMessageStateTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\UpdateMessageStateTask.cs,Archive,The length of the statement  "				Logger.Warn("Unable to find archive folder' ignoring channel archive action. Message = {0}"' LogSource.Channel' message); " is 121.
Long Statement,Inbox2.Core.Threading.Tasks.Receive,UpdateMessageStateTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\UpdateMessageStateTask.cs,UnArchive,The length of the statement  "				Logger.Warn("Unable to find inbox folder' ignoring channel unarchive action. Message = {0}"' LogSource.Channel' message); " is 121.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncSearchStreamTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncSearchStreamTask.cs,ExecuteCore,The length of the statement  "					Logger.Warn("Could not find channel for search keyword. ChannelName = {0}' Keyword = {1}"' LogSource.Sync' channelname' keyword); " is 129.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncSearchStreamTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncSearchStreamTask.cs,ExecuteCore,The length of the statement  "						Logger.Debug("Received search update. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted); " is 153.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncSearchStreamTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncSearchStreamTask.cs,ExecuteCore,The length of the statement  "					Logger.Error("An error has occured while getting search result from {0}. Keyword = {1} Exception = {2}"' LogSource.Sync' channelname' keyword' ex); " is 147.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncStatusUpdatesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncStatusUpdatesTask.cs,GetFriendUpdates,The length of the statement  "					Logger.Debug("Received friend update. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted); " is 153.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncStatusUpdatesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncStatusUpdatesTask.cs,GetMentions,The length of the statement  "					Logger.Debug("Received mention. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted); " is 147.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncTask.cs,ExecuteCore,The length of the statement  "					gate.Add(new SyncContactsTask(instance.Configuration' instance.ContactsChannel.Clone()) { OverrideCanExecute = OverrideCanExecute }); " is 133.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncTask.cs,ExecuteCore,The length of the statement  "					gate.Add(new SyncStatusUpdatesTask(instance.Configuration' instance.StatusUpdatesChannel.Clone()) { OverrideCanExecute = OverrideCanExecute }); " is 143.
Long Statement,Inbox2.Core.Threading.Tasks.Sync,SyncTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncTask.cs,ExecuteCore,The length of the statement  "				//    new SyncCalendarTask(instance.Configuration' instance.CalendarChannel) { OverrideCanExecute = OverrideCanExecute }.ExecuteAsync(); " is 136.
Empty Catch Block,Inbox2.Core.Threading,ProcessingPool,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\ProcessingPool.cs,Kill,The method has an empty catch block.
Empty Catch Block,Inbox2.Core.Threading.Repeat,ScheduledItem,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Repeat\ScheduledItem.cs,Execute,The method has an empty catch block.
Magic Number,Inbox2.Core.Threading.Handlers,DocumentsHandler,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\DocumentsHandler.cs,DocumentReceived,The following statement contains a magic number: try  			{  				var mailbox = VirtualMailBox.Current;  				var document = source;    				document.Crc32 = document.ContentStream.CalculateCrc32();  				document.Size = document.ContentStream.Length;    				var message = document.Message;    				bool isNewVersion;    				using (mailbox.Documents.ReaderLock)  				{  					Document document1 = document;    					isNewVersion = mailbox.Documents.Any(d => d.Crc32 == document1.Crc32);  				}    				if (isNewVersion == false)  				{  					document.StreamName = Guid.NewGuid().GetHash(12) + "_" + Path.GetExtension(document.Filename);    					// Save document to storage engine  					ClientState.Current.Storage.Write(  						"."'  						document.StreamName'  						document.ContentStream);  						  					// New document' save stream and add to search/mailbox  					ClientState.Current.DataService.Save(document);    					ClientState.Current.Search.Store(document);    					mailbox.Documents.Add(document);  				}  				else  				{  					// Replace document reference with instance from mailbox  					Document document1 = document;    					document = mailbox.Documents.First(d => d.Crc32 == document1.Crc32);  				}    				// Create new version  				var version = new DocumentVersion  				{  					DocumentId = document.DocumentId.Value'  					SourceChannelId = document.SourceChannelId'  					TargetChannelId = document.TargetChannelId'  					StreamName = document.StreamName'  					Filename = document.Filename'  					DateReceived = document.DateReceived'  					DateSent = document.DateSent  				};    				mailbox.DocumentVersions.Add(version);    				document.Versions.Add(version);    				ClientState.Current.DataService.Save(version);    				if (message != null)  				{  					version.From = message.From;  					version.To = message.To;  					version.MessageId = message.MessageId;    					Thread.CurrentThread.ExecuteOnUIThread(() => message.Add(document));  				}								  			}  			finally  			{  				source.ContentStream.Dispose();  				source.ContentStream = null;  			}
Magic Number,Inbox2.Core.Threading.Handlers.Matchers,ContactMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ContactMatcher.cs,SaveProfile,The following statement contains a magic number: try  			{  				if (channelContact.Profile.ChannelAvatar != null &&  					(channelContact.Profile.ChannelAvatar.ContentStream != null || !String.IsNullOrEmpty(channelContact.Profile.ChannelAvatar.Url)))  				{  					var streamname = Guid.NewGuid().GetHash(12) + "png";    					if (channelContact.Profile.ChannelAvatar.ContentStream == null)  					{  						var helper = new WebContentStreamHelper(channelContact.Profile.ChannelAvatar.Url);    						channelContact.Profile.ChannelAvatar.ContentStream = helper.GetContentStream();  					}    					using (channelContact.Profile.ChannelAvatar.ContentStream)  						ClientState.Current.Storage.Write("a"' streamname' channelContact.Profile.ChannelAvatar.ContentStream);    					profile.AvatarStreamName = streamname;  				}  			}  			catch (Exception ex)  			{  				Logger.Error("An error occured while trying to save avatar. ChannelProfileKey = {0} Exception = {1}"' LogSource.Sync' channelContact.Profile.ChannelProfileKey' ex);  			}
Magic Number,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnInReplyTo,The following statement contains a magic number: if (msg != null)  			{  				// Update source message stats  				msg.TrackAction(ActionType.ReplyForward' message.SortDate);    				// Found a conversationId  				using (mailbox.Conversations.ReaderLock)  					conversation = mailbox.Conversations.FirstOrDefault(c => c.ConversationIdentifier == msg.ConversationIdentifier);    				if (conversation == null)  				{  					if (nrtry == 3)  					{  						// We are unable to find the conversation after two tries'   						// match the message being replied to' to fix this.  						Match(msg);    						return MatchOnInReplyTo(message' out conversation' ++nrtry);  					}    					// Seems we have a conversationId but the actual conversation has not been written to disk yet  					// Sleep for 500 ms and then try again  					Thread.Sleep(500);    					return MatchOnInReplyTo(message' out conversation' ++nrtry);  				}    				Logger.Debug("MatchOnInReplyTo: Found conversation with ConversationIdentifier [{0}] for Message {1}"' LogSource.MessageMatcher' conversation' message);  				  				UpdateMessage(message' conversation);    				return ExecutionResult.Break;  			}
Magic Number,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnInReplyTo,The following statement contains a magic number: if (msg != null)  			{  				// Update source message stats  				msg.TrackAction(ActionType.ReplyForward' message.SortDate);    				// Found a conversationId  				using (mailbox.Conversations.ReaderLock)  					conversation = mailbox.Conversations.FirstOrDefault(c => c.ConversationIdentifier == msg.ConversationIdentifier);    				if (conversation == null)  				{  					if (nrtry == 3)  					{  						// We are unable to find the conversation after two tries'   						// match the message being replied to' to fix this.  						Match(msg);    						return MatchOnInReplyTo(message' out conversation' ++nrtry);  					}    					// Seems we have a conversationId but the actual conversation has not been written to disk yet  					// Sleep for 500 ms and then try again  					Thread.Sleep(500);    					return MatchOnInReplyTo(message' out conversation' ++nrtry);  				}    				Logger.Debug("MatchOnInReplyTo: Found conversation with ConversationIdentifier [{0}] for Message {1}"' LogSource.MessageMatcher' conversation' message);  				  				UpdateMessage(message' conversation);    				return ExecutionResult.Break;  			}
Magic Number,Inbox2.Core.Threading.Handlers.Matchers,MessageMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\MessageMatcher.cs,MatchOnSubject,The following statement contains a magic number: var recentRelatedMessage = messagesWithSameContext.Where(m => DateTime.Compare((m.SortDate).AddDays(3)' DateTime.Now) >= 0).FirstOrDefault();
Magic Number,Inbox2.Core.Threading.Handlers.Matchers,ProfileMatcher,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Handlers\Matchers\ProfileMatcher.cs,ProcessSourceAddress,The following statement contains a magic number: if (profiles.Count == 0)  			{  				Logger.Debug("Profile for address {0} not found"' LogSource.Sync' address);    				if (String.IsNullOrEmpty(address.DisplayName))  				{  					Logger.Warn("Address {0} had no displayname' ignoring"' LogSource.Sync' address);    					return -1;  				}  				else  				{  					// No profile found' try to match on person  					string name = PersonName.Parse(address.DisplayName).ToString();  					List<Person> persons;    					// The non spaced matche helps with contacts that are for instance called waseemsadiq on twitter and Waseem Sadiq elsewhere  					using (mailbox.Persons.ReaderLock)  						persons = mailbox.Persons.Where(c => c.Name == name || c.Name == name.Replace(" "' String.Empty).Trim()).ToList();    					if (persons.Count > 0)  					{  						Logger.Debug("Profile for address {0} had contact' creating new profile"' LogSource.Sync' address);    						// Add profile to existing person  						var person = persons.First();    						// Person has been redirected  						if (person.RedirectPersonId.HasValue)  						{  							using (mailbox.Persons.ReaderLock)  							{  								// Find redirected person  								Person person1 = person;    								person = mailbox.Persons.FirstOrDefault(p => p.PersonId == person1.RedirectPersonId);  							}  						}    						if (person != null)  						{  							// If personid does not have a value yet' spin until the object is written to the database  							while (!person.PersonId.HasValue)  								Thread.SpinWait(1000);    							SaveProfile(person' address);    							return person.PersonId.Value;  						}  					}    					Logger.Debug("Person for address {0} not found' creating new person and profile"' LogSource.Sync' address);    					// Create new soft contact and soft profile  					return SavePerson(address);  				}  			}  			else  			{  				var profile = profiles.First();    				Thread.CurrentThread.ExecuteOnUIThread(delegate  					{  						// Set profile  						message.Profile = profile;    						profile.Messages.Add(message);    						if (profile.Person != null)  						{  							profile.Person.Messages.Add(message);    							profile.Person.RebuildScore();  						}  					});    				return profile.PersonId;  			}
Magic Number,Inbox2.Core.Threading,ProcessingPool,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\ProcessingPool.cs,ProcessingPool,The following statement contains a magic number: processors = new List<TaskProcessor>(DebugKeys.DefaultNrOfProcessors * 2);
Magic Number,Inbox2.Core.Threading.Repeat,ScheduledTaskRunner,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Repeat\ScheduledTaskRunner.cs,ScheduledTaskRunner,The following statement contains a magic number: _Timer = new Timer(500);
Magic Number,Inbox2.Core.Threading.Tasks.Application,CheckForUpdateTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\CheckForUpdateTask.cs,OnCompleted,The following statement contains a magic number: new Run("UpdateCheck").After(60).Minutes().Call(Tasks.CheckForUpdate);
Magic Number,Inbox2.Core.Threading.Tasks.Application,PurgeDataTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\PurgeDataTask.cs,ExecuteCore,The following statement contains a magic number: using (mailbox.StatusUpdates.ReaderLock)  				delete = mailbox.StatusUpdates.Where(u => u.SortDate < DateTime.Now.AddDays(-7)).ToList();
Magic Number,Inbox2.Core.Threading.Tasks.Application,ShipLogTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Application\ShipLogTask.cs,OnCompleted,The following statement contains a magic number: new Run("ShipLogs").After(5).Minutes().Call(Tasks.ShipLogs);
Magic Number,Inbox2.Core.Threading.Tasks.Commands,CleanupCommandsTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Commands\CleanupCommandsTask.cs,ExecuteCore,The following statement contains a magic number: parameter.Value = DateTime.Now.AddMinutes(-3);
Magic Number,Inbox2.Core.Threading.Tasks.Receive,ReceiveMessagesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveMessagesTask.cs,PostProcess,The following statement contains a magic number: progressTimer = new Timer(delegate  			{  				ProgressGroup.IsCompleted = true;  				progressTimer.Dispose();    			}' null' 300' -1);
Magic Number,Inbox2.Core.Threading.Tasks.Receive,ReceiveTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Receive\ReceiveTask.cs,ExecuteCore,The following statement contains a magic number: var gate = new ConcurrencyGate(2);
Magic Number,Inbox2.Core.Threading.Tasks.Sync,SyncSearchStreamTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncSearchStreamTask.cs,ExecuteCore,The following statement contains a magic number: foreach (var kw in VirtualMailBox.Current.StreamSearchKeywords.GetKeyWords())  			{  				#region Parse channelname and keyword    				var parts = kw.Split('|');    				if (parts.Length != 2)  				{  					Logger.Warn("Invalid search keyword. Keyword = {0}"' LogSource.Sync' kw);  					return;  				}    				var channelname = parts[0];  				var keyword = parts[1];				    				// Find channel with given name  				var channels = ChannelsManager.GetStatusChannels();  				var channel = channels.FirstOrDefault(c => c.Configuration.DisplayName == channelname);    				if (channel == null)  				{  					Logger.Warn("Could not find channel for search keyword. ChannelName = {0}' Keyword = {1}"' LogSource.Sync' channelname' keyword);  					return;  				}    				#endregion    				// Perform keyword search  				try  				{  					var parser = new UserStatusParser(channel.Configuration' kw);  					var updates = channel.StatusUpdatesChannel.GetUpdates(keyword' 50);    					foreach (var statusupdate in updates)  					{  						Logger.Debug("Received search update. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted);    						parser.ProcessStatusUpdate(statusupdate' StatusTypes.SearchUpdate);  					}  				}  				catch (Exception ex)  				{  					Logger.Error("An error has occured while getting search result from {0}. Keyword = {1} Exception = {2}"' LogSource.Sync' channelname' keyword' ex);  				}  			}
Magic Number,Inbox2.Core.Threading.Tasks.Sync,SyncSearchStreamTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncSearchStreamTask.cs,ExecuteCore,The following statement contains a magic number: foreach (var kw in VirtualMailBox.Current.StreamSearchKeywords.GetKeyWords())  			{  				#region Parse channelname and keyword    				var parts = kw.Split('|');    				if (parts.Length != 2)  				{  					Logger.Warn("Invalid search keyword. Keyword = {0}"' LogSource.Sync' kw);  					return;  				}    				var channelname = parts[0];  				var keyword = parts[1];				    				// Find channel with given name  				var channels = ChannelsManager.GetStatusChannels();  				var channel = channels.FirstOrDefault(c => c.Configuration.DisplayName == channelname);    				if (channel == null)  				{  					Logger.Warn("Could not find channel for search keyword. ChannelName = {0}' Keyword = {1}"' LogSource.Sync' channelname' keyword);  					return;  				}    				#endregion    				// Perform keyword search  				try  				{  					var parser = new UserStatusParser(channel.Configuration' kw);  					var updates = channel.StatusUpdatesChannel.GetUpdates(keyword' 50);    					foreach (var statusupdate in updates)  					{  						Logger.Debug("Received search update. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted);    						parser.ProcessStatusUpdate(statusupdate' StatusTypes.SearchUpdate);  					}  				}  				catch (Exception ex)  				{  					Logger.Error("An error has occured while getting search result from {0}. Keyword = {1} Exception = {2}"' LogSource.Sync' channelname' keyword' ex);  				}  			}
Magic Number,Inbox2.Core.Threading.Tasks.Sync,SyncStatusUpdatesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncStatusUpdatesTask.cs,GetFriendUpdates,The following statement contains a magic number: try  			{  				// Get updates for the last 7 days  				var parser = new UserStatusParser(config);  				var updates = channel.GetUpdates(50).Where(u => u.DatePosted > DateTime.Now.AddDays(-7));    				foreach (var statusupdate in updates)  				{  					Logger.Debug("Received friend update. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted);    					parser.ProcessStatusUpdate(statusupdate' StatusTypes.FriendUpdate);  				}  			}  			catch (Exception ex)  			{  				Logger.Error("An error has occured while trying to get friend updates. Exception = {0}"' LogSource.Sync' ex);  			}
Magic Number,Inbox2.Core.Threading.Tasks.Sync,SyncStatusUpdatesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncStatusUpdatesTask.cs,GetFriendUpdates,The following statement contains a magic number: try  			{  				// Get updates for the last 7 days  				var parser = new UserStatusParser(config);  				var updates = channel.GetUpdates(50).Where(u => u.DatePosted > DateTime.Now.AddDays(-7));    				foreach (var statusupdate in updates)  				{  					Logger.Debug("Received friend update. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted);    					parser.ProcessStatusUpdate(statusupdate' StatusTypes.FriendUpdate);  				}  			}  			catch (Exception ex)  			{  				Logger.Error("An error has occured while trying to get friend updates. Exception = {0}"' LogSource.Sync' ex);  			}
Magic Number,Inbox2.Core.Threading.Tasks.Sync,SyncStatusUpdatesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncStatusUpdatesTask.cs,GetMentions,The following statement contains a magic number: try  			{  				// Get updates for the last 7 days  				var parser = new UserStatusParser(config);  				var updates = channel.GetMentions(50).Where(u => u.DatePosted > DateTime.Now.AddDays(-7));    				foreach (var statusupdate in updates)  				{  					Logger.Debug("Received mention. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted);    					parser.ProcessStatusUpdate(statusupdate' StatusTypes.Mention);  				}  			}  			catch (Exception ex)  			{  				Logger.Error("An error has occured while trying to get mentions. Exception = {0}"' LogSource.Sync' ex);  			}
Magic Number,Inbox2.Core.Threading.Tasks.Sync,SyncStatusUpdatesTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncStatusUpdatesTask.cs,GetMentions,The following statement contains a magic number: try  			{  				// Get updates for the last 7 days  				var parser = new UserStatusParser(config);  				var updates = channel.GetMentions(50).Where(u => u.DatePosted > DateTime.Now.AddDays(-7));    				foreach (var statusupdate in updates)  				{  					Logger.Debug("Received mention. ChannelStatusKey = {0}' DatePosted = {1}"' LogSource.Sync' statusupdate.ChannelStatusKey' statusupdate.DatePosted);    					parser.ProcessStatusUpdate(statusupdate' StatusTypes.Mention);  				}  			}  			catch (Exception ex)  			{  				Logger.Error("An error has occured while trying to get mentions. Exception = {0}"' LogSource.Sync' ex);  			}
Magic Number,Inbox2.Core.Threading.Tasks.Sync,SyncTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Sync\SyncTask.cs,ExecuteCore,The following statement contains a magic number: var gate = new ConcurrencyGate(2);
Missing Default,Inbox2.Core.Threading.Commands,CommandFactory,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Commands\CommandFactory.cs,CreateCommand,The following switch statement is missing a default case: switch (command.CommandType)  			{  				case AppCommands.SendMessage:  					return new SendMessageCommand(GetMessage(command));  				  				case AppCommands.SendStatusUpdate:  					return new SendStatusUpdateCommand(GetUserStatus(command));    				case AppCommands.SyncMessage:  					return new SyncEntityCommand(Entities.Messages' GetMessage(command).MessageKey' command);    				case AppCommands.SyncPerson:  					return new SyncEntityCommand(Entities.Persons' GetPerson(command).PersonKey' command);    				case AppCommands.SyncStatusUpdate:  					return new SyncEntityCommand(Entities.StatusUpdates' GetUserStatus(command).StatusKey' command);  			}
Missing Default,Inbox2.Core.Threading.Tasks.Users,ValidateLoginTask,C:\repos\waseems_inbox2_desktop\Code\Client\Inbox2\Core\Threading\Tasks\Users\ValidateLoginTask.cs,ExecuteChannelCore,The following switch statement is missing a default case: switch (configuration.DisplayStyle)  			{  				case DisplayStyle.Simple:  				case DisplayStyle.Advanced:  				case DisplayStyle.Other:  					ValidateCredentials();  					break;  				case DisplayStyle.Redirect:  				case DisplayStyle.RedirectWithPin:  				case DisplayStyle.FbConnect:  					ValidatePin();  					break;  			}
