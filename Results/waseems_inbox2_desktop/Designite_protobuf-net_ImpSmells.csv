Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,TryGetTag,The method has 157 lines of code.
Long Method,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Build,The method has 129 lines of code.
Long Method,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Deserialize,The method has 157 lines of code.
Long Method,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The method has 206 lines of code.
Complex Method,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,TryGetTag,Cyclomatic complexity of the method is 26
Complex Method,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Build,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Deserialize,Cyclomatic complexity of the method is 15
Complex Method,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,FindCallback,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,ExtensibleUtil,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ExtensibleUtil.cs,GetExtendedValuesTyped,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf,Entity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Entity.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,Cyclomatic complexity of the method is 47
Complex Method,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.ServiceModel.Server,ServerBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\ServerBase.cs,Execute,Cyclomatic complexity of the method is 11
Long Parameter List,ProtoBuf,Extensible,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Extensible.cs,TryGetValue,The method has 5 parameters. Parameters: instance' tag' format' allowDefinedTag' value
Long Parameter List,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,TryGetTag,The method has 5 parameters. Parameters: member' tag' name' format' options
Long Parameter List,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,TryGetTag,The method has 6 parameters. Parameters: member' tag' name' callerIsTagInference' format' options
Long Parameter List,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,TryReadPrefixLength,The method has 5 parameters. Parameters: source' style' tag' length' processField
Long Parameter List,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,TryReadLengthPrefix,The method has 5 parameters. Parameters: buffer' index' count' style' length
Long Parameter List,ProtoBuf,ExtensibleUtil,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ExtensibleUtil.cs,GetExtendedValues,The method has 5 parameters. Parameters: instance' tag' format' singleton' allowDefinedTag
Long Parameter List,ProtoBuf,ExtensibleUtil,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ExtensibleUtil.cs,GetExtendedValuesTyped,The method has 5 parameters. Parameters: instance' tag' format' singleton' allowDefinedTag
Long Parameter List,ProtoBuf.Property,Property<TSource>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,Init,The method has 6 parameters. Parameters: tag' format' getValue' setValue' isOptional' defaultValue
Long Parameter List,ProtoBuf.Property,Property<TSource>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,InitPrivate,The method has 7 parameters. Parameters: tag' dataFormat' isOptional' member' getValue' setValue' defaultValue
Long Parameter List,ProtoBuf.Property,Property<TSource>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,OnBeforeInit,The method has 5 parameters. Parameters: member' getValue' setValue' tag' format
Long Parameter List,ProtoBuf.Property,Property<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,OnBeforeInit,The method has 5 parameters. Parameters: member' getValue' setValue' tag' format
Long Parameter List,ProtoBuf.ServiceModel,RpcUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\RpcUtils.cs,PackArgs,The method has 5 parameters. Parameters: stream' method' result' args' predicate
Long Parameter List,ProtoBuf.ServiceModel.Client,ServiceRequest,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Client\ServiceRequest.cs,ServiceRequest,The method has 6 parameters. Parameters: service' action' method' args' userState' callback
Long Parameter List,ProtoBuf.ServiceModel.Server,ServerBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\ServerBase.cs,Execute,The method has 6 parameters. Parameters: service' action' headers' request' response' state
Long Statement,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,GetProtoMembers,The length of the statement  "            foreach(MemberInfo member in type.GetMembers(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)) { " is 145.
Long Statement,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Build,The length of the statement  "                throw new InvalidOperationException("Possible deadlock detected preparing serializer for " + typeof(T).Name + "; try using Serializer.PrepareSerializer to initialize this type at application startup."); " is 202.
Long Statement,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Build,The length of the statement  "                    throw new InvalidOperationException("Only data-contract classes can be processed (error processing " + typeof(T).Name + ")"); " is 125.
Long Statement,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Build,The length of the statement  "                            prop = (Property<T' T>) PropertyUtil<T>.CreateTypedProperty("CreatePropertyMessageString"' typeof(T)' typeof(T)' subclassType); " is 127.
Long Statement,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Build,The length of the statement  "                            prop = (Property<T' T>)PropertyUtil<T>.CreateTypedProperty("CreatePropertyMessageGroup"' typeof(T)' typeof(T)' subclassType); " is 125.
Long Statement,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Serialize,The length of the statement  "                    throw new ProtoException("Unexpected type found during serialization; types must be included with ProtoIncludeAttribute; " " is 122.
Long Statement,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,BuildCallbacks,The length of the statement  "                        "Callbacks are only supported on the root contract type in an inheritance tree; consider implementing callbacks as virtual methods on " + " is 137.
Long Statement,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,CheckStackClean,The length of the statement  "            if (stackDepth != 0 || objectStack.Count != 0) throw new ProtoException("Stack corruption; the stack depth ended as: " + stackDepth.ToString()); " is 144.
Long Statement,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,WriteLengthPrefixed,The length of the statement  "                    throw new ProtoException("Internal error; the serializer over-estimated the length. Sorry' but this shouldn't have happened."); " is 127.
Long Statement,ProtoBuf.Property,PropertySpecified<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertySpecified.cs,InitFromProperty,The length of the statement  "            getSpecified = (Getter<TSource' bool>)Delegate.CreateDelegate(typeof(Getter<TSource' bool>)' null' property.GetGetMethod(true)) " is 127.
Long Statement,ProtoBuf.Property,PropertySpecified<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertySpecified.cs,InitFromProperty,The length of the statement  "                setSpecified = (Setter<TSource' bool>)Delegate.CreateDelegate(typeof(Setter<TSource' bool>)' null' property.GetSetMethod(true)); " is 128.
Long Statement,ProtoBuf.Property,PropertyEnumerable<TSource;TList;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyEnumerable.cs,GetCompatibleReaders,The length of the statement  "            if (PropertyFactory.CanPack(innerProperty.WireType)) yield return CreateAlternative<PropertyPackedEnumerable<TSource' TList' TValue>>(innerProperty.DataFormat); " is 160.
Long Statement,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,Create,The length of the statement  "            PropertyInfo specifiedProp = HasOption(options' MemberSerializationOptions.Required) ? null : PropertySpecified.GetSpecified(typeof (T)' member.Name); " is 150.
Long Statement,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The length of the statement  "                    case DataFormat.Default: return PropertyUtil<T>.CreateTypedProperty("CreatePropertyMessageString"' type' baseType' baseType); " is 125.
Long Statement,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The length of the statement  "                    case DataFormat.Group: return PropertyUtil<T>.CreateTypedProperty("CreatePropertyMessageGroup"' type' baseType' baseType); " is 122.
Long Statement,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The length of the statement  "                    throw new NotSupportedException("Only 1-dimensional arrays can be used; consider an array/list of a class-type instead"); " is 121.
Long Statement,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The length of the statement  "                    throw new NotSupportedException("Nested (jagged) arrays/lists are not supported (except for byte[]); consider an array/list of a class-type with an inner array/list instead"); " is 175.
Long Statement,ProtoBuf.Property,PropertyArray<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyArray.cs,GetCompatibleReaders,The length of the statement  "            if (PropertyFactory.CanPack(innerProperty.WireType)) yield return CreateAlternative<PropertyPackedArray<TSource' TValue>>(innerProperty.DataFormat); " is 148.
Long Statement,ProtoBuf.Property,PropertyList<TSource;TList;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyList.cs,GetCompatibleReaders,The length of the statement  "            if (PropertyFactory.CanPack(innerProperty.WireType)) yield return CreateAlternative<PropertyPackedList<TSource' TList' TValue>>(innerProperty.DataFormat);             " is 154.
Long Statement,ProtoBuf.Property,Property<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,CreateAlternative,The length of the statement  "            if (forInit == null) throw new InvalidOperationException("Internal protobuf-net error; the type T in CreateAlternative must be a Property<TSource>; this cannot be enforced in a generic constraint due to a mono compiler issue. T was " + typeof(T).FullName); " is 256.
Long Statement,ProtoBuf.Property,Property<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,OnBeforeInit,The length of the statement  "                            this.getValue = (Getter<TSource' TValue>)Delegate.CreateDelegate(typeof(Getter<TSource' TValue>)' null' prop.GetGetMethod(true)) " is 128.
Long Statement,ProtoBuf.Property,Property<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,OnBeforeInit,The length of the statement  "                            this.setValue = (Setter<TSource' TValue>)Delegate.CreateDelegate(typeof(Setter<TSource' TValue>)' null' prop.GetSetMethod(true)) " is 128.
Long Statement,ProtoBuf.Property,Property<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,OnBeforeInit,The length of the statement  "                        DynamicMethod method = new DynamicMethod("stfld_" + field.Name' null' new Type[] { typeof(TSource)' typeof(TValue)}' field.DeclaringType); " is 138.
Long Statement,ProtoBuf.Property,Property<TSource;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\Property.cs,OnBeforeInit,The length of the statement  "                        method = new DynamicMethod("ldfild_" + field.Name' typeof(TValue)' new Type[] { typeof(TSource) }' field.DeclaringType); " is 120.
Long Statement,ProtoBuf.Property,PropertyMessageGroup<TSource;TProperty;TEntityBase;TEntityActual>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyMessageGroup.cs,GetCompatibleReaders,The length of the statement  "            yield return CreateAlternative<PropertyMessageString<TSource' TProperty' TEntityBase' TEntityActual>>(DataFormat.Default); " is 122.
Long Statement,ProtoBuf.ServiceModel.Client,ProtoClient<TService>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Client\ProtoClient.cs,SendRequestAsync,The length of the statement  "            if (method.IsGenericMethod || method.IsGenericMethodDefinition) throw new InvalidOperationException("Cannot process generic method: " + method.Name); " is 149.
Long Statement,ProtoBuf.ServiceModel.Client,ProtoClient<TService>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Client\ProtoClient.cs,SendRequestAsync,The length of the statement  "            if (method.DeclaringType != typeof(TService)) throw new ArgumentException(method.Name + " is not defined on service " + typeof(TService).Name' "method"); " is 153.
Long Statement,ProtoBuf.ServiceModel.Server,HttpServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\HttpServer.cs,ProcessContext,The length of the statement  "            Execute(serviceName' actionName' context.Request.Headers' context.Request.InputStream' context.Response.OutputStream' context);             " is 127.
Complex Conditional,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,AddImplicitByDeclaringType,The conditional expression  "member.DeclaringType == declaringType                     && member.GetCustomAttributes(typeof(XmlIgnoreAttribute)' false).Length == 0                     && TryGetTag(member' out tag' out name' true' out fmt' out options) && tag < 1"  is complex.
Complex Conditional,ProtoBuf,Entity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Entity.cs,IsEntity,The conditional expression  "!type.IsClass || type.IsArray                  || type == typeof(void) || type == typeof(string)"  is complex.
Complex Conditional,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,SerializeWithLengthPrefix,The conditional expression  "(p = genericMethod.GetParameters()).Length == 4                              && p[0].ParameterType == typeof(Stream)                              && p[2].ParameterType == typeof(PrefixStyle)                              && p[3].ParameterType == typeof(int)"  is complex.
Complex Conditional,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,CanSerialize,The conditional expression  "itemType != null                      && (!enumOnly || Serializer.HasAddMethod(type' itemType))                      && Serializer.IsEntityType(itemType)"  is complex.
Complex Conditional,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,Serialize,The conditional expression  "method.Name == "Serialize" && method.IsGenericMethod                          && (p = method.GetParameters()).Length == 2                          && p[0].ParameterType == typeof(Stream)"  is complex.
Complex Conditional,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,Deserialize,The conditional expression  "method.Name == "Deserialize" && method.IsGenericMethod                          && (p = method.GetParameters()).Length == 1                          && p[0].ParameterType == typeof(Stream)"  is complex.
Empty Catch Block,ProtoBuf,ProtoIncludeAttribute,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoIncludeAttribute.cs,ResolveKnownType,The method has an empty catch block.
Empty Catch Block,ProtoBuf,ProtoIncludeAttribute,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoIncludeAttribute.cs,ResolveKnownType,The method has an empty catch block.
Empty Catch Block,ProtoBuf.ServiceModel.Server,HttpServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\HttpServer.cs,GotContext,The method has an empty catch block.
Empty Catch Block,ProtoBuf.ServiceModel.Server,HttpServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\HttpServer.cs,GotContext,The method has an empty catch block.
Empty Catch Block,ProtoBuf.ServiceModel.Server,HttpServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\HttpServer.cs,GotContext,The method has an empty catch block.
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,GetFieldToken,The following statement contains a magic number: return (uint)((tag << 3) | ((int)wireType));
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,SerializeWithLengthPrefix,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())              {                  Serialize<T>(ms' instance);                  byte[] tmp = new byte[20];                  int len;                  switch(style)                  {                      case PrefixStyle.Base128:                          len = 0;                          if(tag > 0)                          {                              uint prefix = GetFieldToken(tag' WireType.String);                              len += SerializationContext.EncodeUInt32(prefix' tmp' 0);                          }                          len += SerializationContext.EncodeUInt32((uint)ms.Length' tmp' len);                          break;                      case PrefixStyle.Fixed32:                          SerializationContext.EncodeUInt32Fixed((uint)ms.Length' tmp' 0);                          len = 4;                          break;                      default:                          throw new NotSupportedException("Invalid prefix style: " + style);                  }                  destination.Write(tmp' 0' len);                  destination.Write(ms.GetBuffer()' 0' (int)ms.Length);              }
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,SerializeWithLengthPrefix,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())              {                  Serialize<T>(ms' instance);                  byte[] tmp = new byte[20];                  int len;                  switch(style)                  {                      case PrefixStyle.Base128:                          len = 0;                          if(tag > 0)                          {                              uint prefix = GetFieldToken(tag' WireType.String);                              len += SerializationContext.EncodeUInt32(prefix' tmp' 0);                          }                          len += SerializationContext.EncodeUInt32((uint)ms.Length' tmp' len);                          break;                      case PrefixStyle.Fixed32:                          SerializationContext.EncodeUInt32Fixed((uint)ms.Length' tmp' 0);                          len = 4;                          break;                      default:                          throw new NotSupportedException("Invalid prefix style: " + style);                  }                  destination.Write(tmp' 0' len);                  destination.Write(ms.GetBuffer()' 0' (int)ms.Length);              }
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,Merge,The following statement contains a magic number: const int LEN = 4096;
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,GetPrefixLength,The following statement contains a magic number: if ((tag & ~0x000007FF) == 0) return 2;
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,GetPrefixLength,The following statement contains a magic number: if ((tag & ~0x0003FFFF) == 0) return 3;
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,GetPrefixLength,The following statement contains a magic number: if ((tag & ~0x01FFFFFF) == 0) return 4;
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,GetPrefixLength,The following statement contains a magic number: return 5;
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,ParseFieldToken,The following statement contains a magic number: wireType = (WireType)(token & 7);
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,ParseFieldToken,The following statement contains a magic number: tag = (int)(token >> 3);
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,SkipData,The following statement contains a magic number: switch (wireType)              {                  case WireType.Variant:                      context.ReadRawVariant();                      break;                  case WireType.Fixed32:                      context.ReadBlock(4);                      break;                  case WireType.Fixed64:                      context.ReadBlock(8);                      break;                  case WireType.String:                      int len = context.DecodeInt32();                      context.WriteTo(Stream.Null' len);                      break;                  case WireType.EndGroup:                      throw new ProtoException("End-group not expected at this location");                  case WireType.StartGroup:                      context.StartGroup(fieldTag); // will be ended internally                      Serializer<UnknownType>.Build();                      UnknownType ut = UnknownType.Default;                      Serializer<UnknownType>.Deserialize<UnknownType>(ref ut' context);                      break;                  default:                      throw new ProtoException("Unknown wire-type " + wireType.ToString());              }
Magic Number,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,SkipData,The following statement contains a magic number: switch (wireType)              {                  case WireType.Variant:                      context.ReadRawVariant();                      break;                  case WireType.Fixed32:                      context.ReadBlock(4);                      break;                  case WireType.Fixed64:                      context.ReadBlock(8);                      break;                  case WireType.String:                      int len = context.DecodeInt32();                      context.WriteTo(Stream.Null' len);                      break;                  case WireType.EndGroup:                      throw new ProtoException("End-group not expected at this location");                  case WireType.StartGroup:                      context.StartGroup(fieldTag); // will be ended internally                      Serializer<UnknownType>.Build();                      UnknownType ut = UnknownType.Default;                      Serializer<UnknownType>.Deserialize<UnknownType>(ref ut' context);                      break;                  default:                      throw new ProtoException("Unknown wire-type " + wireType.ToString());              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Indent,The following statement contains a magic number: return sb.Append(' '' nestLevel * 2);
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Build,The following statement contains a magic number: if (!Monitor.TryEnter(lockToken' 5000))  #endif              {                  throw new InvalidOperationException("Possible deadlock detected preparing serializer for " + typeof(T).Name + "; try using Serializer.PrepareSerializer to initialize this type at application startup.");              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Deserialize,The following statement contains a magic number: try              {  #endif                  if(instance != null)                  {                      Callback(CallbackType.BeforeDeserialization' instance);                  }                    context.Push();                  int propCount = readProps.Length;                  //context.CheckSpace();                  IExtensible extensible = instance as IExtensible;                  IExtension extn = null;                  Property<T> prop = propCount == 0 ? null : readProps[0];                    int lastIndex = prop == null ? -1 : 0;                  uint lastPrefix = prop == null ? uint.MaxValue : prop.FieldPrefix;                    while (context.TryReadFieldPrefix(out prefix))                  {                      // scan for the correct property                      bool foundTag = false;                      if (prefix == lastPrefix)                      {                          foundTag = true;                      }                      else if (prefix > lastPrefix)                      {                          for (int i = lastIndex + 1; i < propCount; i++)                          {                              if (readProps[i].FieldPrefix == prefix)                              {                                  prop = readProps[i];                                  lastIndex = i;                                  lastPrefix = prefix;                                  foundTag = true;                                  break;                              }                              if (readProps[i].FieldPrefix > prefix) break; // too far                          }                      }                      else                      {                          for (int i = lastIndex - 1; i >= 0; i--)                          {                              if (readProps[i].FieldPrefix == prefix)                              {                                  prop = readProps[i];                                  lastIndex = i;                                  lastPrefix = prefix;                                  foundTag = true;                                  break;                              }                              if (readProps[i].FieldPrefix < prefix) break; // too far                          }                      }                        if (!foundTag)                      {                          // check for subclass creation                          foreach (KeyValuePair<Type' Property<T' T>> subclass in subclasses)                          {                              // deserialize the nested data                              if (prefix == subclass.Value.FieldPrefix)                              {                                  foundTag = true;                                  instance = subclass.Value.DeserializeImpl(instance' context);                                  break;                              }                          }                          if (foundTag) continue; // nothing more to do for this...                      }                        // not a sub-class' but *some* data there' so create an object                      if (instance == null)                      {                          instance = ObjectFactory<TCreation>.Create();                          Callback(CallbackType.ObjectCreation' instance);                          extensible = instance as IExtensible;                      }                      if (foundTag)                      {                          // found it by seeking; deserialize and continue                            // ReSharper disable PossibleNullReferenceException                          try                          {                              prop.Deserialize(instance' context);                          }                          catch (UnexpectedDataException ex)                          {                              if (extensible != null)                              {                                  if (extn == null) extn = extensible.GetExtensionObject(true);                                  ex.Serialize(extn);                              }                              // DON'T re-throw; we've handled this                          }                          // ReSharper restore PossibleNullReferenceException                          continue;                      }                        WireType wireType;                      int fieldTag;                      Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                      if (wireType == WireType.EndGroup)                      {                          context.EndGroup(fieldTag);                          break; // this ends the entity' so stop the loop                      }                        // so we couldn't find it...                      if (extensible != null)                      {                          if (extn == null) extn = extensible.GetExtensionObject(true);                          Stream extraStream  = extn.BeginAppend();                          try {                              SerializationContext extraData = new SerializationContext(extraStream' null);                                // copy the data into the output stream                              // ReSharper disable PossibleNullReferenceException                              extraData.EncodeUInt32(prefix);                              // ReSharper restore PossibleNullReferenceException                              ProcessExtraData(context' fieldTag' wireType' extraData);                              extraData.Flush();                              extn.EndAppend(extraStream' true);                          } catch {                              extn.EndAppend(extraStream' false);                              throw;                          }                      }                      else                      {                          Debug.WriteLine("Dropping:" + fieldTag);                          // unexpected fields for an inextensible object; discard the data                          Serializer.SkipData(context' fieldTag' wireType);                      }                  }                                                  // final chance to create an instance - this only gets invoked for empty                  // messages (otherwise instance should already be non-null)                  if (instance == null)                  {                      instance = ObjectFactory<T>.Create();                      Callback(CallbackType.ObjectCreation' instance);                  }                  context.Pop();                  Callback(CallbackType.AfterDeserialization' instance);  #if !CF              } catch (Exception ex)              {                  const string ErrorDataKey = "protoSource";                  if (!ex.Data.Contains(ErrorDataKey))                  {                      ex.Data.Add(ErrorDataKey' string.Format("tag={0}; wire-type={1}; offset={2}; depth={3}; type={4}"'                              (int) (prefix >> 3)' (WireType) (prefix & 7)'                              context.Position' context.Depth' typeof (T).FullName));}                  throw;              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,Deserialize,The following statement contains a magic number: try              {  #endif                  if(instance != null)                  {                      Callback(CallbackType.BeforeDeserialization' instance);                  }                    context.Push();                  int propCount = readProps.Length;                  //context.CheckSpace();                  IExtensible extensible = instance as IExtensible;                  IExtension extn = null;                  Property<T> prop = propCount == 0 ? null : readProps[0];                    int lastIndex = prop == null ? -1 : 0;                  uint lastPrefix = prop == null ? uint.MaxValue : prop.FieldPrefix;                    while (context.TryReadFieldPrefix(out prefix))                  {                      // scan for the correct property                      bool foundTag = false;                      if (prefix == lastPrefix)                      {                          foundTag = true;                      }                      else if (prefix > lastPrefix)                      {                          for (int i = lastIndex + 1; i < propCount; i++)                          {                              if (readProps[i].FieldPrefix == prefix)                              {                                  prop = readProps[i];                                  lastIndex = i;                                  lastPrefix = prefix;                                  foundTag = true;                                  break;                              }                              if (readProps[i].FieldPrefix > prefix) break; // too far                          }                      }                      else                      {                          for (int i = lastIndex - 1; i >= 0; i--)                          {                              if (readProps[i].FieldPrefix == prefix)                              {                                  prop = readProps[i];                                  lastIndex = i;                                  lastPrefix = prefix;                                  foundTag = true;                                  break;                              }                              if (readProps[i].FieldPrefix < prefix) break; // too far                          }                      }                        if (!foundTag)                      {                          // check for subclass creation                          foreach (KeyValuePair<Type' Property<T' T>> subclass in subclasses)                          {                              // deserialize the nested data                              if (prefix == subclass.Value.FieldPrefix)                              {                                  foundTag = true;                                  instance = subclass.Value.DeserializeImpl(instance' context);                                  break;                              }                          }                          if (foundTag) continue; // nothing more to do for this...                      }                        // not a sub-class' but *some* data there' so create an object                      if (instance == null)                      {                          instance = ObjectFactory<TCreation>.Create();                          Callback(CallbackType.ObjectCreation' instance);                          extensible = instance as IExtensible;                      }                      if (foundTag)                      {                          // found it by seeking; deserialize and continue                            // ReSharper disable PossibleNullReferenceException                          try                          {                              prop.Deserialize(instance' context);                          }                          catch (UnexpectedDataException ex)                          {                              if (extensible != null)                              {                                  if (extn == null) extn = extensible.GetExtensionObject(true);                                  ex.Serialize(extn);                              }                              // DON'T re-throw; we've handled this                          }                          // ReSharper restore PossibleNullReferenceException                          continue;                      }                        WireType wireType;                      int fieldTag;                      Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                      if (wireType == WireType.EndGroup)                      {                          context.EndGroup(fieldTag);                          break; // this ends the entity' so stop the loop                      }                        // so we couldn't find it...                      if (extensible != null)                      {                          if (extn == null) extn = extensible.GetExtensionObject(true);                          Stream extraStream  = extn.BeginAppend();                          try {                              SerializationContext extraData = new SerializationContext(extraStream' null);                                // copy the data into the output stream                              // ReSharper disable PossibleNullReferenceException                              extraData.EncodeUInt32(prefix);                              // ReSharper restore PossibleNullReferenceException                              ProcessExtraData(context' fieldTag' wireType' extraData);                              extraData.Flush();                              extn.EndAppend(extraStream' true);                          } catch {                              extn.EndAppend(extraStream' false);                              throw;                          }                      }                      else                      {                          Debug.WriteLine("Dropping:" + fieldTag);                          // unexpected fields for an inextensible object; discard the data                          Serializer.SkipData(context' fieldTag' wireType);                      }                  }                                                  // final chance to create an instance - this only gets invoked for empty                  // messages (otherwise instance should already be non-null)                  if (instance == null)                  {                      instance = ObjectFactory<T>.Create();                      Callback(CallbackType.ObjectCreation' instance);                  }                  context.Pop();                  Callback(CallbackType.AfterDeserialization' instance);  #if !CF              } catch (Exception ex)              {                  const string ErrorDataKey = "protoSource";                  if (!ex.Data.Contains(ErrorDataKey))                  {                      ex.Data.Add(ErrorDataKey' string.Format("tag={0}; wire-type={1}; offset={2}; depth={3}; type={4}"'                              (int) (prefix >> 3)' (WireType) (prefix & 7)'                              context.Position' context.Depth' typeof (T).FullName));}                  throw;              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,ProcessExtraData,The following statement contains a magic number: switch (wireType)              {                  case WireType.Variant:                      len = read.ReadRawVariant();                      write.WriteBlock(read.Workspace' 0' len);                      break;                  case WireType.Fixed32:                      read.ReadBlock(4);                      write.WriteBlock(read.Workspace' 0' 4);                      break;                  case WireType.Fixed64:                      read.ReadBlock(8);                      write.WriteBlock(read.Workspace' 0' 8);                      break;                  case WireType.String:                      len = read.DecodeInt32();                      write.EncodeInt32(len);                      read.WriteTo(write' len);                      break;                  case WireType.StartGroup:                      read.StartGroup(fieldTag);                      uint prefix;                      while (read.TryReadFieldPrefix(out prefix))                      {                          write.EncodeUInt32(prefix);                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              read.EndGroup(fieldTag);                              break;                          }                          ProcessExtraData(read' fieldTag' wireType' write);                      }                      break;                  case WireType.EndGroup:                      throw new ProtoException("End-group not expected at this location");                                  default:                      throw new ProtoException("Unknown wire-type " + wireType);              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,ProcessExtraData,The following statement contains a magic number: switch (wireType)              {                  case WireType.Variant:                      len = read.ReadRawVariant();                      write.WriteBlock(read.Workspace' 0' len);                      break;                  case WireType.Fixed32:                      read.ReadBlock(4);                      write.WriteBlock(read.Workspace' 0' 4);                      break;                  case WireType.Fixed64:                      read.ReadBlock(8);                      write.WriteBlock(read.Workspace' 0' 8);                      break;                  case WireType.String:                      len = read.DecodeInt32();                      write.EncodeInt32(len);                      read.WriteTo(write' len);                      break;                  case WireType.StartGroup:                      read.StartGroup(fieldTag);                      uint prefix;                      while (read.TryReadFieldPrefix(out prefix))                      {                          write.EncodeUInt32(prefix);                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              read.EndGroup(fieldTag);                              break;                          }                          ProcessExtraData(read' fieldTag' wireType' write);                      }                      break;                  case WireType.EndGroup:                      throw new ProtoException("End-group not expected at this location");                                  default:                      throw new ProtoException("Unknown wire-type " + wireType);              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,ProcessExtraData,The following statement contains a magic number: switch (wireType)              {                  case WireType.Variant:                      len = read.ReadRawVariant();                      write.WriteBlock(read.Workspace' 0' len);                      break;                  case WireType.Fixed32:                      read.ReadBlock(4);                      write.WriteBlock(read.Workspace' 0' 4);                      break;                  case WireType.Fixed64:                      read.ReadBlock(8);                      write.WriteBlock(read.Workspace' 0' 8);                      break;                  case WireType.String:                      len = read.DecodeInt32();                      write.EncodeInt32(len);                      read.WriteTo(write' len);                      break;                  case WireType.StartGroup:                      read.StartGroup(fieldTag);                      uint prefix;                      while (read.TryReadFieldPrefix(out prefix))                      {                          write.EncodeUInt32(prefix);                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              read.EndGroup(fieldTag);                              break;                          }                          ProcessExtraData(read' fieldTag' wireType' write);                      }                      break;                  case WireType.EndGroup:                      throw new ProtoException("End-group not expected at this location");                                  default:                      throw new ProtoException("Unknown wire-type " + wireType);              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,ProcessExtraData,The following statement contains a magic number: switch (wireType)              {                  case WireType.Variant:                      len = read.ReadRawVariant();                      write.WriteBlock(read.Workspace' 0' len);                      break;                  case WireType.Fixed32:                      read.ReadBlock(4);                      write.WriteBlock(read.Workspace' 0' 4);                      break;                  case WireType.Fixed64:                      read.ReadBlock(8);                      write.WriteBlock(read.Workspace' 0' 8);                      break;                  case WireType.String:                      len = read.DecodeInt32();                      write.EncodeInt32(len);                      read.WriteTo(write' len);                      break;                  case WireType.StartGroup:                      read.StartGroup(fieldTag);                      uint prefix;                      while (read.TryReadFieldPrefix(out prefix))                      {                          write.EncodeUInt32(prefix);                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              read.EndGroup(fieldTag);                              break;                          }                          ProcessExtraData(read' fieldTag' wireType' write);                      }                      break;                  case WireType.EndGroup:                      throw new ProtoException("End-group not expected at this location");                                  default:                      throw new ProtoException("Unknown wire-type " + wireType);              }
Magic Number,ProtoBuf,Serializer<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializerT.cs,FindCallback,The following statement contains a magic number: if(found != null)              {                  ParameterInfo[] args = found.GetParameters();                  SerializationCallback callback;                  if(found.ReturnType == typeof(void) && args.Length == 0)                  {  #if CF2                      callback = delegate(T instance) { found.Invoke(instance' null); };  #else                      callback = (SerializationCallback)Delegate.CreateDelegate(                          typeof(SerializationCallback)' null' found);  #endif                    }  #if !SILVERLIGHT && !CF                  else if (found.ReturnType == typeof(void) && args.Length == 1                      && args[0].ParameterType == typeof(StreamingContext))                  {                      Setter<T' StreamingContext> inner = (Setter<T' StreamingContext>)                          Delegate.CreateDelegate(typeof (Setter<T' StreamingContext>)' null' found);                      callback = delegate(T instance)                      {                          inner(instance' SerializationContext.EmptyStreamingContext);                      };                  }  #endif                  else                  {                      throw new ProtoException("Unexpected signature on callback: " + typeof(T).Name + "." + found.Name);                  }                  if(callbacks == null) callbacks = new SerializationCallback[5];                  callbacks[(int) callbackType] = callback;              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,CheckSpace,The following statement contains a magic number: if (workspace.Length < length)              {                  // note that the workspace is a scratch area' and can be                  // discarded; no need to preserve the contents                  int newLen = workspace.Length * 2; // try doubling                  if (length > newLen) newLen = length; // as long as that gives us enough ;-p                  workspace = new byte[newLen];               }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse4,The following statement contains a magic number: buffer[index + 0] = buffer[index + 3];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse4,The following statement contains a magic number: buffer[index + 3] = tmp;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse4,The following statement contains a magic number: buffer[index + 1] = buffer[index + 2];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse4,The following statement contains a magic number: buffer[index + 2] = tmp;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 0] = buffer[index + 7];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 7] = tmp;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 1] = buffer[index + 6];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 6] = tmp;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: tmp = buffer[index + 2];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 2] = buffer[index + 5];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 2] = buffer[index + 5];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 5] = tmp;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: tmp = buffer[index + 3];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 3] = buffer[index + 4];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 3] = buffer[index + 4];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Reverse8,The following statement contains a magic number: buffer[index + 4] = tmp;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: while(offset < 3 && (read = source.Read(buffer' offset' 4-offset)) > 0)              {                  offset += read;              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: while(offset < 3 && (read = source.Read(buffer' offset' 4-offset)) > 0)              {                  offset += read;              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: if (offset != 4) throw new EndOfStreamException();
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: return ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: return ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: return ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: return ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32Fixed,The following statement contains a magic number: return ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: while (offset < 3 && (read = source.Read(buffer' offset' 4 - offset)) > 0)              {                  offset += read;              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: while (offset < 3 && (read = source.Read(buffer' offset' 4 - offset)) > 0)              {                  offset += read;              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: if (offset != 4) throw new EndOfStreamException();
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = ((uint)buffer[0])              | (((uint)buffer[1]) << 8)              | (((uint)buffer[2]) << 16)              | (((uint)buffer[3]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32,The following statement contains a magic number: int shift = 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32,The following statement contains a magic number: do              {                  b = source.ReadByte();                  if (b < 0) throw new EndOfStreamException();                  i++;                  keepGoing = (b & 0x80) != 0;                  value |= ((uint)(b & 0x7F)) << shift;                  shift += 7;              } while (keepGoing && i < 4);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32,The following statement contains a magic number: do              {                  b = source.ReadByte();                  if (b < 0) throw new EndOfStreamException();                  i++;                  keepGoing = (b & 0x80) != 0;                  value |= ((uint)(b & 0x7F)) << shift;                  shift += 7;              } while (keepGoing && i < 4);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32,The following statement contains a magic number: if (keepGoing && i == 4)              {                  throw new OverflowException();              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32,The following statement contains a magic number: Fill(4'false);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32,The following statement contains a magic number: int shift = 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32,The following statement contains a magic number: do              {                  if (ioBufferIndex == ioBufferEffectiveSize) throw new EndOfStreamException();                  b = ioBuffer[ioBufferIndex++];                  i++;                  keepGoing = (b & 0x80) != 0;                  value |= ((uint)(b & 0x7F)) << shift;                  shift += 7;              } while (keepGoing && i < 4);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32,The following statement contains a magic number: do              {                  if (ioBufferIndex == ioBufferEffectiveSize) throw new EndOfStreamException();                  b = ioBuffer[ioBufferIndex++];                  i++;                  keepGoing = (b & 0x80) != 0;                  value |= ((uint)(b & 0x7F)) << shift;                  shift += 7;              } while (keepGoing && i < 4);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeUInt32,The following statement contains a magic number: if (keepGoing && i == 4)              {                  throw new OverflowException();              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64,The following statement contains a magic number: do              {                  b = this.ReadByte();                  if (b < 0)                  {                      throw new EndOfStreamException();                  }                    if (shift == 63)                  {                      // check that only the lsb is set in the final block                      if ((b & (byte)254) != 0)                      {                          throw new OverflowException("Overflow reading Int64");                      }                        // add the final bit                      long usefulBits = (long)(b & 1);                      value |= (usefulBits << shift);                      break;                  }                  else                  {                      // received little-endian' so shift the data into place                      long usefulBits = (long)(b & 127);                      value |= (usefulBits << shift);                      shift += 7;                  }              }              while ((b & 128) != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64,The following statement contains a magic number: do              {                  b = this.ReadByte();                  if (b < 0)                  {                      throw new EndOfStreamException();                  }                    if (shift == 63)                  {                      // check that only the lsb is set in the final block                      if ((b & (byte)254) != 0)                      {                          throw new OverflowException("Overflow reading Int64");                      }                        // add the final bit                      long usefulBits = (long)(b & 1);                      value |= (usefulBits << shift);                      break;                  }                  else                  {                      // received little-endian' so shift the data into place                      long usefulBits = (long)(b & 127);                      value |= (usefulBits << shift);                      shift += 7;                  }              }              while ((b & 128) != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64,The following statement contains a magic number: do              {                  b = this.ReadByte();                  if (b < 0)                  {                      throw new EndOfStreamException();                  }                    if (shift == 63)                  {                      // check that only the lsb is set in the final block                      if ((b & (byte)254) != 0)                      {                          throw new OverflowException("Overflow reading Int64");                      }                        // add the final bit                      long usefulBits = (long)(b & 1);                      value |= (usefulBits << shift);                      break;                  }                  else                  {                      // received little-endian' so shift the data into place                      long usefulBits = (long)(b & 127);                      value |= (usefulBits << shift);                      shift += 7;                  }              }              while ((b & 128) != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64,The following statement contains a magic number: do              {                  b = this.ReadByte();                  if (b < 0)                  {                      throw new EndOfStreamException();                  }                    if (shift == 63)                  {                      // check that only the lsb is set in the final block                      if ((b & (byte)254) != 0)                      {                          throw new OverflowException("Overflow reading Int64");                      }                        // add the final bit                      long usefulBits = (long)(b & 1);                      value |= (usefulBits << shift);                      break;                  }                  else                  {                      // received little-endian' so shift the data into place                      long usefulBits = (long)(b & 127);                      value |= (usefulBits << shift);                      shift += 7;                  }              }              while ((b & 128) != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64,The following statement contains a magic number: do              {                  b = this.ReadByte();                  if (b < 0)                  {                      throw new EndOfStreamException();                  }                    if (shift == 63)                  {                      // check that only the lsb is set in the final block                      if ((b & (byte)254) != 0)                      {                          throw new OverflowException("Overflow reading Int64");                      }                        // add the final bit                      long usefulBits = (long)(b & 1);                      value |= (usefulBits << shift);                      break;                  }                  else                  {                      // received little-endian' so shift the data into place                      long usefulBits = (long)(b & 127);                      value |= (usefulBits << shift);                      shift += 7;                  }              }              while ((b & 128) != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,ReadRawVariant,The following statement contains a magic number: do              {                  b = this.ReadByte();                  if (b < 0) throw new EndOfStreamException();                  workspace[index++] = (byte)b;              }              while ((b & 128) != 0 && index <= 10);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,ReadRawVariant,The following statement contains a magic number: do              {                  b = this.ReadByte();                  if (b < 0) throw new EndOfStreamException();                  workspace[index++] = (byte)b;              }              while ((b & 128) != 0 && index <= 10);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,ReadRawVariant,The following statement contains a magic number: if (index == 10 && (b & 128) != 0)              {                  throw new OverflowException();              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,ReadRawVariant,The following statement contains a magic number: if (index == 10 && (b & 128) != 0)              {                  throw new OverflowException();              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Read,The following statement contains a magic number: if (count <= cached)              {   // all available from cache                  if (count <= 8)                  {                      // copy manually for small BLOBs                      int tmp = count;                      while (--tmp >= 0)                      {                          buffer[offset++] = ioBuffer[ioBufferIndex++];                      }                  }                  else                  {                      // blit                      Buffer.BlockCopy(ioBuffer' ioBufferIndex' buffer' offset' count);                      ioBufferIndex += count;                  }                  position += count;                  return count;              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Read,The following statement contains a magic number: if (cached > 8)              {                  // blit                      Buffer.BlockCopy(ioBuffer' ioBufferIndex' buffer' offset' cached);                  count -= cached;                  ioBufferIndex += cached;                  totalRead += cached;                  offset += cached;              }              else if(cached > 0)              {                  // copy manually for small BLOBs                  totalRead += cached;                  count -= cached;                  while (--cached >= 0)                  {                      buffer[offset++] = ioBuffer[ioBufferIndex++];                  }              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeSingle,The following statement contains a magic number: Fill(4' true);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeSingle,The following statement contains a magic number: ioBufferIndex += 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeSingle,The following statement contains a magic number: position += 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeDouble,The following statement contains a magic number: Fill(8' true);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeDouble,The following statement contains a magic number: ioBufferIndex += 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeDouble,The following statement contains a magic number: position += 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: Fill(3'true);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = (uint)first                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = (uint)first                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: value = (uint)first                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,TryDecodeUInt32Fixed,The following statement contains a magic number: position += 3;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt32Fixed,The following statement contains a magic number: Fill(4' true);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt32Fixed,The following statement contains a magic number: int value =                      ((int)ioBuffer[ioBufferIndex++])                  | (((int)ioBuffer[ioBufferIndex++]) << 8)                  | (((int)ioBuffer[ioBufferIndex++]) << 16)                  | (((int)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt32Fixed,The following statement contains a magic number: int value =                      ((int)ioBuffer[ioBufferIndex++])                  | (((int)ioBuffer[ioBufferIndex++]) << 8)                  | (((int)ioBuffer[ioBufferIndex++]) << 16)                  | (((int)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt32Fixed,The following statement contains a magic number: int value =                      ((int)ioBuffer[ioBufferIndex++])                  | (((int)ioBuffer[ioBufferIndex++]) << 8)                  | (((int)ioBuffer[ioBufferIndex++]) << 16)                  | (((int)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt32Fixed,The following statement contains a magic number: position += 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: Fill(8' true);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: uint lo =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24)'                  hi =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: uint lo =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24)'                  hi =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: uint lo =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24)'                  hi =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: uint lo =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24)'                  hi =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: uint lo =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24)'                  hi =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: uint lo =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24)'                  hi =                     ((uint)ioBuffer[ioBufferIndex++])                  | (((uint)ioBuffer[ioBufferIndex++]) << 8)                  | (((uint)ioBuffer[ioBufferIndex++]) << 16)                  | (((uint)ioBuffer[ioBufferIndex++]) << 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: position += 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,DecodeInt64Fixed,The following statement contains a magic number: return (long)((hiL << 32) | loL);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Zig,The following statement contains a magic number: return (uint)((value << 1) ^ (value >> 31));
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,Zig,The following statement contains a magic number: return (ulong)((value << 1) ^ (value >> 63));
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,WriteBlock,The following statement contains a magic number: if (ioBufferIndex + count < IO_BUFFER_SIZE)              {                  // enough space in the buffer                  if(count <= 8)                  {                      // copy manually                      while (--count >= 0)                      {                          ioBuffer[ioBufferIndex++] = buffer[offset++];                      }                  }                  else                  {                      // blit                      Buffer.BlockCopy(buffer' offset' ioBuffer' ioBufferIndex' count);                      ioBufferIndex += count;                  }              }              else              { // not enough space; flush and write directly to the output                  // (assume blobs are big)                  Flush();                  stream.Write(buffer' offset' count);              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt32,The following statement contains a magic number: if (value < 128)              {                  Flush(1);                  ioBuffer[ioBufferIndex++] = (byte)value;                  position++;                  return 1;              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt32,The following statement contains a magic number: Flush(5);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt32,The following statement contains a magic number: do              {                  ioBuffer[ioBufferIndex++] = (byte)((value & 0x7F) | 0x80);                  value >>= 7;                  count++;              } while (value != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt32Fixed,The following statement contains a magic number: buffer[index++] = (byte)(value >> 8);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt32Fixed,The following statement contains a magic number: buffer[index++] = (byte)(value >> 16);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt32Fixed,The following statement contains a magic number: buffer[index] = (byte)(value >> 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt32,The following statement contains a magic number: do              {                  buffer[index++] = (byte)((value & 0x7F) | 0x80);                  value >>= 7;                  count++;              } while (value != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt64,The following statement contains a magic number: Flush(10);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeUInt64,The following statement contains a magic number: do              {                  ioBuffer[ioBufferIndex++] = (byte)((value & 0x7F) | 0x80);                  value >>= 7;                  count++;              } while (value != 0);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32Fixed,The following statement contains a magic number: Flush(4);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 8);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 16);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32Fixed,The following statement contains a magic number: position += 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32Fixed,The following statement contains a magic number: return 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: Flush(8);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 8);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 16);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 24);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 32);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 40);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 48);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)(value >> 56);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: position += 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt64Fixed,The following statement contains a magic number: return 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32,The following statement contains a magic number: Flush(10);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)((value >> 7) | 0x80);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)((value >> 14) | 0x80);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)((value >> 21) | 0x80);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32,The following statement contains a magic number: ioBuffer[ioBufferIndex++] = (byte)((value >> 28) | 0x80);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32,The following statement contains a magic number: position += 10;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeInt32,The following statement contains a magic number: return 10;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeSingle,The following statement contains a magic number: Flush(4);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeSingle,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeSingle,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeSingle,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeSingle,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeSingle,The following statement contains a magic number: position += 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeSingle,The following statement contains a magic number: return 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: Flush(8);
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  ioBuffer[ioBufferIndex++] = raw[0];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[7];              }              else              {                  ioBuffer[ioBufferIndex++] = raw[7];                  ioBuffer[ioBufferIndex++] = raw[6];                  ioBuffer[ioBufferIndex++] = raw[5];                  ioBuffer[ioBufferIndex++] = raw[4];                  ioBuffer[ioBufferIndex++] = raw[3];                  ioBuffer[ioBufferIndex++] = raw[2];                  ioBuffer[ioBufferIndex++] = raw[1];                  ioBuffer[ioBufferIndex++] = raw[0];              }
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: position += 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,EncodeDouble,The following statement contains a magic number: return 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 2;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 3;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: return value == 0 ? 4 : 5;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: return value == 0 ? 4 : 5;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value < 0) return 10;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 2;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 3;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: return value == 0 ? 4 : 5;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: return value == 0 ? 4 : 5;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value < 0) return 10;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 2;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 3;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 4;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 5;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 6;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: if (value == 0) return 8;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: value >>= 7;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: return value == 0 ? 9 : 10;
Magic Number,ProtoBuf,SerializationContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SerializationContext.cs,GetLength,The following statement contains a magic number: return value == 0 ? 9 : 10;
Magic Number,ProtoBuf,SubStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\SubStream.cs,Dispose,The following statement contains a magic number: if (disposing && parent != null)              {                  if (closesParent)                  { // close the parent completely                      parent.Close();                  }                  else                  { // move the parent past this sub-data                      long remaining = length - position' bytes;                      if (remaining > 0)                      {                          if (CanSeek)                          {   // seek the stream                              parent.Seek(remaining' SeekOrigin.Current);                          }                          else                          {   // burn up the stream                              const int DEFAULT_SIZE = 4096;                              byte[] buffer = new byte[remaining < DEFAULT_SIZE ? remaining : DEFAULT_SIZE];                              while (remaining > 0 && (bytes = parent.Read(buffer' 0' buffer.Length)) > 0)                              {                                  remaining -= bytes;                              }                          }                      }                  }                    parent = null;              }
Magic Number,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,SerializeWithLengthPrefix,The following statement contains a magic number: foreach (MethodInfo method in typeof(Serializer).GetMethods(                      BindingFlags.Static | BindingFlags.Public))                  {                      ParameterInfo[] p;                      if (method.Name == "SerializeWithLengthPrefix" && method.IsGenericMethod)                      {                          MethodInfo genericMethod = method.MakeGenericMethod(instance.GetType());                          if((p = genericMethod.GetParameters()).Length == 4                              && p[0].ParameterType == typeof(Stream)                              && p[2].ParameterType == typeof(PrefixStyle)                              && p[3].ParameterType == typeof(int))                          {                              genericMethod.Invoke(                                 null' new object[] { destination' instance' style' tag });                              return;                          }                                              }                  }
Magic Number,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,SerializeWithLengthPrefix,The following statement contains a magic number: foreach (MethodInfo method in typeof(Serializer).GetMethods(                      BindingFlags.Static | BindingFlags.Public))                  {                      ParameterInfo[] p;                      if (method.Name == "SerializeWithLengthPrefix" && method.IsGenericMethod)                      {                          MethodInfo genericMethod = method.MakeGenericMethod(instance.GetType());                          if((p = genericMethod.GetParameters()).Length == 4                              && p[0].ParameterType == typeof(Stream)                              && p[2].ParameterType == typeof(PrefixStyle)                              && p[3].ParameterType == typeof(int))                          {                              genericMethod.Invoke(                                 null' new object[] { destination' instance' style' tag });                              return;                          }                                              }                  }
Magic Number,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,SerializeWithLengthPrefix,The following statement contains a magic number: foreach (MethodInfo method in typeof(Serializer).GetMethods(                      BindingFlags.Static | BindingFlags.Public))                  {                      ParameterInfo[] p;                      if (method.Name == "SerializeWithLengthPrefix" && method.IsGenericMethod)                      {                          MethodInfo genericMethod = method.MakeGenericMethod(instance.GetType());                          if((p = genericMethod.GetParameters()).Length == 4                              && p[0].ParameterType == typeof(Stream)                              && p[2].ParameterType == typeof(PrefixStyle)                              && p[3].ParameterType == typeof(int))                          {                              genericMethod.Invoke(                                 null' new object[] { destination' instance' style' tag });                              return;                          }                                              }                  }
Magic Number,ProtoBuf,NonGeneric,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\NonGeneric.cs,Serialize,The following statement contains a magic number: foreach (MethodInfo method in typeof(Serializer).GetMethods(                      BindingFlags.Static | BindingFlags.Public))                  {                      ParameterInfo[] p;                      if (method.Name == "Serialize" && method.IsGenericMethod                          && (p = method.GetParameters()).Length == 2                          && p[0].ParameterType == typeof(Stream))                      {                          method.MakeGenericMethod(instance.GetType()).Invoke(                              null' new object[] { destination' instance });                          return;                      }                  }
Magic Number,ProtoBuf.Property,PropertyEnum<TSource;TEnum>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyEnum.cs,PropertyEnum,The following statement contains a magic number: foreach (Serializer.ProtoEnumValue<TEnum> value in Serializer.GetEnumValues<TEnum>())              {                  bool add = true;                  foreach (KeyValuePair<TEnum' int> existing in list)                  {                      int match = 0;                      if (existing.Value == value.WireValue) match++;                      if (enumComparer.Equals(existing.Key' value.EnumValue)) match++;                      switch(match)                      {                          case 2:                              add = false;                              break; // exact dup in the enum definition; it doesn't matter                          case 1:                              errMsg = string.Format("The enum {0} has conflicting values {1} and {2}"'                              typeof(TEnum)' existing.Key' value.Name);                              return; // but throw from the *regular* ctor to prevent obscure type init errors                      }                  }                  if (add) {                      list.Add(new KeyValuePair<TEnum' int>(value.EnumValue' value.WireValue));                  }              }
Magic Number,ProtoBuf.Property,PropertyString<TSource>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyString.cs,Serialize,The following statement contains a magic number: if (charCount == 0)              {                  int prefixLen = WritePrefix(context);                  context.WriteByte(0);                  return prefixLen + 1;              }              else if (charCount <= 42) {                  // guaranteed to have a byte length at most 127' so single byte;                  // any text up to 42 chars will take at most 126 bytes                  context.CheckSpace((3 * charCount) + 1);                  int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                  context.Workspace[0] = (byte)byteCount;                  context.WriteBlock(context.Workspace' 0' ++byteCount);                  return prefixLen + byteCount;                    } else if (charCount <= 127) {                  // common text in many locales will /tend/ to be single-byte. We'll                  // absorb the cost of checking the actual length' since we know it                  // is only a short string.                  underEstimate = (uint)utf8.GetByteCount(value);                  if(underEstimate <= 127) {                      context.CheckSpace((int)(underEstimate + 1));                      int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                      context.Workspace[0] = (byte)byteCount;                      context.WriteBlock(context.Workspace' 0' ++byteCount);                      return prefixLen + byteCount;                      }                  // note also that we update "underEstimate"; this means that even                  // if we find a 100-char string actually needs multiple bytes                  // (and so we'll use the callback below)' we at least start the                  // callback with the correct length' avoiding the need to                  // encode it twice.              }
Magic Number,ProtoBuf.Property,PropertyString<TSource>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyString.cs,Serialize,The following statement contains a magic number: if (charCount == 0)              {                  int prefixLen = WritePrefix(context);                  context.WriteByte(0);                  return prefixLen + 1;              }              else if (charCount <= 42) {                  // guaranteed to have a byte length at most 127' so single byte;                  // any text up to 42 chars will take at most 126 bytes                  context.CheckSpace((3 * charCount) + 1);                  int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                  context.Workspace[0] = (byte)byteCount;                  context.WriteBlock(context.Workspace' 0' ++byteCount);                  return prefixLen + byteCount;                    } else if (charCount <= 127) {                  // common text in many locales will /tend/ to be single-byte. We'll                  // absorb the cost of checking the actual length' since we know it                  // is only a short string.                  underEstimate = (uint)utf8.GetByteCount(value);                  if(underEstimate <= 127) {                      context.CheckSpace((int)(underEstimate + 1));                      int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                      context.Workspace[0] = (byte)byteCount;                      context.WriteBlock(context.Workspace' 0' ++byteCount);                      return prefixLen + byteCount;                      }                  // note also that we update "underEstimate"; this means that even                  // if we find a 100-char string actually needs multiple bytes                  // (and so we'll use the callback below)' we at least start the                  // callback with the correct length' avoiding the need to                  // encode it twice.              }
Magic Number,ProtoBuf.Property,PropertyString<TSource>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyString.cs,Serialize,The following statement contains a magic number: if (charCount == 0)              {                  int prefixLen = WritePrefix(context);                  context.WriteByte(0);                  return prefixLen + 1;              }              else if (charCount <= 42) {                  // guaranteed to have a byte length at most 127' so single byte;                  // any text up to 42 chars will take at most 126 bytes                  context.CheckSpace((3 * charCount) + 1);                  int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                  context.Workspace[0] = (byte)byteCount;                  context.WriteBlock(context.Workspace' 0' ++byteCount);                  return prefixLen + byteCount;                    } else if (charCount <= 127) {                  // common text in many locales will /tend/ to be single-byte. We'll                  // absorb the cost of checking the actual length' since we know it                  // is only a short string.                  underEstimate = (uint)utf8.GetByteCount(value);                  if(underEstimate <= 127) {                      context.CheckSpace((int)(underEstimate + 1));                      int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                      context.Workspace[0] = (byte)byteCount;                      context.WriteBlock(context.Workspace' 0' ++byteCount);                      return prefixLen + byteCount;                      }                  // note also that we update "underEstimate"; this means that even                  // if we find a 100-char string actually needs multiple bytes                  // (and so we'll use the callback below)' we at least start the                  // callback with the correct length' avoiding the need to                  // encode it twice.              }
Magic Number,ProtoBuf.Property,PropertyString<TSource>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyString.cs,Serialize,The following statement contains a magic number: if (charCount == 0)              {                  int prefixLen = WritePrefix(context);                  context.WriteByte(0);                  return prefixLen + 1;              }              else if (charCount <= 42) {                  // guaranteed to have a byte length at most 127' so single byte;                  // any text up to 42 chars will take at most 126 bytes                  context.CheckSpace((3 * charCount) + 1);                  int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                  context.Workspace[0] = (byte)byteCount;                  context.WriteBlock(context.Workspace' 0' ++byteCount);                  return prefixLen + byteCount;                    } else if (charCount <= 127) {                  // common text in many locales will /tend/ to be single-byte. We'll                  // absorb the cost of checking the actual length' since we know it                  // is only a short string.                  underEstimate = (uint)utf8.GetByteCount(value);                  if(underEstimate <= 127) {                      context.CheckSpace((int)(underEstimate + 1));                      int prefixLen = WritePrefix(context)'                      byteCount = utf8.GetBytes(value' 0' charCount' context.Workspace' 1);                      context.Workspace[0] = (byte)byteCount;                      context.WriteBlock(context.Workspace' 0' ++byteCount);                      return prefixLen + byteCount;                      }                  // note also that we update "underEstimate"; this means that even                  // if we find a 100-char string actually needs multiple bytes                  // (and so we'll use the callback below)' we at least start the                  // callback with the correct length' avoiding the need to                  // encode it twice.              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,DeserializeDecimal,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldDecimalLow << 3) | (int)WireType.Variant:                          low = (ulong)context.DecodeInt64();                          break;                      case (FieldDecimalHigh << 3) | (int)WireType.Variant:                          high = (uint)context.DecodeInt32();                          break;                      case (FieldDecimalSignScale << 3) | (int)WireType.Variant:                          signScale = (uint)context.DecodeInt32();                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldDecimalHigh:                              case FieldDecimalLow:                              case FieldDecimalSignScale:                                  throw new ProtoException("Incorrect wire-type deserializing Decimal");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,DeserializeDecimal,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldDecimalLow << 3) | (int)WireType.Variant:                          low = (ulong)context.DecodeInt64();                          break;                      case (FieldDecimalHigh << 3) | (int)WireType.Variant:                          high = (uint)context.DecodeInt32();                          break;                      case (FieldDecimalSignScale << 3) | (int)WireType.Variant:                          signScale = (uint)context.DecodeInt32();                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldDecimalHigh:                              case FieldDecimalLow:                              case FieldDecimalSignScale:                                  throw new ProtoException("Incorrect wire-type deserializing Decimal");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,DeserializeDecimal,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldDecimalLow << 3) | (int)WireType.Variant:                          low = (ulong)context.DecodeInt64();                          break;                      case (FieldDecimalHigh << 3) | (int)WireType.Variant:                          high = (uint)context.DecodeInt32();                          break;                      case (FieldDecimalSignScale << 3) | (int)WireType.Variant:                          signScale = (uint)context.DecodeInt32();                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldDecimalHigh:                              case FieldDecimalLow:                              case FieldDecimalSignScale:                                  throw new ProtoException("Incorrect wire-type deserializing Decimal");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,DeserializeDecimal,The following statement contains a magic number: int lo = (int)(low & 0xFFFFFFFFL)'                  mid = (int)((low >> 32) & 0xFFFFFFFFL)'                  hi = (int)high;
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: ulong a = ((ulong)bits[1]) << 32' b = ((ulong)bits[0]) & 0xFFFFFFFFL;
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: uint high = (uint) bits[2];
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: uint signScale = (uint)(((bits[3] >> 15) & 0x01FE) | ((bits[3] >> 31) & 0x0001));
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: uint signScale = (uint)(((bits[3] >> 15) & 0x01FE) | ((bits[3] >> 31) & 0x0001));
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: uint signScale = (uint)(((bits[3] >> 15) & 0x01FE) | ((bits[3] >> 31) & 0x0001));
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: uint signScale = (uint)(((bits[3] >> 15) & 0x01FE) | ((bits[3] >> 31) & 0x0001));
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: if (lengthPrefixed)              {                  if (low != 0) len += 1 + SerializationContext.GetLength((long)low);                  if (high != 0) len += 1 + SerializationContext.GetLength((long)high);                  if (signScale!=0) len += 2;                  len = context.EncodeInt32(len);              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: if (low != 0)              {                  context.WriteByte((FieldDecimalLow << 3) | (int)WireType.Variant);                  len += 1 + context.EncodeInt64((long)low);              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: if (high != 0)              { // note encode as long to avoid high sign issues                  context.WriteByte((FieldDecimalHigh << 3) | (int)WireType.Variant);                  len += 1 + context.EncodeInt64((long)high);              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: if (signScale != 0)              {                  context.WriteByte((FieldDecimalSignScale << 3) | (int)WireType.Variant);                  context.WriteByte((byte)signScale);                  len += 2;              }
Magic Number,ProtoBuf.ProtoBcl,ProtoDecimal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoDecimal.cs,SerializeDecimal,The following statement contains a magic number: if (signScale != 0)              {                  context.WriteByte((FieldDecimalSignScale << 3) | (int)WireType.Variant);                  context.WriteByte((byte)signScale);                  len += 2;              }
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Deserialize,The following statement contains a magic number: byte[] buffer = new byte[16];
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Deserialize,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldLo << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 0' 8);                          break;                      case (FieldHi << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 8' 8);                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldLo:                              case FieldHi:                                  throw new ProtoException("Incorrect wire-type deserializing Guid");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Deserialize,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldLo << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 0' 8);                          break;                      case (FieldHi << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 8' 8);                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldLo:                              case FieldHi:                                  throw new ProtoException("Incorrect wire-type deserializing Guid");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Deserialize,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldLo << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 0' 8);                          break;                      case (FieldHi << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 8' 8);                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldLo:                              case FieldHi:                                  throw new ProtoException("Incorrect wire-type deserializing Guid");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Deserialize,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldLo << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 0' 8);                          break;                      case (FieldHi << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 8' 8);                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldLo:                              case FieldHi:                                  throw new ProtoException("Incorrect wire-type deserializing Guid");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Deserialize,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldLo << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 0' 8);                          break;                      case (FieldHi << 3) | (int)WireType.Fixed64:                          context.ReadBlock(buffer' 8' 8);                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldLo:                              case FieldHi:                                  throw new ProtoException("Incorrect wire-type deserializing Guid");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Serialize,The following statement contains a magic number: if (lengthPrefix)              {                  context.WriteByte((byte)18);                  len = 1;              }
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Serialize,The following statement contains a magic number: context.WriteByte(FieldLo << 3 | (int)WireType.Fixed64);
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Serialize,The following statement contains a magic number: context.WriteBlock(buffer' 0' 8);
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Serialize,The following statement contains a magic number: context.WriteByte(FieldHi << 3 | (int)WireType.Fixed64);
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Serialize,The following statement contains a magic number: context.WriteBlock(buffer' 8' 8);
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Serialize,The following statement contains a magic number: context.WriteBlock(buffer' 8' 8);
Magic Number,ProtoBuf.ProtoBcl,ProtoGuid,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoGuid.cs,Serialize,The following statement contains a magic number: return len + 18;
Magic Number,ProtoBuf.ProtoBcl,ProtoTimeSpan,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoTimeSpan.cs,DeserializeTicks,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldTimeSpanScale << 3) | (int)WireType.Variant:                          scale = (TimeSpanScale)context.DecodeInt32();                          break;                      case (FieldTimeSpanValue << 3) | (int)WireType.Variant:                          value = SerializationContext.Zag(context.DecodeUInt64());                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldTimeSpanScale:                              case FieldTimeSpanValue:                                  throw new ProtoException("Incorrect wire-type deserializing TimeSpan");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoTimeSpan,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoTimeSpan.cs,DeserializeTicks,The following statement contains a magic number: while (keepRunning && context.TryReadFieldPrefix(out prefix))              {                  switch (prefix)                  {                      case (FieldTimeSpanScale << 3) | (int)WireType.Variant:                          scale = (TimeSpanScale)context.DecodeInt32();                          break;                      case (FieldTimeSpanValue << 3) | (int)WireType.Variant:                          value = SerializationContext.Zag(context.DecodeUInt64());                          break;                      default:                          WireType wireType;                          int fieldTag;                          Serializer.ParseFieldToken(prefix' out wireType' out fieldTag);                          if (wireType == WireType.EndGroup)                          {                              context.EndGroup(fieldTag);                              keepRunning = false;                              continue;                          }                          switch (fieldTag)                          {                              case FieldTimeSpanScale:                              case FieldTimeSpanValue:                                  throw new ProtoException("Incorrect wire-type deserializing TimeSpan");                              default:                                  Serializer.SkipData(context' fieldTag' wireType);                                  break;                          }                          break;                  }              }
Magic Number,ProtoBuf.ProtoBcl,ProtoTimeSpan,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoTimeSpan.cs,SerializeTimeSpan,The following statement contains a magic number: if (lengthPrefixed)              {                  if (scale != TimeSpanScale.Days)                  {                      len += 2;                  }                  if (zig != 0)                  {                      len += 1 + SerializationContext.GetLength(zig);                  }                  context.WriteByte((byte)len);                  len = 1;              }
Magic Number,ProtoBuf.ProtoBcl,ProtoTimeSpan,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoTimeSpan.cs,SerializeTimeSpan,The following statement contains a magic number: if (value != 0)              {                  context.WriteByte((FieldTimeSpanValue << 3) | (int)WireType.Variant);                  len += 1 + context.EncodeUInt64(zig);              }
Magic Number,ProtoBuf.ProtoBcl,ProtoTimeSpan,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ProtoBcl\ProtoTimeSpan.cs,SerializeTimeSpan,The following statement contains a magic number: if (scale != TimeSpanScale.Days)              {                  context.WriteByte((FieldTimeSpanScale << 3) | (int)WireType.Variant);                  len += 1 + context.EncodeInt32((int)scale);              }
Magic Number,ProtoBuf.ServiceModel,RpcUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\RpcUtils.cs,PackArgs,The following statement contains a magic number: for (int i = 0; i < parameters.Length; i++)              {                  ParameterInfo p = parameters[i];                  if (predicate(p) && args[i] != null)                  {                      Serializer.NonGeneric.SerializeWithLengthPrefix(stream' args[i]' PrefixStyle.Base128' i + 2);                  }              }
Magic Number,ProtoBuf.ServiceModel,RpcUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\RpcUtils.cs,UnpackArgs,The following statement contains a magic number: while (Serializer.NonGeneric.TryDeserializeWithLengthPrefix(stream' PrefixStyle.Base128'                      delegate(int tag)                      {                          lastPos = tag - 2;                          if (lastPos == -1)                          {                              return method.ReturnType == typeof(void) ? null : method.ReturnType;                          }                          else if (lastPos >= 0 && lastPos < args.Length && predicate(parameters[lastPos]))                          {                              return parameters[lastPos].ParameterType;                          }                          return null;                      }' out lastItem))              {                  if (lastPos == -1)                  {                      result = lastItem;                  }                  else                  {                      args[lastPos] = lastItem;                  }              }
Magic Number,ProtoBuf.ServiceModel.Server,HttpServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\HttpServer.cs,ProcessContext,The following statement contains a magic number: if(segments.Length != uriPrefix.Segments.Length + 2) {                  throw new InvalidOperationException("Invalid path to service");              }
Magic Number,ProtoBuf.ServiceModel.Server,HttpServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\ServiceModel\Server\HttpServer.cs,ProcessContext,The following statement contains a magic number: string serviceName = segments[segments.Length -2].TrimEnd('/')'                  actionName = segments[segments.Length - 1].TrimEnd('/');
Missing Default,ProtoBuf,Serializer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Serializer.cs,GetProtoMembers,The following switch statement is missing a default case: switch(member.MemberType) {                      case MemberTypes.Property:                      case MemberTypes.Field:                          yield return member;                          break;                  }
Missing Default,ProtoBuf.Property,PropertyPairString<TSource;TKey;TValue>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyPairString.cs,DeserializeImpl,The following switch statement is missing a default case: switch(tag)                      {                          case TAG_KEY:                          case TAG_VALUE:                              throw new ProtoException("Incorrect wire-type reading key/value pair");                      }
Missing Default,ProtoBuf.Property,PropertyEnum<TSource;TEnum>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyEnum.cs,PropertyEnum,The following switch statement is missing a default case: switch(match)                      {                          case 2:                              add = false;                              break; // exact dup in the enum definition; it doesn't matter                          case 1:                              errMsg = string.Format("The enum {0} has conflicting values {1} and {2}"'                              typeof(TEnum)' existing.Key' value.Name);                              return; // but throw from the *regular* ctor to prevent obscure type init errors                      }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Default:                      case DataFormat.TwosComplement:                          format = DataFormat.TwosComplement;                          return new PropertyInt32Variant<T>();                      case DataFormat.ZigZag:                          return new PropertyInt32ZigZag<T>();                      case DataFormat.FixedSize:                          return new PropertyInt32Fixed<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Default:                      case DataFormat.TwosComplement:                          format = DataFormat.TwosComplement;                          return new PropertyInt16Variant<T>();                      case DataFormat.ZigZag:                          return new PropertyInt16ZigZag<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Default:                      case DataFormat.TwosComplement:                          format = DataFormat.TwosComplement;                          return new PropertyInt64Variant<T>();                      case DataFormat.ZigZag:                          return new PropertyInt64ZigZag<T>();                      case DataFormat.FixedSize:                          return new PropertyInt64Fixed<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Default:                      case DataFormat.TwosComplement:                          format = DataFormat.TwosComplement;                          return new PropertyUInt32Variant<T>();                      case DataFormat.FixedSize:                          return new PropertyUInt32Fixed<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Default:                      case DataFormat.TwosComplement:                          format = DataFormat.TwosComplement;                          return new PropertyUInt64Variant<T>();                      case DataFormat.FixedSize:                          return new PropertyUInt64Fixed<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Default:                      case DataFormat.TwosComplement:                          format = DataFormat.TwosComplement;                          return new PropertyUInt16Variant<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Group: return new PropertyGuidGroup<T>();                      case DataFormat.Default: return new PropertyGuidString<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Group: return new PropertyTimeSpanGroup<T>();                      case DataFormat.Default: return new PropertyTimeSpanString<T>();                      case DataFormat.FixedSize: return new PropertyTimeSpanFixed<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Group: return new PropertyDateTimeGroup<T>();                      case DataFormat.Default: return new PropertyDateTimeString<T>();                      case DataFormat.FixedSize: return new PropertyDateTimeFixed<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Group: return new PropertyDecimalGroup<T>();                      case DataFormat.Default: return new PropertyDecimalString<T>();                  }
Missing Default,ProtoBuf.Property,PropertyFactory,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\protobuf-net\Property\PropertyFactory.cs,CreateProperty,The following switch statement is missing a default case: switch (format)                  {                      case DataFormat.Default: return PropertyUtil<T>.CreateTypedProperty("CreatePropertyMessageString"' type' baseType' baseType);                      case DataFormat.Group: return PropertyUtil<T>.CreateTypedProperty("CreatePropertyMessageGroup"' type' baseType' baseType);                  }
