Implementation smell,Namespace,Class,File,Method,Description
Long Method,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The method has 101 lines of code.
Long Method,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The method has 126 lines of code.
Long Method,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The method has 125 lines of code.
Long Method,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The method has 130 lines of code.
Long Method,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadPeriodTerminated,The method has 127 lines of code.
Long Method,LumiSoft.Net.Mail,Mail_h_Received,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Received.cs,Parse,The method has 105 lines of code.
Long Method,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The method has 353 lines of code.
Long Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The method has 193 lines of code.
Long Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,FetchMessages,The method has 330 lines of code.
Long Method,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ProcessRtcp,The method has 131 lines of code.
Long Method,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,GetOrCreateSource,The method has 131 lines of code.
Long Method,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcp,The method has 133 lines of code.
Long Method,LumiSoft.Net.SIP.Proxy,SIP_B2BUA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA.cs,OnRequestReceived,The method has 113 lines of code.
Long Method,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,The method has 217 lines of code.
Long Method,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ProcessResponse,The method has 260 lines of code.
Long Method,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,Init,The method has 131 lines of code.
Long Method,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,The method has 355 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_Dialog,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog.cs,Init,The method has 101 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_Dialog,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog.cs,CreateRequest,The method has 114 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Start,The method has 105 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The method has 316 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The method has 240 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,ProcessRequest,The method has 123 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,CreateRequest,The method has 121 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,GetHops,The method has 343 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,The method has 212 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The method has 206 lines of code.
Long Method,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponse_RFC_3263_5,The method has 116 lines of code.
Long Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,Authenticate,The method has 144 lines of code.
Long Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,SendMessage,The method has 107 lines of code.
Long Method,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,Connect,The method has 131 lines of code.
Long Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,AUTH,The method has 124 lines of code.
Long Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,MAIL,The method has 145 lines of code.
Long Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,RCPT,The method has 135 lines of code.
Long Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BDAT,The method has 113 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,SearchKey,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchKey.cs,Parse,The method has 570 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,SearchKey,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchKey.cs,Match,The method has 205 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,SwitchCommand,The method has 146 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Authenticate,The method has 124 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Select,The method has 107 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The method has 106 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The method has 346 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The method has 743 lines of code.
Long Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The method has 175 lines of code.
Long Method,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,SwitchCommand,The method has 140 lines of code.
Long Method,LumiSoft.Net.IMAP,IMAP_BODY,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_BODY.cs,ConstructParts,The method has 257 lines of code.
Long Method,LumiSoft.Net.IMAP,IMAP_Envelope,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_Envelope.cs,ConstructEnvelope,The method has 138 lines of code.
Long Method,LumiSoft.Net.IMAP,IMAP_Envelope,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_Envelope.cs,Parse,The method has 101 lines of code.
Long Method,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,Parse,The method has 145 lines of code.
Long Method,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The method has 159 lines of code.
Long Method,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,DecodeWords,The method has 109 lines of code.
Long Method,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,AUTH,The method has 251 lines of code.
Long Method,LumiSoft.Net.SIP.Message,SIP_HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_HeaderFieldCollection.cs,GetheaderField,The method has 234 lines of code.
Long Method,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Client\STUN_Client.cs,Query,The method has 140 lines of code.
Long Method,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The method has 147 lines of code.
Long Method,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The method has 106 lines of code.
Complex Method,LumiSoft.Net.ABNF,ABNF_DecVal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_DecVal.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.ABNF,ABNF_Repetition,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_Repetition.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net,IPBindInfo,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IPBindInfo.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net,SIP_Uri,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\URI\SIP_Uri.cs,ParseInternal,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net,SIP_Uri,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\URI\SIP_Uri.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadPeriodTerminated,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WritePeriodTerminated,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,Cyclomatic complexity of the method is 13
Complex Method,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWritePeriodTerminated,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net,TextUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TextUtils.cs,UnQuoteString,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.AUTH,Auth_HttpDigest,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\Auth_HttpDigest.cs,ToAuthorization,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,Cyclomatic complexity of the method is 16
Complex Method,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IO,LineReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\LineReader.cs,ReadLine,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IO,SmartStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IO,ReadLineAsyncOP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,DoLineReading,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadLineInternal,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadAll,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadHeader,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadPeriodTerminated,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.Mail,Mail_h_Received,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Received.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.MIME,MIME_b_Multipart,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Multipart.cs,ToStream,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,QuotedReadToDelimiter,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Authenticate,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetFile,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetFile,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,AppendToFile,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,StoreFile,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,StoreFile,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Rename,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetFolders,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetSubscribedFolders,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderQuota,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetNamespacesInfo,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderACL,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderMyrights,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessages,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,DeleteMessages,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,FetchMessages,Cyclomatic complexity of the method is 20
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,FetchMessage,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlags,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetMessagesTotalSize,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetUnseenMessagesCount,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetFolderSeparator,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,List,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.RTP,RTP_Participant_Remote,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Participant_Remote.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcp,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,Cyclomatic complexity of the method is 21
Complex Method,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,SIP_ProxyContext,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,GetBestFinalResponse,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,Authorize,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net.SIP.Stack,SIP_Transaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Transaction.cs,SIP_Transaction,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SIP.Stack,SIP_Request,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Request.cs,Validate,Cyclomatic complexity of the method is 13
Complex Method,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,CreateRequest,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,CreateResponse,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendRequest,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,Cyclomatic complexity of the method is 15
Complex Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,Authenticate,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,MailFrom,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,SendMessage,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,GetDomainHosts,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,QuickSend,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,QuickSendSmartHost,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,GetDestinations,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,QuickSendSmartHost,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,EHLO,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,AUTH,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,MAIL,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,RCPT,Cyclomatic complexity of the method is 16
Complex Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,DATA,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BDAT,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net.UDP,UDP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\UDP\UDP_Server.cs,Start,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net.UDP,UDP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\UDP\UDP_Server.cs,SendPacket,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Status,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,Cyclomatic complexity of the method is 14
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,Cyclomatic complexity of the method is 19
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,Cyclomatic complexity of the method is 16
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Copy,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Utils.cs,ACL_to_String,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.IMAP.Server,IMAP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Utils.cs,ACL_From_String,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,GetDataPages,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP,IMAP_Envelope,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_Envelope.cs,ConstructEnvelope,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.IMAP,IMAP_Envelope,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_Envelope.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,LumiSoft.Net.Mime,HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\HeaderFieldCollection.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,Cyclomatic complexity of the method is 11
Complex Method,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,DecodeWords,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,EncodeHeaderField,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,AddressTypeToString,Cyclomatic complexity of the method is 9
Complex Method,LumiSoft.Net.Mime.vCard,PhoneNumber,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\PhoneNumber.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,LumiSoft.Net.Mime.vCard,PhoneNumber,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\PhoneNumber.cs,PhoneTypeToString,Cyclomatic complexity of the method is 16
Complex Method,LumiSoft.Net.SIP.Message,SIP_t_AuthenticationInfo,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_AuthenticationInfo.cs,ToStringValue,Cyclomatic complexity of the method is 10
Complex Method,LumiSoft.Net.SDP,SDP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SDP\SDP_Message.cs,ToStringData,Cyclomatic complexity of the method is 9
Long Parameter List,LumiSoft.Net,IPBindInfo,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IPBindInfo.cs,IPBindInfo,The method has 5 parameters. Parameters: hostName' ip' port' sslMode' sslCertificate
Long Parameter List,LumiSoft.Net,IPBindInfo,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IPBindInfo.cs,IPBindInfo,The method has 6 parameters. Parameters: hostName' protocol' ip' port' sslMode' sslCertificate
Long Parameter List,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,The method has 6 parameters. Parameters: callback' tag' stream' maxLineLength' lastByte' readedCount
Long Parameter List,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadReadSpecifiedLength,The method has 5 parameters. Parameters: stream' lengthToRead' tag' callback' readedCount
Long Parameter List,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The method has 8 parameters. Parameters: callback' tag' stream' maxLength' lastByte' readedCount' lineBreak' expectCRLF
Long Parameter List,LumiSoft.Net.AUTH,AuthHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\AuthHelper.cs,Digest_Md5,The method has 7 parameters. Parameters: client_server' realm' userName' password' nonce' cnonce' digest_uri
Long Parameter List,LumiSoft.Net.AUTH,Auth_HttpDigest,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\Auth_HttpDigest.cs,Auth_HttpDigest,The method has 6 parameters. Parameters: userName' password' cnonce' uri' digestResponse' requestMethod
Long Parameter List,LumiSoft.Net.IO,LineReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\LineReader.cs,ReadLine,The method has 5 parameters. Parameters: buffer' offset' count' exceededAction' rawBytesReaded
Long Parameter List,LumiSoft.Net.IO,SmartStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,BeginReadLine,The method has 6 parameters. Parameters: buffer' offset' maxCount' exceededAction' callback' state
Long Parameter List,LumiSoft.Net.IO,SmartStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,BeginReadHeader,The method has 5 parameters. Parameters: storeStream' maxCount' exceededAction' callback' state
Long Parameter List,LumiSoft.Net.IO,SmartStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,LumiSoft.Net.IO,ReadLineAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadLineAsyncOperation,The method has 7 parameters. Parameters: owner' buffer' offset' maxCount' exceededAction' callback' asyncState
Long Parameter List,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadToTerminatorAsyncOperation,The method has 7 parameters. Parameters: owner' terminator' storeStream' maxCount' exceededAction' callback' asyncState
Long Parameter List,LumiSoft.Net.IO,ReadToStreamAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadToStreamAsyncOperation,The method has 5 parameters. Parameters: owner' storeStream' count' callback' asyncState
Long Parameter List,LumiSoft.Net.IO,ReadAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadAsyncOperation,The method has 6 parameters. Parameters: owner' buffer' offset' maxSize' callback' asyncState
Long Parameter List,LumiSoft.Net.IO,ReadLine_EventArgs,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\ReadLine_EventArgs.cs,ReadLine_EventArgs,The method has 5 parameters. Parameters: exception' readedCount' data' count' tag
Long Parameter List,LumiSoft.Net.IO,ReadLine_EventArgs,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\ReadLine_EventArgs.cs,Reuse,The method has 5 parameters. Parameters: exception' readedCount' data' count' tag
Long Parameter List,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginReadLineInternal,The method has 6 parameters. Parameters: buffer' exceededAction' tag' callback' unlockRead' log
Long Parameter List,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginReadAll,The method has 5 parameters. Parameters: storeStream' maxSize' exceededAction' callback' tag
Long Parameter List,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginReadHeader,The method has 5 parameters. Parameters: storeStream' maxSize' exceededAction' callback' tag
Long Parameter List,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginReadPeriodTerminated,The method has 5 parameters. Parameters: storeStream' maxSize' exceededAction' callback' tag
Long Parameter List,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,_ToStreamReader,The method has 6 parameters. Parameters: streamHelper' storeStream' maxSize' exceededAction' callback' tag
Long Parameter List,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,OnWaveOutProc,The method has 5 parameters. Parameters: hdrvr' uMsg' dwUser' dwParam1' dwParam2
Long Parameter List,LumiSoft.Net.Media,WavMethods,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,waveOutOpen,The method has 6 parameters. Parameters: hWaveOut' uDeviceID' lpFormat' dwCallback' dwInstance' dwFlags
Long Parameter List,LumiSoft.Net.Dns.Client,DNS_rr_NAPTR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_NAPTR.cs,DNS_rr_NAPTR,The method has 7 parameters. Parameters: order' preference' flags' services' regexp' replacement' ttl
Long Parameter List,LumiSoft.Net.Dns.Client,DNS_rr_SRV,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SRV.cs,DNS_rr_SRV,The method has 5 parameters. Parameters: priority' weight' port' target' ttl
Long Parameter List,LumiSoft.Net.Dns.Client,DnsServerResponse,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DnsServerResponse.cs,DnsServerResponse,The method has 5 parameters. Parameters: connectionOk' rcode' answers' authoritiveAnswers' additionalAnswers
Long Parameter List,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,DNS_rr_SOA,The method has 8 parameters. Parameters: nameServer' adminEmail' serial' refresh' retry' expire' minimum' ttl
Long Parameter List,LumiSoft.Net.IMAP.Client,IMAP_Quota,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Quota.cs,IMAP_Quota,The method has 5 parameters. Parameters: quotaRootName' messages' maxMessages' storage' maxStorage
Long Parameter List,LumiSoft.Net.IMAP.Client,IMAP_FetchItem,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_FetchItem.cs,IMAP_FetchItem,The method has 9 parameters. Parameters: no' uid' size' data' flags' internalDate' envelope' bodyStructure' fetchFlags
Long Parameter List,LumiSoft.Net.Log,LogEntry,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\LogEntry.cs,LogEntry,The method has 8 parameters. Parameters: type' id' userIdentity' size' text' localEP' remoteEP' data
Long Parameter List,LumiSoft.Net.Log,LogEntry,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\LogEntry.cs,LogEntry,The method has 8 parameters. Parameters: type' id' userIdentity' size' text' localEP' remoteEP' exception
Long Parameter List,LumiSoft.Net.Log,Logger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\Logger.cs,AddRead,The method has 6 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP
Long Parameter List,LumiSoft.Net.Log,Logger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\Logger.cs,AddRead,The method has 7 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP' data
Long Parameter List,LumiSoft.Net.Log,Logger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\Logger.cs,AddWrite,The method has 6 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP
Long Parameter List,LumiSoft.Net.Log,Logger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\Logger.cs,AddWrite,The method has 7 parameters. Parameters: id' userIdentity' size' text' localEP' remoteEP' data
Long Parameter List,LumiSoft.Net.Log,Logger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\Logger.cs,AddText,The method has 5 parameters. Parameters: id' userIdentity' text' localEP' remoteEP
Long Parameter List,LumiSoft.Net.Log,Logger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Log\Logger.cs,AddException,The method has 6 parameters. Parameters: id' userIdentity' text' localEP' remoteEP' exception
Long Parameter List,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,BeginAuthenticate,The method has 5 parameters. Parameters: userName' password' tryApop' callback' state
Long Parameter List,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The method has 6 parameters. Parameters: members' senders' rtcp_bw' we_sent' avg_rtcp_size' initial
Long Parameter List,LumiSoft.Net.SIP.Proxy,SIP_Gateway,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Gateway.cs,SIP_Gateway,The method has 6 parameters. Parameters: transport' host' port' realm' userName' password
Long Parameter List,LumiSoft.Net.SIP.Proxy,SIP_RegistrationBinding,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_RegistrationBinding.cs,Update,The method has 5 parameters. Parameters: flow' expires' qvalue' callID' cseqNo
Long Parameter List,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,SIP_ProxyContext,The method has 10 parameters. Parameters: proxy' transaction' request' addRecordRoute' forkingMode' isB2BUA' noCancel' noRecurse' targets' credentials
Long Parameter List,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,TargetHandler,The method has 5 parameters. Parameters: owner' flow' targetUri' addRecordRoute' isRecursed
Long Parameter List,LumiSoft.Net.SIP.Stack,SIP_Flow,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Flow.cs,SIP_Flow,The method has 5 parameters. Parameters: stack' isServer' localEP' remoteEP' transport
Long Parameter List,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,SIP_UA_Registration,The method has 5 parameters. Parameters: stack' server' aor' contact' expires
Long Parameter List,LumiSoft.Net.SIP.Stack,SIP_RequestReceivedEventArgs,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestReceivedEventArgs.cs,SIP_RequestReceivedEventArgs,The method has 5 parameters. Parameters: stack' flow' request' dialog' transaction
Long Parameter List,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseToHost,The method has 7 parameters. Parameters: logID' transactionID' localEP' host' port' transport' response
Long Parameter List,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,QuickSendSmartHost,The method has 5 parameters. Parameters: host' port' from' to' message
Long Parameter List,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,QuickSendSmartHost,The method has 6 parameters. Parameters: host' port' ssl' from' to' message
Long Parameter List,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,QuickSendSmartHost,The method has 7 parameters. Parameters: localHost' host' port' ssl' from' to' message
Long Parameter List,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,QuickSendSmartHost,The method has 9 parameters. Parameters: localHost' host' port' ssl' userName' password' from' to' message
Long Parameter List,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginConnect,The method has 5 parameters. Parameters: localEndpoint' host' port' ssl' callback
Long Parameter List,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,QuickSendSmartHost,The method has 6 parameters. Parameters: smartHost' port' hostName' userName' password' message
Long Parameter List,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,QuickSendSmartHost,The method has 7 parameters. Parameters: smartHost' port' ssl' hostName' userName' password' message
Long Parameter List,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,QuickSendSmartHost,The method has 6 parameters. Parameters: smartHost' port' hostName' from' to' messageStream
Long Parameter List,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,QuickSendSmartHost,The method has 8 parameters. Parameters: smartHost' port' hostName' userName' password' from' to' messageStream
Long Parameter List,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,QuickSendSmartHost,The method has 9 parameters. Parameters: smartHost' port' ssl' hostName' userName' password' from' to' messageStream
Long Parameter List,LumiSoft.Net.SMTP.Relay,Relay_Queue,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Queue.cs,QueueMessage,The method has 5 parameters. Parameters: from' to' messageID' message' tag
Long Parameter List,LumiSoft.Net.SMTP.Relay,Relay_QueueItem,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_QueueItem.cs,Relay_QueueItem,The method has 6 parameters. Parameters: queue' from' to' messageID' message' tag
Long Parameter List,LumiSoft.Net.SMTP.Relay,Relay_SmartHost,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_SmartHost.cs,Relay_SmartHost,The method has 5 parameters. Parameters: host' port' sslMode' userName' password
Long Parameter List,LumiSoft.Net.SMTP.Server,SMTP_MailFrom,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_MailFrom.cs,SMTP_MailFrom,The method has 5 parameters. Parameters: mailbox' size' body' ret' envid
Long Parameter List,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,BeginConnect,The method has 5 parameters. Parameters: host' port' ssl' callback' state
Long Parameter List,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,BeginConnect,The method has 5 parameters. Parameters: localEP' remoteEP' ssl' callback' state
Long Parameter List,LumiSoft.Net.TCP,TCP_ServerSession,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_ServerSession.cs,Init,The method has 5 parameters. Parameters: server' socket' hostName' ssl' certificate
Long Parameter List,LumiSoft.Net.UDP,UDP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\UDP\UDP_Server.cs,SendPacket,The method has 5 parameters. Parameters: packet' offset' count' remoteEP' localEP
Long Parameter List,LumiSoft.Net.UDP,UDP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\UDP\UDP_Server.cs,SendPacket,The method has 5 parameters. Parameters: localEP' packet' offset' count' remoteEP
Long Parameter List,LumiSoft.Net.UDP,UDP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\UDP\UDP_Server.cs,SendPacket,The method has 6 parameters. Parameters: socket' packet' offset' count' remoteEP' localEP
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Message.cs,IMAP_Message,The method has 6 parameters. Parameters: onwer' id' uid' internalDate' size' flags
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_MessageCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_MessageCollection.cs,Add,The method has 5 parameters. Parameters: id' uid' internalDate' size' flags
Long Parameter List,LumiSoft.Net.IMAP.Server,AuthUser_EventArgs,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\AuthUser_EventArgs.cs,AuthUser_EventArgs,The method has 5 parameters. Parameters: session' userName' passwData' data' authType
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_SETACL_eArgs,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_eArgs_SETACL.cs,IMAP_SETACL_eArgs,The method has 5 parameters. Parameters: session' folderName' userName' flagsSetType' aclFlags
Long Parameter List,LumiSoft.Net.IMAP.Server,SearchGroup,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchGroup.cs,Match_Key_Value,The method has 8 parameters. Parameters: searchKey' no' uid' size' internalDate' flags' mime' bodyText
Long Parameter List,LumiSoft.Net.IMAP.Server,SearchGroup,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchGroup.cs,Match,The method has 7 parameters. Parameters: no' uid' size' internalDate' flags' mime' bodyText
Long Parameter List,LumiSoft.Net.IMAP.Server,SearchKey,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchKey.cs,Match,The method has 7 parameters. Parameters: no' uid' size' internalDate' flags' mime' bodyText
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_SearchMatcher,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchMatcher.cs,Matches,The method has 7 parameters. Parameters: no' uid' size' internalDate' flags' header' bodyText
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Server.cs,OnAuthUser,The method has 5 parameters. Parameters: session' userName' passwordData' data' authType
Long Parameter List,LumiSoft.Net.IMAP.Server,IMAP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Server.cs,OnSetFolderACL,The method has 5 parameters. Parameters: session' folderName' userName' flagsSetType' aclFlags
Long Parameter List,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The method has 6 parameters. Parameters: dataPageDataAreaSize' used' ownerID' ownerDataPagePointer' nextDataPagePointer' data
Long Parameter List,LumiSoft.Net.FTP.Server,AuthUser_EventArgs,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\AuthUser_EventArgs.cs,AuthUser_EventArgs,The method has 5 parameters. Parameters: session' userName' passwData' data' authType
Long Parameter List,LumiSoft.Net.FTP.Server,FTP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Server.cs,OnAuthUser,The method has 5 parameters. Parameters: session' userName' passwData' data' authType
Long Parameter List,LumiSoft.Net.Mime,Mime,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\Mime.cs,CreateSimple,The method has 5 parameters. Parameters: from' to' subject' bodyText' bodyHtml
Long Parameter List,LumiSoft.Net.Mime,Mime,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\Mime.cs,CreateSimple,The method has 6 parameters. Parameters: from' to' subject' bodyText' bodyHtml' attachmentFileNames
Long Parameter List,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,DeliveryAddress,The method has 9 parameters. Parameters: item' addressType' postOfficeAddress' extendedAddress' street' locality' region' postalCode' country
Long Parameter List,LumiSoft.Net.Mime.vCard,DeliveryAddressCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddressCollection.cs,Add,The method has 8 parameters. Parameters: type' postOfficeAddress' extendedAddress' street' locality' region' postalCode' country
Long Parameter List,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Name,The method has 5 parameters. Parameters: lastName' firstName' additionalNames' honorificPrefix' honorificSuffix
Long Parameter List,LumiSoft.Net.POP3.Server,AuthUser_EventArgs,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\AuthUser_EventArgs.cs,AuthUser_EventArgs,The method has 5 parameters. Parameters: session' userName' passwData' data' authType
Long Parameter List,LumiSoft.Net.POP3.Server,POP3_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Server.cs,OnAuthUser,The method has 5 parameters. Parameters: session' userName' passwData' data' authType
Long Identifier,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,,The length of the parameter m_pBeginWritePeriodTerminated_Stream is 36.
Long Identifier,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,,The length of the parameter m_BeginWritePeriodTerminated_MaxSize is 36.
Long Identifier,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,,The length of the parameter m_pBeginWritePeriodTerminated_Callback is 38.
Long Identifier,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,,The length of the parameter m_pBeginWritePeriodTerminated_BufferedStream is 44.
Long Identifier,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,,The length of the parameter m_BeginWritePeriodTerminated_Readed is 35.
Long Identifier,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,,The length of the parameter m_BeginWritePeriodTerminated_Written is 36.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_Dialog_Invite,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,,The length of the parameter m_pUacInvite2xxRetransmitWaits is 30.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_ResponseCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ResponseCodes.cs,,The length of the parameter x407_Proxy_Authentication_Required is 34.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_ResponseCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ResponseCodes.cs,,The length of the parameter x412_Conditional_Request_Failed is 31.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_ResponseCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ResponseCodes.cs,,The length of the parameter x417_Unknown_Resource_Priority is 30.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_ResponseCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ResponseCodes.cs,,The length of the parameter x422_Session_Interval_Too_Small is 31.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_ResponseCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ResponseCodes.cs,,The length of the parameter x429_Provide_Referrer_Identity is 30.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_ResponseCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ResponseCodes.cs,,The length of the parameter x481_Call_Transaction_Does_Not_Exist is 36.
Long Identifier,LumiSoft.Net.SIP.Stack,SIP_ResponseCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ResponseCodes.cs,,The length of the parameter x494_Security_Agreement_Required is 32.
Long Identifier,LumiSoft.Net.SIP.Message,SIP_WarningCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_WarningCodes.cs,,The length of the parameter x300_Incompatible_network_protocol is 34.
Long Identifier,LumiSoft.Net.SIP.Message,SIP_WarningCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_WarningCodes.cs,,The length of the parameter x301_Incompatible_network_address_formats is 41.
Long Identifier,LumiSoft.Net.SIP.Message,SIP_WarningCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_WarningCodes.cs,,The length of the parameter x302_Incompatible_network_address_formats is 41.
Long Identifier,LumiSoft.Net.SIP.Message,SIP_WarningCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_WarningCodes.cs,,The length of the parameter x303_Incompatible_bandwidth_units is 33.
Long Identifier,LumiSoft.Net.SIP.Message,SIP_WarningCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_WarningCodes.cs,,The length of the parameter x305_Incompatible_media_format is 30.
Long Identifier,LumiSoft.Net.SIP.Message,SIP_WarningCodes,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_WarningCodes.cs,,The length of the parameter x307_Session_description_parameter_not_understood is 49.
Long Statement,LumiSoft.Net.ABNF,ABNF_Rule,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_Rule.cs,Parse,The length of the statement  "            ABNF_Rule retVal = new ABNF_Rule(name_value[0].Trim()'ABNF_Alternation.Parse(new System.IO.StringReader(name_value[1]))); " is 121.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadLine,The length of the statement  "            throw new ReadException(ReadReplyCode.SocketClosed'"Connected host closed socket' read line terminated unexpectedly !"); " is 120.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,The length of the statement  "                BeginBufferDataBlock(this.OnBeginReadLineBufferingCompleted'new object[]{callback'tag'stream'maxLineLength'lastByte'readedCount}); " is 130.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,The length of the statement  "                    BeginBufferDataBlock(this.OnBeginReadLineBufferingCompleted'new object[]{callback'tag'stream'maxLineLength'lastByte'readedCount}); " is 130.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,The length of the statement  "                            callback(SocketCallBackResult.LengthExceeded'0'new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed data length exceeded !")'tag); " is 141.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,The length of the statement  "                    BeginBufferDataBlock(this.OnBeginReadLineBufferingCompleted'new object[]{callback'tag'stream'maxLineLength'lastByte'readedCount}); " is 130.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,The length of the statement  "                callback(SocketCallBackResult.SocketClosed'0'new ReadException(ReadReplyCode.SocketClosed'"Connected host closed socket' read line terminated unexpectedly !")'tag); " is 164.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadReadSpecifiedLength,The length of the statement  "                BeginBufferDataBlock(this.OnBeginReadSpecifiedLengthBufferingCompleted'new object[]{callback'tag'stream'lengthToRead'readedCount}); " is 131.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadReadSpecifiedLength,The length of the statement  "                BeginBufferDataBlock(this.OnBeginReadSpecifiedLengthBufferingCompleted'new object[]{callback'tag'stream'lengthToRead'readedCount}); " is 131.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The length of the statement  "                BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF}); " is 159.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The length of the statement  "                    BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF}); " is 159.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The length of the statement  "                            BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF}); " is 159.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The length of the statement  "                                callback(SocketCallBackResult.LengthExceeded'0'new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed data length exceeded !")'tag);                                 " is 141.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The length of the statement  "                    BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF}); " is 159.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The length of the statement  "                callback(SocketCallBackResult.Exception'0'new Exception("Never should reach there ! method TryToReadPeriodTerminated out of while loop.")'tag); " is 143.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWrite,The length of the statement  "                    m_pSslStream.BeginWrite(buffer'0'readedCount'new AsyncCallback(this.OnBeginWriteCallback)'new object[]{stream'tag'callback'countSent}); " is 135.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWrite,The length of the statement  "                    m_pSocketStream.BeginWrite(buffer'0'readedCount'new AsyncCallback(this.OnBeginWriteCallback)'new object[]{stream'tag'callback'countSent}); " is 138.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginWriteLine,The length of the statement  "                m_pSslStream.BeginWrite(lineBytes'0'lineBytes.Length'this.OnBeginWriteLineCallback'new object[]{tag'callback'lineBytes}); " is 121.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginWriteLine,The length of the statement  "                m_pSocketStream.BeginWrite(lineBytes'0'lineBytes.Length'this.OnBeginWriteLineCallback'new object[]{tag'callback'lineBytes}); " is 124.
Long Statement,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginBufferDataBlock,The length of the statement  "                    m_pSocket.BeginReceive(m_Buffer'0'm_Buffer.Length'SocketFlags.None'this.OnBeginBufferDataBlockCallback'new object[]{callback'tag}); " is 131.
Long Statement,LumiSoft.Net.AUTH,Auth_HttpDigest,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\Auth_HttpDigest.cs,CalculateRspAuth,The length of the statement  "                return Core.ComputeMd5(Core.ComputeMd5(a1'true) + ":" + this.Nonce + ":" + this.NonceCount.ToString("x8") + ":" + this.CNonce + ":" + this.Qop + ":" + Core.ComputeMd5(a2'true)'true); " is 182.
Long Statement,LumiSoft.Net.AUTH,Auth_HttpDigest,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\Auth_HttpDigest.cs,CalculateResponse,The length of the statement  "                return Core.ComputeMd5(Core.ComputeMd5(a1'true) + ":" + this.Nonce + ":" + this.NonceCount.ToString("x8") + ":" + this.CNonce + ":" + this.Qop + ":" + Core.ComputeMd5(a2'true)'true); " is 182.
Long Statement,LumiSoft.Net.AUTH,AUTH_SASL_ServerMechanism_Plain,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\AUTH_SASL_ServerMechanism_Plain.cs,Continue,The length of the statement  "                    AUTH_e_Authenticate result = OnAuthenticate(authzid_authcid_passwd[0]'authzid_authcid_passwd[1]'authzid_authcid_passwd[2]); " is 123.
Long Statement,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Read,The length of the statement  "                    SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException); " is 124.
Long Statement,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Read,The length of the statement  "                                m_pDecodedBuffer[m_DecodedCount++] = byte.Parse(new string(new char[]{(char)b1'(char)b2})'System.Globalization.NumberStyles.HexNumber); " is 135.
Long Statement,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The length of the statement  "                    m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4]; " is 126.
Long Statement,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The length of the statement  "                    m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6]; " is 126.
Long Statement,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The length of the statement  "                m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4]; " is 132.
Long Statement,LumiSoft.Net.IO,SmartStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,BeginReadLine,The length of the statement  "                throw new ArgumentOutOfRangeException("maxCount"'"Argument 'maxCount' is bigger than than argument 'buffer' can store."); " is 121.
Long Statement,LumiSoft.Net.IO,SmartStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,BufferRead,The length of the statement  "            m_pReadBufferOP.Completed += new EventHandler<EventArgs<BufferReadAsyncOP>>(delegate(object s'EventArgs<BufferReadAsyncOP> e){             " is 126.
Long Statement,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadLine_Completed,The length of the statement  "                        m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null); " is 134.
Long Statement,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,Read,The length of the statement  "                        throw new IncompleteDataException("Underlaying stream don't have so much data than requested' end of stream reached !");                         " is 120.
Long Statement,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,InternalBeginWriteStreamCallback,The length of the statement  "                    InternalBeginWriteStreamCompleted(new IncompleteDataException("Read stream didn't have so much data than requested !")); " is 120.
Long Statement,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,InternalBeginWriteStreamCompleted,The length of the statement  "                m_pBeginWrite_Callback(new WriteStream_EventArgs(exception'm_pBeginWrite_Stream'm_BeginWrite_Readed'm_BeginWrite_Readed)); " is 122.
Long Statement,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,InternalBeginWriteAllCompleted,The length of the statement  "                m_pBeginWriteAll_Callback(new WriteStream_EventArgs(exception'm_pBeginWriteAll_Stream'm_BeginWriteAll_Readed'm_BeginWriteAll_Readed)); " is 134.
Long Statement,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,InternalBeginWritePeriodTerminatedCompleted,The length of the statement  "                m_pBeginWritePeriodTerminated_Callback(new WriteStream_EventArgs(exception'm_pBeginWritePeriodTerminated_Stream'm_BeginWritePeriodTerminated_Readed'm_BeginWritePeriodTerminated_Written)); " is 187.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,DoRead,The length of the statement  "                            int countReadedFromBuffer = Math.Min(m_pStreamHelper.m_ReadBufferEndPos - m_pStreamHelper.m_ReadBufferOffset'm_CountToRead - m_TotalReadedCount); " is 145.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginReadPeriodTerminated,The length of the statement  "                    m_pStreamHelper.BeginReadLineInternal(m_pLineBuffer'm_ExceededAction'null'new ReadLineCallback(this.OnReadPeriodTerminated_ReadLine_Completed)'false'false); " is 156.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,OnReadPeriodTerminated_ReadLine_Completed,The length of the statement  "                            m_pStreamHelper.BeginReadLineInternal(m_pLineBuffer'm_ExceededAction'null'new ReadLineCallback(this.OnReadPeriodTerminated_ReadLine_Completed)'false'false); " is 156.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,OnReadPeriodTerminated_ReadLine_Completed,The length of the statement  "                        ReadPeriodTerminatedCompleted(new IncompleteDataException("Source stream was reached end of stream and data is not period terminated !"));                         " is 138.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,OnReadPeriodTerminated_ReadLine_Completed,The length of the statement  "                        m_pStreamHelper.BeginReadLineInternal(m_pLineBuffer'm_ExceededAction'null'new ReadLineCallback(this.OnReadPeriodTerminated_ReadLine_Completed)'false'false); " is 156.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginReadHeader,The length of the statement  "                    m_pStreamHelper.BeginReadLineInternal(m_pLineBuffer'm_ExceededAction'null'new ReadLineCallback(this.OnReadHeader_ReadLine_Completed)'false'false); " is 146.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,OnReadHeader_ReadLine_Completed,The length of the statement  "                            m_pStreamHelper.BeginReadLineInternal(m_pLineBuffer'm_ExceededAction'null'new ReadLineCallback(this.OnReadHeader_ReadLine_Completed)'false'false); " is 146.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,OnReadHeader_ReadLine_Completed,The length of the statement  "                        m_pStreamHelper.BeginReadLineInternal(m_pLineBuffer'm_ExceededAction'null'new ReadLineCallback(this.OnReadHeader_ReadLine_Completed)'false'false); " is 146.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,DoReadAll,The length of the statement  "                        Array.Copy(m_pStreamHelper.m_pReadBuffer'm_pStreamHelper.m_ReadBufferOffset'm_pBuffer'0'm_pStreamHelper.m_ReadBufferEndPos - m_pStreamHelper.m_ReadBufferOffset); " is 161.
Long Statement,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,DoReadAll,The length of the statement  "                        m_pStreamHelper.Stream.BeginRead(m_pBuffer'0'm_pBuffer.Length'new AsyncCallback(this.OnReadAll_ReadBuffer_Completed)'null); " is 123.
Long Statement,LumiSoft.Net.Mail,Mail_h_AddressList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_AddressList.cs,Parse,The length of the statement  "                    Mail_t_Group group = new Mail_t_Group(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null); " is 126.
Long Statement,LumiSoft.Net.Mail,Mail_h_AddressList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_AddressList.cs,Parse,The length of the statement  "                            group.Members.Add(new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null'r.ReadParenthesized()));                     " is 148.
Long Statement,LumiSoft.Net.Mail,Mail_h_AddressList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_AddressList.cs,Parse,The length of the statement  "                    retVal.m_pAddresses.Add(new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null'r.ReadParenthesized()));                     " is 154.
Long Statement,LumiSoft.Net.Mail,Mail_h_Mailbox,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Mailbox.cs,Parse,The length of the statement  "                Mail_h_Mailbox h = new Mail_h_Mailbox(name_value[0]'new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null'r.ReadParenthesized())); " is 182.
Long Statement,LumiSoft.Net.Mail,Mail_h_MailboxList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_MailboxList.cs,Parse,The length of the statement  "                    retVal.m_pAddresses.Add(new Mail_t_Mailbox(word != null ? MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(word)) : null'r.ReadParenthesized()));                     " is 154.
Long Statement,LumiSoft.Net.MIME,MIME_b_Provider,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Provider.cs,Parse,The length of the statement  "            return (MIME_b)bodyType.GetMethod("Parse"'System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy).Invoke(null'new object[]{owner'mediaType'stream}); " is 224.
Long Statement,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,GetDataStream,The length of the statement  "                throw new NotSupportedException("Not supported Content-Transfer-Encoding '" + this.Entity.ContentTransferEncoding + "'."); " is 122.
Long Statement,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The length of the statement  "                int           maxEncodedTextSize = 75 - ((string)("=?" + charset.WebName + "?" + encoding.ToString() + "?" + "?=")).Length; " is 123.
Long Statement,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,DecodeS,The length of the statement  "				// For example =?TIS-620?Q?=B7=B4=CA=CD=BA=A1=D2=C3=CA=E8=A7?= =?TIS-620?Q?=B4=E9=C7=C2=C0=D2=C9=D2=E4=B7=C2_?= =?TIS-620?Q?[Test_Send_Thai_Message]?= " is 150.
Long Statement,LumiSoft.Net.MIME,MIME_h_Collection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Collection.cs,Parse,The length of the statement  "			SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.ThrowException); " is 125.
Long Statement,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,DecodeExtOctet,The length of the statement  "                    decodedBuffer[offset++] = byte.Parse(text[i + 1].ToString() + text[i + 2].ToString()'System.Globalization.NumberStyles.HexNumber); " is 130.
Long Statement,LumiSoft.Net.MIME,MIME_h_Unstructured,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Unstructured.cs,Parse,The length of the statement  "            retVal.m_Value = MIME_Encoding_EncodedWord.DecodeS(MIME_Utils.UnfoldHeader(name_value.Length == 2 ? name_value[1].TrimStart() : "")); " is 133.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,DateTimeToRfc2822,The length of the statement  "            return dateTime.ToString("ddd' dd MMM yyyy HH':'mm':'ss "'System.Globalization.DateTimeFormatInfo.InvariantInfo) + dateTime.ToString("zzz").Replace(":"'""); " is 156.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The length of the statement  "             *      month-name      =       "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" / "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec" " is 124.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The length of the statement  "                return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime(); " is 134.
Long Statement,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,CreateMessageID,The length of the statement  "			return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">"; " is 139.
Long Statement,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,The length of the statement  "			return new DnsServerResponse(false'RCODE.SERVER_FAILURE'new List<DNS_rr_base>()'new List<DNS_rr_base>()'new List<DNS_rr_base>()); " is 129.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                    SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer'SizeExceededAction.JunkAndThrowException); " is 120.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 124.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                        DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'new string[]{"MM-dd-yy hh:mmtt"}'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None); " is 203.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                        DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'winDateFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None); " is 185.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The length of the statement  "                        DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord() + " " + r.ReadWord()'unixFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None); " is 203.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Port,The length of the statement  "                    WriteLine("PORT " + ip.ToString().Replace("."'"'") + "'" + (m_pDataConnection.LocalEndPoint.Port >> 8) + "'" + (m_pDataConnection.LocalEndPoint.Port & 0xFF)); " is 158.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Pasv,The length of the statement  "			string[] parts = response[0].Substring(response[0].IndexOf("(") + 1'response[0].IndexOf(")") - response[0].IndexOf("(") - 1).Split('''); " is 136.
Long Statement,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Pasv,The length of the statement  "            m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5]))); " is 189.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,SwitchToActive,The length of the statement  "                m_pOwner.LogAddText("FTP data channel switched to Active mode' listening FTP server connect to '" + m_pSocket.LocalEndPoint.ToString() + "'."); " is 143.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,SwitchToPassive,The length of the statement  "                m_pOwner.LogAddText("FTP data channel switched to Passive mode' connecting to FTP server '" + remoteEP.ToString() + "'."); " is 122.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,SwitchToPassive,The length of the statement  "                m_pOwner.LogAddText("FTP Passive data channel established' localEP='" + m_pSocket.LocalEndPoint.ToString() + "' remoteEP='" + m_pSocket.RemoteEndPoint.ToString() + "'."); " is 170.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,WaitFtpServerToConnect,The length of the statement  "                    m_pOwner.LogAddText("FTP Active data channel waiting FTP server connect to '" + m_pSocket.LocalEndPoint.ToString() + "'."); " is 123.
Long Statement,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,WaitFtpServerToConnect,The length of the statement  "                    m_pOwner.LogAddText("FTP Active data channel established' localEP='" + socket.LocalEndPoint.ToString() + "' remoteEP='" + socket.RemoteEndPoint.ToString() + "'."); " is 163.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,StartTLS,The length of the statement  "			SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException); " is 126.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,WriteLine,The length of the statement  "			SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException); " is 126.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,CreateFolder,The length of the statement  "			SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException); " is 126.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolder,The length of the statement  "			SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException); " is 126.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,RenameFolder,The length of the statement  "			string line = GetNextCmdTag() + " RENAME " + TextUtils.QuoteString(Core.Encode_IMAP_UTF7_String(sourceFolderName)) + " " + TextUtils.QuoteString(Core.Encode_IMAP_UTF7_String(destinationFolderName)); " is 198.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,RenameFolder,The length of the statement  "			SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException); " is 126.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,The length of the statement  "						m_UIDNext = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDNEXT") + 8' line.IndexOf(']') - line.ToUpper().IndexOf("UIDNEXT") - 8)); " is 142.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,The length of the statement  "						m_UIDValidity = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDVALIDITY") + 12' line.IndexOf(']') - line.ToUpper().IndexOf("UIDVALIDITY") - 12)); " is 156.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SetFolderACL,The length of the statement  "			string line = GetNextCmdTag() + " SETACL " + TextUtils.QuoteString(Core.Encode_IMAP_UTF7_String(folderName)) + " " + TextUtils.QuoteString(userName) + " " + IMAP_Utils.ACL_to_String(acl); " is 187.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolderACL,The length of the statement  "			string line = GetNextCmdTag() + " DELETEACL " + TextUtils.QuoteString(Core.Encode_IMAP_UTF7_String(folderName)) + " " + TextUtils.QuoteString(userName); " is 152.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessages,The length of the statement  "				line = GetNextCmdTag() + " UID COPY " + sequence_set.ToSequenceSetString() + " " + TextUtils.QuoteString(Core.Encode_IMAP_UTF7_String(destFolder)); " is 147.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,CopyMessages,The length of the statement  "				line = GetNextCmdTag() + " COPY " + sequence_set.ToSequenceSetString() + " " + TextUtils.QuoteString(Core.Encode_IMAP_UTF7_String(destFolder)); " is 143.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The length of the statement  "			string line = GetNextCmdTag() + " APPEND " + TextUtils.QuoteString(Core.Encode_IMAP_UTF7_String(folderName)) + " (" + IMAP_Utils.MessageFlagsToString(messageFlags) + ") \"" + IMAP_Utils.DateTimeToString(inernalDate) + "\" {" + data.Length + "}"; " is 245.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,FetchMessages,The length of the statement  "				SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer' SizeExceededAction.JunkAndThrowException); " is 121.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlags,The length of the statement  "				line = GetNextCmdTag() + " UID STORE " + sequence_set.ToSequenceSetString() + " FLAGS (" + IMAP_Utils.MessageFlagsToString(msgFlags) + ")"; " is 139.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessageFlags,The length of the statement  "				line = GetNextCmdTag() + " STORE " + sequence_set.ToSequenceSetString() + " FLAGS (" + IMAP_Utils.MessageFlagsToString(msgFlags) + ")"; " is 135.
Long Statement,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,OnConnected,The length of the statement  "			SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException); " is 126.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,BeginAuthenticate,The length of the statement  "            asyncState.SetAsyncResult(asyncMethod.BeginInvoke(userName'password'tryApop'new AsyncCallback(asyncState.CompletedCallback)'null)); " is 131.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,GetMessage,The length of the statement  "                SmartStream.ReadPeriodTerminatedAsyncOP readTermOP = new SmartStream.ReadPeriodTerminatedAsyncOP(stream'999999999'SizeExceededAction.ThrowException); " is 149.
Long Statement,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,GetTopOfMessage,The length of the statement  "                SmartStream.ReadPeriodTerminatedAsyncOP readTermOP = new SmartStream.ReadPeriodTerminatedAsyncOP(stream'999999999'SizeExceededAction.ThrowException); " is 149.
Long Statement,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,m_pErrors_DoubleClick,The length of the statement  "                MessageBox.Show(this'"Error: " + ((Exception)m_pErrors.SelectedItems[0].Tag).ToString()'"Error:"'MessageBoxButtons.OK'MessageBoxIcon.Error); " is 140.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The length of the statement  "            m_Name    = ((char)buffer[offset++]).ToString() + ((char)buffer[offset++]).ToString() + ((char)buffer[offset++]).ToString() + ((char)buffer[offset++]).ToString(); " is 162.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The length of the statement  "            m_SSRC              = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 121.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The length of the statement  "            m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 221.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The length of the statement  "            m_RtpTimestamp      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 121.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The length of the statement  "            m_SenderPacketCount = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 121.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The length of the statement  "            m_SenderOctetCount  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 121.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The length of the statement  "            m_SSRC                  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 125.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The length of the statement  "            m_ExtHighestSeqNumber   = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 125.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The length of the statement  "            m_Jitter                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 125.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The length of the statement  "            m_LastSR                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 125.
Long Statement,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The length of the statement  "            m_DelaySinceLastSR      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]); " is 125.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,Start,The length of the statement  "                EndPoint rtpRemoteEP = new IPEndPoint(m_pRtpSocket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any'0); " is 134.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,Start,The length of the statement  "                EndPoint rtcpRemoteEP = new IPEndPoint(m_pRtcpSocket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any'0); " is 136.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,Start,The length of the statement  "            Schedule(ComputeRtcpTransmissionInterval(m_pMembers.Count'm_pSenders.Count'm_Bandwidth * 0.25'false'm_RtcpAvgPacketSize'true)); " is 127.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,GetOrCreateSource,The length of the statement  "                        if(source identifier is from an RTCP SDES chunk containing a CNAME item that differs from the CNAME in the table entry){ " is 120.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,DoReverseReconsideration,The length of the statement  "            DateTime timeNext = m_RtcpLastTransmission == DateTime.MinValue ? DateTime.Now : m_RtcpLastTransmission.AddMilliseconds(m_pRtcpTimer.Interval); " is 143.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,TimeOutSsrc,The length of the statement  "            int Td = ComputeRtcpTransmissionInterval(m_pMembers.Count'm_pSenders.Count'm_Bandwidth * 0.25'false'm_RtcpAvgPacketSize'false); " is 127.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcp,The length of the statement  "            Schedule(ComputeRtcpTransmissionInterval(m_pMembers.Count'm_pSenders.Count'm_Bandwidth * 0.25'we_sent'm_RtcpAvgPacketSize'false)); " is 130.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,RtpIOCompletionReceive,The length of the statement  "                socketArgs.RemoteEndPoint = new IPEndPoint(m_pRtcpSocket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any'0); " is 140.
Long Statement,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,RtcpIOCompletionReceive,The length of the statement  "            socketArgs.RemoteEndPoint = new IPEndPoint(m_pRtcpSocket.AddressFamily == AddressFamily.InterNetwork ? IPAddress.Any : IPAddress.IPv6Any'0); " is 140.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_B2BUA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA.cs,OnRequestReceived,The length of the statement  "                if(b2buaRequest.Route.Count > 0 && m_pProxy.IsLocalRoute(SIP_Uri.Parse(b2buaRequest.Route.GetTopMostValue().Address.Uri.ToString()))){ " is 134.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_B2BUA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA_Call.cs,m_pCaller_RequestReceived,The length of the statement  "            CopyMessage(e.Request'request'new string[]{"Via:"'"Call-Id:"'"To:"'"From:"'"CSeq:"'"Contact:"'"Route:"'"Record-Route:"'"Max-Forwards:"'"Allow:"'"Require:"'"Supported:"}); " is 170.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_B2BUA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA_Call.cs,m_pCallee_ResponseReceived,The length of the statement  "            //CopyMessage(e.Response'response'new string[]{"Via:"'"Call-Id:"'"To:"'"From:"'"CSeq:"'"Contact:"'"Route:"'"Record-Route:"'"Allow:"'"Supported:"}); " is 147.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_B2BUA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA_Call.cs,m_pCallee_RequestReceived,The length of the statement  "            CopyMessage(e.Request'request'new string[]{"Via:"'"Call-Id:"'"To:"'"From:"'"CSeq:"'"Contact:"'"Route:"'"Record-Route:"'"Max-Forwards:"'"Allow:"'"Require:"'"Supported:"}); " is 170.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_B2BUA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA_Call.cs,m_pCaller_ResponseReceived,The length of the statement  "            //CopyMessage(e.Response'response'new string[]{"Via:"'"Call-Id:"'"To:"'"From:"'"CSeq:"'"Contact:"'"Route:"'"Record-Route:"'"Allow:"'"Supported:"}); " is 147.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,The length of the statement  "                transaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ": To: value must be SIP or SIPS URI."'request)); " is 135.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,The length of the statement  "                    transaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ": RFC 3261 10.3.6 -> If star(*) present' only 1 contact allowed."'request)); " is 163.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,The length of the statement  "                    transaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ": RFC 3261 10.3.6 -> star(*) contact parameter 'expires' value must be always '0'."'request)); " is 181.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,The length of the statement  "                    if(currentBinding != null && currentBinding.CallID == request.CallID && request.CSeq.SequenceNumber < currentBinding.CSeqNo){ " is 125.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,The length of the statement  "                        transaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ": CSeq value out of order."'request)); " is 125.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,Register,The length of the statement  "                reg.AddOrUpdateBindings(e.ServerTransaction.Flow'request.CallID'request.CSeq.SequenceNumber'request.Contact.GetAllValues()); " is 124.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ProcessResponse,The length of the statement  "                    if(response.StatusCodeType == SIP_StatusCodeType.Success && m_pServerTransaction.Request.RequestLine.Method == SIP_Methods.INVITE){ " is 131.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,SendResponse,The length of the statement  "                if(response.CSeq.RequestMethod.ToUpper() == SIP_Methods.INVITE && response.StatusCodeType == SIP_StatusCodeType.Success){ " is 121.
Long Statement,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,Init,The length of the statement  "                foreach(SIP_Hop hop in m_pOwner.Proxy.Stack.GetHops(uri'm_pRequest.ToByteData().Length'((SIP_Uri)m_pRequest.RequestLine.Uri).IsSecure)){ " is 136.
Long Statement,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ClientTransaction_TimedOut,The length of the statement  "                        m_pOwner.ProcessResponse(this'm_pTransaction'm_pOwner.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pTransaction.Request)); " is 145.
Long Statement,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ClientTransaction_TransportError,The length of the statement  "                        m_pOwner.ProcessResponse(this'm_pTransaction'm_pOwner.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pTransaction.Request)); " is 145.
Long Statement,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,m_pTimerC_Elapsed,The length of the statement  "                        m_pOwner.ProcessResponse(this'm_pTransaction'm_pOwner.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pTransaction.Request)); " is 145.
Long Statement,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,Start,The length of the statement  "                        m_pOwner.ProcessResponse(this'm_pTransaction'm_pOwner.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x503_Service_Unavailable + ": No hop(s) for target."'m_pTransaction.Request)); " is 177.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,OnRequestReceived,The length of the statement  "                    m_pStack.TransportLayer.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x500_Server_Internal_Error + ": " + x.Message'e.Request)); " is 137.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,The length of the statement  "            if(!SIP_Utils.IsSipOrSipsUri(request.RequestLine.Uri.ToString()) || !this.OnIsLocalUri(((SIP_Uri)request.RequestLine.Uri).Host)){ " is 129.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,The length of the statement  "            else if(request.Route.GetAllValues().Length > 0 && IsLocalRoute(SIP_Uri.Parse(request.Route.GetTopMostValue().Address.Uri.ToString()))){ " is 136.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,The length of the statement  "                if(forwardRequest.Route.GetAllValues().Length > 0 && !forwardRequest.Route.GetTopMostValue().Parameters.Contains("lr")){ " is 120.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,The length of the statement  "                        e.ServerTransaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x503_Service_Unavailable + ": No hop(s) for target."'forwardRequest)); " is 145.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,The length of the statement  "                forwardRequest.Via.AddToTop("SIP/2.0/transport-tl-addign sentBy-tl-assign-it;branch=z9hG4bK-" + Core.ComputeMd5(request.Via.GetTopMostValue().Branch'true)); " is 156.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,ForwardRequest,The length of the statement  "                        e.ServerTransaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x503_Service_Unavailable + ": Transport error."'forwardRequest)); " is 140.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                SIP_Response notAuthenticatedResponse = m_pStack.CreateResponse(SIP_ResponseCodes.x407_Proxy_Authentication_Required'e.Request); " is 128.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                notAuthenticatedResponse.ProxyAuthenticate.Add(new Auth_HttpDigest(m_pStack.Realm'm_pStack.DigestNonceManager.CreateNonce()'m_Opaque).ToChallange()); " is 149.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                SIP_Response notAuthenticatedResponse = m_pStack.CreateResponse(SIP_ResponseCodes.x407_Proxy_Authentication_Required + ": Opaque value won't match !"'e.Request); " is 161.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                notAuthenticatedResponse.ProxyAuthenticate.Add(new Auth_HttpDigest(m_pStack.Realm'm_pStack.DigestNonceManager.CreateNonce()'m_Opaque).ToChallange()); " is 149.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                SIP_Response notAuthenticatedResponse = m_pStack.CreateResponse(SIP_ResponseCodes.x407_Proxy_Authentication_Required + ": Invalid nonce value !"'e.Request); " is 156.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                notAuthenticatedResponse.ProxyAuthenticate.Add(new Auth_HttpDigest(m_pStack.Realm'm_pStack.DigestNonceManager.CreateNonce()'m_Opaque).ToChallange()); " is 149.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                SIP_Response notAuthenticatedResponse = m_pStack.CreateResponse(SIP_ResponseCodes.x407_Proxy_Authentication_Required + ": Authentication failed."'e.Request); " is 157.
Long Statement,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,AuthenticateRequest,The length of the statement  "                notAuthenticatedResponse.ProxyAuthenticate.Add(new Auth_HttpDigest(m_pStack.Realm'm_pStack.DigestNonceManager.CreateNonce()'m_Opaque).ToChallange()); " is 149.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Dialog,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog.cs,CreateRequest,The length of the statement  "                SIP_Request request = m_pStack.CreateRequest(method'new SIP_t_NameAddress(""'m_pRemoteUri)'new SIP_t_NameAddress(""'m_pLocalUri)); " is 130.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Dialog_Invite,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,Terminate,The length of the statement  "                    if((this.State == SIP_DialogState.Early && m_pActiveInvite is SIP_ClientTransaction) || this.State == SIP_DialogState.Confirmed){ " is 129.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Dialog_Invite,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,ProcessRequest,The length of the statement  "                if(m_pActiveInvite != null && m_pActiveInvite is SIP_ServerTransaction && ((SIP_ServerTransaction)m_pActiveInvite).Request.CSeq.SequenceNumber < e.Request.CSeq.SequenceNumber){ " is 176.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Dialog_Invite,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,ProcessRequest,The length of the statement  "                    SIP_Response response = this.Stack.CreateResponse(SIP_ResponseCodes.x500_Server_Internal_Error + ": INVITE with a lower CSeq is pending(RFC 3261 14.2)."'e.Request); " is 164.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Dialog_Invite,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,ProcessRequest,The length of the statement  "                e.ServerTransaction.SendResponse(this.Stack.CreateResponse(SIP_ResponseCodes.x603_Decline + " : New dialog usages not allowed (RFC 5057)."'e.Request)); " is 151.
Long Statement,LumiSoft.Net.SIP.Stack,UasInvite2xxRetransmit,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,m_pTimer_Elapsed,The length of the statement  "                            m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "'] ACK was not received for (re-)INVITE' terminating INVITE session."); " is 135.
Long Statement,LumiSoft.Net.SIP.Stack,UasInvite2xxRetransmit,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,m_pTimer_Elapsed,The length of the statement  "                                m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "';statusCode=" + m_pResponse.StatusCode + "] UAS 2xx response retransmited"); " is 141.
Long Statement,LumiSoft.Net.SIP.Stack,UasInvite2xxRetransmit,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,m_pTimer_Elapsed,The length of the statement  "                                m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "'] UAS 2xx response retransmission failed: " + x.Message); " is 122.
Long Statement,LumiSoft.Net.SIP.Stack,UacInvite2xxRetransmissionWaiter,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,Match,The length of the statement  "                if(m_pInvite.CSeq.RequestMethod == response.CSeq.RequestMethod && m_pInvite.CSeq.SequenceNumber == response.CSeq.SequenceNumber){ " is 129.
Long Statement,LumiSoft.Net.SIP.Stack,UacInvite2xxRetransmissionWaiter,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,Process,The length of the statement  "                                m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "'] ACK send for 2xx response failed: " + x.Message + "."); " is 122.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Flow,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Flow.cs,BeginReadHeader_Completed,The length of the statement  "                        m_pTcpSession.TcpStream.BeginReadFixedCount(m_pMessage'contentLength'new AsyncCallback(this.BeginReadData_Completed)'null); " is 123.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Dispose,The length of the statement  "                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] disposed."); " is 130.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerA_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) triggered."); " is 170.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerA_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) updated' will triger after " + m_pTimerA.Interval + "."); " is 214.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerB_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) triggered."); " is 169.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerD_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) triggered."); " is 186.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerE_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(-NonINVITE request retransmission) triggered."); " is 174.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerE_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) updated' will triger after " + m_pTimerE.Interval + "."); " is 218.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerF_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) triggered."); " is 183.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerK_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) triggered."); " is 190.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Start,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) started' will triger after " + m_pTimerA.Interval + "."); " is 214.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Start,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) started' will triger after " + m_pTimerB.Interval + "."); " is 213.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Start,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) started' will triger after " + m_pTimerF.Interval + "."); " is 227.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Start,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) started' will triger after " + m_pTimerE.Interval + "."); " is 218.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                        "Response [transactionID='" +  this.ID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +  " is 139.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) stoped."); " is 167.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) stoped."); " is 166.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + "."); " is 230.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + "."); " is 230.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) stoped."); " is 171.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped."); " is 180.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + "."); " is 234.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped."); " is 180.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The length of the statement  "                                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + "."); " is 234.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,m_pTimerG_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer G(INVITE response(3xx - 6xx) retransmission) triggered."); " is 181.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,m_pTimerG_Elapsed,The length of the statement  "                            this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer G(INVITE response(3xx - 6xx) retransmission) updated' will triger after " + m_pTimerG.Interval + "."); " is 226.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,m_pTimerH_Elapsed,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer H(INVITE ACK wait) triggered."); " is 155.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,m_pTimerI_Elapsed,The length of the statement  "                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer I(INVITE ACK retransmission wait) triggered."); " is 170.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,m_pTimerJ_Elapsed,The length of the statement  "                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer I(Non-INVITE request retransmission wait) triggered."); " is 178.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The length of the statement  "                                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer G(INVITE response(3xx - 6xx) retransmission) started' will triger after " + m_pTimerG.Interval + "."); " is 225.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer H(INVITE ACK wait) started' will triger after " + m_pTimerH.Interval + "."); " is 199.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + "."); " is 222.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + "."); " is 222.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] transport exception: " + x.Message); " is 153.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,Cancel,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] transport exception: " + x.Message); " is 153.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,ProcessRequest,The length of the statement  "                            "Request [transactionID='" +  this.ID + "'; method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +  " is 136.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,ProcessRequest,The length of the statement  "                            "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; received '" + flow.LocalEP + "' <- '" + flow.RemoteEP + "'."' " is 133.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,ProcessRequest,The length of the statement  "                                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer G(INVITE response(3xx - 6xx) retransmission) stoped."); " is 178.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,ProcessRequest,The length of the statement  "                                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer H(INVITE ACK wait) stoped."); " is 152.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,ProcessRequest,The length of the statement  "                                    this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer I(INVITE ACK retransission wait) started' will triger after " + m_pTimerI.Interval + "."); " is 213.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,ProcessRequest,The length of the statement  "                        this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] transport exception: " + x.Message); " is 153.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,ClientTransaction_TransportError,The length of the statement  "                    OnResponseReceived(m_pStack.CreateResponse(SIP_ResponseCodes.x503_Service_Unavailable + ": Transport error."'m_pRequest)); " is 122.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,Start,The length of the statement  "                        foreach(SIP_Hop hop in m_pStack.GetHops(uri'm_pRequest.ToByteData().Length'((SIP_Uri)m_pRequest.RequestLine.Uri).IsSecure)){ " is 124.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,Cancel,The length of the statement  "            // We may not call m_pTransaction.Cancel() in lock block' because deadlock can happen when transaction get response at same time. " is 129.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,SendToFlow,The length of the statement  "                request.Contact.Add((flow.IsSecure ? "sips:" : "sip:" ) + from.User + "@" + m_pStack.TransportLayer.GetContactHost(flow).ToString()); " is 133.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,m_pRegisterSender_ResponseReceived,The length of the statement  "                // If Via: received or rport paramter won't match to our sent-by' use received and rport to construct new contact value. " is 120.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,m_pRegisterSender_ResponseReceived,The length of the statement  "                    IPEndPoint ep = new IPEndPoint(via.Received != null ? via.Received : cContactIP'via.RPort > 0 ? via.RPort : cContact.Port); " is 123.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,BeginRegister,The length of the statement  "            SIP_Request register = m_pStack.CreateRequest(SIP_Methods.REGISTER'new SIP_t_NameAddress(m_pServer.Scheme + ":" + m_AOR)'new SIP_t_NameAddress(m_pServer.Scheme + ":" + m_AOR)); " is 176.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,BeginRegister,The length of the statement  "            m_pRegisterSender.ResponseReceived += new EventHandler<SIP_ResponseReceivedEventArgs>(m_pRegisterSender_ResponseReceived); " is 122.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,BeginUnregister,The length of the statement  "                SIP_Request unregister = m_pStack.CreateRequest(SIP_Methods.REGISTER'new SIP_t_NameAddress(m_pServer.Scheme + ":" + m_AOR)'new SIP_t_NameAddress(m_pServer.Scheme + ":" + m_AOR)); " is 178.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,BeginUnregister,The length of the statement  "                m_pUnregisterSender.ResponseReceived += new EventHandler<SIP_ResponseReceivedEventArgs>(m_pUnregisterSender_ResponseReceived); " is 126.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Transaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Transaction.cs,SetState,The length of the statement  "                this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=" + (this is SIP_ServerTransaction) + "] swtiched to '" + state.ToString() + "' state."); " is 200.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Request,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Request.cs,Validate,The length of the statement  "                    throw new SIP_ParseException("Contact: header field is missing' method that can establish a dialog MUST provide a SIP or SIPS URI !"); " is 134.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Response,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Response.cs,Parse,The length of the statement  "                throw new SIP_ParseException("Invalid SIP Status-Line syntax ! Syntax: {SIP-Version SP Status-Code SP Reason-Phrase}."); " is 120.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Response,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Response.cs,Parse,The length of the statement  "                retVal.SipVersion = Convert.ToDouble(version_code_text[0].Split('/')[1]'System.Globalization.NumberFormatInfo.InvariantInfo); " is 125.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Response,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Response.cs,ToStream,The length of the statement  "            byte[] responseLine = Encoding.UTF8.GetBytes("SIP/" + this.SipVersion.ToString("f1").Replace('''''.') + " " + this.StatusCode + " " + this.ReasonPhrase + "\r\n"); " is 162.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,CreateResponse,The length of the statement  "                if(response.StatusCodeType == SIP_StatusCodeType.Success && response.Contact.GetTopMostValue() ==  null && flow != null){ " is 121.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendRequest,The length of the statement  "                    "Request [" + (transaction == null ? "" : "transactionID='" + transaction.ID + "';") + "method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +  " is 180.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendRequest,The length of the statement  "                    "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; sent '" + flow.LocalEP + "' -> '" + flow.RemoteEP + "'."' " is 129.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The length of the statement  "                                "Response [flowReuse=true; transactionID='" + transactionID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +  " is 160.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The length of the statement  "                                "Response [flowReuse=true; transactionID='" + transactionID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +  " is 160.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The length of the statement  "                    // Override RFC' if there is any existing connection and it gives error' try always RFC 3261 18.2.2(recieved) and 3265 5. " is 121.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The length of the statement  "                SendResponseToHost(logID'transactionID'localEP'via.Received.ToString()'via.SentByPortWithDefault'via.ProtocolTransport'response); " is 129.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponse_RFC_3263_5,The length of the statement  "                SendResponseToHost(logID'transactionID'localEP'via.SentBy.Host'via.SentByPortWithDefault'via.ProtocolTransport'response); " is 121.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponse_RFC_3263_5,The length of the statement  "                SendResponseToHost(logID'transactionID'localEP'via.SentBy.Host'via.SentByPortWithDefault'via.ProtocolTransport'response); " is 121.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponse_RFC_3263_5,The length of the statement  "                            m_pStack.Logger.AddText(logID'"No DNS SRV records found' starts sending to Via: sent-by host '" + via.SentBy.Host + "'."); " is 122.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponse_RFC_3263_5,The length of the statement  "                        SendResponseToHost(logID'transactionID'localEP'via.SentBy.Host'via.SentByPortWithDefault'via.ProtocolTransport'response); " is 121.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseToHost,The length of the statement  "                                "Response [transactionID='" + transactionID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +  " is 144.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseToHost,The length of the statement  "                                m_pStack.Logger.AddText(logID'"Failed to send response to host '" + host + "' IP end point '" + remoteEP + "'' will try next A record."); " is 137.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,Resolve,The length of the statement  "            SIP_Request optionsRequest = m_pStack.CreateRequest(SIP_Methods.OPTIONS'new SIP_t_NameAddress("sip:ping@publicIP.com")'new SIP_t_NameAddress("sip:ping@publicIP.com")); " is 167.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,Resolve,The length of the statement  "            optionsTransaction.ResponseReceived += new EventHandler<SIP_ResponseReceivedEventArgs>(delegate(object s'SIP_ResponseReceivedEventArgs e){ " is 138.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,Resolve,The length of the statement  "                resolvedEP = new IPEndPoint(via.Received == null ? flow.LocalEP.Address : via.Received'via.RPort > 0 ? via.RPort : flow.LocalEP.Port); " is 134.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetContactHost,The length of the statement  "                        retVal = new HostEndPoint((string.IsNullOrEmpty(bind.HostName) ? flow.LocalEP.Address.ToString() : bind.HostName)'bind.Port); " is 125.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetContactHost,The length of the statement  "                            retVal = new HostEndPoint((string.IsNullOrEmpty(bind.HostName) ? flow.LocalEP.Address.ToString() : bind.HostName)'bind.Port); " is 125.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetContactHost,The length of the statement  "                            retVal = new HostEndPoint((string.IsNullOrEmpty(bind.HostName) ? flow.LocalEP.Address.ToString() : bind.HostName)'bind.Port); " is 125.
Long Statement,LumiSoft.Net.SIP.Stack,SIP_FlowManager,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,CreateFromSession,The length of the statement  "                string flowID = session.LocalEndPoint.ToString() + "-" + session.RemoteEndPoint.ToString() + "-" + (session.IsSecureConnection ? SIP_Transport.TLS : SIP_Transport.TCP); " is 168.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA.cs,m_pStack_RequestReceived,The length of the statement  "            // TODO: Performance: rise events on thread pool or see if this method called on pool aready' then we may not keep lock for events ? " is 132.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA.cs,m_pStack_RequestReceived,The length of the statement  "                    e.ServerTransaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist'e.Request)); " is 124.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA.cs,m_pStack_RequestReceived,The length of the statement  "                    e.ServerTransaction.SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist'e.Request)); " is 124.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,m_pInitialInviteSender_ResponseReceived,The length of the statement  "                        dialog.Terminate("All early dialogs are considered terminated upon reception of the non-2xx final response. (RFC 3261 13.2.2.3)"'false); " is 136.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,Terminate,The length of the statement  "                    m_pInitialInviteTransaction.SendResponse(m_pUA.Stack.CreateResponse(SIP_ResponseCodes.x487_Request_Terminated'm_pInitialInviteTransaction.Request)); " is 148.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,Start,The length of the statement  "                m_pInitialInviteSender.ResponseReceived += new EventHandler<SIP_ResponseReceivedEventArgs>(m_pInitialInviteSender_ResponseReceived); " is 132.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,Accept,The length of the statement  "            SIP_Response response = m_pUA.Stack.CreateResponse(SIP_ResponseCodes.x200_Ok'm_pInitialInviteTransaction.Request'm_pInitialInviteTransaction.Flow);             " is 147.
Long Statement,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,Reject,The length of the statement  "                m_pInitialInviteTransaction.SendResponse(m_pUA.Stack.CreateResponse(statusCode_reason'm_pInitialInviteTransaction.Request)); " is 124.
Long Statement,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,BeginAuthenticate,The length of the statement  "            asyncState.SetAsyncResult(asyncMethod.BeginInvoke(userName'password'new AsyncCallback(asyncState.CompletedCallback)'null)); " is 123.
Long Statement,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,Authenticate,The length of the statement  "                Auth_HttpDigest digestmd5 = new Auth_HttpDigest(Encoding.Default.GetString(Convert.FromBase64String(line.Split(' ')[1]))'"AUTHENTICATE"); " is 137.
Long Statement,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,BeginMailFrom,The length of the statement  "            asyncState.SetAsyncResult(asyncMethod.BeginInvoke(from'messageSize'new AsyncCallback(asyncState.CompletedCallback)'null)); " is 122.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginConnect,The length of the statement  "			ThreadPool.QueueUserWorkItem(new WaitCallback(this.BeginConnect_workerThread)'new object[]{localEndpoint'host'port'ssl'callback}); " is 130.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginEhlo,The length of the statement  "			m_pSocket.BeginWriteLine("EHLO " + hostName'new object[]{hostName'callback}'new SocketCallBack(this.OnEhloSendFinished));			 " is 121.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnEhloSendFinished,The length of the statement  "					m_pSocket.BeginReadLine(ms'1000'new object[]{((object[])tag)[0]'callback'ms}'new SocketCallBack(this.OnEhloReadServerResponseFinished)); " is 136.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnEhloReadServerResponseFinished,The length of the statement  "							m_pSocket.BeginReadLine(ms'1000'new object[]{(((object[])tag)[0])'callback'ms}'new SocketCallBack(this.OnEhloReadServerResponseFinished)); " is 138.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginAuthenticate,The length of the statement  "				m_pSocket.BeginWriteLine("AUTH CRAM-MD5"'new Auth_state_data(userName'password'callback)'new SocketCallBack(this.OnAuthCramMd5SendFinished)); " is 141.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginAuthenticate,The length of the statement  "				m_pSocket.BeginWriteLine("AUTH LOGIN"'new Auth_state_data(userName'password'callback)'new SocketCallBack(this.OnAuthLoginSendFinished)); " is 136.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthCramMd5ReadServerResponseFinished,The length of the statement  "						m_pSocket.BeginWriteLine(Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(stateData.UserName + " " + hashedPwd))'stateData'new SocketCallBack(this.OnAuthCramMd5UserPwdSendFinished)); " is 192.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthLoginReadServerResponseFinished,The length of the statement  "						m_pSocket.BeginWriteLine(Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(stateData.UserName))'stateData'new SocketCallBack(this.OnAuthLoginUserSendFinished)); " is 169.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthLoginUserReadServerResponseFinished,The length of the statement  "						m_pSocket.BeginWriteLine(Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(stateData.Password))'stateData'new SocketCallBack(this.OnAuthLoginPasswordSendFinished)); " is 173.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginSetSender,The length of the statement  "				m_pSocket.BeginWriteLine("MAIL FROM:<" + senderEmail + "> SIZE=" + messageSize.ToString()'callback'new SocketCallBack(this.OnMailSendFinished)); " is 144.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginSendMessage,The length of the statement  "				m_pSocket.BeginWriteLine("BDAT " + (message.Length - message.Position) + " LAST"'new object[]{message'callback}'new SocketCallBack(this.OnBdatSendFinished)); " is 157.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnDataSendFinished,The length of the statement  "					m_pSocket.BeginReadLine(ms'1000'new object[]{(Stream)(((object[])tag)[0])'callback'ms}'new SocketCallBack(this.OnDataReadServerResponseFinished));	 " is 146.
Long Statement,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnDataMessageSendFinished,The length of the statement  "					m_pSocket.BeginReadLine(ms'1000'new object[]{callback'ms}'new SocketCallBack(this.OnDataMessageSendReadServerResponseFinished));	 " is 128.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,Start,The length of the statement  "                LogText("Starting to relay message '" + m_pRelayItem.MessageID + "' from '" + m_pRelayItem.From + "' to '" + m_pRelayItem.To + "'."); " is 133.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,Start,The length of the statement  "                            m_pTargets.Add(new Relay_Target(new IPEndPoint(Dns_Client.Resolve(smartHost.Host)[0]'smartHost.Port)'smartHost.SslMode'smartHost.UserName'smartHost.Password));                             " is 159.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,BeginConnect,The length of the statement  "            m_pSmtpClient.BeginConnect(new IPEndPoint(m_pLocalBindInfo.IP'0)'m_pActiveTarget.Target'false'new AsyncCallback(this.ConnectCallback)'null); " is 140.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,ConnectCallback,The length of the statement  "                    m_pSmtpClient.BeginAuthenticate(m_pActiveTarget.UserName'm_pActiveTarget.Password'new AsyncCallback(this.AuthenticateCallback)'null); " is 133.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,StartTlsCallback,The length of the statement  "                    m_pSmtpClient.BeginAuthenticate(m_pActiveTarget.UserName'm_pActiveTarget.Password'new AsyncCallback(this.AuthenticateCallback)'null); " is 133.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,SmtpClient_WriteLog,The length of the statement  "                    m_pServer.Logger.AddRead(m_SessionID'e.LogEntry.UserIdentity'e.LogEntry.Size'e.LogEntry.Text'e.LogEntry.LocalEndPoint'e.LogEntry.RemoteEndPoint); " is 145.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,SmtpClient_WriteLog,The length of the statement  "                    m_pServer.Logger.AddText(m_SessionID'e.LogEntry.UserIdentity'e.LogEntry.Text'e.LogEntry.LocalEndPoint'e.LogEntry.RemoteEndPoint); " is 129.
Long Statement,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,SmtpClient_WriteLog,The length of the statement  "                    m_pServer.Logger.AddWrite(m_SessionID'e.LogEntry.UserIdentity'e.LogEntry.Size'e.LogEntry.Text'e.LogEntry.LocalEndPoint'e.LogEntry.RemoteEndPoint); " is 146.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Server.cs,OnMaxConnectionsPerIPExceeded,The length of the statement  "            session.TcpStream.WriteLine("421 Client host rejected: too many connections from your IP(" + session.RemoteEndPoint.Address + ")' please try again later."); " is 156.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,Start,The length of the statement  "                    reply = new SMTP_Reply(220'"<" + Net_Utils.GetLocalHostName(this.LocalHostName) + "> Simple Mail Transfer Service Ready."); " is 123.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BeginReadCmd,The length of the statement  "                SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BeginReadCmd,The length of the statement  "                readLineOP.Completed += new EventHandler<EventArgs<SmartStream.ReadLineAsyncOP>>(delegate(object sender'EventArgs<SmartStream.ReadLineAsyncOP> e){                 " is 146.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,ProcessCmd,The length of the statement  "                    this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'op.BytesInBuffer'op.LineUtf8'this.LocalEndPoint'this.RemoteEndPoint); " is 135.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,EHLO,The length of the statement  "            if(this.Server.Extentions.Contains(SMTP_ServiceExtensions.STARTTLS) && !this.IsSecureConnection && this.Certificate != null){ " is 125.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,AUTH,The length of the statement  "                    SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,AUTH,The length of the statement  "                        this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'readLineOP.BytesInBuffer'"base64 auth-data"'this.LocalEndPoint'this.RemoteEndPoint); " is 150.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,MAIL,The length of the statement  "                    if(name_value[1].ToUpper() != "7BIT" && name_value[1].ToUpper() != "8BITMIME" && name_value[1].ToUpper() != "BINARYMIME"){ " is 122.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,RCPT,The length of the statement  "                WriteLine("501 Syntax error('address' value must be specified)' syntax: \"RCPT TO:\" \"<\" address \">\" [SP Rcpt-parameters] CRLF"); " is 133.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,DATA,The length of the statement  "            readPeriodTermOP.Completed += new EventHandler<EventArgs<SmartStream.ReadPeriodTerminatedAsyncOP>>(delegate(object sender'EventArgs<SmartStream.ReadPeriodTerminatedAsyncOP> e){                 " is 176.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,DATA_End,The length of the statement  "                    SMTP_Reply reply = new SMTP_Reply(250'"DATA completed in " + (DateTime.Now - startTime).TotalSeconds.ToString("f2") + " seconds."); " is 131.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BDAT,The length of the statement  "                            SMTP_Reply reply = new SMTP_Reply(250'chunkSize + " bytes received in " + (DateTime.Now - startTime).TotalSeconds.ToString("f2") + " seconds."); " is 144.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,CreateReceivedHeader,The length of the statement  "            LumiSoft.Net.Mail.Mail_h_Received received = new LumiSoft.Net.Mail.Mail_h_Received(this.EhloHost'Net_Utils.GetLocalHostName(this.LocalHostName)'DateTime.Now); " is 158.
Long Statement,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,WriteLine,The length of the statement  "                this.Server.Logger.AddWrite(this.ID'this.AuthenticatedUserIdentity'countWritten'line'this.LocalEndPoint'this.RemoteEndPoint); " is 125.
Long Statement,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,BeginConnect,The length of the statement  "            asyncState.SetAsyncResult(asyncMethod.BeginInvoke(localEP'remoteEP'ssl'new AsyncCallback(asyncState.CompletedCallback)'null)); " is 126.
Long Statement,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,ReadLine,The length of the statement  "            SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 125.
Long Statement,LumiSoft.Net.TCP,TCP_Server<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Server.cs,StartListen,The length of the statement  "                            // Move processing to thread-pool' because IOCompletionBeginAccept keeps using calling thread as loang as there is work todo. " is 125.
Long Statement,LumiSoft.Net.IMAP.Server,SearchKey,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchKey.cs,Match,The length of the statement  "					else if(mime.MainEntity.Header.GetFirst(headerField_value[0]).Value.ToLower().IndexOf(headerField_value[1].ToLower()) > -1){ " is 124.
Long Statement,LumiSoft.Net.IMAP.Server,SearchKey,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_SearchKey.cs,Match,The length of the statement  "				if(SearchGroup.Match_Key_Value(serachKey1'no'uid'size'internalDate'flags'mime'bodyText) || SearchGroup.Match_Key_Value(serachKey2'no'uid'size'internalDate'flags'mime'bodyText)){ " is 177.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Server.cs,InitNewSession,The length of the statement  "                            socket.Send(System.Text.Encoding.ASCII.GetBytes("* NO Maximum connections from your IP address is exceeded' try again later !\r\n")); " is 133.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,LogIn,The length of the statement  "				this.Socket.WriteLine(cmdTag + " OK LOGIN Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds"); " is 143.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Select,The length of the statement  "				response += "* OK [UNSEEN " + m_pSelectedFolder.FirstUnseen + "] Message " + m_pSelectedFolder.FirstUnseen + " is first unseen\r\n"; " is 132.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Select,The length of the statement  "				response += cmdTag + " OK [" + (m_pSelectedFolder.ReadOnly ? "READ-ONLY" : "READ-WRITE") + "] SELECT Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n"; " is 205.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Examine,The length of the statement  "				response += "* OK [UNSEEN " + m_pSelectedFolder.FirstUnseen + "] Message " + m_pSelectedFolder.FirstUnseen + " is first unseen\r\n"; " is 132.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Examine,The length of the statement  "				response += cmdTag + " OK [READ-ONLY] EXAMINE  Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n"; " is 151.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Create,The length of the statement  "				this.Socket.WriteLine(cmdTag + " OK CREATE Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds" ); " is 145.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Rename,The length of the statement  "				this.Socket.WriteLine(cmdTag + " BAD RENAME invalid arguments. Syntax: {<command-tag> RENAME \"mailboxName\" \"newMailboxName\"}"); " is 131.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,UnSuscribe,The length of the statement  "				this.Socket.WriteLine(cmdTag + " BAD UNSUBSCRIBE invalid arguments. Syntax: {<command-tag> UNSUBSCRIBE \"mailboxName\"}"); " is 122.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,List,The length of the statement  "				this.Socket.WriteLine(cmdTag + " BAD Invalid LIST arguments. Syntax: {<command-tag> LIST \"<reference-name>\" \"<mailbox-name>\"}"); " is 132.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,List,The length of the statement  "			reply += cmdTag + " OK LIST Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n"; " is 132.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Status,The length of the statement  "				this.Socket.WriteLine(cmdTag + " BAD Invalid STATUS arguments. Syntax: {<command-tag> STATUS \"<mailbox-name>\" \"(status-data-items)\"}"); " is 139.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Status,The length of the statement  "			if(wantedItems.Replace("MESSAGES"'"").Replace("RECENT"'"").Replace("UIDNEXT"'"").Replace("UIDVALIDITY"'"").Replace("UNSEEN"'"").Trim().Length > 0){ " is 147.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The length of the statement  "				if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){ " is 144.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The length of the statement  "					if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){ " is 144.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,GETACL,The length of the statement  "			IMAP_GETACL_eArgs eArgs = m_pServer.OnGetFolderACL(this'Core.Decode_IMAP_UTF7_String(IMAP_Utils.NormalizeFolder(args[0]))); " is 123.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,SETACL,The length of the statement  "				this.Socket.WriteLine(cmdTag + " BAD GETACL invalid arguments. Syntax: SETACL<SP>FolderName<SP>UserName<SP>ACL_Flags<CRLF>"); " is 125.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,SETACL,The length of the statement  "			IMAP_SETACL_eArgs eArgs = m_pServer.OnSetFolderACL(this'IMAP_Utils.NormalizeFolder(args[0])'args[1]'setType'IMAP_Utils.ACL_From_String(aclFlags)); " is 146.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The length of the statement  "					dataLength = Convert.ToInt64(argsText.Substring(argsText.LastIndexOf("{") + 1 'argsText.Length - argsText.LastIndexOf("{") - 2));					 " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The length of the statement  "				IMAP_eArgs_Search eArgs = m_pServer.OnSearch(this'Core.Decode_IMAP_UTF7_String(this.SelectedMailbox)'new IMAP_SearchMatcher(searchCriteria)); " is 141.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The length of the statement  "			searchResponse += cmdTag + " OK SEARCH completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n"; " is 143.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The length of the statement  "						parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"[BAD MESSAGE] Bad message' message parsing failed !"'"NOTE: Bad message' message parsing failed !\r\n\r\n" + x.Message'""); " is 205.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The length of the statement  "			searchResponse += cmdTag + " OK SEARCH completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n"; " is 143.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The length of the statement  "				this.Socket.WriteLine(cmdTag + " BAD Invalid <sequnce-set> value '" + args[0] + "' Syntax: {<command-tag> FETCH <sequnce-set> (<fetch-keys>)}!"); " is 145.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The length of the statement  "							if(start_length.Length == 0 || start_length.Length > 2 || !Core.IsNumber(start_length[0]) || (start_length.Length == 2 && !Core.IsNumber(start_length[1]))){ " is 156.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The length of the statement  "						fetchFlags.Add(new object[]{"BODY[]"'peek'mimePartsSpecifier'originalSectionValue'sectionType'sectionArgs'startPosition'length}); " is 129.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The length of the statement  "					this.Socket.WriteLine(cmdTag + " BAD Invalid fetch-items argument. Unkown part starts from: " + argsReader.SourceString); " is 121.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The length of the statement  "                                    parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"BAD Message"'"This is BAD message' mail server failed to parse it !"'""); " is 155.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The length of the statement  "			this.Socket.WriteLine(cmdTag + " OK FETCH completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds"); " is 143.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The length of the statement  "				this.Socket.WriteLine(cmdTag + " BAD STORE invalid arguments. Syntax: {<command-tag> STORE <sequnce-set> <data-item> (<message-flags>)}"); " is 138.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The length of the statement  "				this.Socket.WriteLine(cmdTag + "BAD Invalid <sequnce-set> value '" + args[0] + "' Syntax: {<command-tag> STORE <sequnce-set> <data-item> (<message-flags>)}!"); " is 159.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The length of the statement  "			if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){ " is 144.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The length of the statement  "            this.Socket.WriteLine(cmdTag + " OK STORE completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds"); " is 143.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Copy,The length of the statement  "				this.Socket.WriteLine(cmdTag + "BAD Invalid <sequnce-set> value '" + args[0] + "' Syntax: {<command-tag> COPY <sequnce-set> \"<mailbox-name>\"}!"); " is 147.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Noop,The length of the statement  "                this.Socket.WriteLine(cmdTag + " OK NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n");                 " is 146.
Long Statement,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Noop,The length of the statement  "			    this.Socket.WriteLine(cmdTag + " OK NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n"); " is 146.
Long Statement,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,StoreDataToDataPages,The length of the statement  "				throw new Exception("There isn't enough data pages to store data ! Data needs '" + (int)Math.Ceiling(data.Length / (double)dataPageDataAreaSize) + "' ' but available '" + dataPages.Length + "'."); " is 196.
Long Statement,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,GetColumnData,The length of the statement  "					currentDataPage.ReadData(columnData'dataOffset'm_pOwnerDb.DataPageDataAreaSize - offsetInStartDataPage'offsetInStartDataPage); " is 126.
Long Statement,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The length of the statement  "					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of bool' but value contains '" +val.GetType().ToString() + "' !"); " is 140.
Long Statement,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The length of the statement  "					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of DateTime' but value contains '" + val.GetType().ToString() + "' !"); " is 145.
Long Statement,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The length of the statement  "					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Long' but value contains '" + val.GetType().ToString() + "' !"); " is 141.
Long Statement,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The length of the statement  "					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Int' but value contains '" + val.GetType().ToString() + "' !"); " is 140.
Long Statement,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The length of the statement  "					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of String' but value contains '" + val.GetType().ToString() + "' !"); " is 143.
Long Statement,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The length of the statement  "				throw new Exception("Data page can store only " + dataPageDataAreaSize + " bytes' data conatins '" + data.Length + "' bytes !"); " is 128.
Long Statement,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,ReadData,The length of the statement  "				throw new Exception("There isn't so much data stored in data page as requested ! Stored data length = " + m_StoredDataLength + "; start offset = " + startOffset + "; length wanted = " + length); " is 194.
Long Statement,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,ReadData,The length of the statement  "				throw new Exception("There isn't so much data stored in data page as requested ! Stored data length = " + m_StoredDataLength + "; start offset = " + startOffset + "; length wanted = " + length); " is 194.
Long Statement,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PASV,The length of the statement  "                this.Socket.WriteLine("227 Entering Passive Mode (" + m_pServer.PassivePublicIP.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ")."); " is 141.
Long Statement,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PASV,The length of the statement  "                this.Socket.WriteLine("227 Entering Passive Mode (" + ((IPEndPoint)this.Socket.LocalEndPoint).Address.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ")."); " is 163.
Long Statement,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The length of the statement  "			EndPoint endpoint = (EndPoint)(new IPEndPoint(System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName()).AddressList[0]'80)); " is 124.
Long Statement,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Ping,The length of the statement  "			EndPoint endpoint = (EndPoint)(new IPEndPoint(System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName()).AddressList[0]'80)); " is 124.
Long Statement,LumiSoft.Net.IMAP,IMAP_BODY,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_BODY.cs,ConstructParts,The length of the statement  "				contentTypeMainMediaType contentTypeSubMediaType (conentTypeParameters) contentID contentDescription contentEncoding contentSize [envelope] [contentLine] " is 153.
Long Statement,LumiSoft.Net.IMAP,IMAP_BODY_Entity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_BODY_Entity.cs,Parse,The length of the statement  "				// contentTypeMainMediaType contentTypeSubMediaType (conentTypeParameters) contentID contentDescription contentEncoding contentSize [envelope] [contentLine] " is 156.
Long Statement,LumiSoft.Net.Mime,HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\HeaderFieldCollection.cs,Parse,The length of the statement  "            SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 125.
Long Statement,LumiSoft.Net.Mime,MailboxAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MailboxAddress.cs,Parse,The length of the statement  "						name = MIME_Encoding_EncodedWord.DecodeS(mailbox.Substring(startIndex + 1'mailbox.LastIndexOf("\"") - startIndex - 1).Trim()); " is 126.
Long Statement,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,Parse,The length of the statement  "                    SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException); " is 124.
Long Statement,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,Parse,The length of the statement  "                    SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException); " is 131.
Long Statement,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,EncodeData,The length of the statement  "				throw new Exception("Not supported Content-Transfer-Encoding. If it's your custom encoding' encode data yourself and set it with DataEncoded property !"); " is 154.
Long Statement,LumiSoft.Net.Mime,MimeEntityCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntityCollection.cs,Add,The length of the statement  "				throw new Exception("You don't have Content-Type: multipart/xxx. Only Content-Type: multipart/xxx can have nested mime entities !"); " is 132.
Long Statement,LumiSoft.Net.Mime,MimeEntityCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntityCollection.cs,Insert,The length of the statement  "				throw new Exception("You don't have Content-Type: multipart/xxx. Only Content-Type: multipart/xxx can have nested mime entities !"); " is 132.
Long Statement,LumiSoft.Net.Mime.vCard,DeliveryAddressCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddressCollection.cs,Add,The length of the statement  "            m_pCollection.Add(new DeliveryAddress(item'type'postOfficeAddress'extendedAddress'street'locality'region'postalCode'country)); " is 126.
Long Statement,LumiSoft.Net.POP3.Server,POP3_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Server.cs,InitNewSession,The length of the statement  "                            socket.Send(System.Text.Encoding.ASCII.GetBytes("-ERR Maximum connections from your IP address is exceeded' try again later !\r\n")); " is 133.
Long Statement,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,StartSession,The length of the statement  "					    this.Socket.WriteLine("+OK " + Net_Utils.GetLocalHostName(this.BindInfo.HostName) + " POP3 Server ready " + m_MD5_prefix); " is 122.
Long Statement,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,USER,The length of the statement  "				this.Socket.BeginWriteLine("-ERR username is already specified' please specify password"'new SocketCallBack(this.EndSend)); " is 123.
Long Statement,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,STAT,The length of the statement  "			this.Socket.BeginWriteLine("+OK " + m_POP3_Messages.Count.ToString() + " " + m_POP3_Messages.GetTotalMessagesSize()'new SocketCallBack(this.EndSend));			 " is 150.
Long Statement,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,RETR,The length of the statement  "							this.Socket.BeginWritePeriodTerminated(eArgs.MessageStream'eArgs.CloseMessageStream'null'new SocketCallBack(this.EndSend)); " is 123.
Long Statement,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The length of the statement  "                msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                " is 128.
Complex Conditional,LumiSoft.Net.ABNF,ABNF_CharVal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_CharVal.cs,Parse,The conditional expression  "(reader.Peek() >= 0x20 && reader.Peek() <= 0x21) || (reader.Peek() >= 0x23 && reader.Peek() <= 0x7E)"  is complex.
Complex Conditional,LumiSoft.Net.ABNF,ABNF_CharVal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_CharVal.cs,Validate,The conditional expression  "!((c >= 0x20 && c <= 0x21) || (c >= 0x23 && c <= 0x7E))"  is complex.
Complex Conditional,LumiSoft.Net.ABNF,ABNF_ProseVal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_ProseVal.cs,Parse,The conditional expression  "(reader.Peek() >= 0x20 && reader.Peek() <= 0x3D) || (reader.Peek() >= 0x3F && reader.Peek() <= 0x7E)"  is complex.
Complex Conditional,LumiSoft.Net.ABNF,ABNF_ProseVal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_ProseVal.cs,Validate,The conditional expression  "!((c >= 0x20 && c <= 0x3D) || (c >= 0x3F && c <= 0x7E))"  is complex.
Complex Conditional,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Encode_IMAP_UTF7_String,The conditional expression  "c >= 0x20 && c <= 0x25 || c >= 0x27 && c <= 0x7E"  is complex.
Complex Conditional,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Encode_IMAP_UTF7_String,The conditional expression  "cC >= 0x20 && cC <= 0x25 || cC >= 0x27 && cC <= 0x7E"  is complex.
Complex Conditional,LumiSoft.Net,TextUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TextUtils.cs,IsToken,The conditional expression  "!((c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A) || (c >= 0x30 && c <= 0x39))"  is complex.
Complex Conditional,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The conditional expression  "(b >= 33 && b <= 60) || (b >= 62 && b <= 126)"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The conditional expression  "b > 127 || b == '=' || b == '?' || b == '_' || b == ' '"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,ToFirstChar,The conditional expression  "peekChar == ' ' || peekChar == '\t' || peekChar == '\r' || peekChar == '\n'"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAlpha,The conditional expression  "(c >= 65 && c <= 90) || (c >= 97 && c <= 122)"  is complex.
Complex Conditional,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAttributeChar,The conditional expression  "c == ' ' || c == '*' || c == '\'' || c == '%'"  is complex.
Complex Conditional,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The conditional expression  "start_length.Length == 0 || start_length.Length > 2 || !Core.IsNumber(start_length[0]) || (start_length.Length == 2 && !Core.IsNumber(start_length[1]))"  is complex.
Empty Catch Block,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,GetHostName,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net,SocketLogger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketLogger.cs,CreateEntry,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWritePeriodTerminated,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginWritePeriodTerminatedCallback,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,InternalBeginWritePeriodTerminatedCompleted,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,OnReadPeriodTerminated_ReadLine_Completed,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,OnReadHeader_ReadLine_Completed,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,OnWaveOutProc,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,OnCleanUpFirstBlock,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Dns.Client,DnsCache,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DnsCache.cs,GetFromCache,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Dns.Client,DnsCache,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DnsCache.cs,AddToCache,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,Dns_Client,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,Resolve,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_ClientException.cs,FTP_ClientException,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.RTP,RTCP_CompoundPacket,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_CompoundPacket.cs,Parse,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,RtpAsyncSocketReceiveCompleted,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,RtcpAsyncSocketReceiveCompleted,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Proxy,SIP_B2BUA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA.cs,OnRequestReceived,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Proxy,SIP_ProxyCore,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyCore.cs,OnRequestReceived,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,Start,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,CreateResponse,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransactionLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransactionLayer.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransactionLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransactionLayer.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransactionLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransactionLayer.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransactionLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransactionLayer.cs,MatchDialog,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransactionLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransactionLayer.cs,MatchDialog,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Client,SMTP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_ClientException.cs,SMTP_ClientException,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,GetDestinations,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run_CheckTimedOutSessions,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,ConnectCallback,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,StartTlsCallback,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,AuthenticateCallback,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,SmtpClient_WriteLog,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,LogText,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,LogText,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,OnError,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,OnTimeout,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,QUIT,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,OnError,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,LogAddRead,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,LogAddWrite,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,LogAddText,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,LogAddException,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Server<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Server.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Server<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Server.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Server<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Server.cs,m_pTimer_IdleTimeout_Elapsed,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_Server<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Server.cs,AsynSocketsAcceptCompleted,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_ServerSession,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_ServerSession.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.TCP,TCP_ServerSession,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_ServerSession.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,EndSession,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,OnSessionTimeout,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,ParseParams,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,OnSessionTimeout,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PASV,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,DecodeWords,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.NNTP.Client,NNTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\NNTP\Client\NNTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.NNTP.Client,NNTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\NNTP\Client\NNTP_Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,EndSession,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,OnSessionTimeout,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP.Message,SIP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_Message.cs,InternalParse,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Client\STUN_Client.cs,DoTransaction,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP,SIP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\SIP_Utils.cs,IsSipOrSipsUri,The method has an empty catch block.
Empty Catch Block,LumiSoft.Net.SIP,SIP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\SIP_Utils.cs,IsTelUri,The method has an empty catch block.
Magic Number,LumiSoft.Net.ABNF,ABNF_CharVal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_CharVal.cs,Validate,The following statement contains a magic number: if(value.Length < 2){                  return false;              }
Magic Number,LumiSoft.Net.ABNF,ABNF_ProseVal,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_ProseVal.cs,Validate,The following statement contains a magic number: if(value.Length < 2){                  return false;              }
Magic Number,LumiSoft.Net.ABNF,ABNF_Rule,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_Rule.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{'='}'2);
Magic Number,LumiSoft.Net.ABNF,ABNF_Rule,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ABNF\ABNF_Rule.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid ABNF rule '" + value + "'.");              }
Magic Number,LumiSoft.Net,HostEndPoint,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\HostEndPoint.cs,Parse,The following statement contains a magic number: try{                  IPAddress.Parse(value);                    return new HostEndPoint(value'defaultPort);              }              catch{                  // We have host name with port.                  if(value.IndexOf(':') > -1){                      string[] host_port = value.Split(new char[]{':'}'2);                        try{                          return new HostEndPoint(host_port[0]'Convert.ToInt32(host_port[1]));                      }                      catch{                          throw new ArgumentException("Argument 'value' has invalid value.");                      }                  }                  // We have host name without port.                  else{                      return new HostEndPoint(value'defaultPort);                  }                              }
Magic Number,LumiSoft.Net,Net_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Utils.cs,StreamCopy,The following statement contains a magic number: if(blockSize < 1024){                  throw new ArgumentException("Argument 'blockSize' value must be >= 1024.");              }
Magic Number,LumiSoft.Net,Net_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Utils.cs,IsMulticastAddress,The following statement contains a magic number: if(ip.IsIPv6Multicast){                  return true;              }              else if(ip.AddressFamily == AddressFamily.InterNetwork){                  byte[] bytes = ip.GetAddressBytes();                  if(bytes[0] >= 224 && bytes[0] <= 239){                      return true;                  }              }
Magic Number,LumiSoft.Net,Net_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Utils.cs,IsMulticastAddress,The following statement contains a magic number: if(ip.IsIPv6Multicast){                  return true;              }              else if(ip.AddressFamily == AddressFamily.InterNetwork){                  byte[] bytes = ip.GetAddressBytes();                  if(bytes[0] >= 224 && bytes[0] <= 239){                      return true;                  }              }
Magic Number,LumiSoft.Net,Net_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Utils.cs,IsIoCompletionPortsSupported,The following statement contains a magic number: try{                                              SocketAsyncEventArgs e = new SocketAsyncEventArgs();                  e.SetBuffer(new byte[0]'0'0);                  e.RemoteEndPoint = new IPEndPoint(IPAddress.Loopback'111);                  s.SendToAsync(e);                    return true;              }              catch(NotSupportedException nX){                  string dummy = nX.Message;                                    return false;              }              finally{                  s.Close();              }
Magic Number,LumiSoft.Net,AbsoluteUri,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\URI\AbsoluteUri.cs,Parse,The following statement contains a magic number: string[] scheme_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net,AbsoluteUri,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\URI\AbsoluteUri.cs,ParseInternal,The following statement contains a magic number: if(scheme_value.Length == 2){                  m_Value = scheme_value[1];              }
Magic Number,LumiSoft.Net,BitDebuger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Debug\BitDebuger.cs,ToBit,The following statement contains a magic number: while(offset < count){                  byte   currentByte = buffer[offset];                  char[] bits        = new char[8];                  for(int i=7;i>=0;i--){                      bits[i] = ((currentByte >> (7 - i)) & 0x1).ToString()[0];                  }                  retVal.Append(bits);                    if(bytesInCurrentLine == bytesPerLine){                      retVal.AppendLine();                      bytesInCurrentLine = 0;                  }                  else{                      retVal.Append(" ");                  }                  bytesInCurrentLine++;                  offset++;              }
Magic Number,LumiSoft.Net,BitDebuger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Debug\BitDebuger.cs,ToBit,The following statement contains a magic number: while(offset < count){                  byte   currentByte = buffer[offset];                  char[] bits        = new char[8];                  for(int i=7;i>=0;i--){                      bits[i] = ((currentByte >> (7 - i)) & 0x1).ToString()[0];                  }                  retVal.Append(bits);                    if(bytesInCurrentLine == bytesPerLine){                      retVal.AppendLine();                      bytesInCurrentLine = 0;                  }                  else{                      retVal.Append(" ");                  }                  bytesInCurrentLine++;                  offset++;              }
Magic Number,LumiSoft.Net,BitDebuger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Debug\BitDebuger.cs,ToBit,The following statement contains a magic number: while(offset < count){                  byte   currentByte = buffer[offset];                  char[] bits        = new char[8];                  for(int i=7;i>=0;i--){                      bits[i] = ((currentByte >> (7 - i)) & 0x1).ToString()[0];                  }                  retVal.Append(bits);                    if(bytesInCurrentLine == bytesPerLine){                      retVal.AppendLine();                      bytesInCurrentLine = 0;                  }                  else{                      retVal.Append(" ");                  }                  bytesInCurrentLine++;                  offset++;              }
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: if(base64Chars != null && base64Chars.Length != 64){  				throw new Exception("There must be 64 chars in base64Chars char array !");  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: byte[] base64LoockUpTable = new byte[64];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<64;i++){  				base64LoockUpTable[i] = (byte)base64Chars[i];  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: int encodedDataLength = (int)Math.Ceiling((data.Length * 8) / (double)6);
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: int encodedDataLength = (int)Math.Ceiling((data.Length * 8) / (double)6);
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: if(encodedDataLength > 76){  				numberOfLineBreaks = (int)Math.Ceiling(encodedDataLength / (double)76) - 1;  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: if(encodedDataLength > 76){  				numberOfLineBreaks = (int)Math.Ceiling(encodedDataLength / (double)76) - 1;  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: byte[] retVal = new byte[encodedDataLength + (numberOfLineBreaks * 2)];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: if(base64Chars != null && base64Chars.Length != 64){  				throw new Exception("There must be 64 chars in base64Chars char array !");  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodeTable = new byte[128];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<128;i++){  				int mappingIndex = -1;  				for(int bc=0;bc<base64Chars.Length;bc++){  					if(i == base64Chars[bc]){  						mappingIndex = bc;  						break;  					}  				}    				if(mappingIndex > -1){  					decodeTable[i] = (byte)mappingIndex;  				}  				else{  					decodeTable[i] = 0xFF;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedBlock       = new byte[3];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: byte[] base64Block        = new byte[4];
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableEncode,The following statement contains a magic number: foreach(byte b in data){  				// Suggested line length is exceeded' add soft line break  				if(lineLength > 75){  					retVal.Write(new byte[]{(byte)'=''(byte)'\r''(byte)'\n'}'0'3);  					lineLength = 0;  				}    				// We need to encode that byte  				if(b <= 33 || b >= 126 || b == 61){					  					retVal.Write(new byte[]{(byte)'='}'0'1);  					retVal.Write(Core.ToHex(b)'0'2);  					lineLength += 3;  				}  				// We don't need to encode that byte' just write it to stream  				else{  					retVal.WriteByte(b);  					lineLength++;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableEncode,The following statement contains a magic number: foreach(byte b in data){  				// Suggested line length is exceeded' add soft line break  				if(lineLength > 75){  					retVal.Write(new byte[]{(byte)'=''(byte)'\r''(byte)'\n'}'0'3);  					lineLength = 0;  				}    				// We need to encode that byte  				if(b <= 33 || b >= 126 || b == 61){					  					retVal.Write(new byte[]{(byte)'='}'0'1);  					retVal.Write(Core.ToHex(b)'0'2);  					lineLength += 3;  				}  				// We don't need to encode that byte' just write it to stream  				else{  					retVal.WriteByte(b);  					lineLength++;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableEncode,The following statement contains a magic number: foreach(byte b in data){  				// Suggested line length is exceeded' add soft line break  				if(lineLength > 75){  					retVal.Write(new byte[]{(byte)'=''(byte)'\r''(byte)'\n'}'0'3);  					lineLength = 0;  				}    				// We need to encode that byte  				if(b <= 33 || b >= 126 || b == 61){					  					retVal.Write(new byte[]{(byte)'='}'0'1);  					retVal.Write(Core.ToHex(b)'0'2);  					lineLength += 3;  				}  				// We don't need to encode that byte' just write it to stream  				else{  					retVal.WriteByte(b);  					lineLength++;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableEncode,The following statement contains a magic number: foreach(byte b in data){  				// Suggested line length is exceeded' add soft line break  				if(lineLength > 75){  					retVal.Write(new byte[]{(byte)'=''(byte)'\r''(byte)'\n'}'0'3);  					lineLength = 0;  				}    				// We need to encode that byte  				if(b <= 33 || b >= 126 || b == 61){					  					retVal.Write(new byte[]{(byte)'='}'0'1);  					retVal.Write(Core.ToHex(b)'0'2);  					lineLength += 3;  				}  				// We don't need to encode that byte' just write it to stream  				else{  					retVal.WriteByte(b);  					lineLength++;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableEncode,The following statement contains a magic number: foreach(byte b in data){  				// Suggested line length is exceeded' add soft line break  				if(lineLength > 75){  					retVal.Write(new byte[]{(byte)'=''(byte)'\r''(byte)'\n'}'0'3);  					lineLength = 0;  				}    				// We need to encode that byte  				if(b <= 33 || b >= 126 || b == 61){					  					retVal.Write(new byte[]{(byte)'='}'0'1);  					retVal.Write(Core.ToHex(b)'0'2);  					lineLength += 3;  				}  				// We don't need to encode that byte' just write it to stream  				else{  					retVal.WriteByte(b);  					lineLength++;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableEncode,The following statement contains a magic number: foreach(byte b in data){  				// Suggested line length is exceeded' add soft line break  				if(lineLength > 75){  					retVal.Write(new byte[]{(byte)'=''(byte)'\r''(byte)'\n'}'0'3);  					lineLength = 0;  				}    				// We need to encode that byte  				if(b <= 33 || b >= 126 || b == 61){					  					retVal.Write(new byte[]{(byte)'='}'0'1);  					retVal.Write(Core.ToHex(b)'0'2);  					lineLength += 3;  				}  				// We don't need to encode that byte' just write it to stream  				else{  					retVal.WriteByte(b);  					lineLength++;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableEncode,The following statement contains a magic number: foreach(byte b in data){  				// Suggested line length is exceeded' add soft line break  				if(lineLength > 75){  					retVal.Write(new byte[]{(byte)'=''(byte)'\r''(byte)'\n'}'0'3);  					lineLength = 0;  				}    				// We need to encode that byte  				if(b <= 33 || b >= 126 || b == 61){					  					retVal.Write(new byte[]{(byte)'='}'0'1);  					retVal.Write(Core.ToHex(b)'0'2);  					lineLength += 3;  				}  				// We don't need to encode that byte' just write it to stream  				else{  					retVal.WriteByte(b);  					lineLength++;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,CanonicalDecode,The following statement contains a magic number: while(offset < text.Length){  				// Search start and end of canonical entry  				int iStart = text.IndexOf("=?"'offset);  				int iEnd = -1;  				if(iStart > -1){  					// End index must be over start index position  					iEnd = text.IndexOf("?="'iStart + 2);  				}  				  				if(iStart > -1 && iEnd > -1){  					// Add left side non encoded text of encoded text' if there is any  					if((iStart - offset) > 0){  						retVal.Append(text.Substring(offset'iStart - offset));  					}    					while(true){  						// Check if it is encoded entry  						string[] charset_type_text = text.Substring(iStart + 2'iEnd - iStart - 2).Split('?');  						if(charset_type_text.Length == 3){  							// Try to parse encoded text  							try{  								Encoding enc = Encoding.GetEncoding(charset_type_text[0]);  								// QEncoded text  								if(charset_type_text[1].ToLower() == "q"){  									retVal.Append(Core.QDecode(enc'charset_type_text[2]));  								}  								// Base64 encoded text  								else{                                      retVal.Append(enc.GetString(Core.Base64Decode(Encoding.Default.GetBytes(charset_type_text[2]))));  								}  							}  							catch{  								// Parsing failed' just leave text as is.  								retVal.Append(text.Substring(iStart'iEnd - iStart + 2));  							}    							// Move current offset in string  							offset = iEnd + 2;  							break;  						}  						// This isn't right end tag' try next  						else if(charset_type_text.Length < 3){  							// Try next end tag  							iEnd = text.IndexOf("?="'iEnd + 2);  						  							// No suitable end tag for active start tag' move offset over start tag.  							if(iEnd == -1){								  								retVal.Append("=?");  								offset = iStart + 2;  								break;  							}  						}  						// Illegal start tag or start tag is just in side some text' move offset over start tag.  						else{						  							retVal.Append("=?");  							offset = iStart + 2;  							break;  						}  					}  				}  				// There are no more entries  				else{  					// Add remaining non encoded text' if there is any.  					if(text.Length > offset){  						retVal.Append(text.Substring(offset));  						offset = text.Length;  					}  				}				  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Encode_IMAP_UTF7_String,The following statement contains a magic number: for(int i=0;i<text.Length;i++){  				char c = text[i];    				// The character "&" (0x26) is represented by the two-octet sequence "&-".  				if(c == '&'){  					retVal.Write(new byte[]{(byte)'&''(byte)'-'}'0'2);  				}  				// It is allowed char' don't need to encode  				else if(c >= 0x20 && c <= 0x25 || c >= 0x27 && c <= 0x7E){  					retVal.WriteByte((byte)c);  				}  				// Not allowed char' encode it  				else{  					// Superfluous shifts are not allowed.   					// For example: φφ may not encoded as &APY-&APY-' but must be &APYA9g-.    					// Get all continuous chars that need encoding and encode them as one block  					MemoryStream encodeBlock = new MemoryStream();  					for(int ic=i;ic<text.Length;ic++){  						char cC = text[ic];    						// Allowed char  						if(cC >= 0x20 && cC <= 0x25 || cC >= 0x27 && cC <= 0x7E){  							break;  						}  						else{  							encodeBlock.WriteByte((byte)((cC & 0xFF00) >> 8));  							encodeBlock.WriteByte((byte)(cC & 0xFF));  							i = ic;  						}  					}    					// Ecode block  					byte[] encodedData = Core.Base64EncodeEx(encodeBlock.ToArray()'base64Chars'false);  					retVal.WriteByte((byte)'&');  					retVal.Write(encodedData'0'encodedData.Length);  					retVal.WriteByte((byte)'-');  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Encode_IMAP_UTF7_String,The following statement contains a magic number: for(int i=0;i<text.Length;i++){  				char c = text[i];    				// The character "&" (0x26) is represented by the two-octet sequence "&-".  				if(c == '&'){  					retVal.Write(new byte[]{(byte)'&''(byte)'-'}'0'2);  				}  				// It is allowed char' don't need to encode  				else if(c >= 0x20 && c <= 0x25 || c >= 0x27 && c <= 0x7E){  					retVal.WriteByte((byte)c);  				}  				// Not allowed char' encode it  				else{  					// Superfluous shifts are not allowed.   					// For example: φφ may not encoded as &APY-&APY-' but must be &APYA9g-.    					// Get all continuous chars that need encoding and encode them as one block  					MemoryStream encodeBlock = new MemoryStream();  					for(int ic=i;ic<text.Length;ic++){  						char cC = text[ic];    						// Allowed char  						if(cC >= 0x20 && cC <= 0x25 || cC >= 0x27 && cC <= 0x7E){  							break;  						}  						else{  							encodeBlock.WriteByte((byte)((cC & 0xFF00) >> 8));  							encodeBlock.WriteByte((byte)(cC & 0xFF));  							i = ic;  						}  					}    					// Ecode block  					byte[] encodedData = Core.Base64EncodeEx(encodeBlock.ToArray()'base64Chars'false);  					retVal.WriteByte((byte)'&');  					retVal.Write(encodedData'0'encodedData.Length);  					retVal.WriteByte((byte)'-');  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Decode_IMAP_UTF7_String,The following statement contains a magic number: for(int i=0;i<text.Length;i++){  				char c = text[i];    				// Encoded block or escaped &  				if(c == '&'){  					int endingPos = -1;  					// Read encoded block  					for(int b=i+1;b<text.Length;b++){  						// - marks block end  						if(text[b] == '-'){  							endingPos = b;  							break;  						}  						// Invalid & sequence' just treat it as '&' char and not like shift.  						// &....&' but must be &....-  						else if(text[b] == '&'){							  							break;  						}  					}  			  					// If no ending -' invalid encoded block. Treat it like it is  					if(endingPos == -1){  						// Just let main for to handle other chars after &  						retVal.Append(c);  					}  					// If empty block' then escaped &  					else if(endingPos - i == 1){  						retVal.Append(c);  						// Move i over '-'  						i++;  					}  					// Decode block  					else{  						// Get encoded block  						byte[] encodedBlock = System.Text.Encoding.Default.GetBytes(text.Substring(i + 1'endingPos - i - 1));  		  						// Convert to UTF-16 char						  						byte[] decodedData = Core.Base64DecodeEx(encodedBlock'base64Chars);  						char[] decodedChars = new char[decodedData.Length / 2];                          						for(int iC=0;iC<decodedChars.Length;iC++){  							decodedChars[iC] = (char)(decodedData[iC * 2] << 8 | decodedData[(iC * 2) + 1]);  						}                            						// Decode data  						retVal.Append(decodedChars);    						// Move i over '-'  						i += encodedBlock.Length + 1;  					}  				}  				// Normal byte  				else{  					retVal.Append(c);  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Decode_IMAP_UTF7_String,The following statement contains a magic number: for(int i=0;i<text.Length;i++){  				char c = text[i];    				// Encoded block or escaped &  				if(c == '&'){  					int endingPos = -1;  					// Read encoded block  					for(int b=i+1;b<text.Length;b++){  						// - marks block end  						if(text[b] == '-'){  							endingPos = b;  							break;  						}  						// Invalid & sequence' just treat it as '&' char and not like shift.  						// &....&' but must be &....-  						else if(text[b] == '&'){							  							break;  						}  					}  			  					// If no ending -' invalid encoded block. Treat it like it is  					if(endingPos == -1){  						// Just let main for to handle other chars after &  						retVal.Append(c);  					}  					// If empty block' then escaped &  					else if(endingPos - i == 1){  						retVal.Append(c);  						// Move i over '-'  						i++;  					}  					// Decode block  					else{  						// Get encoded block  						byte[] encodedBlock = System.Text.Encoding.Default.GetBytes(text.Substring(i + 1'endingPos - i - 1));  		  						// Convert to UTF-16 char						  						byte[] decodedData = Core.Base64DecodeEx(encodedBlock'base64Chars);  						char[] decodedChars = new char[decodedData.Length / 2];                          						for(int iC=0;iC<decodedChars.Length;iC++){  							decodedChars[iC] = (char)(decodedData[iC * 2] << 8 | decodedData[(iC * 2) + 1]);  						}                            						// Decode data  						retVal.Append(decodedChars);    						// Move i over '-'  						i += encodedBlock.Length + 1;  					}  				}  				// Normal byte  				else{  					retVal.Append(c);  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Decode_IMAP_UTF7_String,The following statement contains a magic number: for(int i=0;i<text.Length;i++){  				char c = text[i];    				// Encoded block or escaped &  				if(c == '&'){  					int endingPos = -1;  					// Read encoded block  					for(int b=i+1;b<text.Length;b++){  						// - marks block end  						if(text[b] == '-'){  							endingPos = b;  							break;  						}  						// Invalid & sequence' just treat it as '&' char and not like shift.  						// &....&' but must be &....-  						else if(text[b] == '&'){							  							break;  						}  					}  			  					// If no ending -' invalid encoded block. Treat it like it is  					if(endingPos == -1){  						// Just let main for to handle other chars after &  						retVal.Append(c);  					}  					// If empty block' then escaped &  					else if(endingPos - i == 1){  						retVal.Append(c);  						// Move i over '-'  						i++;  					}  					// Decode block  					else{  						// Get encoded block  						byte[] encodedBlock = System.Text.Encoding.Default.GetBytes(text.Substring(i + 1'endingPos - i - 1));  		  						// Convert to UTF-16 char						  						byte[] decodedData = Core.Base64DecodeEx(encodedBlock'base64Chars);  						char[] decodedChars = new char[decodedData.Length / 2];                          						for(int iC=0;iC<decodedChars.Length;iC++){  							decodedChars[iC] = (char)(decodedData[iC * 2] << 8 | decodedData[(iC * 2) + 1]);  						}                            						// Decode data  						retVal.Append(decodedChars);    						// Move i over '-'  						i += encodedBlock.Length + 1;  					}  				}  				// Normal byte  				else{  					retVal.Append(c);  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,Decode_IMAP_UTF7_String,The following statement contains a magic number: for(int i=0;i<text.Length;i++){  				char c = text[i];    				// Encoded block or escaped &  				if(c == '&'){  					int endingPos = -1;  					// Read encoded block  					for(int b=i+1;b<text.Length;b++){  						// - marks block end  						if(text[b] == '-'){  							endingPos = b;  							break;  						}  						// Invalid & sequence' just treat it as '&' char and not like shift.  						// &....&' but must be &....-  						else if(text[b] == '&'){							  							break;  						}  					}  			  					// If no ending -' invalid encoded block. Treat it like it is  					if(endingPos == -1){  						// Just let main for to handle other chars after &  						retVal.Append(c);  					}  					// If empty block' then escaped &  					else if(endingPos - i == 1){  						retVal.Append(c);  						// Move i over '-'  						i++;  					}  					// Decode block  					else{  						// Get encoded block  						byte[] encodedBlock = System.Text.Encoding.Default.GetBytes(text.Substring(i + 1'endingPos - i - 1));  		  						// Convert to UTF-16 char						  						byte[] decodedData = Core.Base64DecodeEx(encodedBlock'base64Chars);  						char[] decodedChars = new char[decodedData.Length / 2];                          						for(int iC=0;iC<decodedChars.Length;iC++){  							decodedChars[iC] = (char)(decodedData[iC * 2] << 8 | decodedData[(iC * 2) + 1]);  						}                            						// Decode data  						retVal.Append(decodedChars);    						// Move i over '-'  						i += encodedBlock.Length + 1;  					}  				}  				// Normal byte  				else{  					retVal.Append(c);  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsAscii,The following statement contains a magic number: foreach(char c in data){  				if((int)c > 127){   					return false;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,ToHex,The following statement contains a magic number: MemoryStream retVal = new MemoryStream(data.Length * 2);
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,ToHex,The following statement contains a magic number: foreach(byte b in data){  				byte[] hexByte = new byte[2];                    				// left 4 bit of byte  				hexByte[0] = (byte)hexChars[(b & 0xF0) >> 4];    				// right 4 bit of byte  				hexByte[1] = (byte)hexChars[b & 0x0F];    				retVal.Write(hexByte'0'2);  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,ToHex,The following statement contains a magic number: foreach(byte b in data){  				byte[] hexByte = new byte[2];                    				// left 4 bit of byte  				hexByte[0] = (byte)hexChars[(b & 0xF0) >> 4];    				// right 4 bit of byte  				hexByte[1] = (byte)hexChars[b & 0x0F];    				retVal.Write(hexByte'0'2);  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,ToHex,The following statement contains a magic number: foreach(byte b in data){  				byte[] hexByte = new byte[2];                    				// left 4 bit of byte  				hexByte[0] = (byte)hexChars[(b & 0xF0) >> 4];    				// right 4 bit of byte  				hexByte[1] = (byte)hexChars[b & 0x0F];    				retVal.Write(hexByte'0'2);  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: if(hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))){  				throw new Exception("Illegal hex data' hex data must be in two bytes pairs' for example: 0F'FF'A3'... .");  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: if(hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))){  				throw new Exception("Illegal hex data' hex data must be in two bytes pairs' for example: 0F'FF'A3'... .");  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: if(hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))){  				throw new Exception("Illegal hex data' hex data must be in two bytes pairs' for example: 0F'FF'A3'... .");  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: MemoryStream retVal = new MemoryStream(hexData.Length / 2);
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,Core,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Net_Core.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,LumiSoft.Net,SocketLogger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketLogger.cs,CreateEntry,The following statement contains a magic number: if(text.EndsWith("\r\n")){  				text = text.Substring(0'text.Length - 2);  			}
Magic Number,LumiSoft.Net,SocketLogger,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketLogger.cs,OnEntryAdded,The following statement contains a magic number: if(m_pEntries.Count > 100){  				if(m_pLogHandler != null){  					m_pLogHandler(this'new Log_EventArgs(this'm_FirstLogPart'false));	  				}  				  				m_pEntries.Clear();                  m_FirstLogPart = false;  			}
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,SocketServer,The following statement contains a magic number: m_pTimer             = new System.Timers.Timer(15000);
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,SocketServer,The following statement contains a magic number: m_pBindInfo          = new IPBindInfo[]{new IPBindInfo(System.Net.Dns.GetHostName()'IPAddress.Any'10000'SslMode.None'null)};
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,StopServer,The following statement contains a magic number: if(m_Running){                  m_Running = false;                    // Stop accepting new connections                  foreach(IPBindInfo bindInfo in m_pBindInfo){                      if(bindInfo.Tag != null){                          ((Socket)bindInfo.Tag).Close();                          bindInfo.Tag = null;                      }                  }                    // Wait method StartProcCons to exit                  Thread.Sleep(100);  			}
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,StartProcCons,The following statement contains a magic number: try{                  CircleCollection<IPBindInfo> binds = new CircleCollection<IPBindInfo>();                  foreach(IPBindInfo bindInfo in m_pBindInfo){                      Socket s = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);  				    s.Bind(new IPEndPoint(bindInfo.IP'bindInfo.Port));  				    s.Listen(500);                                        bindInfo.Tag = s;                      binds.Add(bindInfo);                  }                    // Accept connections and queue them			  				while(m_Running){  					// We have reached maximum connection limit  					if(m_pSessions.Count > m_MaxConnections){  						// Wait while some active connectins are closed  						while(m_pSessions.Count > m_MaxConnections){  							Thread.Sleep(100);  						}  					}                        // Get incomong connection                      IPBindInfo bindInfo = binds.Next();                        // There is waiting connection                      if(m_Running && ((Socket)bindInfo.Tag).Poll(0'SelectMode.SelectRead)){                          // Accept incoming connection  					    Socket s = ((Socket)bindInfo.Tag).Accept();                                                            				// Add session to queue  		        		lock(m_pQueuedConnections){  				        	m_pQueuedConnections.Enqueue(new QueuedConnection(s'bindInfo));  					    }                      }  					                      Thread.Sleep(2);  				}  			}  			catch(SocketException x){  				// Socket listening stopped' happens when StopServer is called.  				// We need just skip this error.  				if(x.ErrorCode == 10004){			  				}  				else{  					OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  				}  			}  			catch(Exception x){  				OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  			}
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,StartProcCons,The following statement contains a magic number: try{                  CircleCollection<IPBindInfo> binds = new CircleCollection<IPBindInfo>();                  foreach(IPBindInfo bindInfo in m_pBindInfo){                      Socket s = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);  				    s.Bind(new IPEndPoint(bindInfo.IP'bindInfo.Port));  				    s.Listen(500);                                        bindInfo.Tag = s;                      binds.Add(bindInfo);                  }                    // Accept connections and queue them			  				while(m_Running){  					// We have reached maximum connection limit  					if(m_pSessions.Count > m_MaxConnections){  						// Wait while some active connectins are closed  						while(m_pSessions.Count > m_MaxConnections){  							Thread.Sleep(100);  						}  					}                        // Get incomong connection                      IPBindInfo bindInfo = binds.Next();                        // There is waiting connection                      if(m_Running && ((Socket)bindInfo.Tag).Poll(0'SelectMode.SelectRead)){                          // Accept incoming connection  					    Socket s = ((Socket)bindInfo.Tag).Accept();                                                            				// Add session to queue  		        		lock(m_pQueuedConnections){  				        	m_pQueuedConnections.Enqueue(new QueuedConnection(s'bindInfo));  					    }                      }  					                      Thread.Sleep(2);  				}  			}  			catch(SocketException x){  				// Socket listening stopped' happens when StopServer is called.  				// We need just skip this error.  				if(x.ErrorCode == 10004){			  				}  				else{  					OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  				}  			}  			catch(Exception x){  				OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  			}
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,StartProcCons,The following statement contains a magic number: try{                  CircleCollection<IPBindInfo> binds = new CircleCollection<IPBindInfo>();                  foreach(IPBindInfo bindInfo in m_pBindInfo){                      Socket s = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);  				    s.Bind(new IPEndPoint(bindInfo.IP'bindInfo.Port));  				    s.Listen(500);                                        bindInfo.Tag = s;                      binds.Add(bindInfo);                  }                    // Accept connections and queue them			  				while(m_Running){  					// We have reached maximum connection limit  					if(m_pSessions.Count > m_MaxConnections){  						// Wait while some active connectins are closed  						while(m_pSessions.Count > m_MaxConnections){  							Thread.Sleep(100);  						}  					}                        // Get incomong connection                      IPBindInfo bindInfo = binds.Next();                        // There is waiting connection                      if(m_Running && ((Socket)bindInfo.Tag).Poll(0'SelectMode.SelectRead)){                          // Accept incoming connection  					    Socket s = ((Socket)bindInfo.Tag).Accept();                                                            				// Add session to queue  		        		lock(m_pQueuedConnections){  				        	m_pQueuedConnections.Enqueue(new QueuedConnection(s'bindInfo));  					    }                      }  					                      Thread.Sleep(2);  				}  			}  			catch(SocketException x){  				// Socket listening stopped' happens when StopServer is called.  				// We need just skip this error.  				if(x.ErrorCode == 10004){			  				}  				else{  					OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  				}  			}  			catch(Exception x){  				OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  			}
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,StartProcCons,The following statement contains a magic number: try{                  CircleCollection<IPBindInfo> binds = new CircleCollection<IPBindInfo>();                  foreach(IPBindInfo bindInfo in m_pBindInfo){                      Socket s = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);  				    s.Bind(new IPEndPoint(bindInfo.IP'bindInfo.Port));  				    s.Listen(500);                                        bindInfo.Tag = s;                      binds.Add(bindInfo);                  }                    // Accept connections and queue them			  				while(m_Running){  					// We have reached maximum connection limit  					if(m_pSessions.Count > m_MaxConnections){  						// Wait while some active connectins are closed  						while(m_pSessions.Count > m_MaxConnections){  							Thread.Sleep(100);  						}  					}                        // Get incomong connection                      IPBindInfo bindInfo = binds.Next();                        // There is waiting connection                      if(m_Running && ((Socket)bindInfo.Tag).Poll(0'SelectMode.SelectRead)){                          // Accept incoming connection  					    Socket s = ((Socket)bindInfo.Tag).Accept();                                                            				// Add session to queue  		        		lock(m_pQueuedConnections){  				        	m_pQueuedConnections.Enqueue(new QueuedConnection(s'bindInfo));  					    }                      }  					                      Thread.Sleep(2);  				}  			}  			catch(SocketException x){  				// Socket listening stopped' happens when StopServer is called.  				// We need just skip this error.  				if(x.ErrorCode == 10004){			  				}  				else{  					OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  				}  			}  			catch(Exception x){  				OnSysError("WE MUST NEVER REACH HERE !!! StartProcCons:"'x);  			}
Magic Number,LumiSoft.Net,SocketServer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketServer.cs,StartProcQueuedCons,The following statement contains a magic number: try{  				while(m_Running){                      // There are queued connections' start sessions.                      if(m_pQueuedConnections.Count > 0){                          QueuedConnection connection;                          lock(m_pQueuedConnections){                              connection = m_pQueuedConnections.Dequeue();                          }                            try{                              InitNewSession(connection.Socket'connection.BindInfo);                          }  				        catch(Exception x){  					        OnSysError("StartProcQueuedCons InitNewSession():"'x);  					    }                      }  					// There are no connections to proccess' delay proccessing. We need to it   					// because if there are no connections to proccess' while loop takes too much CPU.  					else{  						Thread.Sleep(10);  					}  				}  			}  			catch(Exception x){  				OnSysError("WE MUST NEVER REACH HERE !!! StartProcQueuedCons:"'x);  			}
Magic Number,LumiSoft.Net,SIP_Uri,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\URI\SIP_Uri.cs,ParseInternal,The following statement contains a magic number: if(host_port.Length == 2){                  this.Port = Convert.ToInt32(host_port[1]);              }
Magic Number,LumiSoft.Net,SIP_Uri,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\URI\SIP_Uri.cs,ParseInternal,The following statement contains a magic number: if(r.Available > 0){                  // Get parameters                  string[] parameters = TextUtils.SplitQuotedString(r.QuotedReadToDelimiter('?')'';');                  foreach(string parameter in parameters){                      if(parameter.Trim() != ""){                          string[] name_value = parameter.Trim().Split(new char[]{'='}'2);                          if(name_value.Length == 2){                              this.Parameters.Add(name_value[0]'TextUtils.UnQuoteString(name_value[1]));                          }                          else{                              this.Parameters.Add(name_value[0]'null);                          }                      }                  }                    // We have header                  if(r.Available > 0){                      this.m_Header = r.ReadToEnd();                  }              }
Magic Number,LumiSoft.Net,SIP_Uri,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\URI\SIP_Uri.cs,ParseInternal,The following statement contains a magic number: if(r.Available > 0){                  // Get parameters                  string[] parameters = TextUtils.SplitQuotedString(r.QuotedReadToDelimiter('?')'';');                  foreach(string parameter in parameters){                      if(parameter.Trim() != ""){                          string[] name_value = parameter.Trim().Split(new char[]{'='}'2);                          if(name_value.Length == 2){                              this.Parameters.Add(name_value[0]'TextUtils.UnQuoteString(name_value[1]));                          }                          else{                              this.Parameters.Add(name_value[0]'null);                          }                      }                  }                    // We have header                  if(r.Available > 0){                      this.m_Header = r.ReadToEnd();                  }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,SocketEx,The following statement contains a magic number: m_Buffer = new byte[8000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,SocketEx,The following statement contains a magic number: m_pSocket.ReceiveTimeout = 60000;
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,SocketEx,The following statement contains a magic number: m_pSocket.SendTimeout = 60000;
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,SocketEx,The following statement contains a magic number: m_Buffer = new byte[8000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,SocketEx,The following statement contains a magic number: m_pSocket.ReceiveTimeout = 60000;
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,SocketEx,The following statement contains a magic number: m_pSocket.SendTimeout = 60000;
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadLine,The following statement contains a magic number: return ReadLine(4000);
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadLine,The following statement contains a magic number: int readedCount = 2;
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadLine,The following statement contains a magic number: while(currentByte > -1){                  // We got line                  if(lastByte == (byte)'\r' && currentByte == (byte)'\n'){                      // Logging stuff  				    if(m_pLogger != null){  					    if(stream.CanSeek && stream.Length < 200){                              byte[] readedData = new byte[stream.Length];                              stream.Position = 0;                              stream.Read(readedData'0'readedData.Length);  						    m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'readedCount);  					    }  					    else{  						    m_pLogger.AddReadEntry("Big binary line' readed " + readedCount.ToString() + " bytes."'readedCount);  					    }                      }                        stream.Flush();                        // Maximum allowed length exceeded                      if(readedCount > maxLineLength){                                          throw new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed line length exceeded !");                      }                        return;                  }                  else{                      // Maximum allowed length exceeded' just don't store data.                      if(readedCount < maxLineLength){                          stream.WriteByte((byte)lastByte);                      }                      lastByte = currentByte;                  }                    // Read next byte                  currentByte = ReadByte();                  readedCount++;              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadSpecifiedLength,The following statement contains a magic number: while(lengthToRead > 0){                  BufferDataBlock();                  // Socket is shutdown                  if(m_AvailableInBuffer == 0){                      m_OffsetInBuffer = 0;                      m_AvailableInBuffer = 0;                      // Logging stuff                      if(m_pLogger != null){                          m_pLogger.AddTextEntry("Remote host closed socket' all data wans't readed !");                      }                      throw new Exception("Remote host closed socket' all data wans't readed !");                  }                    // We have all data in buffer what we need.                  if(m_AvailableInBuffer >= lengthToRead){                      storeStream.Write(m_Buffer'm_OffsetInBuffer'lengthToRead);                      storeStream.Flush();                                                                m_OffsetInBuffer += lengthToRead;                      m_AvailableInBuffer -= lengthToRead;                      lengthToRead = 0;                        // Logging stuff  				    if(m_pLogger != null){  					    if(storeStream.CanSeek && storeStream.Length < 200){                              byte[] readedData = new byte[storeStream.Length];                              storeStream.Position = 0;                              storeStream.Read(readedData'0'readedData.Length);  						    m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'lengthToRead);  					    }  					    else{  						    m_pLogger.AddReadEntry("Big binary data' readed " + lengthToRead.ToString() + " bytes."'lengthToRead);  					    }                      }                                      }                  // We need more data than buffer has'read all buffer data.                  else{                      storeStream.Write(m_Buffer'm_OffsetInBuffer'm_AvailableInBuffer);                      storeStream.Flush();                        lengthToRead -= m_AvailableInBuffer;                      m_OffsetInBuffer = 0;                      m_AvailableInBuffer = 0;                  }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadPeriodTerminated,The following statement contains a magic number: byte[] buffer           = new byte[8000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadPeriodTerminated,The following statement contains a magic number: int readedCount = 2;
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadPeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                                                  // We got <CRLF> + 1 char' we must skip that char if it is '.'.                  if(lineBreak){                      lineBreak = false;                        // We must skip that char if it is '.'                      if(currentByte == '.'){                          expectCRLF = true;                            currentByte = ReadByte();                      }                                      }                  // We got <CRLF>                  else if(lastByte == (byte)'\r' && currentByte == (byte)'\n'){                      lineBreak = true;                        // We have <CRLF>.<CRLF>' skip last <CRLF>.                      if(expectCRLF){                          // There is data in buffer' flush it                          if(positionInBuffer > 0){                              stream.Write(buffer'0'positionInBuffer);                              positionInBuffer = 0;                          }                            // Logging stuff  				        if(m_pLogger != null){  					        if(stream.CanSeek && stream.Length < 200){                                  byte[] readedData = new byte[stream.Length];                                  stream.Position = 0;                                  stream.Read(readedData'0'readedData.Length);  						        m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'readedCount);  					        }  					        else{  						        m_pLogger.AddReadEntry("Big binary data' readed " + readedCount.ToString() + " bytes."'readedCount);  					        }                          }                            // Maximum allowed length exceeded                          if(readedCount > maxLength){                                              throw new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed line length exceeded !");                          }                            return;                      }                  }                    // current char isn't CRLF part' so it isn't <CRLF>.<CRLF> terminator.                  if(expectCRLF && !(currentByte == (byte)'\r' || currentByte == (byte)'\n')){                      expectCRLF = false;                  }                    // Maximum allowed length exceeded' just don't store data.                  if(readedCount < maxLength){                      // Buffer is filled up' write buffer to stream                      if(positionInBuffer > (buffer.Length - 2)){                          stream.Write(buffer'0'positionInBuffer);                          positionInBuffer = 0;                      }                        buffer[positionInBuffer] = (byte)lastByte;                      positionInBuffer++;                  }                                                    // Read next byte                  lastByte = currentByte;                  currentByte = ReadByte();                  readedCount++;              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,ReadPeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                                                  // We got <CRLF> + 1 char' we must skip that char if it is '.'.                  if(lineBreak){                      lineBreak = false;                        // We must skip that char if it is '.'                      if(currentByte == '.'){                          expectCRLF = true;                            currentByte = ReadByte();                      }                                      }                  // We got <CRLF>                  else if(lastByte == (byte)'\r' && currentByte == (byte)'\n'){                      lineBreak = true;                        // We have <CRLF>.<CRLF>' skip last <CRLF>.                      if(expectCRLF){                          // There is data in buffer' flush it                          if(positionInBuffer > 0){                              stream.Write(buffer'0'positionInBuffer);                              positionInBuffer = 0;                          }                            // Logging stuff  				        if(m_pLogger != null){  					        if(stream.CanSeek && stream.Length < 200){                                  byte[] readedData = new byte[stream.Length];                                  stream.Position = 0;                                  stream.Read(readedData'0'readedData.Length);  						        m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'readedCount);  					        }  					        else{  						        m_pLogger.AddReadEntry("Big binary data' readed " + readedCount.ToString() + " bytes."'readedCount);  					        }                          }                            // Maximum allowed length exceeded                          if(readedCount > maxLength){                                              throw new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed line length exceeded !");                          }                            return;                      }                  }                    // current char isn't CRLF part' so it isn't <CRLF>.<CRLF> terminator.                  if(expectCRLF && !(currentByte == (byte)'\r' || currentByte == (byte)'\n')){                      expectCRLF = false;                  }                    // Maximum allowed length exceeded' just don't store data.                  if(readedCount < maxLength){                      // Buffer is filled up' write buffer to stream                      if(positionInBuffer > (buffer.Length - 2)){                          stream.Write(buffer'0'positionInBuffer);                          positionInBuffer = 0;                      }                        buffer[positionInBuffer] = (byte)lastByte;                      positionInBuffer++;                  }                                                    // Read next byte                  lastByte = currentByte;                  currentByte = ReadByte();                  readedCount++;              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,Write,The following statement contains a magic number: byte[] buffer = new byte[4000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,Write,The following statement contains a magic number: if(m_pLogger != null){  			    if(sentCount < 200){  					m_pLogger.AddSendEntry(m_pEncoding.GetString(buffer'0'sentCount)'sentCount);  		        }  			    else{  			        m_pLogger.AddSendEntry("Big binary data' sent " + sentCount.ToString() + " bytes."'sentCount);  		        }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,Write,The following statement contains a magic number: byte[] buffer = new byte[4000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,Write,The following statement contains a magic number: if(m_pLogger != null){  			    if(sentCount < 200){  					m_pLogger.AddSendEntry(m_pEncoding.GetString(buffer'0'sentCount)'sentCount);  		        }  			    else{  			        m_pLogger.AddSendEntry("Big binary data' sent " + sentCount.ToString() + " bytes."'sentCount);  		        }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WriteLine,The following statement contains a magic number: if(line.Length < 2 || (line[line.Length - 2] != (byte)'\r' && line[line.Length - 1] != (byte)'\n')){                  byte[] newLine = new byte[line.Length + 2];                  Array.Copy(line'newLine'line.Length);                  newLine[newLine.Length - 2] = (byte)'\r';                  newLine[newLine.Length - 1] = (byte)'\n';                    line = newLine;              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WriteLine,The following statement contains a magic number: if(line.Length < 2 || (line[line.Length - 2] != (byte)'\r' && line[line.Length - 1] != (byte)'\n')){                  byte[] newLine = new byte[line.Length + 2];                  Array.Copy(line'newLine'line.Length);                  newLine[newLine.Length - 2] = (byte)'\r';                  newLine[newLine.Length - 1] = (byte)'\n';                    line = newLine;              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WriteLine,The following statement contains a magic number: if(line.Length < 2 || (line[line.Length - 2] != (byte)'\r' && line[line.Length - 1] != (byte)'\n')){                  byte[] newLine = new byte[line.Length + 2];                  Array.Copy(line'newLine'line.Length);                  newLine[newLine.Length - 2] = (byte)'\r';                  newLine[newLine.Length - 1] = (byte)'\n';                    line = newLine;              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WriteLine,The following statement contains a magic number: if(line.Length < 2 || (line[line.Length - 2] != (byte)'\r' && line[line.Length - 1] != (byte)'\n')){                  byte[] newLine = new byte[line.Length + 2];                  Array.Copy(line'newLine'line.Length);                  newLine[newLine.Length - 2] = (byte)'\r';                  newLine[newLine.Length - 1] = (byte)'\n';                    line = newLine;              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WriteLine,The following statement contains a magic number: if(m_pLogger != null){  			    if(line.Length < 200){  					m_pLogger.AddSendEntry(m_pEncoding.GetString(line)'line.Length);  		        }  			    else{  			        m_pLogger.AddSendEntry("Big binary line' sent " + line.Length.ToString() + " bytes."'line.Length);  		        }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WritePeriodTerminated,The following statement contains a magic number: byte[] buffer           = new byte[4000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WritePeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                  // We have CRLF' mark it up                  if(lastByte == '\r' && currentByte == '\n'){                      CRLF = true;                  }                  // There is CRLF + current byte                  else if(CRLF){                      // If it is a period' one additional period is inserted at the beginning of the line.                      if(currentByte == '.'){                          buffer[positionInBuffer] = (byte)'.';                          positionInBuffer++;                      }                        // CRLF handled' reset it                      CRLF = false;                                     }                    buffer[positionInBuffer] = (byte)currentByte;                  positionInBuffer++;                                                           lastByte = currentByte;                                    // Buffer is filled up' write buffer to socket.                  if(positionInBuffer > (4000 - 10)){                      if(m_SSL){                          m_pSslStream.Write(buffer'0'positionInBuffer);                      }                      else{                          m_pSocketStream.Write(buffer'0'positionInBuffer);                      }                                          countSent += positionInBuffer;                      m_WrittenCount += positionInBuffer;                      m_LastActivityDate = DateTime.Now;                      positionInBuffer = 0;                                      }                    currentByte = stream.ReadByte();              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WritePeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                  // We have CRLF' mark it up                  if(lastByte == '\r' && currentByte == '\n'){                      CRLF = true;                  }                  // There is CRLF + current byte                  else if(CRLF){                      // If it is a period' one additional period is inserted at the beginning of the line.                      if(currentByte == '.'){                          buffer[positionInBuffer] = (byte)'.';                          positionInBuffer++;                      }                        // CRLF handled' reset it                      CRLF = false;                                     }                    buffer[positionInBuffer] = (byte)currentByte;                  positionInBuffer++;                                                           lastByte = currentByte;                                    // Buffer is filled up' write buffer to socket.                  if(positionInBuffer > (4000 - 10)){                      if(m_SSL){                          m_pSslStream.Write(buffer'0'positionInBuffer);                      }                      else{                          m_pSocketStream.Write(buffer'0'positionInBuffer);                      }                                          countSent += positionInBuffer;                      m_WrittenCount += positionInBuffer;                      m_LastActivityDate = DateTime.Now;                      positionInBuffer = 0;                                      }                    currentByte = stream.ReadByte();              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,WritePeriodTerminated,The following statement contains a magic number: if(m_pLogger != null){  			    if(countSent < 200){  					m_pLogger.AddSendEntry(m_pEncoding.GetString(buffer)'buffer.Length);  		        }  			    else{  			        m_pLogger.AddSendEntry("Binary data' sent " + countSent.ToString() + " bytes."'countSent);  		        }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadLine,The following statement contains a magic number: while(currentByte > -1){                  // We got line                  if(lastByte == (byte)'\r' && currentByte == (byte)'\n'){                      // Logging stuff  				    if(m_pLogger != null){  					    if(stream.CanSeek && stream.Length < 200){                              byte[] readedData = new byte[stream.Length];                              stream.Position = 0;                              stream.Read(readedData'0'readedData.Length);  						    m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'readedCount);  					    }  					    else{  						    m_pLogger.AddReadEntry("Big binary line' readed " + readedCount.ToString() + " bytes."'readedCount);  					    }                      }                        // Maximum allowed length exceeded                      if(readedCount > maxLineLength){                           if(callback != null){                              callback(SocketCallBackResult.LengthExceeded'0'new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed data length exceeded !")'tag);                          }                      }                        // Line readed ok' call callback.                      if(callback != null){                          callback(SocketCallBackResult.Ok'readedCount'null'tag);                      }                        return;                  }                  else{                      // Maximum allowed length exceeded' just don't store data.                      if(readedCount < maxLineLength){                          stream.WriteByte((byte)lastByte);                      }                                      }                    // Read next byte                  lastByte = currentByte;                  if(m_AvailableInBuffer > 0){                      currentByte = ReadByte();                      readedCount++;                  }                  // We have use all data in the buffer' buffer next block asynchronously.                  else{                      BeginBufferDataBlock(this.OnBeginReadLineBufferingCompleted'new object[]{callback'tag'stream'maxLineLength'lastByte'readedCount});                      return;                  }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadLineBufferingCompleted,The following statement contains a magic number: Stream         stream        = (Stream)param[2];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadLineBufferingCompleted,The following statement contains a magic number: int            maxLineLength = (int)param[3];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadLineBufferingCompleted,The following statement contains a magic number: int            lastByte      = (int)param[4];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadLineBufferingCompleted,The following statement contains a magic number: int            readedCount   = (int)param[5];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadReadSpecifiedLength,The following statement contains a magic number: if(lengthLeftForReading > m_AvailableInBuffer){                  stream.Write(m_Buffer'm_OffsetInBuffer'm_AvailableInBuffer);                  stream.Flush();                    readedCount += m_AvailableInBuffer;                  // We used buffer directly' sync buffer info !!!                  m_OffsetInBuffer = 0;                  m_AvailableInBuffer = 0;                    BeginBufferDataBlock(this.OnBeginReadSpecifiedLengthBufferingCompleted'new object[]{callback'tag'stream'lengthToRead'readedCount});              }              // Buffer contains all data we need              else{                  stream.Write(m_Buffer'm_OffsetInBuffer'lengthLeftForReading);                  stream.Flush();                    readedCount += lengthLeftForReading;                  // We used buffer directly' sync buffer info !!!                  m_OffsetInBuffer += lengthLeftForReading;                  m_AvailableInBuffer -= lengthLeftForReading;                    // Logging stuff  				if(m_pLogger != null){  				    if(stream.CanSeek && stream.Length < 200){                          byte[] readedData = new byte[stream.Length];                          stream.Position = 0;                          stream.Read(readedData'0'readedData.Length);  						m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'lengthToRead);  					}  					else{  					    m_pLogger.AddReadEntry("Big binary data' readed " + readedCount + " bytes."'readedCount);  					}                  }                    // Data readed ok' call callback.                  if(callback != null){                      callback(SocketCallBackResult.Ok'readedCount'null'tag);                  }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadSpecifiedLengthBufferingCompleted,The following statement contains a magic number: Stream         stream        = (Stream)param[2];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadSpecifiedLengthBufferingCompleted,The following statement contains a magic number: int            lengthToRead  = (int)param[3];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadSpecifiedLengthBufferingCompleted,The following statement contains a magic number: int            readedCount   = (int)param[4];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The following statement contains a magic number: byte[] buffer           = new byte[8000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                                                  // We got <CRLF> + 1 char' we must skip that char if it is '.'.                  if(lineBreak){                      lineBreak = false;                        // We must skip this char if it is '.'                      if(currentByte == '.'){                          expectCRLF = true;                                                    // Read next byte                          if(m_AvailableInBuffer > 0){                              currentByte = ReadByte();                              readedCount++;                          }                          // We have use all data in the buffer' buffer next block asynchronously.                          else{                              // There is data in buffer' flush it                              if(positionInBuffer > 0){                                  stream.Write(buffer'0'positionInBuffer);                                  positionInBuffer = 0;                              }                                BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF});                              return;                          }                      }                                      }                  // We got <CRLF>                  else if(lastByte == (byte)'\r' && currentByte == (byte)'\n'){                      lineBreak = true;                        // We have <CRLF>.<CRLF>' skip last <CRLF>.                      if(expectCRLF){                          // There is data in buffer' flush it                          if(positionInBuffer > 0){                              stream.Write(buffer'0'positionInBuffer);                              positionInBuffer = 0;                          }                            // Logging stuff  				        if(m_pLogger != null){  					        if(stream.CanSeek && stream.Length < 200){                                  byte[] readedData = new byte[stream.Length];                                  stream.Position = 0;                                  stream.Read(readedData'0'readedData.Length);  						        m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'readedCount);  					        }  					        else{  						        m_pLogger.AddReadEntry("Big binary data' readed " + readedCount.ToString() + " bytes."'readedCount);  					        }                          }                            // Maximum allowed length exceeded                          if(readedCount > maxLength){                              if(callback != null){                                  callback(SocketCallBackResult.LengthExceeded'0'new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed data length exceeded !")'tag);                                                              }                              return;                          }                            // Data readed ok' call callback.                          if(callback != null){                              callback(SocketCallBackResult.Ok'readedCount'null'tag);                          }                          return;                      }                  }                    // current char isn't CRLF part' so it isn't <CRLF>.<CRLF> terminator.                  if(expectCRLF && !(currentByte == (byte)'\r' || currentByte == (byte)'\n')){                      expectCRLF = false;                  }                    // Maximum allowed length exceeded' just don't store data.                  if(readedCount < maxLength){                      // Buffer is filled up' write buffer to stream                      if(positionInBuffer > (buffer.Length - 2)){                          stream.Write(buffer'0'positionInBuffer);                          positionInBuffer = 0;                      }                        buffer[positionInBuffer] = (byte)lastByte;                      positionInBuffer++;                  }                                        // Read next byte                  lastByte = currentByte;                  if(m_AvailableInBuffer > 0){                      currentByte = ReadByte();                      readedCount++;                  }                  // We have use all data in the buffer' buffer next block asynchronously.                  else{                      // There is data in buffer' flush it                      if(positionInBuffer > 0){                          stream.Write(buffer'0'positionInBuffer);                          positionInBuffer = 0;                      }                        BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF});                      return;                  }                              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,TryToReadPeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                                                  // We got <CRLF> + 1 char' we must skip that char if it is '.'.                  if(lineBreak){                      lineBreak = false;                        // We must skip this char if it is '.'                      if(currentByte == '.'){                          expectCRLF = true;                                                    // Read next byte                          if(m_AvailableInBuffer > 0){                              currentByte = ReadByte();                              readedCount++;                          }                          // We have use all data in the buffer' buffer next block asynchronously.                          else{                              // There is data in buffer' flush it                              if(positionInBuffer > 0){                                  stream.Write(buffer'0'positionInBuffer);                                  positionInBuffer = 0;                              }                                BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF});                              return;                          }                      }                                      }                  // We got <CRLF>                  else if(lastByte == (byte)'\r' && currentByte == (byte)'\n'){                      lineBreak = true;                        // We have <CRLF>.<CRLF>' skip last <CRLF>.                      if(expectCRLF){                          // There is data in buffer' flush it                          if(positionInBuffer > 0){                              stream.Write(buffer'0'positionInBuffer);                              positionInBuffer = 0;                          }                            // Logging stuff  				        if(m_pLogger != null){  					        if(stream.CanSeek && stream.Length < 200){                                  byte[] readedData = new byte[stream.Length];                                  stream.Position = 0;                                  stream.Read(readedData'0'readedData.Length);  						        m_pLogger.AddReadEntry(m_pEncoding.GetString(readedData)'readedCount);  					        }  					        else{  						        m_pLogger.AddReadEntry("Big binary data' readed " + readedCount.ToString() + " bytes."'readedCount);  					        }                          }                            // Maximum allowed length exceeded                          if(readedCount > maxLength){                              if(callback != null){                                  callback(SocketCallBackResult.LengthExceeded'0'new ReadException(ReadReplyCode.LengthExceeded'"Maximum allowed data length exceeded !")'tag);                                                              }                              return;                          }                            // Data readed ok' call callback.                          if(callback != null){                              callback(SocketCallBackResult.Ok'readedCount'null'tag);                          }                          return;                      }                  }                    // current char isn't CRLF part' so it isn't <CRLF>.<CRLF> terminator.                  if(expectCRLF && !(currentByte == (byte)'\r' || currentByte == (byte)'\n')){                      expectCRLF = false;                  }                    // Maximum allowed length exceeded' just don't store data.                  if(readedCount < maxLength){                      // Buffer is filled up' write buffer to stream                      if(positionInBuffer > (buffer.Length - 2)){                          stream.Write(buffer'0'positionInBuffer);                          positionInBuffer = 0;                      }                        buffer[positionInBuffer] = (byte)lastByte;                      positionInBuffer++;                  }                                        // Read next byte                  lastByte = currentByte;                  if(m_AvailableInBuffer > 0){                      currentByte = ReadByte();                      readedCount++;                  }                  // We have use all data in the buffer' buffer next block asynchronously.                  else{                      // There is data in buffer' flush it                      if(positionInBuffer > 0){                          stream.Write(buffer'0'positionInBuffer);                          positionInBuffer = 0;                      }                        BeginBufferDataBlock(this.OnBeginReadPeriodTerminatedBufferingCompleted'new object[]{callback'tag'stream'maxLength'lastByte'readedCount'lineBreak'expectCRLF});                      return;                  }                              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadPeriodTerminatedBufferingCompleted,The following statement contains a magic number: Stream         stream        = (Stream)param[2];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadPeriodTerminatedBufferingCompleted,The following statement contains a magic number: int            maxLength     = (int)param[3];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadPeriodTerminatedBufferingCompleted,The following statement contains a magic number: int            lastByte      = (int)param[4];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadPeriodTerminatedBufferingCompleted,The following statement contains a magic number: int            readedCount   = (int)param[5];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadPeriodTerminatedBufferingCompleted,The following statement contains a magic number: bool           lineBreak     = (bool)param[6];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginReadPeriodTerminatedBufferingCompleted,The following statement contains a magic number: bool           expectCRLF    = (bool)param[7];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWrite,The following statement contains a magic number: byte[] buffer = new byte[4000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWrite,The following statement contains a magic number: if(readedCount > 0){                  countSent += readedCount;                  m_WrittenCount += readedCount;                    if(m_SSL){                      m_pSslStream.BeginWrite(buffer'0'readedCount'new AsyncCallback(this.OnBeginWriteCallback)'new object[]{stream'tag'callback'countSent});                  }                  else{                      m_pSocketStream.BeginWrite(buffer'0'readedCount'new AsyncCallback(this.OnBeginWriteCallback)'new object[]{stream'tag'callback'countSent});                  }                             }              // We have sent all data              else{                  // Logging stuff  		        if(m_pLogger != null){  			        if(stream.CanSeek && stream.Length < 200){                          byte[] sentData = new byte[stream.Length];                          stream.Position = 0;                          stream.Read(sentData'0'sentData.Length);  						m_pLogger.AddSendEntry(m_pEncoding.GetString(sentData)'countSent);  					}  			        else{  			            m_pLogger.AddSendEntry("Big binary data' sent " + countSent.ToString() + " bytes."'countSent);  		            }                  }                    // Line sent ok' call callback.                  if(callback != null){  				    callback(SocketCallBackResult.Ok'countSent'null'tag);  			    }              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginWriteCallback,The following statement contains a magic number: SocketCallBack callBack  = (SocketCallBack)param[2];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginWriteCallback,The following statement contains a magic number: int            countSent = (int)param[3];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginWriteLineCallback,The following statement contains a magic number: byte[]         lineBytes = (byte[])param[2];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,OnBeginWriteLineCallback,The following statement contains a magic number: try{                  if(m_SSL){                      m_pSslStream.EndWrite(ar);                  }                  else{                      m_pSocketStream.EndWrite(ar);                  }                    m_WrittenCount += lineBytes.Length;                  m_LastActivityDate = DateTime.Now;                    // Logging stuff  		        if(m_pLogger != null){  			        if(lineBytes.Length < 200){  					    m_pLogger.AddSendEntry(m_pEncoding.GetString(lineBytes)'lineBytes.Length);  		            }  			        else{  			            m_pLogger.AddSendEntry("Big binary line' sent " + lineBytes.Length.ToString() + " bytes."'lineBytes.Length);  		            }                  }                    // Line sent ok' call callback.                  if(callBack != null){  				    callBack(SocketCallBackResult.Ok'lineBytes.Length'null'tag);  			    }              }              catch(Exception x){                  if(callBack != null){  					callBack(SocketCallBackResult.Exception'0'x'tag);  				}              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWritePeriodTerminated,The following statement contains a magic number: byte[] buffer           = new byte[4000];
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWritePeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                  // We have CRLF' mark it up                  if(state.LastByte == '\r' && currentByte == '\n'){                      state.HasCRLF = true;                  }                  // There is CRLF + current byte                  else if(state.HasCRLF){                      // If it is a period' one additional period is inserted at the beginning of the line.                      if(currentByte == '.'){                          buffer[positionInBuffer] = (byte)'.';                          positionInBuffer++;                      }                        // CRLF handled' reset it                      state.HasCRLF = false;                                     }                    buffer[positionInBuffer] = (byte)currentByte;                  positionInBuffer++;                                                           state.LastByte = currentByte;                                    // Buffer is filled up' begin writing buffer to socket.                  if(positionInBuffer > (4000 - 10)){                      state.CountSent += positionInBuffer;                      m_WrittenCount += positionInBuffer;                                                                if(m_SSL){                          m_pSslStream.BeginWrite(buffer'0'positionInBuffer'this.OnBeginWritePeriodTerminatedCallback'state);                      }                      else{                          m_pSocketStream.BeginWrite(buffer'0'positionInBuffer'this.OnBeginWritePeriodTerminatedCallback'state);                      }                      return;                  }                                    currentByte = state.Stream.ReadByte();              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWritePeriodTerminated,The following statement contains a magic number: while(currentByte > -1){                  // We have CRLF' mark it up                  if(state.LastByte == '\r' && currentByte == '\n'){                      state.HasCRLF = true;                  }                  // There is CRLF + current byte                  else if(state.HasCRLF){                      // If it is a period' one additional period is inserted at the beginning of the line.                      if(currentByte == '.'){                          buffer[positionInBuffer] = (byte)'.';                          positionInBuffer++;                      }                        // CRLF handled' reset it                      state.HasCRLF = false;                                     }                    buffer[positionInBuffer] = (byte)currentByte;                  positionInBuffer++;                                                           state.LastByte = currentByte;                                    // Buffer is filled up' begin writing buffer to socket.                  if(positionInBuffer > (4000 - 10)){                      state.CountSent += positionInBuffer;                      m_WrittenCount += positionInBuffer;                                                                if(m_SSL){                          m_pSslStream.BeginWrite(buffer'0'positionInBuffer'this.OnBeginWritePeriodTerminatedCallback'state);                      }                      else{                          m_pSocketStream.BeginWrite(buffer'0'positionInBuffer'this.OnBeginWritePeriodTerminatedCallback'state);                      }                      return;                  }                                    currentByte = state.Stream.ReadByte();              }
Magic Number,LumiSoft.Net,SocketEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SocketEx.cs,BeginProcessingWritePeriodTerminated,The following statement contains a magic number: if(m_pLogger != null){  			    if(state.CountSent < 200){  					m_pLogger.AddSendEntry(m_pEncoding.GetString(buffer)'buffer.Length);  		        }  			    else{  			        m_pLogger.AddSendEntry("Binary data' sent " + state.CountSent.ToString() + " bytes."'state.CountSent);  		        }              }
Magic Number,LumiSoft.Net,TextUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TextUtils.cs,EscapeString,The following statement contains a magic number: char[] buffer = new char[text.Length * 2];
Magic Number,LumiSoft.Net.AUTH,AuthHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\AuthHelper.cs,GenerateNonce,The following statement contains a magic number: return Guid.NewGuid().ToString().Replace("-"'"").Substring(0'16);
Magic Number,LumiSoft.Net.AUTH,Auth_HttpDigest,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\Auth_HttpDigest.cs,Parse,The following statement contains a magic number: foreach(string parameter in parameters){                  string[] name_value = parameter.Split(new char[]{'='}'2);                  string   name       = name_value[0].Trim();                    if(name_value.Length == 2){                      if(name.ToLower() == "realm"){                          m_Realm = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "nonce"){                          m_Nonce = TextUtils.UnQuoteString(name_value[1]);                      }                      // RFC bug ?: RFC 2831. digest-uri = "digest-uri" "=" <"> digest-uri-value <">                      //            RFC 2617  digest-uri        = "uri" "=" digest-uri-value                      else if(name.ToLower() == "uri" || name.ToLower() == "digest-uri"){                          m_Uri = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "qop"){                          m_Qop = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "nc"){                          m_NonceCount = Convert.ToInt32(TextUtils.UnQuoteString(name_value[1]));                      }                      else if(name.ToLower() == "cnonce"){                          m_Cnonce = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "response"){                          m_Response = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "opaque"){                          m_Opaque = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "username"){                          m_UserName = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "algorithm"){                          m_Algorithm = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "charset"){                          m_Charset = TextUtils.UnQuoteString(name_value[1]);                      }                  }              }
Magic Number,LumiSoft.Net.AUTH,Auth_HttpDigest,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\Auth_HttpDigest.cs,Parse,The following statement contains a magic number: foreach(string parameter in parameters){                  string[] name_value = parameter.Split(new char[]{'='}'2);                  string   name       = name_value[0].Trim();                    if(name_value.Length == 2){                      if(name.ToLower() == "realm"){                          m_Realm = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "nonce"){                          m_Nonce = TextUtils.UnQuoteString(name_value[1]);                      }                      // RFC bug ?: RFC 2831. digest-uri = "digest-uri" "=" <"> digest-uri-value <">                      //            RFC 2617  digest-uri        = "uri" "=" digest-uri-value                      else if(name.ToLower() == "uri" || name.ToLower() == "digest-uri"){                          m_Uri = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "qop"){                          m_Qop = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "nc"){                          m_NonceCount = Convert.ToInt32(TextUtils.UnQuoteString(name_value[1]));                      }                      else if(name.ToLower() == "cnonce"){                          m_Cnonce = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "response"){                          m_Response = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "opaque"){                          m_Opaque = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "username"){                          m_UserName = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "algorithm"){                          m_Algorithm = TextUtils.UnQuoteString(name_value[1]);                      }                      else if(name.ToLower() == "charset"){                          m_Charset = TextUtils.UnQuoteString(name_value[1]);                      }                  }              }
Magic Number,LumiSoft.Net.AUTH,Auth_HttpDigest_NonceManager,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\Auth_HttpDigest_NonceManager.cs,Auth_HttpDigest_NonceManager,The following statement contains a magic number: m_pTimer = new Timer(15000);
Magic Number,LumiSoft.Net.AUTH,AUTH_SASL_ServerMechanism_CramMd5,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\AUTH_SASL_ServerMechanism_CramMd5.cs,Continue,The following statement contains a magic number: if(m_State == 0){                  m_State++;                  m_Key = "<" + Guid.NewGuid().ToString() + "@host" + ">";                    return m_Key;              }              else{                  // Parse client response. response = userName SP hash.                  string[] user_hash = clientResponse.Split(' ');                  if(user_hash.Length == 2 && !string.IsNullOrEmpty(user_hash[0])){                      m_UserName = user_hash[0];                      AUTH_e_UserInfo result = OnGetUserInfo(user_hash[0]);                      if(result.UserExists){                          // hash = Hex(HmacMd5(hashKey'password))                          string hash = Net_Utils.Hex(HmacMd5(m_Key'result.Password));                          if(hash == user_hash[1]){                              m_IsAuthenticated = true;                          }                      }                  }                    m_IsCompleted = true;              }
Magic Number,LumiSoft.Net.AUTH,AUTH_SASL_ServerMechanism_Plain,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\AUTH_SASL_ServerMechanism_Plain.cs,Continue,The following statement contains a magic number: if(clientResponse == string.Empty){                  return "";              }              // Parse response              else{                  string[] authzid_authcid_passwd = clientResponse.Split('\0');                  if(authzid_authcid_passwd.Length == 3 && !string.IsNullOrEmpty(authzid_authcid_passwd[1])){                        m_UserName = authzid_authcid_passwd[1];                      AUTH_e_Authenticate result = OnAuthenticate(authzid_authcid_passwd[0]'authzid_authcid_passwd[1]'authzid_authcid_passwd[2]);                      m_IsAuthenticated = result.IsAuthenticated;                  }                    m_IsCompleted = true;              }
Magic Number,LumiSoft.Net.AUTH,AUTH_SASL_ServerMechanism_Plain,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\AUTH\AUTH_SASL_ServerMechanism_Plain.cs,Continue,The following statement contains a magic number: if(clientResponse == string.Empty){                  return "";              }              // Parse response              else{                  string[] authzid_authcid_passwd = clientResponse.Split('\0');                  if(authzid_authcid_passwd.Length == 3 && !string.IsNullOrEmpty(authzid_authcid_passwd[1])){                        m_UserName = authzid_authcid_passwd[1];                      AUTH_e_Authenticate result = OnAuthenticate(authzid_authcid_passwd[0]'authzid_authcid_passwd[1]'authzid_authcid_passwd[2]);                      m_IsAuthenticated = result.IsAuthenticated;                  }                    m_IsCompleted = true;              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,QuotedPrintableStream,The following statement contains a magic number: m_pDecodedBuffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,QuotedPrintableStream,The following statement contains a magic number: m_pEncodedBuffer = new byte[78];
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Read,The following statement contains a magic number: while(true){                  // Read next quoted-printable line and decode it.                  if(m_DecodedOffset >= m_DecodedCount){                      m_DecodedOffset = 0;                      m_DecodedCount  = 0;                      SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException);                      m_pStream.ReadLine(readLineOP'false);                      // IO error reading line.                      if(readLineOP.Error != null){                          throw readLineOP.Error;                      }                      // We reached end of stream.                      else if(readLineOP.BytesInBuffer == 0){                          return 0;                      }                      // Decode quoted-printable line.                      else{                          // Process bytes.                          bool softLineBreak = false;                          int lineLength     = readLineOP.LineBytesInBuffer;                          for(int i=0;i<readLineOP.LineBytesInBuffer;i++){                              byte b = readLineOP.Buffer[i];                              // We have soft line-break.                              if(b == '=' && i == (lineLength - 1)){                                  softLineBreak = true;                              }                              // We should have =XX char.                              else if(b == '='){                                  byte b1 = readLineOP.Buffer[++i];                                  byte b2 = readLineOP.Buffer[++i];                                                            m_pDecodedBuffer[m_DecodedCount++] = byte.Parse(new string(new char[]{(char)b1'(char)b2})'System.Globalization.NumberStyles.HexNumber);                              }                              // Normal char.                              else{                                  m_pDecodedBuffer[m_DecodedCount++] = b;                              }                          }                            if(!softLineBreak){                              m_pDecodedBuffer[m_DecodedCount++] = (byte)'\r';                              m_pDecodedBuffer[m_DecodedCount++] = (byte)'\n';                          }                      }                  }                    // We some decoded data' return it.                  if(m_DecodedOffset < m_DecodedCount){                      int countToCopy = Math.Min(count'm_DecodedCount - m_DecodedOffset);                      Array.Copy(m_pDecodedBuffer'm_DecodedOffset'buffer'offset'countToCopy);                      m_DecodedOffset += countToCopy;                        return countToCopy;                  }              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  byte b = buffer[offset + i];                    // We don't need to encode byte.                  if((b >= 33 && b <= 60) || (b >= 62 && b <= 126)){                      // Maximum allowed quoted-printable line length reached' do soft line break.                      if(m_EncodedCount >= 75){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        m_pEncodedBuffer[m_EncodedCount++] = b;                  }                  // We need to encode byte.                  else{                      // Maximum allowed quote-printable line length reached' do soft line break.                      if(m_EncodedCount >= 73){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        // Encode byte.                      m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b >> 4).ToString("x")[0];                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b & 0xF).ToString("x")[0];                  }                              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  byte b = buffer[offset + i];                    // We don't need to encode byte.                  if((b >= 33 && b <= 60) || (b >= 62 && b <= 126)){                      // Maximum allowed quoted-printable line length reached' do soft line break.                      if(m_EncodedCount >= 75){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        m_pEncodedBuffer[m_EncodedCount++] = b;                  }                  // We need to encode byte.                  else{                      // Maximum allowed quote-printable line length reached' do soft line break.                      if(m_EncodedCount >= 73){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        // Encode byte.                      m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b >> 4).ToString("x")[0];                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b & 0xF).ToString("x")[0];                  }                              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  byte b = buffer[offset + i];                    // We don't need to encode byte.                  if((b >= 33 && b <= 60) || (b >= 62 && b <= 126)){                      // Maximum allowed quoted-printable line length reached' do soft line break.                      if(m_EncodedCount >= 75){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        m_pEncodedBuffer[m_EncodedCount++] = b;                  }                  // We need to encode byte.                  else{                      // Maximum allowed quote-printable line length reached' do soft line break.                      if(m_EncodedCount >= 73){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        // Encode byte.                      m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b >> 4).ToString("x")[0];                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b & 0xF).ToString("x")[0];                  }                              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  byte b = buffer[offset + i];                    // We don't need to encode byte.                  if((b >= 33 && b <= 60) || (b >= 62 && b <= 126)){                      // Maximum allowed quoted-printable line length reached' do soft line break.                      if(m_EncodedCount >= 75){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        m_pEncodedBuffer[m_EncodedCount++] = b;                  }                  // We need to encode byte.                  else{                      // Maximum allowed quote-printable line length reached' do soft line break.                      if(m_EncodedCount >= 73){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        // Encode byte.                      m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b >> 4).ToString("x")[0];                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b & 0xF).ToString("x")[0];                  }                              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  byte b = buffer[offset + i];                    // We don't need to encode byte.                  if((b >= 33 && b <= 60) || (b >= 62 && b <= 126)){                      // Maximum allowed quoted-printable line length reached' do soft line break.                      if(m_EncodedCount >= 75){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        m_pEncodedBuffer[m_EncodedCount++] = b;                  }                  // We need to encode byte.                  else{                      // Maximum allowed quote-printable line length reached' do soft line break.                      if(m_EncodedCount >= 73){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        // Encode byte.                      m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b >> 4).ToString("x")[0];                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b & 0xF).ToString("x")[0];                  }                              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  byte b = buffer[offset + i];                    // We don't need to encode byte.                  if((b >= 33 && b <= 60) || (b >= 62 && b <= 126)){                      // Maximum allowed quoted-printable line length reached' do soft line break.                      if(m_EncodedCount >= 75){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        m_pEncodedBuffer[m_EncodedCount++] = b;                  }                  // We need to encode byte.                  else{                      // Maximum allowed quote-printable line length reached' do soft line break.                      if(m_EncodedCount >= 73){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        // Encode byte.                      m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b >> 4).ToString("x")[0];                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b & 0xF).ToString("x")[0];                  }                              }
Magic Number,LumiSoft.Net.IO,QuotedPrintableStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\QuotedPrintableStream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  byte b = buffer[offset + i];                    // We don't need to encode byte.                  if((b >= 33 && b <= 60) || (b >= 62 && b <= 126)){                      // Maximum allowed quoted-printable line length reached' do soft line break.                      if(m_EncodedCount >= 75){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        m_pEncodedBuffer[m_EncodedCount++] = b;                  }                  // We need to encode byte.                  else{                      // Maximum allowed quote-printable line length reached' do soft line break.                      if(m_EncodedCount >= 73){                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\r';                          m_pEncodedBuffer[m_EncodedCount++] = (byte)'\n';                            // Write encoded data to underlying stream.                          Flush();                      }                        // Encode byte.                      m_pEncodedBuffer[m_EncodedCount++] = (byte)'=';                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b >> 4).ToString("x")[0];                      m_pEncodedBuffer[m_EncodedCount++] = (byte)(b & 0xF).ToString("x")[0];                  }                              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: int rawBytesToRead = (int)Math.Ceiling((double)count / 3.0) * 4;
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: int rawBytesToRead = (int)Math.Ceiling((double)count / 3.0) * 4;
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: short[] decodeBlock       = new short[4];
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: byte[]  decodedBlock      = new byte[3];
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Read,The following statement contains a magic number: while(storedInBuffer < count){                  int readedCount = m_pStream.Read(readBuffer'0'rawBytesToRead);                  // We reached end of stream' no more data.                  if(readedCount == 0){                      // We have last block without padding 1 char.                      if(decodeBlockOffset == 3){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                          // See if "buffer" can accomodate 2 byte.                          if(storedInBuffer < count){                              buffer[offset + storedInBuffer++] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);                          }                          else{                              m_pDecodeReminder.Enqueue((byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2));                          }                      }                      // We have last block without padding 2 chars.                      else if(decodeBlockOffset == 2){                          buffer[offset + storedInBuffer++] = (byte)(decodeBlock[0] << 2 | decodeBlock[1] >> 4);                      }                      // We have invalid base64 data.                      else if(decodeBlockOffset == 1){                          throw new InvalidDataException("Incomplete base64 data..");                      }                        return storedInBuffer;                  }                    // Process readed bytes.                  for(int i=0;i<readedCount;i++){                      byte b = readBuffer[i];                        // If padding char.                      if(b == '='){                          decodeBlock[decodeBlockOffset++] = (byte)'=';                          paddedCount++;                          rawBytesToRead--;                      }                      // If base64 char.                      else if(BASE64_DECODE_TABLE[b] != -1){                          decodeBlock[decodeBlockOffset++] = BASE64_DECODE_TABLE[b];                          rawBytesToRead--;                      }                      // Non-base64 char' skip it.                      else{                      }                        // Decode block full' decode bytes.                      if(decodeBlockOffset == 4){                          // Decode 3x8-bit block.                          decodedBlock[0] = (byte)(decodeBlock[0] << 2         | decodeBlock[1] >> 4);  					    decodedBlock[1] = (byte)((decodeBlock[1] & 0xF) << 4 | decodeBlock[2] >> 2);  					    decodedBlock[2] = (byte)((decodeBlock[2] & 0x3) << 6 | decodeBlock[3] >> 0);                            // Invalid base64 data. Base64 final quantum may have max 2 padding chars.                          if(paddedCount > 2){                              throw new InvalidDataException("Invalid base64 data' more than 2 padding chars(=).");                          }                            for(int n=0;n<(3 - paddedCount);n++){                              // We have room in "buffer"' store byte there.                              if(storedInBuffer < count){                                  buffer[offset + storedInBuffer++] = decodedBlock[n];                              }                              //No room in "buffer"' store reminder.                              else{                                  m_pDecodeReminder.Enqueue(decodedBlock[n]);                              }                          }                            decodeBlockOffset = 0;                          paddedCount = 0;                      }                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Write,The following statement contains a magic number: for(int i=0;i<count;i++){                  m_pEncode3x8Block[m_OffsetInEncode3x8Block++] = buffer[offset + i];                    // 3x8-bit encode block is full' encode it.                  if(m_OffsetInEncode3x8Block == 3){                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2 | m_pEncode3x8Block[2] >> 6];                      m_pEncodeBuffer[m_EncodeBufferOffset++] = BASE64_ENCODE_TABLE[(m_pEncode3x8Block[2] & 0x3F)];                                            // Encode buffer is full' write buffer to underlaying stream (we reserved 2 bytes for CRLF).                      if(m_EncodeBufferOffset >= (encodeBufSize - 2)){                          if(m_AddLineBreaks){                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\r';                              m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'\n';                          }                            m_pStream.Write(m_pEncodeBuffer'0'm_EncodeBufferOffset);                          m_EncodeBufferOffset = 0;                      }                        m_OffsetInEncode3x8Block = 0;                  }              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: if(m_OffsetInEncode3x8Block == 1){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }              else if(m_OffsetInEncode3x8Block == 2){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: if(m_OffsetInEncode3x8Block == 1){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }              else if(m_OffsetInEncode3x8Block == 2){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: if(m_OffsetInEncode3x8Block == 1){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }              else if(m_OffsetInEncode3x8Block == 2){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: if(m_OffsetInEncode3x8Block == 1){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }              else if(m_OffsetInEncode3x8Block == 2){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: if(m_OffsetInEncode3x8Block == 1){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }              else if(m_OffsetInEncode3x8Block == 2){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: if(m_OffsetInEncode3x8Block == 1){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }              else if(m_OffsetInEncode3x8Block == 2){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }
Magic Number,LumiSoft.Net.IO,Base64Stream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\Base64Stream.cs,Finish,The following statement contains a magic number: if(m_OffsetInEncode3x8Block == 1){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }              else if(m_OffsetInEncode3x8Block == 2){                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[ m_pEncode3x8Block[0] >> 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[0] & 0x03) << 4 | m_pEncode3x8Block[1] >> 4];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)BASE64_ENCODE_TABLE[(m_pEncode3x8Block[1] & 0x0F) << 2];                  m_pEncodeBuffer[m_EncodeBufferOffset++] = (byte)'=';              }
Magic Number,LumiSoft.Net.IO,LineReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\LineReader.cs,LineReader,The following statement contains a magic number: m_pLineBuffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,SmartStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadAll,The following statement contains a magic number: byte[] buffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadToTerminatorAsyncOperation,The following statement contains a magic number: m_pLineBuffer = new byte[32000];
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadToTerminatorAsyncOperation,The following statement contains a magic number: m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null);
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadLine_Completed,The following statement contains a magic number: try{                      int storedCount = 0;                                          try{                          storedCount = m_pOwner.EndReadLine(asyncResult);                      }                      catch(LineSizeExceededException lx){                          if(m_SizeExceededAction == SizeExceededAction.ThrowException){                              throw lx;                          }                          m_pException = new LineSizeExceededException();                          storedCount = 32000 - 2;                      }                        // Source stream closed berore we reached terminator.                      if(storedCount == -1){                          throw new IncompleteDataException();                      }                        // Check for terminator.                      if(Net_Utils.CompareArray(m_pTerminatorBytes'm_pLineBuffer'storedCount)){                          Completed();                      }                      else{                          // We have exceeded maximum allowed data count.                          if(m_MaxCount > 0 && (m_BytesStored + storedCount + 2) > m_MaxCount){                              if(m_SizeExceededAction == SizeExceededAction.ThrowException){                                  throw new DataSizeExceededException();                              }                              // Just skip storing.                              else{                                  m_pException = new DataSizeExceededException();                              }                          }                          else{                              // Store readed line.                              m_pLineBuffer[storedCount++] = (byte)'\r';                              m_pLineBuffer[storedCount++] = (byte)'\n';                              m_pStoreStream.Write(m_pLineBuffer'0'storedCount);                              m_BytesStored += storedCount;                                                     }                            // Strart reading new line.                          m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null);                      }                  }                  catch(Exception x){                      m_pException = x;                      Completed();                                  }
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadLine_Completed,The following statement contains a magic number: try{                      int storedCount = 0;                                          try{                          storedCount = m_pOwner.EndReadLine(asyncResult);                      }                      catch(LineSizeExceededException lx){                          if(m_SizeExceededAction == SizeExceededAction.ThrowException){                              throw lx;                          }                          m_pException = new LineSizeExceededException();                          storedCount = 32000 - 2;                      }                        // Source stream closed berore we reached terminator.                      if(storedCount == -1){                          throw new IncompleteDataException();                      }                        // Check for terminator.                      if(Net_Utils.CompareArray(m_pTerminatorBytes'm_pLineBuffer'storedCount)){                          Completed();                      }                      else{                          // We have exceeded maximum allowed data count.                          if(m_MaxCount > 0 && (m_BytesStored + storedCount + 2) > m_MaxCount){                              if(m_SizeExceededAction == SizeExceededAction.ThrowException){                                  throw new DataSizeExceededException();                              }                              // Just skip storing.                              else{                                  m_pException = new DataSizeExceededException();                              }                          }                          else{                              // Store readed line.                              m_pLineBuffer[storedCount++] = (byte)'\r';                              m_pLineBuffer[storedCount++] = (byte)'\n';                              m_pStoreStream.Write(m_pLineBuffer'0'storedCount);                              m_BytesStored += storedCount;                                                     }                            // Strart reading new line.                          m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null);                      }                  }                  catch(Exception x){                      m_pException = x;                      Completed();                                  }
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadLine_Completed,The following statement contains a magic number: try{                      int storedCount = 0;                                          try{                          storedCount = m_pOwner.EndReadLine(asyncResult);                      }                      catch(LineSizeExceededException lx){                          if(m_SizeExceededAction == SizeExceededAction.ThrowException){                              throw lx;                          }                          m_pException = new LineSizeExceededException();                          storedCount = 32000 - 2;                      }                        // Source stream closed berore we reached terminator.                      if(storedCount == -1){                          throw new IncompleteDataException();                      }                        // Check for terminator.                      if(Net_Utils.CompareArray(m_pTerminatorBytes'm_pLineBuffer'storedCount)){                          Completed();                      }                      else{                          // We have exceeded maximum allowed data count.                          if(m_MaxCount > 0 && (m_BytesStored + storedCount + 2) > m_MaxCount){                              if(m_SizeExceededAction == SizeExceededAction.ThrowException){                                  throw new DataSizeExceededException();                              }                              // Just skip storing.                              else{                                  m_pException = new DataSizeExceededException();                              }                          }                          else{                              // Store readed line.                              m_pLineBuffer[storedCount++] = (byte)'\r';                              m_pLineBuffer[storedCount++] = (byte)'\n';                              m_pStoreStream.Write(m_pLineBuffer'0'storedCount);                              m_BytesStored += storedCount;                                                     }                            // Strart reading new line.                          m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null);                      }                  }                  catch(Exception x){                      m_pException = x;                      Completed();                                  }
Magic Number,LumiSoft.Net.IO,ReadToTerminatorAsyncOperation,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadLine_Completed,The following statement contains a magic number: try{                      int storedCount = 0;                                          try{                          storedCount = m_pOwner.EndReadLine(asyncResult);                      }                      catch(LineSizeExceededException lx){                          if(m_SizeExceededAction == SizeExceededAction.ThrowException){                              throw lx;                          }                          m_pException = new LineSizeExceededException();                          storedCount = 32000 - 2;                      }                        // Source stream closed berore we reached terminator.                      if(storedCount == -1){                          throw new IncompleteDataException();                      }                        // Check for terminator.                      if(Net_Utils.CompareArray(m_pTerminatorBytes'm_pLineBuffer'storedCount)){                          Completed();                      }                      else{                          // We have exceeded maximum allowed data count.                          if(m_MaxCount > 0 && (m_BytesStored + storedCount + 2) > m_MaxCount){                              if(m_SizeExceededAction == SizeExceededAction.ThrowException){                                  throw new DataSizeExceededException();                              }                              // Just skip storing.                              else{                                  m_pException = new DataSizeExceededException();                              }                          }                          else{                              // Store readed line.                              m_pLineBuffer[storedCount++] = (byte)'\r';                              m_pLineBuffer[storedCount++] = (byte)'\n';                              m_pStoreStream.Write(m_pLineBuffer'0'storedCount);                              m_BytesStored += storedCount;                                                     }                            // Strart reading new line.                          m_pOwner.BeginReadLine(m_pLineBuffer'0'm_pLineBuffer.Length - 2'm_SizeExceededAction'new AsyncCallback(this.ReadLine_Completed)'null);                      }                  }                  catch(Exception x){                      m_pException = x;                      Completed();                                  }
Magic Number,LumiSoft.Net.IO,ReadPeriodTerminatedAsyncOP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IO\SmartStream.cs,ReadPeriodTerminatedAsyncOP,The following statement contains a magic number: m_pReadLineOP = new ReadLineAsyncOP(new byte[32000]'exceededAction);
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,StreamHelper,The following statement contains a magic number: if(maxLineSize < 1 || maxLineSize > 32000){                  throw new ArgumentException("Parameter maxLineSize value must be >= 1 and <= 32000 !");              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,StreamHelper,The following statement contains a magic number: if(m_IsReadBuffered){                  m_pReadBuffer = new byte[32000];              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadByte,The following statement contains a magic number: if(m_IsReadBuffered){                  if(m_ReadBufferOffset >= m_ReadBufferEndPos){                      m_ReadBufferEndPos = m_pStream.Read(m_pReadBuffer'0'32000);                      m_ReadBufferOffset = 0;                        // We reached end of stream.                      if(m_ReadBufferEndPos == 0){                          return -1;                      }                  }                    m_ReadBufferOffset++;                  return m_pReadBuffer[m_ReadBufferOffset - 1];                              }              else{                  return m_pStream.ReadByte();              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,Read,The following statement contains a magic number: try{                  byte[] buffer           = new byte[32000];                  int    totalReadedCount = 0;                  int    readedCount      = 0;                  while(totalReadedCount < count){                      // We have data in read buffer' we must consume it first !                      if(m_ReadBufferOffset < m_ReadBufferEndPos){                          int countReadedFromBuffer = Math.Min(m_ReadBufferEndPos - m_ReadBufferOffset'count - totalReadedCount);                          Array.Copy(m_pReadBuffer'm_ReadBufferOffset'buffer'0'countReadedFromBuffer);                          m_ReadBufferOffset += countReadedFromBuffer;                      }                      // Just get read next data block.                      else{                          readedCount = m_pStream.Read(buffer'0'Math.Min(buffer.Length'count - totalReadedCount));                      }                        // We have reached end of stream' no more data.                      if(readedCount == 0){                          throw new IncompleteDataException("Underlaying stream don't have so much data than requested' end of stream reached !");                                              }                      totalReadedCount += readedCount;                        // Write readed data to store stream.                      storeStream.Write(buffer'0'readedCount);                  }                    // Log                  if(this.Logger != null){                      this.Logger.AddRead(totalReadedCount'null);                  }              }              finally{                  m_IsReadActive = false;              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadLineInternal,The following statement contains a magic number: if(m_IsReadBuffered){                  while(true){                      //--- Read byte -----------------------------------------------------                      if(m_ReadBufferOffset >= m_ReadBufferEndPos){                          m_ReadBufferEndPos = m_pStream.Read(m_pReadBuffer'0'32000);                          m_ReadBufferOffset = 0;                            // We reached end of stream.                          if(m_ReadBufferEndPos == 0){                              break;                          }                      }                                              currentByte = m_pReadBuffer[m_ReadBufferOffset];                      m_ReadBufferOffset++;                      readedCount++;                      //-------------------------------------------------------------------                                                                 // We have LF.                      if(currentByte == '\n'){                          break;                      }                      // We just skip all CR.                      else if(currentByte == '\r'){                      }                      // Maximum allowed line size exceeded.                      else if(readedCount > bufferSize){                          if(exceededAction == SizeExceededAction.ThrowException){                              throw new LineSizeExceededException();                          }                      }                      // Store readed byte.                      else{                          buffer[posInBuffer] = (byte)currentByte;                          posInBuffer++;                      }                                      }              }                #endregion                #region No-buffered                else{                  while(true){                      // Read byte                      currentByte = m_pStream.ReadByte();                      // We reached end of stream' no more data.                      if(currentByte == -1){                          break;                      }                      readedCount++;                                            // We have LF.                      if(currentByte == '\n'){                          break;                      }                      // We just skip all CR.                      else if(currentByte == '\r'){                      }                      // Maximum allowed line size exceeded.                      else if(readedCount > bufferSize){                          if(exceededAction == SizeExceededAction.ThrowException){                              throw new LineSizeExceededException();                          }                      }                      // Store readed byte.                      else{                          buffer[posInBuffer] = (byte)currentByte;                          posInBuffer++;                      }                  }              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadAll,The following statement contains a magic number: try{                  byte[] buffer           = new byte[32000];                  int    totalReadedCount = 0;                  int    readedCount      = 0;                  while(true){                      // We have data in read buffer' we must consume it first !                      if(m_ReadBufferOffset < m_ReadBufferEndPos){                          Array.Copy(m_pLineBuffer'm_ReadBufferOffset'buffer'0'm_ReadBufferEndPos - m_ReadBufferOffset);                          m_ReadBufferOffset = 0;                          m_ReadBufferEndPos = 0;                      }                      // Just get read next data block.                      else{                          readedCount = m_pStream.Read(buffer'0'buffer.Length);                      }                        // End of stream reached' no more data.                      if(readedCount == 0){                          break;                      }                      totalReadedCount += readedCount;                        // Maximum allowed data size exceeded.                      if(totalReadedCount > maxSize){                          if(exceededAction == SizeExceededAction.ThrowException){                              throw new DataSizeExceededException();                          }                      }                      else{                          storeStream.Write(buffer'0'readedCount);                      }                                      }                                                    // Maximum allowed data size exceeded' some data junked.                  if(totalReadedCount > maxSize){                      throw new DataSizeExceededException();                  }                    // Log                  if(this.Logger != null){                      this.Logger.AddRead(totalReadedCount'null);                  }                    return totalReadedCount;              }              finally{                  m_IsReadActive = false;              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadHeader,The following statement contains a magic number: try{                  BufferedStream bufferedStoreStream = new BufferedStream(storeStream'32000);                  bool lineSizeExceeded = false;                  int  totalReadedCount = 0;                  int  readedCount      = 0;                  int  rawReadedCount   = 0;                  while(true){                      // Read line.                      readedCount = this.ReadLineInternal(m_pLineBuffer'SizeExceededAction.ThrowException'out rawReadedCount'false);                                            // We have reached end of stream' no more data.                      if(rawReadedCount == 0){                          break;                      }                      totalReadedCount += rawReadedCount;                                            // We got header terminator.                      if(readedCount == 0){                          break;                      }                      else{                          // Maximum allowed data size exceeded.                          if(totalReadedCount > maxSize){                              if(exceededAction == SizeExceededAction.ThrowException){                                  throw new DataSizeExceededException();                              }                          }                          // Write readed bytes to store stream.                          else{                              bufferedStoreStream.Write(m_pLineBuffer'0'readedCount);                              bufferedStoreStream.Write(m_LineBreak'0'm_LineBreak.Length);                          }                      }                  }                  bufferedStoreStream.Flush();                                                    // Maximum allowed line size exceeded' some data is junked.                  if(lineSizeExceeded){                      throw new LineSizeExceededException();                  }                  // Maximum allowed data size exceeded' some data is junked.                  if(totalReadedCount > maxSize){                      throw new DataSizeExceededException();                  }                    // Log                  if(this.Logger != null){                      this.Logger.AddRead(totalReadedCount'null);                  }                    return totalReadedCount;              }              finally{                  m_IsReadActive = false;              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadPeriodTerminated,The following statement contains a magic number: try{                  BufferedStream bufferedStoreStream = new BufferedStream(storeStream'32000);                  bool lineSizeExceeded   = false;                  bool isPeriodTerminated = false;                  int  totalReadedCount   = 0;                  int  readedCount        = 0;                  int  rawReadedCount     = 0;                    // Just break reading at once if maximum allowed line or data size exceeded.                  if(exceededAction == SizeExceededAction.ThrowException){                      try{                          // Read first line.                          readedCount = this.ReadLineInternal(m_pLineBuffer'SizeExceededAction.JunkAndThrowException'out rawReadedCount'false);                      }                      catch(LineSizeExceededException x){                          string dummy = x.Message;                          lineSizeExceeded = true;                      }                      while(rawReadedCount != 0){                          totalReadedCount += rawReadedCount;                            // We have data terminator "<CRLF>.<CRLF>".                          if(readedCount == 1 && m_pLineBuffer[0] == '.'){                              isPeriodTerminated = true;                              break;                          }                          // If line starts with period(.)' first period is removed.                          else if(m_pLineBuffer[0] == '.'){                              // Maximum allowed line or data size exceeded.                              if(lineSizeExceeded || totalReadedCount > maxSize){                                  // Junk data                               }                              // Write readed line to store stream.                              else{                                                                  bufferedStoreStream.Write(m_pLineBuffer'1'readedCount - 1);                                  bufferedStoreStream.Write(m_LineBreak'0'm_LineBreak.Length);                                                          }                          }                          // Normal line.                          else{                              // Maximum allowed line or data size exceeded.                              if(lineSizeExceeded || totalReadedCount > maxSize){                                  // Junk data                                                            }                              // Write readed line to store stream.                              else{                                                                  bufferedStoreStream.Write(m_pLineBuffer'0'readedCount);                                  bufferedStoreStream.Write(m_LineBreak'0'm_LineBreak.Length);                              }                          }                                            try{                              // Read next line.                              readedCount = this.ReadLineInternal(m_pLineBuffer'SizeExceededAction.JunkAndThrowException'out rawReadedCount'false);                          }                          catch(LineSizeExceededException x){                              string dummy = x.Message;                              lineSizeExceeded = true;                          }                      }                  }                  // Read and junk all data if maximum allowed line or data size exceeded.                  else{                      // Read first line.                      readedCount = this.ReadLineInternal(m_pLineBuffer'SizeExceededAction.JunkAndThrowException'out rawReadedCount'false);                      while(rawReadedCount != 0){                          totalReadedCount += rawReadedCount;                            // We have data terminator "<CRLF>.<CRLF>".                          if(readedCount == 1 && m_pLineBuffer[0] == '.'){                              isPeriodTerminated = true;                              break;                          }                          // If line starts with period(.)' first period is removed.                          else if(m_pLineBuffer[0] == '.'){                              // Maximum allowed size exceeded.                              if(totalReadedCount > maxSize){                                  throw new DataSizeExceededException();                              }                                                            // Write readed line to store stream.                              bufferedStoreStream.Write(m_pLineBuffer'1'readedCount - 1);                              bufferedStoreStream.Write(m_LineBreak'0'm_LineBreak.Length);                                                      }                          // Normal line.                          else{                              // Maximum allowed size exceeded.                              if(totalReadedCount > maxSize){                                  throw new DataSizeExceededException();                                                              }                                                            // Write readed line to store stream.                              bufferedStoreStream.Write(m_pLineBuffer'0'readedCount);                              bufferedStoreStream.Write(m_LineBreak'0'm_LineBreak.Length);                                                      }                                            // Read next line.                          readedCount = this.ReadLineInternal(m_pLineBuffer'SizeExceededAction.JunkAndThrowException'out rawReadedCount'false);                      }                  }                  bufferedStoreStream.Flush();                    // Log                  if(this.Logger != null){                      this.Logger.AddRead(totalReadedCount'null);                  }                    if(lineSizeExceeded){                      throw new LineSizeExceededException();                  }                  if(!isPeriodTerminated){                      throw new IncompleteDataException("Source stream was reached end of stream and data is not period terminated !");                  }                  if(totalReadedCount > maxSize){                      throw new DataSizeExceededException();                  }                    return totalReadedCount;              }              finally{                  m_IsReadActive = false;              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginWrite,The following statement contains a magic number: m_pBeginWrite_Buffer   = new byte[32000];
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,Write,The following statement contains a magic number: try{                  byte[] buffer           = new byte[32000];                  int    totalReadedCount = 0;                  int    readedCount      = 0;                  while(totalReadedCount < count){                      // Read data block                      readedCount = stream.Read(buffer'0'Math.Min(buffer.Length'count - totalReadedCount));                        // We reached end of stream' no more data. That means we didn't get so much data than requested.                      if(readedCount == 0){                          throw new IncompleteDataException("Stream reached end of stream before we got requested count of data !");                      }                      totalReadedCount += readedCount;                        // Write readed data to source stream.                      m_pStream.Write(buffer'0'readedCount);                  }                  m_pStream.Flush();                    // Log                  if(this.Logger != null){                      this.Logger.AddWrite(count'null);                  }              }              finally{                  m_IsWriteActive = false;              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,BeginWriteAll,The following statement contains a magic number: m_pBeginWriteAll_Buffer   = new byte[32000];
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,WriteAll,The following statement contains a magic number: try{                  byte[] buffer           = new byte[32000];                  int    totalReadedCount = 0;                  int    readedCount      = 0;                  while(readedCount > 0){                      // Read data block                      readedCount = stream.Read(buffer'0'buffer.Length);                        // We reached end of stream' no more data.                      if(readedCount == 0){                          break;                      }                      // We have exceeded maximum allowed data size.                      else if((totalReadedCount + readedCount) > maxSize){                          throw new DataSizeExceededException();                      }                      totalReadedCount += readedCount;                        // Write readed data to source stream.                      m_pStream.Write(buffer'0'readedCount);                  }                    // Log                  if(this.Logger != null){                      this.Logger.AddWrite(totalReadedCount'null);                  }                    return totalReadedCount;              }              finally{                  m_IsWriteActive = false;              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,WritePeriodTerminated,The following statement contains a magic number: try{                                  BufferedStream bufferedStoreStream = new BufferedStream(m_pStream'32000);                  StreamHelper   reader              = new StreamHelper(stream);                  int            totalWrittenCount   = 0;                  int            readedCount         = 0;                  int            rawReadedCount      = 0;                  while(true){                      // Read data block.                      readedCount = this.ReadLineInternal(m_pLineBuffer'SizeExceededAction.ThrowException'out rawReadedCount'false);                        // We reached end of stream' no more data.                      if(readedCount == 0){                          break;                      }                        // Maximum allowed data size exceeded.                      if((totalWrittenCount + rawReadedCount) > maxSize){                          throw new DataSizeExceededException();                      }                        // If line starts with period(.)' additional period is added.                      if(m_pLineBuffer[0] == '.'){                          bufferedStoreStream.WriteByte((byte)'.');                          totalWrittenCount++;                      }                        // Write readed line to buffered stream.                      bufferedStoreStream.Write(m_pLineBuffer'0'readedCount);                      bufferedStoreStream.Write(m_LineBreak'0'm_LineBreak.Length);                      totalWrittenCount += (readedCount + m_LineBreak.Length);                  }                                                    // Write terminator ".<CRLF>". We have start <CRLF> already in stream.                  bufferedStoreStream.Write(new byte[]{(byte)'.''(byte)'\r''(byte)'\n'}'0'3);                  bufferedStoreStream.Flush();                  m_pStream.Flush();                    // Log                  if(this.Logger != null){                      this.Logger.AddWrite(totalWrittenCount'null);                  }                    return totalWrittenCount;              }              finally{                  m_IsWriteActive = false;              }
Magic Number,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,WritePeriodTerminated,The following statement contains a magic number: try{                                  BufferedStream bufferedStoreStream = new BufferedStream(m_pStream'32000);                  StreamHelper   reader              = new StreamHelper(stream);                  int            totalWrittenCount   = 0;                  int            readedCount         = 0;                  int            rawReadedCount      = 0;                  while(true){                      // Read data block.                      readedCount = this.ReadLineInternal(m_pLineBuffer'SizeExceededAction.ThrowException'out rawReadedCount'false);                        // We reached end of stream' no more data.                      if(readedCount == 0){                          break;                      }                        // Maximum allowed data size exceeded.                      if((totalWrittenCount + rawReadedCount) > maxSize){                          throw new DataSizeExceededException();                      }                        // If line starts with period(.)' additional period is added.                      if(m_pLineBuffer[0] == '.'){                          bufferedStoreStream.WriteByte((byte)'.');                          totalWrittenCount++;                      }                        // Write readed line to buffered stream.                      bufferedStoreStream.Write(m_pLineBuffer'0'readedCount);                      bufferedStoreStream.Write(m_LineBreak'0'm_LineBreak.Length);                      totalWrittenCount += (readedCount + m_LineBreak.Length);                  }                                                    // Write terminator ".<CRLF>". We have start <CRLF> already in stream.                  bufferedStoreStream.Write(new byte[]{(byte)'.''(byte)'\r''(byte)'\n'}'0'3);                  bufferedStoreStream.Flush();                  m_pStream.Flush();                    // Log                  if(this.Logger != null){                      this.Logger.AddWrite(totalWrittenCount'null);                  }                    return totalWrittenCount;              }              finally{                  m_IsWriteActive = false;              }
Magic Number,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,_ToStreamReader,The following statement contains a magic number: m_pBufferedStream = new BufferedStream(m_pStoreStream'32000);
Magic Number,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,_ToStreamReader,The following statement contains a magic number: m_pBuffer         = new byte[32000];
Magic Number,LumiSoft.Net.IO,_ToStreamReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,_ToStreamReader,The following statement contains a magic number: m_pLineBuffer     = new byte[4096];
Magic Number,LumiSoft.Net.Mail,Mail_h_AddressList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_AddressList.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_AddressList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_AddressList.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.Mail,Mail_h_Mailbox,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Mailbox.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_Mailbox,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Mailbox.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.Mail,Mail_h_MailboxList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_MailboxList.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_MailboxList,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_MailboxList.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.Mail,Mail_h_ReturnPath,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_ReturnPath.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_ReturnPath,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_ReturnPath.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.Mail,Mail_h_Received,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Received.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.Mail,Mail_h_Received,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Received.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.Mail,Mail_h_Received,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Received.cs,Parse,The following statement contains a magic number: while(true){                  string word = r.Word();                  // We processed all data.                  if(word == null && r.Available == 0){                      break;                  }                  // We have comment' just eat it.                  else if(r.StartsWith("(")){                      r.ReadParenthesized();                  }                  // We have date-time.                  else if(r.StartsWith(";")){                      // Eat ';'                      r.Char(false);                        retVal.m_Time = MIME_Utils.ParseRfc2822DateTime(r.ToEnd());                  }                  else{                      // We have some unexpected char like: .'= ... . Just eat it.                      if(word == null){                          r.Char(true);                          continue;                      }                        word = word.ToUpperInvariant();                        if(word == "FROM"){                          retVal.m_From = r.DotAtom();                            r.ToFirstChar();                          if(r.StartsWith("(")){                              string[] parts = r.ReadParenthesized().Split(' ');                              if(parts.Length == 1){                                  if(Net_Utils.IsIPAddress(parts[0])){                                      retVal.m_pFrom_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[0])'null);                                  }                              }                              else if(parts.Length == 2){                                  if(Net_Utils.IsIPAddress(parts[1])){                                      retVal.m_pFrom_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[1])'parts[0]);                                  }                              }                          }                      }                      else if(word == "BY"){                          retVal.m_By = r.DotAtom();                            r.ToFirstChar();                          if(r.StartsWith("(")){                              string[] parts = r.ReadParenthesized().Split(' ');                              if(parts.Length == 1){                                  if(Net_Utils.IsIPAddress(parts[0])){                                      retVal.m_pBy_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[0])'null);                                  }                              }                              else if(parts.Length == 2){                                  if(Net_Utils.IsIPAddress(parts[1])){                                      retVal.m_pBy_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[1])'parts[0]);                                  }                              }                          }                      }                      else if(word == "VIA"){                          retVal.m_Via = r.Word();                      }                      else if(word == "WITH"){                          retVal.m_With = r.Word();                      }                      else if(word == "ID"){                          // msg-id = [CFWS] "<" id-left "@" id-right ">" [CFWS]                            if(r.StartsWith("<")){                              retVal.m_ID = r.ReadParenthesized();                          }                          else{                              retVal.m_ID = r.Atom();                          }                      }                      else if(word == "FOR"){                          r.ToFirstChar();                            // path / angle-address                          if(r.StartsWith("<")){                              retVal.m_For = r.ReadParenthesized();                          }                          else{                              string mailbox = Mail_Utils.SMTP_Mailbox(r);                              if(mailbox == null){                                  throw new ParseException("Invalid Received: For parameter value '" + r.ToEnd() + "'.");                              }                              retVal.m_For = mailbox;                            }                      }                      // Unknown' just eat value.                      else{                           r.Word();                      }                  }              }
Magic Number,LumiSoft.Net.Mail,Mail_h_Received,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Mail\Mail_h_Received.cs,Parse,The following statement contains a magic number: while(true){                  string word = r.Word();                  // We processed all data.                  if(word == null && r.Available == 0){                      break;                  }                  // We have comment' just eat it.                  else if(r.StartsWith("(")){                      r.ReadParenthesized();                  }                  // We have date-time.                  else if(r.StartsWith(";")){                      // Eat ';'                      r.Char(false);                        retVal.m_Time = MIME_Utils.ParseRfc2822DateTime(r.ToEnd());                  }                  else{                      // We have some unexpected char like: .'= ... . Just eat it.                      if(word == null){                          r.Char(true);                          continue;                      }                        word = word.ToUpperInvariant();                        if(word == "FROM"){                          retVal.m_From = r.DotAtom();                            r.ToFirstChar();                          if(r.StartsWith("(")){                              string[] parts = r.ReadParenthesized().Split(' ');                              if(parts.Length == 1){                                  if(Net_Utils.IsIPAddress(parts[0])){                                      retVal.m_pFrom_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[0])'null);                                  }                              }                              else if(parts.Length == 2){                                  if(Net_Utils.IsIPAddress(parts[1])){                                      retVal.m_pFrom_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[1])'parts[0]);                                  }                              }                          }                      }                      else if(word == "BY"){                          retVal.m_By = r.DotAtom();                            r.ToFirstChar();                          if(r.StartsWith("(")){                              string[] parts = r.ReadParenthesized().Split(' ');                              if(parts.Length == 1){                                  if(Net_Utils.IsIPAddress(parts[0])){                                      retVal.m_pBy_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[0])'null);                                  }                              }                              else if(parts.Length == 2){                                  if(Net_Utils.IsIPAddress(parts[1])){                                      retVal.m_pBy_TcpInfo = new Mail_t_TcpInfo(IPAddress.Parse(parts[1])'parts[0]);                                  }                              }                          }                      }                      else if(word == "VIA"){                          retVal.m_Via = r.Word();                      }                      else if(word == "WITH"){                          retVal.m_With = r.Word();                      }                      else if(word == "ID"){                          // msg-id = [CFWS] "<" id-left "@" id-right ">" [CFWS]                            if(r.StartsWith("<")){                              retVal.m_ID = r.ReadParenthesized();                          }                          else{                              retVal.m_ID = r.Atom();                          }                      }                      else if(word == "FOR"){                          r.ToFirstChar();                            // path / angle-address                          if(r.StartsWith("<")){                              retVal.m_For = r.ReadParenthesized();                          }                          else{                              string mailbox = Mail_Utils.SMTP_Mailbox(r);                              if(mailbox == null){                                  throw new ParseException("Invalid Received: For parameter value '" + r.ToEnd() + "'.");                              }                              retVal.m_For = mailbox;                            }                      }                      // Unknown' just eat value.                      else{                           r.Word();                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_b_Application,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Application.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Audio,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Audio.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Image,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Image.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Message.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,_MultipartReader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Multipart.cs,_MultipartReader,The following statement contains a magic number: m_pReadLineOP   = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.ThrowException);
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,MIME_b_SinglepartBase,The following statement contains a magic number: m_pEncodedDataStream = new FileStream(Path.GetTempFileName()'FileMode.Create'FileAccess.ReadWrite'FileShare.None'32000'FileOptions.DeleteOnClose);
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,ToStream,The following statement contains a magic number: Net_Utils.StreamCopy(GetEncodedDataStream()'stream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,SetEncodedData,The following statement contains a magic number: Net_Utils.StreamCopy(stream'm_pEncodedDataStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,SetEncodedData,The following statement contains a magic number: if(m_pEncodedDataStream.Length >= 2){                  m_pEncodedDataStream.Position = m_pEncodedDataStream.Length - 2;              }
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,SetEncodedData,The following statement contains a magic number: if(m_pEncodedDataStream.Length >= 2){                  m_pEncodedDataStream.Position = m_pEncodedDataStream.Length - 2;              }
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,SetEncodedData,The following statement contains a magic number: if(m_pEncodedDataStream.ReadByte() != '\r' && m_pEncodedDataStream.ReadByte() != '\n'){                  m_pEncodedDataStream.Write(new byte[]{(byte)'\r''(byte)'\n'}'0'2);              }
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,SetData,The following statement contains a magic number: if(transferEncoding == MIME_TransferEncodings.QuotedPrintable){                  using(FileStream fs = File.Create(Path.GetTempFileName())){                      QuotedPrintableStream encoder = new QuotedPrintableStream(new SmartStream(fs'false)'FileAccess.ReadWrite);                      Net_Utils.StreamCopy(stream'encoder'32000);                      encoder.Flush();                      fs.Position = 0;                      SetEncodedData(transferEncoding'fs);                  }              }              else if(transferEncoding == MIME_TransferEncodings.Base64){                  using(FileStream fs = File.Create(Path.GetTempFileName())){                      Base64Stream encoder = new Base64Stream(fs'false'true'FileAccess.ReadWrite);                                                           Net_Utils.StreamCopy(stream'encoder'32000);                      encoder.Finish();                      fs.Position = 0;                      SetEncodedData(transferEncoding'fs);                  }              }                          else if(transferEncoding == MIME_TransferEncodings.Binary){                  SetEncodedData(transferEncoding'stream);              }              else if(transferEncoding == MIME_TransferEncodings.EightBit){                  SetEncodedData(transferEncoding'stream);              }              else if(transferEncoding == MIME_TransferEncodings.SevenBit){                  SetEncodedData(transferEncoding'stream);              }              else{                  throw new NotSupportedException("Not supported Content-Transfer-Encoding '" + transferEncoding + "'.");              }
Magic Number,LumiSoft.Net.MIME,MIME_b_SinglepartBase,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_SinglepartBase.cs,SetData,The following statement contains a magic number: if(transferEncoding == MIME_TransferEncodings.QuotedPrintable){                  using(FileStream fs = File.Create(Path.GetTempFileName())){                      QuotedPrintableStream encoder = new QuotedPrintableStream(new SmartStream(fs'false)'FileAccess.ReadWrite);                      Net_Utils.StreamCopy(stream'encoder'32000);                      encoder.Flush();                      fs.Position = 0;                      SetEncodedData(transferEncoding'fs);                  }              }              else if(transferEncoding == MIME_TransferEncodings.Base64){                  using(FileStream fs = File.Create(Path.GetTempFileName())){                      Base64Stream encoder = new Base64Stream(fs'false'true'FileAccess.ReadWrite);                                                           Net_Utils.StreamCopy(stream'encoder'32000);                      encoder.Finish();                      fs.Position = 0;                      SetEncodedData(transferEncoding'fs);                  }              }                          else if(transferEncoding == MIME_TransferEncodings.Binary){                  SetEncodedData(transferEncoding'stream);              }              else if(transferEncoding == MIME_TransferEncodings.EightBit){                  SetEncodedData(transferEncoding'stream);              }              else if(transferEncoding == MIME_TransferEncodings.SevenBit){                  SetEncodedData(transferEncoding'stream);              }              else{                  throw new NotSupportedException("Not supported Content-Transfer-Encoding '" + transferEncoding + "'.");              }
Magic Number,LumiSoft.Net.MIME,MIME_b_Text,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Text.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_b_Video,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_b_Video.cs,Parse,The following statement contains a magic number: Net_Utils.StreamCopy(stream'retVal.EncodedStream'32000);
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,MustEncode,The following statement contains a magic number: foreach(char c in text){                  if(c > 127){                      return true;                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The following statement contains a magic number: if(MustEncode(text)){                  StringBuilder retVal             = new StringBuilder();                  byte[]        data               = charset.GetBytes(text);                  int           maxEncodedTextSize = 75 - ((string)("=?" + charset.WebName + "?" + encoding.ToString() + "?" + "?=")).Length;                    #region B encode                    if(encoding == MIME_EncodedWordEncoding.B){                      retVal.Append("=?" + charset.WebName + "?B?");                      int    stored = 0;                      string base64 = Convert.ToBase64String(data);                      for(int i=0;i<base64.Length;i+=4){                          // Encoding buffer full' create new encoded-word.                          if(stored + 4 > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?B?");                              stored = 0;                          }                            retVal.Append(base64'i'4);                          stored += 4;                      }                      retVal.Append("?=");                  }                    #endregion                    #region Q encode                    else{                      retVal.Append("=?" + charset.WebName + "?Q?");                      int stored = 0;                      foreach(byte b in data){                          string val = null;                          // We need to encode byte. Defined in RFC 2047 4.2.                          if(b > 127 || b == '=' || b == '?' || b == '_' || b == ' '){                              val = "=" + b.ToString("X2");                          }                          else{                              val = ((char)b).ToString();                          }                            // Encoding buffer full' create new encoded-word.                          if(stored + val.Length > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?Q?");                              stored = 0;                          }                            retVal.Append(val);                          stored += val.Length;                      }                      retVal.Append("?=");                  }                    #endregion                    return retVal.ToString();              }              else{                  return text;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The following statement contains a magic number: if(MustEncode(text)){                  StringBuilder retVal             = new StringBuilder();                  byte[]        data               = charset.GetBytes(text);                  int           maxEncodedTextSize = 75 - ((string)("=?" + charset.WebName + "?" + encoding.ToString() + "?" + "?=")).Length;                    #region B encode                    if(encoding == MIME_EncodedWordEncoding.B){                      retVal.Append("=?" + charset.WebName + "?B?");                      int    stored = 0;                      string base64 = Convert.ToBase64String(data);                      for(int i=0;i<base64.Length;i+=4){                          // Encoding buffer full' create new encoded-word.                          if(stored + 4 > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?B?");                              stored = 0;                          }                            retVal.Append(base64'i'4);                          stored += 4;                      }                      retVal.Append("?=");                  }                    #endregion                    #region Q encode                    else{                      retVal.Append("=?" + charset.WebName + "?Q?");                      int stored = 0;                      foreach(byte b in data){                          string val = null;                          // We need to encode byte. Defined in RFC 2047 4.2.                          if(b > 127 || b == '=' || b == '?' || b == '_' || b == ' '){                              val = "=" + b.ToString("X2");                          }                          else{                              val = ((char)b).ToString();                          }                            // Encoding buffer full' create new encoded-word.                          if(stored + val.Length > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?Q?");                              stored = 0;                          }                            retVal.Append(val);                          stored += val.Length;                      }                      retVal.Append("?=");                  }                    #endregion                    return retVal.ToString();              }              else{                  return text;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The following statement contains a magic number: if(MustEncode(text)){                  StringBuilder retVal             = new StringBuilder();                  byte[]        data               = charset.GetBytes(text);                  int           maxEncodedTextSize = 75 - ((string)("=?" + charset.WebName + "?" + encoding.ToString() + "?" + "?=")).Length;                    #region B encode                    if(encoding == MIME_EncodedWordEncoding.B){                      retVal.Append("=?" + charset.WebName + "?B?");                      int    stored = 0;                      string base64 = Convert.ToBase64String(data);                      for(int i=0;i<base64.Length;i+=4){                          // Encoding buffer full' create new encoded-word.                          if(stored + 4 > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?B?");                              stored = 0;                          }                            retVal.Append(base64'i'4);                          stored += 4;                      }                      retVal.Append("?=");                  }                    #endregion                    #region Q encode                    else{                      retVal.Append("=?" + charset.WebName + "?Q?");                      int stored = 0;                      foreach(byte b in data){                          string val = null;                          // We need to encode byte. Defined in RFC 2047 4.2.                          if(b > 127 || b == '=' || b == '?' || b == '_' || b == ' '){                              val = "=" + b.ToString("X2");                          }                          else{                              val = ((char)b).ToString();                          }                            // Encoding buffer full' create new encoded-word.                          if(stored + val.Length > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?Q?");                              stored = 0;                          }                            retVal.Append(val);                          stored += val.Length;                      }                      retVal.Append("?=");                  }                    #endregion                    return retVal.ToString();              }              else{                  return text;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The following statement contains a magic number: if(MustEncode(text)){                  StringBuilder retVal             = new StringBuilder();                  byte[]        data               = charset.GetBytes(text);                  int           maxEncodedTextSize = 75 - ((string)("=?" + charset.WebName + "?" + encoding.ToString() + "?" + "?=")).Length;                    #region B encode                    if(encoding == MIME_EncodedWordEncoding.B){                      retVal.Append("=?" + charset.WebName + "?B?");                      int    stored = 0;                      string base64 = Convert.ToBase64String(data);                      for(int i=0;i<base64.Length;i+=4){                          // Encoding buffer full' create new encoded-word.                          if(stored + 4 > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?B?");                              stored = 0;                          }                            retVal.Append(base64'i'4);                          stored += 4;                      }                      retVal.Append("?=");                  }                    #endregion                    #region Q encode                    else{                      retVal.Append("=?" + charset.WebName + "?Q?");                      int stored = 0;                      foreach(byte b in data){                          string val = null;                          // We need to encode byte. Defined in RFC 2047 4.2.                          if(b > 127 || b == '=' || b == '?' || b == '_' || b == ' '){                              val = "=" + b.ToString("X2");                          }                          else{                              val = ((char)b).ToString();                          }                            // Encoding buffer full' create new encoded-word.                          if(stored + val.Length > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?Q?");                              stored = 0;                          }                            retVal.Append(val);                          stored += val.Length;                      }                      retVal.Append("?=");                  }                    #endregion                    return retVal.ToString();              }              else{                  return text;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The following statement contains a magic number: if(MustEncode(text)){                  StringBuilder retVal             = new StringBuilder();                  byte[]        data               = charset.GetBytes(text);                  int           maxEncodedTextSize = 75 - ((string)("=?" + charset.WebName + "?" + encoding.ToString() + "?" + "?=")).Length;                    #region B encode                    if(encoding == MIME_EncodedWordEncoding.B){                      retVal.Append("=?" + charset.WebName + "?B?");                      int    stored = 0;                      string base64 = Convert.ToBase64String(data);                      for(int i=0;i<base64.Length;i+=4){                          // Encoding buffer full' create new encoded-word.                          if(stored + 4 > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?B?");                              stored = 0;                          }                            retVal.Append(base64'i'4);                          stored += 4;                      }                      retVal.Append("?=");                  }                    #endregion                    #region Q encode                    else{                      retVal.Append("=?" + charset.WebName + "?Q?");                      int stored = 0;                      foreach(byte b in data){                          string val = null;                          // We need to encode byte. Defined in RFC 2047 4.2.                          if(b > 127 || b == '=' || b == '?' || b == '_' || b == ' '){                              val = "=" + b.ToString("X2");                          }                          else{                              val = ((char)b).ToString();                          }                            // Encoding buffer full' create new encoded-word.                          if(stored + val.Length > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?Q?");                              stored = 0;                          }                            retVal.Append(val);                          stored += val.Length;                      }                      retVal.Append("?=");                  }                    #endregion                    return retVal.ToString();              }              else{                  return text;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,EncodeS,The following statement contains a magic number: if(MustEncode(text)){                  StringBuilder retVal             = new StringBuilder();                  byte[]        data               = charset.GetBytes(text);                  int           maxEncodedTextSize = 75 - ((string)("=?" + charset.WebName + "?" + encoding.ToString() + "?" + "?=")).Length;                    #region B encode                    if(encoding == MIME_EncodedWordEncoding.B){                      retVal.Append("=?" + charset.WebName + "?B?");                      int    stored = 0;                      string base64 = Convert.ToBase64String(data);                      for(int i=0;i<base64.Length;i+=4){                          // Encoding buffer full' create new encoded-word.                          if(stored + 4 > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?B?");                              stored = 0;                          }                            retVal.Append(base64'i'4);                          stored += 4;                      }                      retVal.Append("?=");                  }                    #endregion                    #region Q encode                    else{                      retVal.Append("=?" + charset.WebName + "?Q?");                      int stored = 0;                      foreach(byte b in data){                          string val = null;                          // We need to encode byte. Defined in RFC 2047 4.2.                          if(b > 127 || b == '=' || b == '?' || b == '_' || b == ' '){                              val = "=" + b.ToString("X2");                          }                          else{                              val = ((char)b).ToString();                          }                            // Encoding buffer full' create new encoded-word.                          if(stored + val.Length > maxEncodedTextSize){                              retVal.Append("?=\r\n =?" + charset.WebName + "?Q?");                              stored = 0;                          }                            retVal.Append(val);                          stored += val.Length;                      }                      retVal.Append("?=");                  }                    #endregion                    return retVal.ToString();              }              else{                  return text;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,DecodeSWord,The following statement contains a magic number: try{                  string[] parts = word.Split('?');                  // Not encoded-word.                  if(parts.Length != 5){                      return word;                  }                  else if(parts[2].ToUpper() == "Q"){                      return Core.QDecode(Encoding.GetEncoding(parts[1].Split('*')[0])'parts[3]);                  }                  else if(parts[2].ToUpper() == "B"){                                              return Encoding.GetEncoding(parts[1].Split('*')[0]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3])));                  }                  // Unknown encoding.                  else{                      return word;                  }              }              catch{                  // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                  return word;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,DecodeSWord,The following statement contains a magic number: try{                  string[] parts = word.Split('?');                  // Not encoded-word.                  if(parts.Length != 5){                      return word;                  }                  else if(parts[2].ToUpper() == "Q"){                      return Core.QDecode(Encoding.GetEncoding(parts[1].Split('*')[0])'parts[3]);                  }                  else if(parts[2].ToUpper() == "B"){                                              return Encoding.GetEncoding(parts[1].Split('*')[0]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3])));                  }                  // Unknown encoding.                  else{                      return word;                  }              }              catch{                  // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                  return word;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,DecodeSWord,The following statement contains a magic number: try{                  string[] parts = word.Split('?');                  // Not encoded-word.                  if(parts.Length != 5){                      return word;                  }                  else if(parts[2].ToUpper() == "Q"){                      return Core.QDecode(Encoding.GetEncoding(parts[1].Split('*')[0])'parts[3]);                  }                  else if(parts[2].ToUpper() == "B"){                                              return Encoding.GetEncoding(parts[1].Split('*')[0]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3])));                  }                  // Unknown encoding.                  else{                      return word;                  }              }              catch{                  // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                  return word;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,DecodeSWord,The following statement contains a magic number: try{                  string[] parts = word.Split('?');                  // Not encoded-word.                  if(parts.Length != 5){                      return word;                  }                  else if(parts[2].ToUpper() == "Q"){                      return Core.QDecode(Encoding.GetEncoding(parts[1].Split('*')[0])'parts[3]);                  }                  else if(parts[2].ToUpper() == "B"){                                              return Encoding.GetEncoding(parts[1].Split('*')[0]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3])));                  }                  // Unknown encoding.                  else{                      return word;                  }              }              catch{                  // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                  return word;              }
Magic Number,LumiSoft.Net.MIME,MIME_Encoding_EncodedWord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Encoding_EncodedWord.cs,DecodeSWord,The following statement contains a magic number: try{                  string[] parts = word.Split('?');                  // Not encoded-word.                  if(parts.Length != 5){                      return word;                  }                  else if(parts[2].ToUpper() == "Q"){                      return Core.QDecode(Encoding.GetEncoding(parts[1].Split('*')[0])'parts[3]);                  }                  else if(parts[2].ToUpper() == "B"){                                              return Encoding.GetEncoding(parts[1].Split('*')[0]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3])));                  }                  // Unknown encoding.                  else{                      return word;                  }              }              catch{                  // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                  return word;              }
Magic Number,LumiSoft.Net.MIME,MIME_h_Collection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Collection.cs,Parse,The following statement contains a magic number: SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.ThrowException);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentDisposition,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ContentDisposition.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentDisposition,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ContentDisposition.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid Content-Type: header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ContentType.cs,MIME_h_ContentType,The following statement contains a magic number: string[] type_subtype = mediaType.Split(new char[]{'/''}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ContentType.cs,MIME_h_ContentType,The following statement contains a magic number: if(type_subtype.Length == 2){                  if(type_subtype[0] == "" || !MIME_Reader.IsToken(type_subtype[0])){                      throw new ArgumentException("Invalid argument 'mediaType' value '" + mediaType + "'' value must be token.");                  }                                  if(type_subtype[1] == "" || !MIME_Reader.IsToken(type_subtype[1])){                      throw new ArgumentException("Invalid argument 'mediaType' value '" + mediaType + "'' value must be token.");                  }                    m_Type    = type_subtype[0];                  m_SubType = type_subtype[1];              }              else{                  throw new ArgumentException("Invalid argument 'mediaType' value '" + mediaType + "'.");              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ContentType.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ContentType,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ContentType.cs,Parse,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid Content-Type: header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.MIME,MIME_h_Provider,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Provider.cs,Parse,The following statement contains a magic number: string[] name_value  = field.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,ToString,The following statement contains a magic number: foreach(MIME_h_Parameter parameter in this.ToArray()){                  if(string.IsNullOrEmpty(parameter.Value)){                      retVal.Append("; " + parameter.Name);                  }                  // We don't need to encode or split value.                  else if((charset == null || Core.IsAscii(parameter.Value)) && parameter.Value.Length < 76){                      retVal.Append("; " + parameter.Name + "=" + TextUtils.QuoteString(parameter.Value));                  }                  // We need to encode/split value.                  else{                      byte[] byteValue = charset.GetBytes(parameter.Value);                        List<string> values = new List<string>();                                  // Do encoding/splitting.                      int    offset    = 0;                      char[] valueBuff = new char[50];                      foreach(byte b in byteValue){                                                                  // We need split value as RFC 2231 says.                          if(offset >= (50 - 3)){                              values.Add(new string(valueBuff'0'offset));                              offset = 0;                          }                                                    // Normal char' we don't need to encode.                          if(MIME_Reader.IsAttributeChar((char)b)){                              valueBuff[offset++] = (char)b;                          }                          // We need to encode byte as %X2.                          else{                              valueBuff[offset++] = '%';                              valueBuff[offset++] = (b >> 4).ToString("X")[0];                              valueBuff[offset++] = (b & 0xF).ToString("X")[0];                          }                      }                      // Add pending buffer value.                      if(offset > 0){                          values.Add(new string(valueBuff'0'offset));                      }                        for(int i=0;i<values.Count;i++){                          // Only fist value entry has charset and language info.                          if(charset != null && i == 0){                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + charset.WebName + "''" + values[i]);                          }                          else{                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + values[i]);                          }                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,ToString,The following statement contains a magic number: foreach(MIME_h_Parameter parameter in this.ToArray()){                  if(string.IsNullOrEmpty(parameter.Value)){                      retVal.Append("; " + parameter.Name);                  }                  // We don't need to encode or split value.                  else if((charset == null || Core.IsAscii(parameter.Value)) && parameter.Value.Length < 76){                      retVal.Append("; " + parameter.Name + "=" + TextUtils.QuoteString(parameter.Value));                  }                  // We need to encode/split value.                  else{                      byte[] byteValue = charset.GetBytes(parameter.Value);                        List<string> values = new List<string>();                                  // Do encoding/splitting.                      int    offset    = 0;                      char[] valueBuff = new char[50];                      foreach(byte b in byteValue){                                                                  // We need split value as RFC 2231 says.                          if(offset >= (50 - 3)){                              values.Add(new string(valueBuff'0'offset));                              offset = 0;                          }                                                    // Normal char' we don't need to encode.                          if(MIME_Reader.IsAttributeChar((char)b)){                              valueBuff[offset++] = (char)b;                          }                          // We need to encode byte as %X2.                          else{                              valueBuff[offset++] = '%';                              valueBuff[offset++] = (b >> 4).ToString("X")[0];                              valueBuff[offset++] = (b & 0xF).ToString("X")[0];                          }                      }                      // Add pending buffer value.                      if(offset > 0){                          values.Add(new string(valueBuff'0'offset));                      }                        for(int i=0;i<values.Count;i++){                          // Only fist value entry has charset and language info.                          if(charset != null && i == 0){                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + charset.WebName + "''" + values[i]);                          }                          else{                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + values[i]);                          }                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,ToString,The following statement contains a magic number: foreach(MIME_h_Parameter parameter in this.ToArray()){                  if(string.IsNullOrEmpty(parameter.Value)){                      retVal.Append("; " + parameter.Name);                  }                  // We don't need to encode or split value.                  else if((charset == null || Core.IsAscii(parameter.Value)) && parameter.Value.Length < 76){                      retVal.Append("; " + parameter.Name + "=" + TextUtils.QuoteString(parameter.Value));                  }                  // We need to encode/split value.                  else{                      byte[] byteValue = charset.GetBytes(parameter.Value);                        List<string> values = new List<string>();                                  // Do encoding/splitting.                      int    offset    = 0;                      char[] valueBuff = new char[50];                      foreach(byte b in byteValue){                                                                  // We need split value as RFC 2231 says.                          if(offset >= (50 - 3)){                              values.Add(new string(valueBuff'0'offset));                              offset = 0;                          }                                                    // Normal char' we don't need to encode.                          if(MIME_Reader.IsAttributeChar((char)b)){                              valueBuff[offset++] = (char)b;                          }                          // We need to encode byte as %X2.                          else{                              valueBuff[offset++] = '%';                              valueBuff[offset++] = (b >> 4).ToString("X")[0];                              valueBuff[offset++] = (b & 0xF).ToString("X")[0];                          }                      }                      // Add pending buffer value.                      if(offset > 0){                          values.Add(new string(valueBuff'0'offset));                      }                        for(int i=0;i<values.Count;i++){                          // Only fist value entry has charset and language info.                          if(charset != null && i == 0){                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + charset.WebName + "''" + values[i]);                          }                          else{                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + values[i]);                          }                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,ToString,The following statement contains a magic number: foreach(MIME_h_Parameter parameter in this.ToArray()){                  if(string.IsNullOrEmpty(parameter.Value)){                      retVal.Append("; " + parameter.Name);                  }                  // We don't need to encode or split value.                  else if((charset == null || Core.IsAscii(parameter.Value)) && parameter.Value.Length < 76){                      retVal.Append("; " + parameter.Name + "=" + TextUtils.QuoteString(parameter.Value));                  }                  // We need to encode/split value.                  else{                      byte[] byteValue = charset.GetBytes(parameter.Value);                        List<string> values = new List<string>();                                  // Do encoding/splitting.                      int    offset    = 0;                      char[] valueBuff = new char[50];                      foreach(byte b in byteValue){                                                                  // We need split value as RFC 2231 says.                          if(offset >= (50 - 3)){                              values.Add(new string(valueBuff'0'offset));                              offset = 0;                          }                                                    // Normal char' we don't need to encode.                          if(MIME_Reader.IsAttributeChar((char)b)){                              valueBuff[offset++] = (char)b;                          }                          // We need to encode byte as %X2.                          else{                              valueBuff[offset++] = '%';                              valueBuff[offset++] = (b >> 4).ToString("X")[0];                              valueBuff[offset++] = (b & 0xF).ToString("X")[0];                          }                      }                      // Add pending buffer value.                      if(offset > 0){                          values.Add(new string(valueBuff'0'offset));                      }                        for(int i=0;i<values.Count;i++){                          // Only fist value entry has charset and language info.                          if(charset != null && i == 0){                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + charset.WebName + "''" + values[i]);                          }                          else{                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + values[i]);                          }                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,ToString,The following statement contains a magic number: foreach(MIME_h_Parameter parameter in this.ToArray()){                  if(string.IsNullOrEmpty(parameter.Value)){                      retVal.Append("; " + parameter.Name);                  }                  // We don't need to encode or split value.                  else if((charset == null || Core.IsAscii(parameter.Value)) && parameter.Value.Length < 76){                      retVal.Append("; " + parameter.Name + "=" + TextUtils.QuoteString(parameter.Value));                  }                  // We need to encode/split value.                  else{                      byte[] byteValue = charset.GetBytes(parameter.Value);                        List<string> values = new List<string>();                                  // Do encoding/splitting.                      int    offset    = 0;                      char[] valueBuff = new char[50];                      foreach(byte b in byteValue){                                                                  // We need split value as RFC 2231 says.                          if(offset >= (50 - 3)){                              values.Add(new string(valueBuff'0'offset));                              offset = 0;                          }                                                    // Normal char' we don't need to encode.                          if(MIME_Reader.IsAttributeChar((char)b)){                              valueBuff[offset++] = (char)b;                          }                          // We need to encode byte as %X2.                          else{                              valueBuff[offset++] = '%';                              valueBuff[offset++] = (b >> 4).ToString("X")[0];                              valueBuff[offset++] = (b & 0xF).ToString("X")[0];                          }                      }                      // Add pending buffer value.                      if(offset > 0){                          values.Add(new string(valueBuff'0'offset));                      }                        for(int i=0;i<values.Count;i++){                          // Only fist value entry has charset and language info.                          if(charset != null && i == 0){                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + charset.WebName + "''" + values[i]);                          }                          else{                              retVal.Append("; " + parameter.Name + "*" + i.ToString() + "*=" + values[i]);                          }                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: while(true){                  // End os stream reached.                  if(reader.Peek(true) == -1){                      break;                  }                  // Next parameter start' just eat that char.                  else if(reader.Peek(true) == ';'){                      reader.Char(false);                  }                  else{                      string name = reader.Token();                        string value = "";                      // Parameter value specified.                      if(reader.Peek(true) == '='){                          reader.Char(false);                            string v = reader.Word();                          // Normally value may not be null' but following case: paramName=EOS.                          if(v != null){                              value = v;                          }                      }                                            // RFC 2231 encoded/splitted parameter.                      if(name.IndexOf('*') > -1){                          string[] name_x_no_x = name.Split('*');                          name = name_x_no_x[0];                                                    Encoding      charset     = Encoding.ASCII;                          StringBuilder valueBuffer = new StringBuilder();                          // We must have charset'language'value.                          // Examples:                          //      URL*=utf-8''test;                          //      URL*0*=utf-8''"test";                          if((name_x_no_x.Length == 2 && name_x_no_x[1] == "") || name_x_no_x.Length == 3){                                                          string[] charset_language_value = value.Split('\'');                              charset = Encoding.GetEncoding(charset_language_value[0]);                              valueBuffer.Append(DecodeExtOctet(charset_language_value[2]'charset));                          }                          // No encoding' probably just splitted ASCII value.                          // Example:                          //     URL*0="value1";                          //     URL*1="value2";                          else{                              valueBuffer.Append(value);                          }                            // Read while value continues.                          while(true){                              // End os stream reached.                              if(reader.Peek(true) == -1){                                  break;                              }                              // Next parameter start' just eat that char.                              else if(reader.Peek(true) == ';'){                                  reader.Char(false);                              }                              else{                                  if(!reader.StartsWith(name + "*")){                                      break;                                  }                                  reader.Token();                                    // Parameter value specified.                                  if(reader.Peek(true) == '='){                                      reader.Char(false);                                        string v = reader.Word();                                      // Normally value may not be null' but following case: paramName=EOS.                                      if(v != null){                                          valueBuffer.Append(DecodeExtOctet(v'charset));                                      }                                  }                              }                          }                                                                           this[name] = valueBuffer.ToString();                      }                      // Regular parameter.                      else{                          this[name] = value;                      }                                      }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: while(true){                  // End os stream reached.                  if(reader.Peek(true) == -1){                      break;                  }                  // Next parameter start' just eat that char.                  else if(reader.Peek(true) == ';'){                      reader.Char(false);                  }                  else{                      string name = reader.Token();                        string value = "";                      // Parameter value specified.                      if(reader.Peek(true) == '='){                          reader.Char(false);                            string v = reader.Word();                          // Normally value may not be null' but following case: paramName=EOS.                          if(v != null){                              value = v;                          }                      }                                            // RFC 2231 encoded/splitted parameter.                      if(name.IndexOf('*') > -1){                          string[] name_x_no_x = name.Split('*');                          name = name_x_no_x[0];                                                    Encoding      charset     = Encoding.ASCII;                          StringBuilder valueBuffer = new StringBuilder();                          // We must have charset'language'value.                          // Examples:                          //      URL*=utf-8''test;                          //      URL*0*=utf-8''"test";                          if((name_x_no_x.Length == 2 && name_x_no_x[1] == "") || name_x_no_x.Length == 3){                                                          string[] charset_language_value = value.Split('\'');                              charset = Encoding.GetEncoding(charset_language_value[0]);                              valueBuffer.Append(DecodeExtOctet(charset_language_value[2]'charset));                          }                          // No encoding' probably just splitted ASCII value.                          // Example:                          //     URL*0="value1";                          //     URL*1="value2";                          else{                              valueBuffer.Append(value);                          }                            // Read while value continues.                          while(true){                              // End os stream reached.                              if(reader.Peek(true) == -1){                                  break;                              }                              // Next parameter start' just eat that char.                              else if(reader.Peek(true) == ';'){                                  reader.Char(false);                              }                              else{                                  if(!reader.StartsWith(name + "*")){                                      break;                                  }                                  reader.Token();                                    // Parameter value specified.                                  if(reader.Peek(true) == '='){                                      reader.Char(false);                                        string v = reader.Word();                                      // Normally value may not be null' but following case: paramName=EOS.                                      if(v != null){                                          valueBuffer.Append(DecodeExtOctet(v'charset));                                      }                                  }                              }                          }                                                                           this[name] = valueBuffer.ToString();                      }                      // Regular parameter.                      else{                          this[name] = value;                      }                                      }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,Parse,The following statement contains a magic number: while(true){                  // End os stream reached.                  if(reader.Peek(true) == -1){                      break;                  }                  // Next parameter start' just eat that char.                  else if(reader.Peek(true) == ';'){                      reader.Char(false);                  }                  else{                      string name = reader.Token();                        string value = "";                      // Parameter value specified.                      if(reader.Peek(true) == '='){                          reader.Char(false);                            string v = reader.Word();                          // Normally value may not be null' but following case: paramName=EOS.                          if(v != null){                              value = v;                          }                      }                                            // RFC 2231 encoded/splitted parameter.                      if(name.IndexOf('*') > -1){                          string[] name_x_no_x = name.Split('*');                          name = name_x_no_x[0];                                                    Encoding      charset     = Encoding.ASCII;                          StringBuilder valueBuffer = new StringBuilder();                          // We must have charset'language'value.                          // Examples:                          //      URL*=utf-8''test;                          //      URL*0*=utf-8''"test";                          if((name_x_no_x.Length == 2 && name_x_no_x[1] == "") || name_x_no_x.Length == 3){                                                          string[] charset_language_value = value.Split('\'');                              charset = Encoding.GetEncoding(charset_language_value[0]);                              valueBuffer.Append(DecodeExtOctet(charset_language_value[2]'charset));                          }                          // No encoding' probably just splitted ASCII value.                          // Example:                          //     URL*0="value1";                          //     URL*1="value2";                          else{                              valueBuffer.Append(value);                          }                            // Read while value continues.                          while(true){                              // End os stream reached.                              if(reader.Peek(true) == -1){                                  break;                              }                              // Next parameter start' just eat that char.                              else if(reader.Peek(true) == ';'){                                  reader.Char(false);                              }                              else{                                  if(!reader.StartsWith(name + "*")){                                      break;                                  }                                  reader.Token();                                    // Parameter value specified.                                  if(reader.Peek(true) == '='){                                      reader.Char(false);                                        string v = reader.Word();                                      // Normally value may not be null' but following case: paramName=EOS.                                      if(v != null){                                          valueBuffer.Append(DecodeExtOctet(v'charset));                                      }                                  }                              }                          }                                                                           this[name] = valueBuffer.ToString();                      }                      // Regular parameter.                      else{                          this[name] = value;                      }                                      }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,DecodeExtOctet,The following statement contains a magic number: for(int i=0;i<text.Length;i++){                  if(text[i] == '%'){                      decodedBuffer[offset++] = byte.Parse(text[i + 1].ToString() + text[i + 2].ToString()'System.Globalization.NumberStyles.HexNumber);                      i += 2;                  }                  else{                      decodedBuffer[offset++] = (byte)text[i];                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_ParameterCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_ParameterCollection.cs,DecodeExtOctet,The following statement contains a magic number: for(int i=0;i<text.Length;i++){                  if(text[i] == '%'){                      decodedBuffer[offset++] = byte.Parse(text[i + 1].ToString() + text[i + 2].ToString()'System.Globalization.NumberStyles.HexNumber);                      i += 2;                  }                  else{                      decodedBuffer[offset++] = (byte)text[i];                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_h_Unparsed,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Unparsed.cs,MIME_h_Unparsed,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_Unparsed,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Unparsed.cs,MIME_h_Unparsed,The following statement contains a magic number: if(name_value.Length != 2){                  throw new ParseException("Invalid Content-Type: header field value '" + value + "'.");              }
Magic Number,LumiSoft.Net.MIME,MIME_h_Unstructured,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Unstructured.cs,Parse,The following statement contains a magic number: string[] name_value = value.Split(new char[]{':'}'2);
Magic Number,LumiSoft.Net.MIME,MIME_h_Unstructured,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_h_Unstructured.cs,Parse,The following statement contains a magic number: retVal.m_Value = MIME_Encoding_EncodedWord.DecodeS(MIME_Utils.UnfoldHeader(name_value.Length == 2 ? name_value[1].TrimStart() : ""));
Magic Number,LumiSoft.Net.MIME,MIME_Entity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Entity.cs,ToStream,The following statement contains a magic number: stream.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,EncodedWord,The following statement contains a magic number: while(true){                  string encodedWord = Atom();                  try{                      string[] parts = encodedWord.Split('?');                      if(parts[2].ToUpper() == "Q"){                          retVal.Append(Core.QDecode(Encoding.GetEncoding(parts[1])'parts[3]));                      }                      else if(parts[2].ToUpper() == "B"){                                                  retVal.Append(Encoding.GetEncoding(parts[1]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3]))));                      }                      else{                          throw new Exception("");                      }                  }                  catch{                      // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                      retVal.Append(encodedWord);                  }                    ToFirstChar();                  // encoded-word does not continue.                  if(Peek(false) != '='){                      break;                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,EncodedWord,The following statement contains a magic number: while(true){                  string encodedWord = Atom();                  try{                      string[] parts = encodedWord.Split('?');                      if(parts[2].ToUpper() == "Q"){                          retVal.Append(Core.QDecode(Encoding.GetEncoding(parts[1])'parts[3]));                      }                      else if(parts[2].ToUpper() == "B"){                                                  retVal.Append(Encoding.GetEncoding(parts[1]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3]))));                      }                      else{                          throw new Exception("");                      }                  }                  catch{                      // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                      retVal.Append(encodedWord);                  }                    ToFirstChar();                  // encoded-word does not continue.                  if(Peek(false) != '='){                      break;                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,EncodedWord,The following statement contains a magic number: while(true){                  string encodedWord = Atom();                  try{                      string[] parts = encodedWord.Split('?');                      if(parts[2].ToUpper() == "Q"){                          retVal.Append(Core.QDecode(Encoding.GetEncoding(parts[1])'parts[3]));                      }                      else if(parts[2].ToUpper() == "B"){                                                  retVal.Append(Encoding.GetEncoding(parts[1]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3]))));                      }                      else{                          throw new Exception("");                      }                  }                  catch{                      // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                      retVal.Append(encodedWord);                  }                    ToFirstChar();                  // encoded-word does not continue.                  if(Peek(false) != '='){                      break;                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,EncodedWord,The following statement contains a magic number: while(true){                  string encodedWord = Atom();                  try{                      string[] parts = encodedWord.Split('?');                      if(parts[2].ToUpper() == "Q"){                          retVal.Append(Core.QDecode(Encoding.GetEncoding(parts[1])'parts[3]));                      }                      else if(parts[2].ToUpper() == "B"){                                                  retVal.Append(Encoding.GetEncoding(parts[1]).GetString(Core.Base64Decode(Encoding.Default.GetBytes(parts[3]))));                      }                      else{                          throw new Exception("");                      }                  }                  catch{                      // Failed to parse encoded-word' leave it as is. RFC 2047 6.3.                      retVal.Append(encodedWord);                  }                    ToFirstChar();                  // encoded-word does not continue.                  if(Peek(false) != '='){                      break;                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsToken,The following statement contains a magic number: if(c <= 31 || c == 127){                  return false;              }              else if(c == ' '){                  return false;              }              else{                  foreach(char tsC in tspecials){                      if(tsC == c){                          return false;                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsToken,The following statement contains a magic number: if(c <= 31 || c == 127){                  return false;              }              else if(c == ' '){                  return false;              }              else{                  foreach(char tsC in tspecials){                      if(tsC == c){                          return false;                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAttributeChar,The following statement contains a magic number: if(c <= 31 || c > 127){                  return false;              }              else if(c == ' ' || c == '*' || c == '\'' || c == '%'){                  return false;              }              else{                  foreach(char cS in tspecials){                      if(c == cS){                          return false;                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Reader,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Reader.cs,IsAttributeChar,The following statement contains a magic number: if(c <= 31 || c > 127){                  return false;              }              else if(c == ' ' || c == '*' || c == '\'' || c == '%'){                  return false;              }              else{                  foreach(char cS in tspecials){                      if(c == cS){                          return false;                      }                  }              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MIME_Reader r = new MIME_Reader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // We have RFC 2822 date. For example: +2000.                  if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,CreateMessageID,The following statement contains a magic number: return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">";
Magic Number,LumiSoft.Net.MIME,MIME_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\MIME\MIME_Utils.cs,CreateMessageID,The following statement contains a magic number: return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">";
Magic Number,LumiSoft.Net.Media,AudioOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,AudioOut,The following statement contains a magic number: if(bitsPerSample < 8){                  throw new ArgumentException("Argument 'bitsPerSample' value must be >= 8."'"bitsPerSample");              }
Magic Number,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,WaveOut,The following statement contains a magic number: if(samplesPerSec < 8000){                      throw new ArgumentException("Argument 'samplesPerSec' value must be >= 8000.");                  }
Magic Number,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,WaveOut,The following statement contains a magic number: if(bitsPerSample < 8){                      throw new ArgumentException("Argument 'bitsPerSample' value must be >= 8.");                  }
Magic Number,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,WaveOut,The following statement contains a magic number: m_BlockSize     = m_Channels * (m_BitsPerSample / 8);
Magic Number,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,WaveOut,The following statement contains a magic number: format.nAvgBytesPerSec = (uint)(m_SamplesPerSec * m_Channels * (m_BitsPerSample / 8));
Magic Number,LumiSoft.Net.Media,WaveOut,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\AudioOut.cs,Play,The following statement contains a magic number: if(result == MMSYSERR.NOERROR){                      PlayItem item = new PlayItem(ref headerHandle'ref dataHandle'data.Length);                      m_pPlayItems.Add(item);                        // We ran out of minimum buffer' we must pause playing while min buffer filled.                      if(m_BytesBuffered < 1000){                          if(!m_IsPaused){                              WavMethods.waveOutPause(m_pWavDevHandle);                              m_IsPaused = true;                          }                      }                      // Buffering completed'we may resume playing.                      else if(m_IsPaused && m_BytesBuffered > m_MinBuffer){                          WavMethods.waveOutRestart(m_pWavDevHandle);                          m_IsPaused = false;                      }                        m_BytesBuffered += data.Length;                        result = WavMethods.waveOutWrite(m_pWavDevHandle'headerHandle.AddrOfPinnedObject()'Marshal.SizeOf(wavHeader));                  }                  else{                      dataHandle.Free();                      headerHandle.Free();                  }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,Encode,The following statement contains a magic number: if((count % 2) != 0){                  throw new ArgumentException("Invalid 'count' value' it doesn't contain 16-bit boundaries.");              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,Encode,The following statement contains a magic number: byte[] retVal         = new byte[count / 2];
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,Encode,The following statement contains a magic number: while(offsetInRetVal < retVal.Length){                  // Little-Endian - lower byte'higer byte.                  short pcm = (short)(buffer[offset + 1] << 8 | buffer[offset]);                  offset += 2;                                    retVal[offsetInRetVal++] = LinearToALawSample(pcm);              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,Encode,The following statement contains a magic number: while(offsetInRetVal < retVal.Length){                  // Little-Endian - lower byte'higer byte.                  short pcm = (short)(buffer[offset + 1] << 8 | buffer[offset]);                  offset += 2;                                    retVal[offsetInRetVal++] = LinearToALawSample(pcm);              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,Decode,The following statement contains a magic number: byte[] retVal         = new byte[count * 2];
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,Decode,The following statement contains a magic number: for(int i=offset;i<buffer.Length;i++){                  short pcm = ALawDecompressTable[buffer[i]];                                  retVal[offsetInRetVal++] = (byte)(pcm      & 0xFF);                  retVal[offsetInRetVal++] = (byte)(pcm >> 8 & 0xFF);              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: sign = ((~sample) >> 8) & 0x80;
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: if(sample > 32635){                  sample = 32635;              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: if(sample > 32635){                  sample = 32635;              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: if(sample >= 256){                   exponent = (int)ALawCompressTable[(sample >> 8) & 0x7F];                   mantissa = (sample >> (exponent + 3) ) & 0x0F;                   compressedByte = (byte)((exponent << 4) | mantissa);               }               else{                   compressedByte = (byte)(sample >> 4);               }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: if(sample >= 256){                   exponent = (int)ALawCompressTable[(sample >> 8) & 0x7F];                   mantissa = (sample >> (exponent + 3) ) & 0x0F;                   compressedByte = (byte)((exponent << 4) | mantissa);               }               else{                   compressedByte = (byte)(sample >> 4);               }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: if(sample >= 256){                   exponent = (int)ALawCompressTable[(sample >> 8) & 0x7F];                   mantissa = (sample >> (exponent + 3) ) & 0x0F;                   compressedByte = (byte)((exponent << 4) | mantissa);               }               else{                   compressedByte = (byte)(sample >> 4);               }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: if(sample >= 256){                   exponent = (int)ALawCompressTable[(sample >> 8) & 0x7F];                   mantissa = (sample >> (exponent + 3) ) & 0x0F;                   compressedByte = (byte)((exponent << 4) | mantissa);               }               else{                   compressedByte = (byte)(sample >> 4);               }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_alaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_alaw.cs,LinearToALawSample,The following statement contains a magic number: if(sample >= 256){                   exponent = (int)ALawCompressTable[(sample >> 8) & 0x7F];                   mantissa = (sample >> (exponent + 3) ) & 0x0F;                   compressedByte = (byte)((exponent << 4) | mantissa);               }               else{                   compressedByte = (byte)(sample >> 4);               }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,Encode,The following statement contains a magic number: if((count % 2) != 0){                  throw new ArgumentException("Invalid buufer value' it doesn't contain 16-bit boundaries.");              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,Encode,The following statement contains a magic number: byte[] retVal         = new byte[count / 2];
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,Encode,The following statement contains a magic number: while(offsetInRetVal < retVal.Length){                  // Little-Endian - lower byte'higer byte.                  short pcm = (short)(buffer[offset + 1] << 8 | buffer[offset]);                  offset += 2;                                    retVal[offsetInRetVal++] = LinearToMuLawSample(pcm);              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,Encode,The following statement contains a magic number: while(offsetInRetVal < retVal.Length){                  // Little-Endian - lower byte'higer byte.                  short pcm = (short)(buffer[offset + 1] << 8 | buffer[offset]);                  offset += 2;                                    retVal[offsetInRetVal++] = LinearToMuLawSample(pcm);              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,Decode,The following statement contains a magic number: byte[] retVal         = new byte[count * 2];
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,Decode,The following statement contains a magic number: for(int i=offset;i<buffer.Length;i++){                  short pcm = MuLawDecompressTable[buffer[i]];                                  retVal[offsetInRetVal++] = (byte)(pcm      & 0xFF);                  retVal[offsetInRetVal++] = (byte)(pcm >> 8 & 0xFF);              }
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,LinearToMuLawSample,The following statement contains a magic number: int cClip = 32635;
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,LinearToMuLawSample,The following statement contains a magic number: int sign = (sample >> 8) & 0x80;
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,LinearToMuLawSample,The following statement contains a magic number: int exponent = (int)MuLawCompressTable[(sample>>7) & 0xFF];
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,LinearToMuLawSample,The following statement contains a magic number: int mantissa = (sample >> (exponent+3)) & 0x0F;
Magic Number,LumiSoft.Net.Media.Codec.Audio,G711_ulaw,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Media\Codec\Audio\G711_ulaw.cs,LinearToMuLawSample,The following statement contains a magic number: int compressedByte = ~(sign | (exponent << 4) | mantissa);
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_NAPTR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_NAPTR.cs,Parse,The following statement contains a magic number: int order = reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_NAPTR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_NAPTR.cs,Parse,The following statement contains a magic number: int preference = reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SRV,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SRV.cs,Parse,The following statement contains a magic number: int priority  = reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SRV,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SRV.cs,Parse,The following statement contains a magic number: int weight  = reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SRV,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SRV.cs,Parse,The following statement contains a magic number: int port  = reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,Query,The following statement contains a magic number: if(queryType == QTYPE.PTR){  				string ip = queryText;    				// See if IP is ok.  				IPAddress ipA = IPAddress.Parse(ip);		  				queryText = "";    				// IPv6  				if(ipA.AddressFamily == AddressFamily.InterNetworkV6){  					// 4321:0:1:2:3:4:567:89ab  					// would be  					// b.a.9.8.7.6.5.0.4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.0.0.0.0.1.2.3.4.IP6.ARPA  					  					char[] ipChars = ip.Replace(":"'"").ToCharArray();  					for(int i=ipChars.Length - 1;i>-1;i--){  						queryText += ipChars[i] + ".";  					}  					queryText += "IP6.ARPA";  				}  				// IPv4  				else{  					// 213.35.221.186  					// would be  					// 186.221.35.213.in-addr.arpa    					string[] ipParts = ip.Split('.');  					//--- Reverse IP ----------  					for(int i=3;i>-1;i--){  						queryText += ipParts[i] + ".";  					}  					queryText += "in-addr.arpa";  				}  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,Query,The following statement contains a magic number: return QueryServer(2000'queryText'queryType'1);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,The following statement contains a magic number: udpClient.SendTimeout = 500;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,The following statement contains a magic number: while(startTime.AddMilliseconds(timeout) > DateTime.Now){                  foreach(IPAddress dnsServer in m_DnsServers){                      try{                          udpClient.SendTo(query'new IPEndPoint(dnsServer'53));                      }                      catch{                      }                  }                    // Wait 10 ms response to arrive' if no response' retransmit query.                  if(udpClient.Poll(10'SelectMode.SelectRead)){                      try{                          byte[] retVal = new byte[1024];  					    int countRecieved = udpClient.Receive(retVal);                          					      					    // If reply is ok' return it  					    DnsServerResponse serverResponse = ParseQuery(retVal'queryID);  				  					    // Cache query  					    if(m_UseDnsCache && serverResponse.ResponseCode == RCODE.NO_ERROR){  						    DnsCache.AddToCache(qname'(int)qtype'serverResponse);  					    }    					    return serverResponse;                      }                      catch{                      }                  }              }
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,The following statement contains a magic number: while(startTime.AddMilliseconds(timeout) > DateTime.Now){                  foreach(IPAddress dnsServer in m_DnsServers){                      try{                          udpClient.SendTo(query'new IPEndPoint(dnsServer'53));                      }                      catch{                      }                  }                    // Wait 10 ms response to arrive' if no response' retransmit query.                  if(udpClient.Poll(10'SelectMode.SelectRead)){                      try{                          byte[] retVal = new byte[1024];  					    int countRecieved = udpClient.Receive(retVal);                          					      					    // If reply is ok' return it  					    DnsServerResponse serverResponse = ParseQuery(retVal'queryID);  				  					    // Cache query  					    if(m_UseDnsCache && serverResponse.ResponseCode == RCODE.NO_ERROR){  						    DnsCache.AddToCache(qname'(int)qtype'serverResponse);  					    }    					    return serverResponse;                      }                      catch{                      }                  }              }
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,QueryServer,The following statement contains a magic number: while(startTime.AddMilliseconds(timeout) > DateTime.Now){                  foreach(IPAddress dnsServer in m_DnsServers){                      try{                          udpClient.SendTo(query'new IPEndPoint(dnsServer'53));                      }                      catch{                      }                  }                    // Wait 10 ms response to arrive' if no response' retransmit query.                  if(udpClient.Poll(10'SelectMode.SelectRead)){                      try{                          byte[] retVal = new byte[1024];  					    int countRecieved = udpClient.Receive(retVal);                          					      					    // If reply is ok' return it  					    DnsServerResponse serverResponse = ParseQuery(retVal'queryID);  				  					    // Cache query  					    if(m_UseDnsCache && serverResponse.ResponseCode == RCODE.NO_ERROR){  						    DnsCache.AddToCache(qname'(int)qtype'serverResponse);  					    }    					    return serverResponse;                      }                      catch{                      }                  }              }
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: byte[] query = new byte[512];
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[0]  = (byte) (ID >> 8);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[2]  = (byte) 1;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[3]  = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[4]  = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[5]  = (byte) 1;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[6]  = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[7]  = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[8]  = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[9]  = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[10] = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: query[11] = (byte) 0;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,CreateQuery,The following statement contains a magic number: int position = 12;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,GetQName,The following statement contains a magic number: try{  				// Do while not terminator  				while(reply[offset] != 0){  					  					// Check if it's pointer(In pointer first two bits always 1)  					bool isPointer = ((reply[offset] & 0xC0) == 0xC0);  					  					// If pointer  					if(isPointer){  						// Pointer location number is 2 bytes long  						// 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7  # byte 2 # 0 | 1 | 2 | | 3 | 4 | 5 | 6 | 7  						// empty | < ---- pointer location number --------------------------------->  						int pStart = ((reply[offset] & 0x3F) << 8) | (reply[++offset]);  						offset++;						  						return GetQName(reply'ref pStart'ref name);  					}  					else{  						// label length (length = 8Bit and first 2 bits always 0)  						// 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7  						// empty | lablel length in bytes   						int labelLength = (reply[offset] & 0x3F);  						offset++;  						  						// Copy label into name   						name += Encoding.ASCII.GetString(reply'offset'labelLength);  						offset += labelLength;  					}  									  					// If the next char isn't terminator'  					// label continues - add dot between two labels  					if (reply[offset] != 0){  						name += ".";  					}					  				}    				// Move offset by terminator length  				offset++;    				return true;  			}  			catch{  				return false;  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    id                     = (reply[0]  << 8 | reply[1]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: OPCODE opcode                 = (OPCODE)((reply[2] >> 3) & 15);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: OPCODE opcode                 = (OPCODE)((reply[2] >> 3) & 15);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: OPCODE opcode                 = (OPCODE)((reply[2] >> 3) & 15);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: RCODE  replyCode              = (RCODE)(reply[3]  & 15);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: RCODE  replyCode              = (RCODE)(reply[3]  & 15);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    queryCount             = (reply[4]  << 8 | reply[5]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    queryCount             = (reply[4]  << 8 | reply[5]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    queryCount             = (reply[4]  << 8 | reply[5]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    answerCount            = (reply[6]  << 8 | reply[7]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    answerCount            = (reply[6]  << 8 | reply[7]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    answerCount            = (reply[6]  << 8 | reply[7]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    authoritiveAnswerCount = (reply[8]  << 8 | reply[9]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    authoritiveAnswerCount = (reply[8]  << 8 | reply[9]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    authoritiveAnswerCount = (reply[8]  << 8 | reply[9]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    additionalAnswerCount  = (reply[10] << 8 | reply[11]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    additionalAnswerCount  = (reply[10] << 8 | reply[11]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int    additionalAnswerCount  = (reply[10] << 8 | reply[11]);
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: int pos = 12;
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseQuery,The following statement contains a magic number: for(int q=0;q<queryCount;q++){  				string dummy = "";  				GetQName(reply'ref pos'ref dummy);  				//qtype + qclass  				pos += 4;  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseAnswers,The following statement contains a magic number: for(int i=0;i<answerCount;i++){	  				string name = "";  				if(!GetQName(reply'ref offset'ref name)){  					throw new Exception("Error parsing anser");  				}    				int type     = reply[offset++] << 8  | reply[offset++];  				int rdClass  = reply[offset++] << 8  | reply[offset++];  				int ttl      = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8  | reply[offset++];  				int rdLength = reply[offset++] << 8  | reply[offset++];                  				                  if((QTYPE)type == QTYPE.A){                      answers.Add(DNS_rr_A.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NS){                      answers.Add(DNS_rr_NS.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.CNAME){                      answers.Add(DNS_rr_CNAME.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SOA){                      answers.Add(DNS_rr_SOA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.PTR){                      answers.Add(DNS_rr_PTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.HINFO){                      answers.Add(DNS_rr_HINFO.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.MX){                      answers.Add(DNS_rr_MX.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.TXT){                      answers.Add(DNS_rr_TXT.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.AAAA){                      answers.Add(DNS_rr_AAAA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SRV){                      answers.Add(DNS_rr_SRV.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NAPTR){                      answers.Add(DNS_rr_NAPTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else{                      // Unknown record' skip it.                      offset += rdLength;                  }  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseAnswers,The following statement contains a magic number: for(int i=0;i<answerCount;i++){	  				string name = "";  				if(!GetQName(reply'ref offset'ref name)){  					throw new Exception("Error parsing anser");  				}    				int type     = reply[offset++] << 8  | reply[offset++];  				int rdClass  = reply[offset++] << 8  | reply[offset++];  				int ttl      = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8  | reply[offset++];  				int rdLength = reply[offset++] << 8  | reply[offset++];                  				                  if((QTYPE)type == QTYPE.A){                      answers.Add(DNS_rr_A.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NS){                      answers.Add(DNS_rr_NS.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.CNAME){                      answers.Add(DNS_rr_CNAME.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SOA){                      answers.Add(DNS_rr_SOA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.PTR){                      answers.Add(DNS_rr_PTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.HINFO){                      answers.Add(DNS_rr_HINFO.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.MX){                      answers.Add(DNS_rr_MX.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.TXT){                      answers.Add(DNS_rr_TXT.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.AAAA){                      answers.Add(DNS_rr_AAAA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SRV){                      answers.Add(DNS_rr_SRV.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NAPTR){                      answers.Add(DNS_rr_NAPTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else{                      // Unknown record' skip it.                      offset += rdLength;                  }  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseAnswers,The following statement contains a magic number: for(int i=0;i<answerCount;i++){	  				string name = "";  				if(!GetQName(reply'ref offset'ref name)){  					throw new Exception("Error parsing anser");  				}    				int type     = reply[offset++] << 8  | reply[offset++];  				int rdClass  = reply[offset++] << 8  | reply[offset++];  				int ttl      = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8  | reply[offset++];  				int rdLength = reply[offset++] << 8  | reply[offset++];                  				                  if((QTYPE)type == QTYPE.A){                      answers.Add(DNS_rr_A.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NS){                      answers.Add(DNS_rr_NS.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.CNAME){                      answers.Add(DNS_rr_CNAME.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SOA){                      answers.Add(DNS_rr_SOA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.PTR){                      answers.Add(DNS_rr_PTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.HINFO){                      answers.Add(DNS_rr_HINFO.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.MX){                      answers.Add(DNS_rr_MX.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.TXT){                      answers.Add(DNS_rr_TXT.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.AAAA){                      answers.Add(DNS_rr_AAAA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SRV){                      answers.Add(DNS_rr_SRV.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NAPTR){                      answers.Add(DNS_rr_NAPTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else{                      // Unknown record' skip it.                      offset += rdLength;                  }  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseAnswers,The following statement contains a magic number: for(int i=0;i<answerCount;i++){	  				string name = "";  				if(!GetQName(reply'ref offset'ref name)){  					throw new Exception("Error parsing anser");  				}    				int type     = reply[offset++] << 8  | reply[offset++];  				int rdClass  = reply[offset++] << 8  | reply[offset++];  				int ttl      = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8  | reply[offset++];  				int rdLength = reply[offset++] << 8  | reply[offset++];                  				                  if((QTYPE)type == QTYPE.A){                      answers.Add(DNS_rr_A.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NS){                      answers.Add(DNS_rr_NS.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.CNAME){                      answers.Add(DNS_rr_CNAME.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SOA){                      answers.Add(DNS_rr_SOA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.PTR){                      answers.Add(DNS_rr_PTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.HINFO){                      answers.Add(DNS_rr_HINFO.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.MX){                      answers.Add(DNS_rr_MX.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.TXT){                      answers.Add(DNS_rr_TXT.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.AAAA){                      answers.Add(DNS_rr_AAAA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SRV){                      answers.Add(DNS_rr_SRV.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NAPTR){                      answers.Add(DNS_rr_NAPTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else{                      // Unknown record' skip it.                      offset += rdLength;                  }  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseAnswers,The following statement contains a magic number: for(int i=0;i<answerCount;i++){	  				string name = "";  				if(!GetQName(reply'ref offset'ref name)){  					throw new Exception("Error parsing anser");  				}    				int type     = reply[offset++] << 8  | reply[offset++];  				int rdClass  = reply[offset++] << 8  | reply[offset++];  				int ttl      = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8  | reply[offset++];  				int rdLength = reply[offset++] << 8  | reply[offset++];                  				                  if((QTYPE)type == QTYPE.A){                      answers.Add(DNS_rr_A.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NS){                      answers.Add(DNS_rr_NS.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.CNAME){                      answers.Add(DNS_rr_CNAME.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SOA){                      answers.Add(DNS_rr_SOA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.PTR){                      answers.Add(DNS_rr_PTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.HINFO){                      answers.Add(DNS_rr_HINFO.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.MX){                      answers.Add(DNS_rr_MX.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.TXT){                      answers.Add(DNS_rr_TXT.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.AAAA){                      answers.Add(DNS_rr_AAAA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SRV){                      answers.Add(DNS_rr_SRV.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NAPTR){                      answers.Add(DNS_rr_NAPTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else{                      // Unknown record' skip it.                      offset += rdLength;                  }  			}
Magic Number,LumiSoft.Net.Dns.Client,Dns_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_Client.cs,ParseAnswers,The following statement contains a magic number: for(int i=0;i<answerCount;i++){	  				string name = "";  				if(!GetQName(reply'ref offset'ref name)){  					throw new Exception("Error parsing anser");  				}    				int type     = reply[offset++] << 8  | reply[offset++];  				int rdClass  = reply[offset++] << 8  | reply[offset++];  				int ttl      = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8  | reply[offset++];  				int rdLength = reply[offset++] << 8  | reply[offset++];                  				                  if((QTYPE)type == QTYPE.A){                      answers.Add(DNS_rr_A.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NS){                      answers.Add(DNS_rr_NS.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.CNAME){                      answers.Add(DNS_rr_CNAME.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SOA){                      answers.Add(DNS_rr_SOA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.PTR){                      answers.Add(DNS_rr_PTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.HINFO){                      answers.Add(DNS_rr_HINFO.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.MX){                      answers.Add(DNS_rr_MX.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.TXT){                      answers.Add(DNS_rr_TXT.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.AAAA){                      answers.Add(DNS_rr_AAAA.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.SRV){                      answers.Add(DNS_rr_SRV.Parse(reply'ref offset'rdLength'ttl));                  }                  else if((QTYPE)type == QTYPE.NAPTR){                      answers.Add(DNS_rr_NAPTR.Parse(reply'ref offset'rdLength'ttl));                  }                  else{                      // Unknown record' skip it.                      offset += rdLength;                  }  			}
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_MX,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_MX.cs,Parse,The following statement contains a magic number: int pref = reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long serial = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long serial = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long serial = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long refresh = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long refresh = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long refresh = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long retry = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long retry = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long retry = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long expire = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long expire = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long expire = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long minimum = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long minimum = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.Dns.Client,DNS_rr_SOA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\DNS\Client\DNS_rr_SOA.cs,Parse,The following statement contains a magic number: long minimum = reply[offset++] << 24 | reply[offset++] << 16 | reply[offset++] << 8 | reply[offset++];
Magic Number,LumiSoft.Net.FTP.Client,FTP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_ClientException.cs,FTP_ClientException,The following statement contains a magic number: string[] code_text = responseLine.Split(new char[]{' '}'2);
Magic Number,LumiSoft.Net.FTP.Client,FTP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_ClientException.cs,FTP_ClientException,The following statement contains a magic number: if(code_text.Length == 2){                  m_ResponseText =  code_text[1];                              }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The following statement contains a magic number: if(mlsdSupported){                  if(string.IsNullOrEmpty(path)){                      WriteLine("MLSD");                  }                  else{                      WriteLine("MLSD " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                    response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                    byte[] lineBuffer = new byte[8000];                  ms.Position = 0;                  SmartStream mlsdStream = new SmartStream(ms'true);                  while(true){                      SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer'SizeExceededAction.JunkAndThrowException);                      mlsdStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      string line = args.LineUtf8;                        // We reached end of stream' we readed whole list sucessfully.                      if(line == null){                          break;                      }                      else{                          string[] parameters = line.Substring(0'line.LastIndexOf(';')).Split(';');                          string   name       = line.Substring(line.LastIndexOf(';') + 1).Trim();                            string   type     = "";                          long     size     = 0;                          DateTime modified = DateTime.MinValue;                          foreach(string parameter in parameters){                              string[] name_value = parameter.Split('=');                              if(name_value[0].ToLower() == "type"){                                  type = name_value[1].ToLower();                              }                              else if(name_value[0].ToLower() == "size"){                                  size = Convert.ToInt32(name_value[1]);                              }                              else if(name_value[0].ToLower() == "modify"){                                  modified = DateTime.ParseExact(name_value[1]'"yyyyMMddHHmmss"'System.Globalization.DateTimeFormatInfo.InvariantInfo);                              }                              else{                                  // Other options won't interest us' skip them.                              }                          }                            if(type == "dir"){                              retVal.Add(new FTP_ListItem(name'0'modified'true));                          }                          else if(type == "file"){                              retVal.Add(new FTP_ListItem(name'size'modified'false));                          }                      }                  }              }                #endregion                #region LIST                else{                  if(string.IsNullOrEmpty(path)){                      WriteLine("LIST");                  }                  else{                      WriteLine("LIST " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                                            response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                                                                    ms.Position = 0;                  SmartStream listStream =  new SmartStream(ms'true);                  SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);                  listStream.ReadLine(args'false);                  if(args.Error != null){                      throw args.Error;                  }                  string line = args.LineUtf8;                                string listingType = "unix";                  // Dedect listing.                  if(line != null){                      try{                          StringReader r = new StringReader(line);                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'new string[]{"MM-dd-yy hh:mmtt"}'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          listingType = "win";                      }                      catch{                      }                  }                    string[] winDateFormats = new string[]{"M-d-yy h:mmtt"};                  string[] unixFormats    = new string[]{"MMM d H:mm"'"MMM d yyyy"};                    byte[] lineBuffer = new byte[8000];                  while(line != null){                      // Windows listing.                                       if(listingType == "win"){                          // MM-dd-yy hh:mm <DIR> directoryName                          // MM-dd-yy hh:mm size  fileName                                                                    StringReader r = new StringReader(line);                          // Read date                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'winDateFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                                                 r.ReadToFirstChar();                          // We have directory.                          if(r.StartsWith("<dir>"'false)){                              r.ReadSpecifiedLength(5);                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'0'modified'true));                          }                          // We have file                          else{                              // Read file size                              long size = Convert.ToInt64(r.ReadWord());                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'size'modified'false));                          }                      }                      // Unix listing                      else{                          // "d"directoryAtttributes xx xx xx 0 MMM d HH:mm/yyyy directoryName                          // fileAtttributes xx xx xx fileSize MMM d HH:mm/yyyy fileName                                                                    StringReader r = new StringReader(line);                          string attributes = r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          long size = Convert.ToInt64(r.ReadWord());                                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord() + " " + r.ReadWord()'unixFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          r.ReadToFirstChar();                          string name = r.ReadToEnd();                          if(name != "." && name != ".."){                              if(attributes.StartsWith("d")){                                  retVal.Add(new FTP_ListItem(name'0'modified'true));                              }                              else{                                  retVal.Add(new FTP_ListItem(name'size'modified'false));                              }                          }                      }                        listStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      line = args.LineUtf8;                  }                }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The following statement contains a magic number: if(mlsdSupported){                  if(string.IsNullOrEmpty(path)){                      WriteLine("MLSD");                  }                  else{                      WriteLine("MLSD " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                    response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                    byte[] lineBuffer = new byte[8000];                  ms.Position = 0;                  SmartStream mlsdStream = new SmartStream(ms'true);                  while(true){                      SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer'SizeExceededAction.JunkAndThrowException);                      mlsdStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      string line = args.LineUtf8;                        // We reached end of stream' we readed whole list sucessfully.                      if(line == null){                          break;                      }                      else{                          string[] parameters = line.Substring(0'line.LastIndexOf(';')).Split(';');                          string   name       = line.Substring(line.LastIndexOf(';') + 1).Trim();                            string   type     = "";                          long     size     = 0;                          DateTime modified = DateTime.MinValue;                          foreach(string parameter in parameters){                              string[] name_value = parameter.Split('=');                              if(name_value[0].ToLower() == "type"){                                  type = name_value[1].ToLower();                              }                              else if(name_value[0].ToLower() == "size"){                                  size = Convert.ToInt32(name_value[1]);                              }                              else if(name_value[0].ToLower() == "modify"){                                  modified = DateTime.ParseExact(name_value[1]'"yyyyMMddHHmmss"'System.Globalization.DateTimeFormatInfo.InvariantInfo);                              }                              else{                                  // Other options won't interest us' skip them.                              }                          }                            if(type == "dir"){                              retVal.Add(new FTP_ListItem(name'0'modified'true));                          }                          else if(type == "file"){                              retVal.Add(new FTP_ListItem(name'size'modified'false));                          }                      }                  }              }                #endregion                #region LIST                else{                  if(string.IsNullOrEmpty(path)){                      WriteLine("LIST");                  }                  else{                      WriteLine("LIST " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                                            response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                                                                    ms.Position = 0;                  SmartStream listStream =  new SmartStream(ms'true);                  SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);                  listStream.ReadLine(args'false);                  if(args.Error != null){                      throw args.Error;                  }                  string line = args.LineUtf8;                                string listingType = "unix";                  // Dedect listing.                  if(line != null){                      try{                          StringReader r = new StringReader(line);                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'new string[]{"MM-dd-yy hh:mmtt"}'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          listingType = "win";                      }                      catch{                      }                  }                    string[] winDateFormats = new string[]{"M-d-yy h:mmtt"};                  string[] unixFormats    = new string[]{"MMM d H:mm"'"MMM d yyyy"};                    byte[] lineBuffer = new byte[8000];                  while(line != null){                      // Windows listing.                                       if(listingType == "win"){                          // MM-dd-yy hh:mm <DIR> directoryName                          // MM-dd-yy hh:mm size  fileName                                                                    StringReader r = new StringReader(line);                          // Read date                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'winDateFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                                                 r.ReadToFirstChar();                          // We have directory.                          if(r.StartsWith("<dir>"'false)){                              r.ReadSpecifiedLength(5);                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'0'modified'true));                          }                          // We have file                          else{                              // Read file size                              long size = Convert.ToInt64(r.ReadWord());                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'size'modified'false));                          }                      }                      // Unix listing                      else{                          // "d"directoryAtttributes xx xx xx 0 MMM d HH:mm/yyyy directoryName                          // fileAtttributes xx xx xx fileSize MMM d HH:mm/yyyy fileName                                                                    StringReader r = new StringReader(line);                          string attributes = r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          long size = Convert.ToInt64(r.ReadWord());                                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord() + " " + r.ReadWord()'unixFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          r.ReadToFirstChar();                          string name = r.ReadToEnd();                          if(name != "." && name != ".."){                              if(attributes.StartsWith("d")){                                  retVal.Add(new FTP_ListItem(name'0'modified'true));                              }                              else{                                  retVal.Add(new FTP_ListItem(name'size'modified'false));                              }                          }                      }                        listStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      line = args.LineUtf8;                  }                }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The following statement contains a magic number: if(mlsdSupported){                  if(string.IsNullOrEmpty(path)){                      WriteLine("MLSD");                  }                  else{                      WriteLine("MLSD " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                    response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                    byte[] lineBuffer = new byte[8000];                  ms.Position = 0;                  SmartStream mlsdStream = new SmartStream(ms'true);                  while(true){                      SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer'SizeExceededAction.JunkAndThrowException);                      mlsdStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      string line = args.LineUtf8;                        // We reached end of stream' we readed whole list sucessfully.                      if(line == null){                          break;                      }                      else{                          string[] parameters = line.Substring(0'line.LastIndexOf(';')).Split(';');                          string   name       = line.Substring(line.LastIndexOf(';') + 1).Trim();                            string   type     = "";                          long     size     = 0;                          DateTime modified = DateTime.MinValue;                          foreach(string parameter in parameters){                              string[] name_value = parameter.Split('=');                              if(name_value[0].ToLower() == "type"){                                  type = name_value[1].ToLower();                              }                              else if(name_value[0].ToLower() == "size"){                                  size = Convert.ToInt32(name_value[1]);                              }                              else if(name_value[0].ToLower() == "modify"){                                  modified = DateTime.ParseExact(name_value[1]'"yyyyMMddHHmmss"'System.Globalization.DateTimeFormatInfo.InvariantInfo);                              }                              else{                                  // Other options won't interest us' skip them.                              }                          }                            if(type == "dir"){                              retVal.Add(new FTP_ListItem(name'0'modified'true));                          }                          else if(type == "file"){                              retVal.Add(new FTP_ListItem(name'size'modified'false));                          }                      }                  }              }                #endregion                #region LIST                else{                  if(string.IsNullOrEmpty(path)){                      WriteLine("LIST");                  }                  else{                      WriteLine("LIST " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                                            response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                                                                    ms.Position = 0;                  SmartStream listStream =  new SmartStream(ms'true);                  SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);                  listStream.ReadLine(args'false);                  if(args.Error != null){                      throw args.Error;                  }                  string line = args.LineUtf8;                                string listingType = "unix";                  // Dedect listing.                  if(line != null){                      try{                          StringReader r = new StringReader(line);                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'new string[]{"MM-dd-yy hh:mmtt"}'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          listingType = "win";                      }                      catch{                      }                  }                    string[] winDateFormats = new string[]{"M-d-yy h:mmtt"};                  string[] unixFormats    = new string[]{"MMM d H:mm"'"MMM d yyyy"};                    byte[] lineBuffer = new byte[8000];                  while(line != null){                      // Windows listing.                                       if(listingType == "win"){                          // MM-dd-yy hh:mm <DIR> directoryName                          // MM-dd-yy hh:mm size  fileName                                                                    StringReader r = new StringReader(line);                          // Read date                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'winDateFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                                                 r.ReadToFirstChar();                          // We have directory.                          if(r.StartsWith("<dir>"'false)){                              r.ReadSpecifiedLength(5);                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'0'modified'true));                          }                          // We have file                          else{                              // Read file size                              long size = Convert.ToInt64(r.ReadWord());                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'size'modified'false));                          }                      }                      // Unix listing                      else{                          // "d"directoryAtttributes xx xx xx 0 MMM d HH:mm/yyyy directoryName                          // fileAtttributes xx xx xx fileSize MMM d HH:mm/yyyy fileName                                                                    StringReader r = new StringReader(line);                          string attributes = r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          long size = Convert.ToInt64(r.ReadWord());                                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord() + " " + r.ReadWord()'unixFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          r.ReadToFirstChar();                          string name = r.ReadToEnd();                          if(name != "." && name != ".."){                              if(attributes.StartsWith("d")){                                  retVal.Add(new FTP_ListItem(name'0'modified'true));                              }                              else{                                  retVal.Add(new FTP_ListItem(name'size'modified'false));                              }                          }                      }                        listStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      line = args.LineUtf8;                  }                }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,GetList,The following statement contains a magic number: if(mlsdSupported){                  if(string.IsNullOrEmpty(path)){                      WriteLine("MLSD");                  }                  else{                      WriteLine("MLSD " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                    response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                    byte[] lineBuffer = new byte[8000];                  ms.Position = 0;                  SmartStream mlsdStream = new SmartStream(ms'true);                  while(true){                      SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer'SizeExceededAction.JunkAndThrowException);                      mlsdStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      string line = args.LineUtf8;                        // We reached end of stream' we readed whole list sucessfully.                      if(line == null){                          break;                      }                      else{                          string[] parameters = line.Substring(0'line.LastIndexOf(';')).Split(';');                          string   name       = line.Substring(line.LastIndexOf(';') + 1).Trim();                            string   type     = "";                          long     size     = 0;                          DateTime modified = DateTime.MinValue;                          foreach(string parameter in parameters){                              string[] name_value = parameter.Split('=');                              if(name_value[0].ToLower() == "type"){                                  type = name_value[1].ToLower();                              }                              else if(name_value[0].ToLower() == "size"){                                  size = Convert.ToInt32(name_value[1]);                              }                              else if(name_value[0].ToLower() == "modify"){                                  modified = DateTime.ParseExact(name_value[1]'"yyyyMMddHHmmss"'System.Globalization.DateTimeFormatInfo.InvariantInfo);                              }                              else{                                  // Other options won't interest us' skip them.                              }                          }                            if(type == "dir"){                              retVal.Add(new FTP_ListItem(name'0'modified'true));                          }                          else if(type == "file"){                              retVal.Add(new FTP_ListItem(name'size'modified'false));                          }                      }                  }              }                #endregion                #region LIST                else{                  if(string.IsNullOrEmpty(path)){                      WriteLine("LIST");                  }                  else{                      WriteLine("LIST " + path);                  }    			    string[] response = ReadResponse();                  if(!response[0].StartsWith("1")){                      throw new FTP_ClientException(response[0]);                  }                    MemoryStream ms = new MemoryStream();                  m_pDataConnection.ReadAll(ms);                                            response = ReadResponse();                  if(!response[0].StartsWith("2")){                      throw new FTP_ClientException(response[0]);                  }                                                                    ms.Position = 0;                  SmartStream listStream =  new SmartStream(ms'true);                  SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);                  listStream.ReadLine(args'false);                  if(args.Error != null){                      throw args.Error;                  }                  string line = args.LineUtf8;                                string listingType = "unix";                  // Dedect listing.                  if(line != null){                      try{                          StringReader r = new StringReader(line);                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'new string[]{"MM-dd-yy hh:mmtt"}'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          listingType = "win";                      }                      catch{                      }                  }                    string[] winDateFormats = new string[]{"M-d-yy h:mmtt"};                  string[] unixFormats    = new string[]{"MMM d H:mm"'"MMM d yyyy"};                    byte[] lineBuffer = new byte[8000];                  while(line != null){                      // Windows listing.                                       if(listingType == "win"){                          // MM-dd-yy hh:mm <DIR> directoryName                          // MM-dd-yy hh:mm size  fileName                                                                    StringReader r = new StringReader(line);                          // Read date                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord()'winDateFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                                                 r.ReadToFirstChar();                          // We have directory.                          if(r.StartsWith("<dir>"'false)){                              r.ReadSpecifiedLength(5);                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'0'modified'true));                          }                          // We have file                          else{                              // Read file size                              long size = Convert.ToInt64(r.ReadWord());                              r.ReadToFirstChar();                                retVal.Add(new FTP_ListItem(r.ReadToEnd()'size'modified'false));                          }                      }                      // Unix listing                      else{                          // "d"directoryAtttributes xx xx xx 0 MMM d HH:mm/yyyy directoryName                          // fileAtttributes xx xx xx fileSize MMM d HH:mm/yyyy fileName                                                                    StringReader r = new StringReader(line);                          string attributes = r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          r.ReadWord();                          long size = Convert.ToInt64(r.ReadWord());                                          DateTime modified = DateTime.ParseExact(r.ReadWord() + " " + r.ReadWord() + " " + r.ReadWord()'unixFormats'System.Globalization.DateTimeFormatInfo.InvariantInfo'System.Globalization.DateTimeStyles.None);                          r.ReadToFirstChar();                          string name = r.ReadToEnd();                          if(name != "." && name != ".."){                              if(attributes.StartsWith("d")){                                  retVal.Add(new FTP_ListItem(name'0'modified'true));                              }                              else{                                  retVal.Add(new FTP_ListItem(name'size'modified'false));                              }                          }                      }                        listStream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      line = args.LineUtf8;                  }                }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Port,The following statement contains a magic number: foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                  if(ip.AddressFamily == m_pDataConnection.LocalEndPoint.AddressFamily){                      WriteLine("PORT " + ip.ToString().Replace("."'"'") + "'" + (m_pDataConnection.LocalEndPoint.Port >> 8) + "'" + (m_pDataConnection.LocalEndPoint.Port & 0xFF));                        response = ReadResponse();                      if(response[0].StartsWith("2")){                          m_pDataConnection.SwitchToActive();                          return;                      }                  }              }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,Pasv,The following statement contains a magic number: m_pDataConnection.SwitchToPassive(new IPEndPoint(IPAddress.Parse(parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3])'(Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5])));
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,ReadResponse,The following statement contains a magic number: while(true){                  string response = ReadLine();                  // Server closed connection for some reason.                  if(response == null){                      throw new Exception("Remote host disconnected connection unexpectedly.");                  }                  retVal.Add(response);                  // Multiline response.                  if(response.Length >= 4 && response[3] == '-'){                      // Fall to next loop cycle.                  }                  // Single line response.                  else{                      break;                  }              }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,ReadResponse,The following statement contains a magic number: while(true){                  string response = ReadLine();                  // Server closed connection for some reason.                  if(response == null){                      throw new Exception("Remote host disconnected connection unexpectedly.");                  }                  retVal.Add(response);                  // Multiline response.                  if(response.Length >= 4 && response[3] == '-'){                      // Fall to next loop cycle.                  }                  // Single line response.                  else{                      break;                  }              }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,OnConnected,The following statement contains a magic number: if(line.StartsWith("220")){                  StringBuilder greetText = new StringBuilder();                  greetText.Append(line.Substring(4));                    // Read multiline greet text.                  while(line.StartsWith("220-")){                      line = ReadLine();                        greetText.AppendLine(line.Substring(4));                  }                    m_GreetingText = greetText.ToString();              }              else{                  throw new FTP_ClientException(line);              }
Magic Number,LumiSoft.Net.FTP.Client,FTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,OnConnected,The following statement contains a magic number: if(line.StartsWith("220")){                  StringBuilder greetText = new StringBuilder();                  greetText.Append(line.Substring(4));                    // Read multiline greet text.                  while(line.StartsWith("220-")){                      line = ReadLine();                        greetText.AppendLine(line.Substring(4));                  }                    m_GreetingText = greetText.ToString();              }              else{                  throw new FTP_ClientException(line);              }
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,ReadAll,The following statement contains a magic number: try{                      if(m_TransferMode == FTP_TransferMode.Active){                          using(NetworkStream dataStream = WaitFtpServerToConnect(20)){                              long bytesReaded = TransferStream(dataStream'stream);                              m_pOwner.LogAddRead(bytesReaded'"Data connection readed " + bytesReaded + " bytes.");                          }                      }                      else if(m_TransferMode == FTP_TransferMode.Passive){                          using(NetworkStream dataStream = new NetworkStream(m_pSocket'true)){                              long bytesReaded = TransferStream(dataStream'stream);                              m_pOwner.LogAddRead(bytesReaded'"Data connection readed " + bytesReaded + " bytes.");                          }                      }                  }                  finally{                      m_IsActive = false;                      CleanUpSocket();                  }
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,WriteAll,The following statement contains a magic number: try{                      if(m_TransferMode == FTP_TransferMode.Active){                          using(NetworkStream dataStream = WaitFtpServerToConnect(20)){                                 long bytesWritten = TransferStream(stream'dataStream);                               m_pOwner.LogAddWrite(bytesWritten'"Data connection wrote " + bytesWritten + " bytes.");                          }                      }                      else if(m_TransferMode == FTP_TransferMode.Passive){                          using(NetworkStream dataStream = new NetworkStream(m_pSocket'true)){                              long bytesWritten = TransferStream(stream'dataStream);                              m_pOwner.LogAddWrite(bytesWritten'"Data connection wrote " + bytesWritten + " bytes.");                          }                      }                  }                  finally{                      m_IsActive = false;                      CleanUpSocket();                  }
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,WaitFtpServerToConnect,The following statement contains a magic number: try{                      m_pOwner.LogAddText("FTP Active data channel waiting FTP server connect to '" + m_pSocket.LocalEndPoint.ToString() + "'.");                                            //--- Wait ftp server connection -----------------------------//  			        DateTime startTime = DateTime.Now;  				    while(!m_pSocket.Poll(0'SelectMode.SelectRead)){  				        System.Threading.Thread.Sleep(50);    					    if(startTime.AddSeconds(waitTime) < DateTime.Now){                              m_pOwner.LogAddText("FTP server didn't connect during expected time.");    					        throw new IOException("FTP server didn't connect during expected time.");  					    }  				    }  				    //-----------------------------------------------------------//                                            // Accpet FTP server connection.                      Socket socket = m_pSocket.Accept();                        m_pOwner.LogAddText("FTP Active data channel established' localEP='" + socket.LocalEndPoint.ToString() + "' remoteEP='" + socket.RemoteEndPoint.ToString() + "'.");                        return new NetworkStream(socket'true);                  }                  finally{                      CleanUpSocket();                  }
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,CreateSocket,The following statement contains a magic number: m_pSocket.SendTimeout = 30000;
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,CreateSocket,The following statement contains a magic number: m_pSocket.ReceiveTimeout = 30000;
Magic Number,LumiSoft.Net.FTP.Client,DataConnection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Client\FTP_Client.cs,TransferStream,The following statement contains a magic number: byte[] buffer           = new byte[32000];
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_ClientException.cs,IMAP_ClientException,The following statement contains a magic number: string[] code_text = responseLine.Split(new char[]{ }'2);
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_ClientException.cs,IMAP_ClientException,The following statement contains a magic number: if(code_text.Length == 2){                  m_ResponseText = code_text[1];              }
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Acl,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Acl.cs,Parse,The following statement contains a magic number: return new IMAP_Acl(args[1]'LumiSoft.Net.IMAP.Server.IMAP_Utils.ACL_From_String(args[2]));
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,StartTLS,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,WriteLine,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,CreateFolder,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,DeleteFolder,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,RenameFolder,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				if (line.StartsWith("*"))  				{  					// Get rid of *  					line = line.Substring(1).Trim();    					if (line.ToUpper().IndexOf("EXISTS") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_MsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("RECENT") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_NewMsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("UIDNEXT") > -1)  					{  						m_UIDNext = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDNEXT") + 8' line.IndexOf(']') - line.ToUpper().IndexOf("UIDNEXT") - 8));  					}  					else if (line.ToUpper().IndexOf("UIDVALIDITY") > -1)  					{  						m_UIDValidity = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDVALIDITY") + 12' line.IndexOf(']') - line.ToUpper().IndexOf("UIDVALIDITY") - 12));  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				if (line.StartsWith("*"))  				{  					// Get rid of *  					line = line.Substring(1).Trim();    					if (line.ToUpper().IndexOf("EXISTS") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_MsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("RECENT") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_NewMsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("UIDNEXT") > -1)  					{  						m_UIDNext = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDNEXT") + 8' line.IndexOf(']') - line.ToUpper().IndexOf("UIDNEXT") - 8));  					}  					else if (line.ToUpper().IndexOf("UIDVALIDITY") > -1)  					{  						m_UIDValidity = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDVALIDITY") + 12' line.IndexOf(']') - line.ToUpper().IndexOf("UIDVALIDITY") - 12));  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				if (line.StartsWith("*"))  				{  					// Get rid of *  					line = line.Substring(1).Trim();    					if (line.ToUpper().IndexOf("EXISTS") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_MsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("RECENT") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_NewMsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("UIDNEXT") > -1)  					{  						m_UIDNext = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDNEXT") + 8' line.IndexOf(']') - line.ToUpper().IndexOf("UIDNEXT") - 8));  					}  					else if (line.ToUpper().IndexOf("UIDVALIDITY") > -1)  					{  						m_UIDValidity = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDVALIDITY") + 12' line.IndexOf(']') - line.ToUpper().IndexOf("UIDVALIDITY") - 12));  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,SelectFolder,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				if (line.StartsWith("*"))  				{  					// Get rid of *  					line = line.Substring(1).Trim();    					if (line.ToUpper().IndexOf("EXISTS") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_MsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("RECENT") > -1 && line.ToUpper().IndexOf("FLAGS") == -1)  					{  						m_NewMsgCount = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")).Trim());  					}  					else if (line.ToUpper().IndexOf("UIDNEXT") > -1)  					{  						m_UIDNext = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDNEXT") + 8' line.IndexOf(']') - line.ToUpper().IndexOf("UIDNEXT") - 8));  					}  					else if (line.ToUpper().IndexOf("UIDVALIDITY") > -1)  					{  						m_UIDValidity = Convert.ToInt64(line.Substring(line.ToUpper().IndexOf("UIDVALIDITY") + 12' line.IndexOf(']') - line.ToUpper().IndexOf("UIDVALIDITY") - 12));  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,StoreMessage,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				// We have un-tagged resposne.  				if (line.StartsWith("*"))  				{  					ProcessStatusResponse(line);  				}  				// Send data.  				else if (line.StartsWith("+"))  				{  					// Send message.  					this.TcpStream.Write(data' 0' data.Length);  					LogAddWrite(data.Length' "Wrote " + data.Length.ToString() + " bytes.");    					// Send CRLF' ends splitted command line.  					this.TcpStream.Write(new byte[] { (byte)'\r'' (byte)'\n' }' 0' 2);  					LogAddWrite(data.Length' "Wrote CRLF.");  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,FetchMessages,The following statement contains a magic number: byte[] lineBuffer = new byte[100000];
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,FetchMessages,The following statement contains a magic number: while (true)  			{  				SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(lineBuffer' SizeExceededAction.JunkAndThrowException);  				this.TcpStream.ReadLine(args' false);  				if (args.Error != null)  				{  					throw args.Error;  				}  				line = args.LineUtf8;  				LogAddRead(args.BytesInBuffer' line);    				// We have un-tagged resposne.  				if (line.StartsWith("*"))  				{  					if (IsStatusResponse(line))  					{  						ProcessStatusResponse(line);  					}  					else  					{  						int no = 0;  						int uid = 0;  						int size = 0;  						byte[] data = null;  						IMAP_MessageFlags flags = IMAP_MessageFlags.Recent;  						string envelope = "";  						string bodystructure = "";  						string internalDate = "";    						// Remove *  						line = RemoveCmdTag(line);    						// Get message number  						no = Convert.ToInt32(line.Substring(0' line.IndexOf(" ")));    						// Get rid of FETCH  and parse params. Reply:* 1 FETCH (UID 12 BODY[] ...)  						line = line.Substring(line.IndexOf("FETCH (") + 7);    						StringReader r = new StringReader(line);  						// Loop fetch result fields  						while (r.Available > 0)  						{  							r.ReadToFirstChar();    							// Fetch command closing ) parenthesis  							if (r.SourceString == ")")  							{  								break;  							}    							#region UID <value>    							// UID <value>  							else if (r.StartsWith("UID"' false))  							{  								// Remove UID word from reply  								r.ReadSpecifiedLength("UID".Length);  								r.ReadToFirstChar();    								// Read <value>  								string word = r.ReadWord();  								if (word == null)  								{  									throw new Exception("IMAP server didn't return UID <value> !");  								}  								else  								{  									uid = Convert.ToInt32(word);  								}  							}    							#endregion    							#region RFC822.SIZE <value>    							// RFC822.SIZE <value>  							else if (r.StartsWith("RFC822.SIZE"' false))  							{  								// Remove RFC822.SIZE word from reply  								r.ReadSpecifiedLength("RFC822.SIZE".Length);  								r.ReadToFirstChar();    								// Read <value>  								string word = r.ReadWord();  								if (word == null)  								{  									throw new Exception("IMAP server didn't return RFC822.SIZE <value> !");  								}  								else  								{  									try  									{  										size = Convert.ToInt32(word);  									}  									catch  									{  										throw new Exception("IMAP server returned invalid RFC822.SIZE <value> '" + word + "' !");  									}  								}  							}    							#endregion    							#region INTERNALDATE <value>    							// INTERNALDATE <value>  							else if (r.StartsWith("INTERNALDATE"' false))  							{  								// Remove INTERNALDATE word from reply  								r.ReadSpecifiedLength("INTERNALDATE".Length);  								r.ReadToFirstChar();    								// Read <value>  								string word = r.ReadWord();  								if (word == null)  								{  									throw new Exception("IMAP server didn't return INTERNALDATE <value> !");  								}  								else  								{  									internalDate = word;  								}  							}    							#endregion    							#region ENVELOPE (<envelope-string>)    							else if (r.StartsWith("ENVELOPE"' false))  							{  								// Remove ENVELOPE word from reply  								r.ReadSpecifiedLength("ENVELOPE".Length);  								r.ReadToFirstChar();    								/*   									Handle string literals {count-to-read}<CRLF>data(length = count-to-read).  									(string can be quoted string or literal)  									Loop while get envelope'invalid response or timeout.  								*/    								while (true)  								{  									try  									{  										envelope = r.ReadParenthesized();  										break;  									}  									catch (Exception x)  									{  										string s = r.ReadToEnd();    										/* partial_envelope {count-to-read}  											Example: ENVELOPE ("Mon' 03 Apr 2006 10:10:10 GMT" {35}  										*/  										if (s.EndsWith("}"))  										{  											// Get partial envelope and append it back to reader  											r.AppenString(s.Substring(0' s.LastIndexOf('{')));    											// Read remaining envelope and append it to reader.  											int countToRead = Convert.ToInt32(s.Substring(s.LastIndexOf('{') + 1' s.LastIndexOf('}') - s.LastIndexOf('{') - 1));  											string reply = this.TcpStream.ReadFixedCountString(countToRead);  											LogAddRead(countToRead' reply);  											r.AppenString(TextUtils.QuoteString(reply));    											// Read fetch continuing line.  											this.TcpStream.ReadLine(args' false);  											if (args.Error != null)  											{  												throw args.Error;  											}  											line = args.LineUtf8;  											LogAddRead(args.BytesInBuffer' line);  											r.AppenString(line);  										}  										// Unexpected response  										else  										{  											throw x;  										}  									}  								}  							}    							#endregion    							#region BODYSTRUCTURE (<bodystructure-string>)    							else if (r.StartsWith("BODYSTRUCTURE"' false))  							{  								// Remove BODYSTRUCTURE word from reply  								r.ReadSpecifiedLength("BODYSTRUCTURE".Length);  								r.ReadToFirstChar();    								bodystructure = r.ReadParenthesized();  							}    							#endregion    							#region BODY[] or BODY[HEADER]    							// BODY[] or BODY[HEADER]  							else if (r.StartsWith("BODY"' false))  							{  								if (r.StartsWith("BODY[]"' false))  								{  									// Remove BODY[]  									r.ReadSpecifiedLength("BODY[]".Length);  								}  								else if (r.StartsWith("BODY[HEADER]"' false))  								{  									// Remove BODY[HEADER]  									r.ReadSpecifiedLength("BODY[HEADER]".Length);  								}  								else  								{  									throw new Exception("Invalid FETCH response: " + r.SourceString);  								}  								r.ReadToFirstChar();    								// We must now have {<size-to-read>}' or there is error  								if (!r.StartsWith("{"))  								{  									throw new Exception("Invalid FETCH BODY[] or BODY[HEADER] response: " + r.SourceString);  								}  								// Read <size-to-read>  								int dataLength = Convert.ToInt32(r.ReadParenthesized());    								// Read data  								MemoryStream storeStrm = new MemoryStream(dataLength);  								this.TcpStream.ReadFixedCount(storeStrm' dataLength);  								LogAddRead(dataLength' "Readed " + dataLength.ToString() + " bytes.");  								data = storeStrm.ToArray();    								// Read fetch continuing line.  								this.TcpStream.ReadLine(args' false);  								if (args.Error != null)  								{  									throw args.Error;  								}  								line = args.LineUtf8;  								LogAddRead(args.BytesInBuffer' line);  								r.AppenString(line);  							}    							#endregion    							#region FLAGS (<flags-list>)    							// FLAGS (<flags-list>)  							else if (r.StartsWith("FLAGS"' false))  							{  								// Remove FLAGS word from reply  								r.ReadSpecifiedLength("FLAGS".Length);  								r.ReadToFirstChar();    								// Read (<flags-list>)  								string flagsList = r.ReadParenthesized();  								if (flagsList == null)  								{  									throw new Exception("IMAP server didn't return FLAGS (<flags-list>) !");  								}  								else  								{  									flags = IMAP_Utils.ParseMessageFlags(flagsList);  								}  							}    							#endregion    							else  							{  								throw new Exception("Not supported fetch reply: " + r.SourceString);  							}  						}    						fetchItems.Add(new IMAP_FetchItem(no' uid' size' data' flags' internalDate' envelope' bodystructure' fetchFlags));  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetMessagesTotalSize,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				// We have un-tagged resposne.  				if (line.StartsWith("*"))  				{  					if (IsStatusResponse(line))  					{  						ProcessStatusResponse(line);  					}  					else  					{  						// Get rid of * 1 FETCH  and parse params. Reply:* 1 FETCH (UID 12 BODY[] ...)  						line = line.Substring(line.IndexOf("FETCH (") + 7);    						// RFC822.SIZE field  						if (line.ToUpper().StartsWith("RFC822.SIZE"))  						{  							line = line.Substring(11).Trim(); // Remove RFC822.SIZE word from reply    							totalSize += Convert.ToInt32(line.Substring(0' line.Length - 1).Trim()); // Remove ending ')'						  						}  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetMessagesTotalSize,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				// We have un-tagged resposne.  				if (line.StartsWith("*"))  				{  					if (IsStatusResponse(line))  					{  						ProcessStatusResponse(line);  					}  					else  					{  						// Get rid of * 1 FETCH  and parse params. Reply:* 1 FETCH (UID 12 BODY[] ...)  						line = line.Substring(line.IndexOf("FETCH (") + 7);    						// RFC822.SIZE field  						if (line.ToUpper().StartsWith("RFC822.SIZE"))  						{  							line = line.Substring(11).Trim(); // Remove RFC822.SIZE word from reply    							totalSize += Convert.ToInt32(line.Substring(0' line.Length - 1).Trim()); // Remove ending ')'						  						}  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,GetUnseenMessagesCount,The following statement contains a magic number: while (true)  			{  				line = this.ReadLine();    				// We have un-tagged resposne.  				if (line.StartsWith("*"))  				{  					if (IsStatusResponse(line))  					{  						ProcessStatusResponse(line);  					}  					else  					{  						// Get rid of * 1 FETCH  and parse params. Reply:* 1 FETCH (UID 12 BODY[] ...)  						line = line.Substring(line.IndexOf("FETCH (") + 7);    						if (line.ToUpper().IndexOf("\\SEEN") == -1)  						{  							count++;  						}  					}  				}  				else  				{  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,OnConnected,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]' SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.POP3.Client,POP3_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_ClientException.cs,POP3_ClientException,The following statement contains a magic number: string[] code_text = responseLine.Split(new char[]{ }'2);
Magic Number,LumiSoft.Net.POP3.Client,POP3_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_ClientException.cs,POP3_ClientException,The following statement contains a magic number: if(code_text.Length == 2){                  m_ResponseText = code_text[1];              }
Magic Number,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,OnConnected,The following statement contains a magic number: if(line.ToUpper().StartsWith("+OK")){                  m_GreetingText = line.Substring(3).Trim();    			    // Try to read APOP hash key' if supports APOP.  				if(line.IndexOf("<") > -1 && line.IndexOf(">") > -1){  					m_ApopHashKey = line.Substring(line.IndexOf("<")'line.LastIndexOf(">") - line.IndexOf("<") + 1);  				}  			}              else{                  throw new POP3_ClientException(line);              }
Magic Number,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,GetMessage,The following statement contains a magic number: if(line.StartsWith("+OK")){                      SmartStream.ReadPeriodTerminatedAsyncOP readTermOP = new SmartStream.ReadPeriodTerminatedAsyncOP(stream'999999999'SizeExceededAction.ThrowException);                  this.TcpStream.ReadPeriodTerminated(readTermOP'false);                  if(readTermOP.Error != null){                      throw readTermOP.Error;                  }                  LogAddWrite(readTermOP.BytesStored'"Readed " + readTermOP.BytesStored.ToString() + " bytes.");  			}  			else{  				throw new POP3_ClientException(line);  			}
Magic Number,LumiSoft.Net.POP3.Client,POP3_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Client\POP3_Client.cs,GetTopOfMessage,The following statement contains a magic number: if(line.StartsWith("+OK")){                  SmartStream.ReadPeriodTerminatedAsyncOP readTermOP = new SmartStream.ReadPeriodTerminatedAsyncOP(stream'999999999'SizeExceededAction.ThrowException);                  this.TcpStream.ReadPeriodTerminated(readTermOP'false);                  if(readTermOP.Error != null){                      throw readTermOP.Error;                  }                  LogAddWrite(readTermOP.BytesStored'"Readed " + readTermOP.BytesStored.ToString() + " bytes.");  			}  			else{  				throw new POP3_ClientException(line);  			}
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,wfrm_RTP_Debug,The following statement contains a magic number: m_pTimer.Interval = 1000;
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: this.ClientSize = new Size(400'450);
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: this.ClientSize = new Size(400'450);
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: m_pParticipantsSplitter.SplitterDistance = 60;
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: m_pSessions.Size = new Size(200'20);
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: m_pSessions.Size = new Size(200'20);
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: m_pSessions.Location = new Point(100'2);
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: m_pSessions.Location = new Point(100'2);
Magic Number,LumiSoft.Net.RTP.Debug,wfrm_RTP_Debug,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\Debug\wfrm_RTP_Debug.cs,InitUI,The following statement contains a magic number: m_pErrors.Columns.Add("Message"'300);
Magic Number,LumiSoft.Net.RTP,RTP_Address,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Address.cs,RTP_Address,The following statement contains a magic number: if(ttl < 0 || ttl > 255){                  throw new ArgumentException("Argument 'ttl' value must be between '0' and '255'.");              }
Magic Number,LumiSoft.Net.RTP,RTP_ReceiveStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_ReceiveStream.cs,Process,The following statement contains a magic number: if(UpdateSeq(packet.SeqNo)){                  OnPacketReceived(packet);                    /* RFC 3550 A.8 Estimating the Interarrival Jitter.                      The code fragments below implement the algorithm given in Section                      6.4.1 for calculating an estimate of the statistical variance of the                      RTP data interarrival time to be inserted in the interarrival jitter                      field of reception reports.  The inputs are r->ts' the timestamp from                      the incoming packet' and arrival' the current time in the same units.                      Here s points to state for the source; s->transit holds the relative                      transit time for the previous packet' and s->jitter holds the                      estimated jitter.  The jitter field of the reception report is                      measured in timestamp units and expressed as an unsigned integer' but                      the jitter estimate is kept in a floating point.  As each data packet                      arrives' the jitter estimate is updated:                            int transit = arrival - r->ts;                          int d = transit - s->transit;                          s->transit = transit;                          if (d < 0) d = -d;                          s->jitter += (1./16.) * ((double)d - s->jitter);                        When a reception report block (to which rr points) is generated for                      this member' the current jitter estimate is returned:                            rr->jitter = (u_int32) s->jitter;                    */                  uint arrival = RTP_Utils.DateTimeToNTP32(DateTime.Now);                  int transit  = (int)(arrival - packet.Timestamp);                  int d = transit - m_Transit;                  m_Transit = transit;                  if(d < 0){                      d = -d;                  }                  m_Jitter += (1.0/16.0) * ((double)d - m_Jitter);                }
Magic Number,LumiSoft.Net.RTP,RTP_ReceiveStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_ReceiveStream.cs,CreateReceiverReport,The following statement contains a magic number: uint extHighestSeqNo = (uint)(m_SeqNoWrapCount << 16 + m_MaxSeqNo);
Magic Number,LumiSoft.Net.RTP,RTP_ReceiveStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_ReceiveStream.cs,CreateReceiverReport,The following statement contains a magic number: if(expected_interval == 0 || lost_interval <= 0){                  fraction = 0;              }              else{                  fraction = (lost_interval << 8) / expected_interval;              }
Magic Number,LumiSoft.Net.RTP,RTP_ReceiveStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_ReceiveStream.cs,CreateReceiverReport,The following statement contains a magic number: rr.LastSR                  = (m_pLastSR == null ? 0 : ((uint)((long)m_pLastSR.NtpTimestamp >> 8) & 0xFFFF));
Magic Number,LumiSoft.Net.RTP,RTP_ReceiveStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_ReceiveStream.cs,CreateReceiverReport,The following statement contains a magic number: rr.DelaySinceLastSR        = (uint)Math.Max(0'this.DelaySinceLastSR / 65.536);
Magic Number,LumiSoft.Net.RTP,RTP_SendStream,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_SendStream.cs,RTP_SendStream,The following statement contains a magic number: m_SeqNo = new Random().Next(1'32000);
Magic Number,LumiSoft.Net.RTP,RTCP_CompoundPacket,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_CompoundPacket.cs,Validate,The following statement contains a magic number: for(int i=0;i<m_pPackets.Count;i++){                  RTCP_Packet packet = m_pPackets[i];                  if(packet.Version != 2){                      throw new ArgumentException("RTP version field must equal 2.");                  }                  if(i < (m_pPackets.Count - 1) && packet.IsPadded){                      throw new ArgumentException("Only the last packet in RTCP compound packet may be padded.");                  }              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The following statement contains a magic number: m_Version = buffer[offset++] >> 6;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The following statement contains a magic number: bool isPadded  = Convert.ToBoolean((buffer[offset] >> 5) & 0x1);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The following statement contains a magic number: int  length    = buffer[offset++] << 8 | buffer[offset++];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The following statement contains a magic number: m_Source  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The following statement contains a magic number: m_Source  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The following statement contains a magic number: m_Source  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ParseInternal,The following statement contains a magic number: m_Data    = new byte[length - 8];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: int length = 8 + m_Data.Length;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_SubType & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_SubType & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_SubType & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = 204;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((length >> 8) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Source >> 24) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Source >> 16) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Source >> 8)  | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)m_Name[2];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_APP,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_APP.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)m_Name[2];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ParseInternal,The following statement contains a magic number: m_Version   = buffer[offset] >> 6;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ParseInternal,The following statement contains a magic number: bool isPadded    = Convert.ToBoolean((buffer[offset] >> 5) & 0x1);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ParseInternal,The following statement contains a magic number: int  length      = buffer[offset++] << 8 | buffer[offset++];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<sourceCount;i++){                  m_Sources[i] = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<sourceCount;i++){                  m_Sources[i] = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<sourceCount;i++){                  m_Sources[i] = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ParseInternal,The following statement contains a magic number: if(length > m_Sources.Length * 4){                  int reasonLength = buffer[offset++];                  m_LeavingReason = Encoding.UTF8.GetString(buffer'offset'reasonLength);                  offset += reasonLength;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: length += m_Sources.Length * 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_Sources.Length & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_Sources.Length & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_Sources.Length & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: buffer[offset++] = 203;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((length >> 8) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: foreach(int source in m_Sources){                  buffer[offset++] = (byte)((source & 0xFF000000) >> 24);                  buffer[offset++] = (byte)((source & 0x00FF0000) >> 16);                  buffer[offset++] = (byte)((source & 0x0000FF00) >> 8);                  buffer[offset++] = (byte)((source & 0x000000FF));              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: foreach(int source in m_Sources){                  buffer[offset++] = (byte)((source & 0xFF000000) >> 24);                  buffer[offset++] = (byte)((source & 0x00FF0000) >> 16);                  buffer[offset++] = (byte)((source & 0x0000FF00) >> 8);                  buffer[offset++] = (byte)((source & 0x000000FF));              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_BYE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_BYE.cs,ToByte,The following statement contains a magic number: foreach(int source in m_Sources){                  buffer[offset++] = (byte)((source & 0xFF000000) >> 24);                  buffer[offset++] = (byte)((source & 0x00FF0000) >> 16);                  buffer[offset++] = (byte)((source & 0x0000FF00) >> 8);                  buffer[offset++] = (byte)((source & 0x000000FF));              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet.cs,Parse,The following statement contains a magic number: if(type == RTCP_PacketType.SR){                  RTCP_Packet_SR packet = new RTCP_Packet_SR();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // RR              else if(type == RTCP_PacketType.RR){                  RTCP_Packet_RR packet = new RTCP_Packet_RR();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // SDES              else if(type == RTCP_PacketType.SDES){                  RTCP_Packet_SDES packet = new RTCP_Packet_SDES();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // BYE              else if(type == RTCP_PacketType.BYE){                  RTCP_Packet_BYE packet = new RTCP_Packet_BYE();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // APP              else if(type == RTCP_PacketType.APP){                  RTCP_Packet_APP packet = new RTCP_Packet_APP();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              else{                  // We need to move offset.                  offset += 2;                  int length = buffer[offset++] << 8 | buffer[offset++];                  offset += length;                    throw new ArgumentException("Unknown RTCP packet type '" + type + "'.");              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet.cs,Parse,The following statement contains a magic number: if(type == RTCP_PacketType.SR){                  RTCP_Packet_SR packet = new RTCP_Packet_SR();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // RR              else if(type == RTCP_PacketType.RR){                  RTCP_Packet_RR packet = new RTCP_Packet_RR();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // SDES              else if(type == RTCP_PacketType.SDES){                  RTCP_Packet_SDES packet = new RTCP_Packet_SDES();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // BYE              else if(type == RTCP_PacketType.BYE){                  RTCP_Packet_BYE packet = new RTCP_Packet_BYE();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              // APP              else if(type == RTCP_PacketType.APP){                  RTCP_Packet_APP packet = new RTCP_Packet_APP();                  packet.ParseInternal(buffer'ref offset);                    return packet;              }              else{                  // We need to move offset.                  offset += 2;                  int length = buffer[offset++] << 8 | buffer[offset++];                  offset += length;                    throw new ArgumentException("Unknown RTCP packet type '" + type + "'.");              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ParseInternal,The following statement contains a magic number: m_Version        = buffer[offset] >> 6;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ParseInternal,The following statement contains a magic number: bool isPadded         = Convert.ToBoolean((buffer[offset] >> 5) & 0x1);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ParseInternal,The following statement contains a magic number: int  length           = buffer[offset++] << 8 | buffer[offset++];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ParseInternal,The following statement contains a magic number: m_SSRC = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ParseInternal,The following statement contains a magic number: m_SSRC = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ParseInternal,The following statement contains a magic number: m_SSRC = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<reportBlockCount;i++){                  RTCP_Packet_ReportBlock reportBlock = new RTCP_Packet_ReportBlock();                  reportBlock.Parse(buffer'offset);                  m_pReportBlocks.Add(reportBlock);                  offset += 24;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: int length =  (4 + (m_pReportBlocks.Count * 24)) / 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: int length =  (4 + (m_pReportBlocks.Count * 24)) / 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: int length =  (4 + (m_pReportBlocks.Count * 24)) / 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | (m_pReportBlocks.Count & 0x1F));
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | (m_pReportBlocks.Count & 0x1F));
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | (m_pReportBlocks.Count & 0x1F));
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = 201;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((length >> 8) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_RR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_RR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 8)  & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: m_Source = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: m_Source = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: m_Source = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: while(offset < buffer.Length && buffer[offset] != 0){                  int type   = buffer[offset++];                  int length = buffer[offset++];                    // CNAME                  if(type == 1){                      m_CName = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NAME                  else if(type == 2){                      m_Name = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // EMAIL                  else if(type == 3){                      m_Email = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PHONE                  else if(type == 4){                      m_Phone = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // LOC                  else if(type == 5){                      m_Location = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // TOOL                  else if(type == 6){                      m_Tool = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NOTE                  else if(type == 7){                      m_Note = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PRIV                  else if(type == 8){                      // TODO:                  }                  offset += length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: while(offset < buffer.Length && buffer[offset] != 0){                  int type   = buffer[offset++];                  int length = buffer[offset++];                    // CNAME                  if(type == 1){                      m_CName = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NAME                  else if(type == 2){                      m_Name = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // EMAIL                  else if(type == 3){                      m_Email = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PHONE                  else if(type == 4){                      m_Phone = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // LOC                  else if(type == 5){                      m_Location = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // TOOL                  else if(type == 6){                      m_Tool = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NOTE                  else if(type == 7){                      m_Note = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PRIV                  else if(type == 8){                      // TODO:                  }                  offset += length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: while(offset < buffer.Length && buffer[offset] != 0){                  int type   = buffer[offset++];                  int length = buffer[offset++];                    // CNAME                  if(type == 1){                      m_CName = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NAME                  else if(type == 2){                      m_Name = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // EMAIL                  else if(type == 3){                      m_Email = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PHONE                  else if(type == 4){                      m_Phone = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // LOC                  else if(type == 5){                      m_Location = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // TOOL                  else if(type == 6){                      m_Tool = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NOTE                  else if(type == 7){                      m_Note = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PRIV                  else if(type == 8){                      // TODO:                  }                  offset += length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: while(offset < buffer.Length && buffer[offset] != 0){                  int type   = buffer[offset++];                  int length = buffer[offset++];                    // CNAME                  if(type == 1){                      m_CName = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NAME                  else if(type == 2){                      m_Name = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // EMAIL                  else if(type == 3){                      m_Email = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PHONE                  else if(type == 4){                      m_Phone = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // LOC                  else if(type == 5){                      m_Location = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // TOOL                  else if(type == 6){                      m_Tool = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NOTE                  else if(type == 7){                      m_Note = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PRIV                  else if(type == 8){                      // TODO:                  }                  offset += length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: while(offset < buffer.Length && buffer[offset] != 0){                  int type   = buffer[offset++];                  int length = buffer[offset++];                    // CNAME                  if(type == 1){                      m_CName = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NAME                  else if(type == 2){                      m_Name = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // EMAIL                  else if(type == 3){                      m_Email = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PHONE                  else if(type == 4){                      m_Phone = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // LOC                  else if(type == 5){                      m_Location = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // TOOL                  else if(type == 6){                      m_Tool = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NOTE                  else if(type == 7){                      m_Note = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PRIV                  else if(type == 8){                      // TODO:                  }                  offset += length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: while(offset < buffer.Length && buffer[offset] != 0){                  int type   = buffer[offset++];                  int length = buffer[offset++];                    // CNAME                  if(type == 1){                      m_CName = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NAME                  else if(type == 2){                      m_Name = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // EMAIL                  else if(type == 3){                      m_Email = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PHONE                  else if(type == 4){                      m_Phone = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // LOC                  else if(type == 5){                      m_Location = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // TOOL                  else if(type == 6){                      m_Tool = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NOTE                  else if(type == 7){                      m_Note = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PRIV                  else if(type == 8){                      // TODO:                  }                  offset += length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: while(offset < buffer.Length && buffer[offset] != 0){                  int type   = buffer[offset++];                  int length = buffer[offset++];                    // CNAME                  if(type == 1){                      m_CName = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NAME                  else if(type == 2){                      m_Name = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // EMAIL                  else if(type == 3){                      m_Email = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PHONE                  else if(type == 4){                      m_Phone = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // LOC                  else if(type == 5){                      m_Location = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // TOOL                  else if(type == 6){                      m_Tool = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // NOTE                  else if(type == 7){                      m_Note = Encoding.UTF8.GetString(buffer'offset'length);                  }                  // PRIV                  else if(type == 8){                      // TODO:                  }                  offset += length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,Parse,The following statement contains a magic number: offset += (offset - startOffset) % 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Source >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Source >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Source >>  8) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: if(!string.IsNullOrEmpty(m_Name)){                  byte[] b = Encoding.UTF8.GetBytes(m_Name);                  buffer[offset++] = 2;                  buffer[offset++] = (byte)b.Length;                  Array.Copy(b'0'buffer'offset'b.Length);                  offset += b.Length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: if(!string.IsNullOrEmpty(m_Email)){                  byte[] b = Encoding.UTF8.GetBytes(m_Email);                  buffer[offset++] = 3;                  buffer[offset++] = (byte)b.Length;                  Array.Copy(b'0'buffer'offset'b.Length);                  offset += b.Length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: if(!string.IsNullOrEmpty(m_Phone)){                  byte[] b = Encoding.UTF8.GetBytes(m_Phone);                  buffer[offset++] = 4;                  buffer[offset++] = (byte)b.Length;                  Array.Copy(b'0'buffer'offset'b.Length);                  offset += b.Length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: if(!string.IsNullOrEmpty(m_Location)){                  byte[] b = Encoding.UTF8.GetBytes(m_Location);                  buffer[offset++] = 5;                  buffer[offset++] = (byte)b.Length;                  Array.Copy(b'0'buffer'offset'b.Length);                  offset += b.Length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: if(!string.IsNullOrEmpty(m_Tool)){                  byte[] b = Encoding.UTF8.GetBytes(m_Tool);                  buffer[offset++] = 6;                  buffer[offset++] = (byte)b.Length;                  Array.Copy(b'0'buffer'offset'b.Length);                  offset += b.Length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: if(!string.IsNullOrEmpty(m_Note)){                  byte[] b = Encoding.UTF8.GetBytes(m_Note);                  buffer[offset++] = 7;                  buffer[offset++] = (byte)b.Length;                  Array.Copy(b'0'buffer'offset'b.Length);                  offset += b.Length;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES_Chunk,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES_Chunk.cs,ToByte,The following statement contains a magic number: while((offset - startOffset) % 4 > 0){                  buffer[offset++] = 0;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_Version        = buffer[offset] >> 6;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: bool isPadded         = Convert.ToBoolean((buffer[offset] >> 5) & 0x1);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: int  length           = buffer[offset++] << 8 | buffer[offset++];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SSRC              = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SSRC              = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SSRC              = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_NtpTimestamp      = (ulong)(buffer[offset++] << 56 | buffer[offset++] << 48 | buffer[offset++] << 40 |buffer[offset++] << 32 | buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_RtpTimestamp      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_RtpTimestamp      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_RtpTimestamp      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SenderPacketCount = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SenderPacketCount = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SenderPacketCount = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SenderOctetCount  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SenderOctetCount  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: m_SenderOctetCount  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<reportBlockCount;i++){                  RTCP_Packet_ReportBlock reportBlock = new RTCP_Packet_ReportBlock();                  reportBlock.Parse(buffer'offset);                  m_pReportBlocks.Add(reportBlock);                  offset += 24;              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: int length = (24 + (m_pReportBlocks.Count * 24)) / 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: int length = (24 + (m_pReportBlocks.Count * 24)) / 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: int length = (24 + (m_pReportBlocks.Count * 24)) / 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | (m_pReportBlocks.Count & 0x1F));
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | (m_pReportBlocks.Count & 0x1F));
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | (m_pReportBlocks.Count & 0x1F));
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = 200;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((length >> 8) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 8)  & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_NtpTimestamp >> 56) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_NtpTimestamp >> 48) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_NtpTimestamp >> 40) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_NtpTimestamp >> 32) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_NtpTimestamp >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_NtpTimestamp >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_NtpTimestamp >> 8)  & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_RtpTimestamp >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_RtpTimestamp >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_RtpTimestamp >> 8)  & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SenderPacketCount >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SenderPacketCount >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SenderPacketCount >> 8)  & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SenderOctetCount >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SenderOctetCount >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SR,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SR.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SenderOctetCount >> 8)  & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ParseInternal,The following statement contains a magic number: m_Version   = buffer[offset] >> 6;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ParseInternal,The following statement contains a magic number: bool isPadded    = Convert.ToBoolean((buffer[offset] >> 5) & 0x1);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ParseInternal,The following statement contains a magic number: int  length      = buffer[offset++] << 8 | buffer[offset++];
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_pChunks.Count & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_pChunks.Count & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(2 << 6 | 0 << 5 | m_pChunks.Count & 0x1F);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ToByte,The following statement contains a magic number: buffer[offset++] = 202;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ToByte,The following statement contains a magic number: int length = (offset - chunksStartOffset) / 4;
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_SDES,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_SDES.cs,ToByte,The following statement contains a magic number: buffer[lengthOffset]     = (byte)((length >> 8) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_SSRC                  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_SSRC                  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_SSRC                  = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_CumulativePacketsLost = (uint)(buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_CumulativePacketsLost = (uint)(buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_ExtHighestSeqNumber   = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_ExtHighestSeqNumber   = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_ExtHighestSeqNumber   = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_Jitter                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_Jitter                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_Jitter                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_LastSR                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_LastSR                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_LastSR                = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_DelaySinceLastSR      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_DelaySinceLastSR      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,Parse,The following statement contains a magic number: m_DelaySinceLastSR      = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: if(offset + 24 > buffer.Length){                  throw new ArgumentException("Argument 'buffer' has not enough room to store report block.");              }
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 24) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 16) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 8)  | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_CumulativePacketsLost >> 16) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_CumulativePacketsLost >> 8)  | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_ExtHighestSeqNumber >> 24) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_ExtHighestSeqNumber >> 16) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_ExtHighestSeqNumber >> 8)  | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Jitter >> 24) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Jitter >> 16) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Jitter >> 8)  | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_LastSR >> 24) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_LastSR >> 16) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_LastSR >> 8)  | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_DelaySinceLastSR >> 24) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_DelaySinceLastSR >> 16) | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTCP_Packet_ReportBlock,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTCP_Packet_ReportBlock.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_DelaySinceLastSR >> 8)  | 0xFF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(m_Version << 6 | 0 << 5 | cc & 0xF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(m_Version << 6 | 0 << 5 | cc & 0xF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(Convert.ToInt32(m_IsMarker) << 7 | m_PayloadType & 0x7F);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)(m_SequenceNumber >> 8);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Timestamp >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Timestamp >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_Timestamp >>  8) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 24) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >> 16) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: buffer[offset++] = (byte)((m_SSRC >>  8) & 0xFF);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: if(m_CSRC != null){                  foreach(int csrc in m_CSRC){                      buffer[offset++] = (byte)((csrc >> 24) & 0xFF);                      buffer[offset++] = (byte)((csrc >> 16) & 0xFF);                      buffer[offset++] = (byte)((csrc >>  8) & 0xFF);                      buffer[offset++] = (byte)(csrc & 0xFF);                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: if(m_CSRC != null){                  foreach(int csrc in m_CSRC){                      buffer[offset++] = (byte)((csrc >> 24) & 0xFF);                      buffer[offset++] = (byte)((csrc >> 16) & 0xFF);                      buffer[offset++] = (byte)((csrc >>  8) & 0xFF);                      buffer[offset++] = (byte)(csrc & 0xFF);                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ToByte,The following statement contains a magic number: if(m_CSRC != null){                  foreach(int csrc in m_CSRC){                      buffer[offset++] = (byte)((csrc >> 24) & 0xFF);                      buffer[offset++] = (byte)((csrc >> 16) & 0xFF);                      buffer[offset++] = (byte)((csrc >>  8) & 0xFF);                      buffer[offset++] = (byte)(csrc & 0xFF);                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_Version = buffer[offset] >> 6;
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: bool isPadded  = Convert.ToBoolean((buffer[offset] >> 5) & 0x1);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: bool hasExtention = Convert.ToBoolean((buffer[offset] >> 4) & 0x1);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_IsMarker = Convert.ToBoolean(buffer[offset] >> 7);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_SequenceNumber = (ushort)(buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_Timestamp = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_Timestamp = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_Timestamp = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_SSRC = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_SSRC = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: m_SSRC = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<csrcCount;i++){                  m_CSRC[i] = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);              }
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<csrcCount;i++){                  m_CSRC[i] = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);              }
Magic Number,LumiSoft.Net.RTP,RTP_Packet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Packet.cs,ParseInternal,The following statement contains a magic number: for(int i=0;i<csrcCount;i++){                  m_CSRC[i] = (uint)(buffer[offset++] << 24 | buffer[offset++] << 16 | buffer[offset++] << 8 | buffer[offset++]);              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,RTP_Session,The following statement contains a magic number: m_pRtpReceiveBuffer = new byte[32000];
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,RTP_Session,The following statement contains a magic number: m_pRtcpReceiveBuffer = new byte[32000];
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,Close,The following statement contains a magic number: while(sourcesProcessed < m_pLocalSources.Count){                  uint[] sources = new uint[Math.Min(m_pLocalSources.Count - sourcesProcessed'31)];                  for(int i=0;i<sources.Length;i++){                      sources[i] = m_pLocalSources[sourcesProcessed].SSRC;                      sourcesProcessed++;                  }                    RTCP_Packet_BYE bye = new RTCP_Packet_BYE();                  bye.Sources = sources;                  compundPacket.Packets.Add(bye);              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,Start,The following statement contains a magic number: m_RtcpAvgPacketSize = 100;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,Start,The following statement contains a magic number: Schedule(ComputeRtcpTransmissionInterval(m_pMembers.Count'm_pSenders.Count'm_Bandwidth * 0.25'false'm_RtcpAvgPacketSize'true));
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcpPacket,The following statement contains a magic number: foreach(RTP_Address target in this.Targets){                  try{                      m_pRtcpSocket.SendTo(packetBytes'packetBytes.Length'SocketFlags.None'target.RtcpEP);                        m_RtcpPacketsSent++;                      m_RtcpBytesSent += packetBytes.Length;                      // RFC requires IP header counted too' we just don't do it.                      m_RtcpAvgPacketSize = (1/16) * packetBytes.Length + (15/16) * m_RtcpAvgPacketSize;                  }                  catch{                      m_RtcpFailedTransmissions++;                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcpPacket,The following statement contains a magic number: foreach(RTP_Address target in this.Targets){                  try{                      m_pRtcpSocket.SendTo(packetBytes'packetBytes.Length'SocketFlags.None'target.RtcpEP);                        m_RtcpPacketsSent++;                      m_RtcpBytesSent += packetBytes.Length;                      // RFC requires IP header counted too' we just don't do it.                      m_RtcpAvgPacketSize = (1/16) * packetBytes.Length + (15/16) * m_RtcpAvgPacketSize;                  }                  catch{                      m_RtcpFailedTransmissions++;                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcpPacket,The following statement contains a magic number: foreach(RTP_Address target in this.Targets){                  try{                      m_pRtcpSocket.SendTo(packetBytes'packetBytes.Length'SocketFlags.None'target.RtcpEP);                        m_RtcpPacketsSent++;                      m_RtcpBytesSent += packetBytes.Length;                      // RFC requires IP header counted too' we just don't do it.                      m_RtcpAvgPacketSize = (1/16) * packetBytes.Length + (15/16) * m_RtcpAvgPacketSize;                  }                  catch{                      m_RtcpFailedTransmissions++;                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ProcessRtcp,The following statement contains a magic number: m_RtcpAvgPacketSize = (1/16) * count + (15/16) * m_RtcpAvgPacketSize;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ProcessRtcp,The following statement contains a magic number: m_RtcpAvgPacketSize = (1/16) * count + (15/16) * m_RtcpAvgPacketSize;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ProcessRtcp,The following statement contains a magic number: m_RtcpAvgPacketSize = (1/16) * count + (15/16) * m_RtcpAvgPacketSize;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,Schedule,The following statement contains a magic number: m_pRtcpTimer.Interval = seconds * 1000;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: double RTCP_MIN_TIME = 5;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: double RTCP_SENDER_BW_FRACTION = 0.25;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: double COMPENSATION = 2.71828 - 1.5;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: double COMPENSATION = 2.71828 - 1.5;
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: if(initial){                  rtcp_min_time /= 2;              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: t = t * (new Random().Next(5'15) / 10.0);
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: t = t * (new Random().Next(5'15) / 10.0);
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: t = t * (new Random().Next(5'15) / 10.0);
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,ComputeRtcpTransmissionInterval,The following statement contains a magic number: return (int)Math.Max(t'2.0);
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,DoReverseReconsideration,The following statement contains a magic number: Schedule((int)Math.Max((m_pMembers.Count / m_PMembersCount) * ((TimeSpan)(timeNext - DateTime.Now)).TotalSeconds'2));
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,TimeOutSsrc,The following statement contains a magic number: foreach(RTP_Source sender in senders){                  // Sender has not sent RTP data since last two RTCP intervals.                  if(sender.LastRtpPacket.AddMilliseconds(2 * m_pRtcpTimer.Interval) < DateTime.Now){                      m_pSenders.Remove(sender.SSRC);                        // Mark source "passive".                      sender.SetActivePassive(false);                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,TimeOutSsrc,The following statement contains a magic number: int Td = ComputeRtcpTransmissionInterval(m_pMembers.Count'm_pSenders.Count'm_Bandwidth * 0.25'false'm_RtcpAvgPacketSize'false);
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,TimeOutSsrc,The following statement contains a magic number: foreach(RTP_Source member in this.Members){                                  // Source timed out.                  if(member.LastActivity.AddSeconds(5 * Td) < DateTime.Now){                      m_pMembers.Remove(member.SSRC);                      // Don't dispose local source' just remove only from members.                      if(!member.IsLocal){                          member.Dispose();                      }                      membersUpdated = true;                  }              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcp,The following statement contains a magic number: try{                  m_pRtcpSource.SetLastRtcpPacket(DateTime.Now);                                                    RTCP_CompoundPacket compundPacket = new RTCP_CompoundPacket();                    RTCP_Packet_RR rr = null;                    // Find active send streams.                  List<RTP_SendStream> activeSendStreams = new List<RTP_SendStream>();                  foreach(RTP_SendStream stream in this.SendStreams){                      if(stream.RtcpCyclesSinceWeSent < 2){                          activeSendStreams.Add(stream);                          we_sent = true;                      }                      // Notify stream about RTCP cycle.                      stream.RtcpCycle();                  }                    #region SR(s) / RR                    // We are sender.                  if(we_sent){                      // Create SR for each active send stream.                      for(int i=0;i<activeSendStreams.Count;i++){                          RTP_SendStream sendStream = activeSendStreams[i];                            RTCP_Packet_SR sr = new RTCP_Packet_SR(sendStream.Source.SSRC);                          sr.NtpTimestamp      = RTP_Utils.DateTimeToNTP64(DateTime.Now);                          sr.RtpTimestamp      = m_pRtpClock.RtpTimestamp;                          sr.SenderPacketCount = (uint)sendStream.RtpPacketsSent;                          sr.SenderOctetCount  = (uint)sendStream.RtpBytesSent;                            compundPacket.Packets.Add(sr);                      }                  }                  // We are receiver.                  else{                      rr = new RTCP_Packet_RR();                      rr.SSRC = m_pRtcpSource.SSRC;                      compundPacket.Packets.Add(rr);                        // Report blocks added later.                                  }                    #endregion                    #region SDES                    RTCP_Packet_SDES sdes = new RTCP_Packet_SDES();                  // Add default SSRC.                  RTCP_Packet_SDES_Chunk sdesChunk = new RTCP_Packet_SDES_Chunk(m_pRtcpSource.SSRC'm_pSession.LocalParticipant.CNAME);                  // Add next optional SDES item' if any. (We round-robin optional items)                  m_pSession.LocalParticipant.AddNextOptionalSdesItem(sdesChunk);                  sdes.Chunks.Add(sdesChunk);                     // Add all active send streams SSRC -> CNAME. This enusres that all send streams will be mapped to participant.                  foreach(RTP_SendStream stream in activeSendStreams){                      sdes.Chunks.Add(new RTCP_Packet_SDES_Chunk(stream.Source.SSRC'm_pSession.LocalParticipant.CNAME));                  }                  compundPacket.Packets.Add(sdes);                    #endregion                    #region RR filling                    /* RR reporting:                      Report up to 31 active senders' if more senders' reoprt next with next interval.                      Report oldest not reported first'then ventually all sources will be reported with this algorythm.                  */                  RTP_Source[]        senders             = this.Senders;                  DateTime[]          acitveSourceRRTimes = new DateTime[senders.Length];                  RTP_ReceiveStream[] activeSenders       = new RTP_ReceiveStream[senders.Length];                  int                 activeSenderCount   = 0;                  foreach(RTP_Source sender in senders){                      // Remote sender sent RTP data during last RTCP interval.                      if(!sender.IsLocal && sender.LastRtpPacket > m_RtcpLastTransmission){                          acitveSourceRRTimes[activeSenderCount] = sender.LastRRTime;                          activeSenders[activeSenderCount]       = ((RTP_Source_Remote)sender).Stream;                          activeSenderCount++;                      }                  }                                  // Create RR is SR report and no RR created yet.                  if(rr == null){                      rr = new RTCP_Packet_RR();                      rr.SSRC = m_pRtcpSource.SSRC;                      compundPacket.Packets.Add(rr);                  }                  // Sort ASC.                  Array.Sort(acitveSourceRRTimes'activeSenders'0'activeSenderCount);                  // Add up to 31 oldest not reported sources to report.                  for(int i=1;i<31;i++){                      if((activeSenderCount - i) < 0){                          break;                      }                      rr.ReportBlocks.Add(activeSenders[activeSenderCount - i].CreateReceiverReport());                  }                    #endregion                    // Send RTPC packet.                  SendRtcpPacket(compundPacket);                    // Timeout conflicting transport addresses' if not conflicting any more.                  lock(m_pConflictingEPs){                      string[] keys = new string[m_pConflictingEPs.Count];                      m_pConflictingEPs.Keys.CopyTo(keys'0);                      foreach(string key in keys){                          if(m_pConflictingEPs[key].AddMinutes(3) < DateTime.Now){                              m_pConflictingEPs.Remove(key);                          }                      }                  }                    // Since we must check timing out sources at least once per RTCP interval' so we                  // check this before sending RTCP.                  TimeOutSsrc();              }              catch(Exception x){                  m_pSession.OnError(x);              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcp,The following statement contains a magic number: try{                  m_pRtcpSource.SetLastRtcpPacket(DateTime.Now);                                                    RTCP_CompoundPacket compundPacket = new RTCP_CompoundPacket();                    RTCP_Packet_RR rr = null;                    // Find active send streams.                  List<RTP_SendStream> activeSendStreams = new List<RTP_SendStream>();                  foreach(RTP_SendStream stream in this.SendStreams){                      if(stream.RtcpCyclesSinceWeSent < 2){                          activeSendStreams.Add(stream);                          we_sent = true;                      }                      // Notify stream about RTCP cycle.                      stream.RtcpCycle();                  }                    #region SR(s) / RR                    // We are sender.                  if(we_sent){                      // Create SR for each active send stream.                      for(int i=0;i<activeSendStreams.Count;i++){                          RTP_SendStream sendStream = activeSendStreams[i];                            RTCP_Packet_SR sr = new RTCP_Packet_SR(sendStream.Source.SSRC);                          sr.NtpTimestamp      = RTP_Utils.DateTimeToNTP64(DateTime.Now);                          sr.RtpTimestamp      = m_pRtpClock.RtpTimestamp;                          sr.SenderPacketCount = (uint)sendStream.RtpPacketsSent;                          sr.SenderOctetCount  = (uint)sendStream.RtpBytesSent;                            compundPacket.Packets.Add(sr);                      }                  }                  // We are receiver.                  else{                      rr = new RTCP_Packet_RR();                      rr.SSRC = m_pRtcpSource.SSRC;                      compundPacket.Packets.Add(rr);                        // Report blocks added later.                                  }                    #endregion                    #region SDES                    RTCP_Packet_SDES sdes = new RTCP_Packet_SDES();                  // Add default SSRC.                  RTCP_Packet_SDES_Chunk sdesChunk = new RTCP_Packet_SDES_Chunk(m_pRtcpSource.SSRC'm_pSession.LocalParticipant.CNAME);                  // Add next optional SDES item' if any. (We round-robin optional items)                  m_pSession.LocalParticipant.AddNextOptionalSdesItem(sdesChunk);                  sdes.Chunks.Add(sdesChunk);                     // Add all active send streams SSRC -> CNAME. This enusres that all send streams will be mapped to participant.                  foreach(RTP_SendStream stream in activeSendStreams){                      sdes.Chunks.Add(new RTCP_Packet_SDES_Chunk(stream.Source.SSRC'm_pSession.LocalParticipant.CNAME));                  }                  compundPacket.Packets.Add(sdes);                    #endregion                    #region RR filling                    /* RR reporting:                      Report up to 31 active senders' if more senders' reoprt next with next interval.                      Report oldest not reported first'then ventually all sources will be reported with this algorythm.                  */                  RTP_Source[]        senders             = this.Senders;                  DateTime[]          acitveSourceRRTimes = new DateTime[senders.Length];                  RTP_ReceiveStream[] activeSenders       = new RTP_ReceiveStream[senders.Length];                  int                 activeSenderCount   = 0;                  foreach(RTP_Source sender in senders){                      // Remote sender sent RTP data during last RTCP interval.                      if(!sender.IsLocal && sender.LastRtpPacket > m_RtcpLastTransmission){                          acitveSourceRRTimes[activeSenderCount] = sender.LastRRTime;                          activeSenders[activeSenderCount]       = ((RTP_Source_Remote)sender).Stream;                          activeSenderCount++;                      }                  }                                  // Create RR is SR report and no RR created yet.                  if(rr == null){                      rr = new RTCP_Packet_RR();                      rr.SSRC = m_pRtcpSource.SSRC;                      compundPacket.Packets.Add(rr);                  }                  // Sort ASC.                  Array.Sort(acitveSourceRRTimes'activeSenders'0'activeSenderCount);                  // Add up to 31 oldest not reported sources to report.                  for(int i=1;i<31;i++){                      if((activeSenderCount - i) < 0){                          break;                      }                      rr.ReportBlocks.Add(activeSenders[activeSenderCount - i].CreateReceiverReport());                  }                    #endregion                    // Send RTPC packet.                  SendRtcpPacket(compundPacket);                    // Timeout conflicting transport addresses' if not conflicting any more.                  lock(m_pConflictingEPs){                      string[] keys = new string[m_pConflictingEPs.Count];                      m_pConflictingEPs.Keys.CopyTo(keys'0);                      foreach(string key in keys){                          if(m_pConflictingEPs[key].AddMinutes(3) < DateTime.Now){                              m_pConflictingEPs.Remove(key);                          }                      }                  }                    // Since we must check timing out sources at least once per RTCP interval' so we                  // check this before sending RTCP.                  TimeOutSsrc();              }              catch(Exception x){                  m_pSession.OnError(x);              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcp,The following statement contains a magic number: try{                  m_pRtcpSource.SetLastRtcpPacket(DateTime.Now);                                                    RTCP_CompoundPacket compundPacket = new RTCP_CompoundPacket();                    RTCP_Packet_RR rr = null;                    // Find active send streams.                  List<RTP_SendStream> activeSendStreams = new List<RTP_SendStream>();                  foreach(RTP_SendStream stream in this.SendStreams){                      if(stream.RtcpCyclesSinceWeSent < 2){                          activeSendStreams.Add(stream);                          we_sent = true;                      }                      // Notify stream about RTCP cycle.                      stream.RtcpCycle();                  }                    #region SR(s) / RR                    // We are sender.                  if(we_sent){                      // Create SR for each active send stream.                      for(int i=0;i<activeSendStreams.Count;i++){                          RTP_SendStream sendStream = activeSendStreams[i];                            RTCP_Packet_SR sr = new RTCP_Packet_SR(sendStream.Source.SSRC);                          sr.NtpTimestamp      = RTP_Utils.DateTimeToNTP64(DateTime.Now);                          sr.RtpTimestamp      = m_pRtpClock.RtpTimestamp;                          sr.SenderPacketCount = (uint)sendStream.RtpPacketsSent;                          sr.SenderOctetCount  = (uint)sendStream.RtpBytesSent;                            compundPacket.Packets.Add(sr);                      }                  }                  // We are receiver.                  else{                      rr = new RTCP_Packet_RR();                      rr.SSRC = m_pRtcpSource.SSRC;                      compundPacket.Packets.Add(rr);                        // Report blocks added later.                                  }                    #endregion                    #region SDES                    RTCP_Packet_SDES sdes = new RTCP_Packet_SDES();                  // Add default SSRC.                  RTCP_Packet_SDES_Chunk sdesChunk = new RTCP_Packet_SDES_Chunk(m_pRtcpSource.SSRC'm_pSession.LocalParticipant.CNAME);                  // Add next optional SDES item' if any. (We round-robin optional items)                  m_pSession.LocalParticipant.AddNextOptionalSdesItem(sdesChunk);                  sdes.Chunks.Add(sdesChunk);                     // Add all active send streams SSRC -> CNAME. This enusres that all send streams will be mapped to participant.                  foreach(RTP_SendStream stream in activeSendStreams){                      sdes.Chunks.Add(new RTCP_Packet_SDES_Chunk(stream.Source.SSRC'm_pSession.LocalParticipant.CNAME));                  }                  compundPacket.Packets.Add(sdes);                    #endregion                    #region RR filling                    /* RR reporting:                      Report up to 31 active senders' if more senders' reoprt next with next interval.                      Report oldest not reported first'then ventually all sources will be reported with this algorythm.                  */                  RTP_Source[]        senders             = this.Senders;                  DateTime[]          acitveSourceRRTimes = new DateTime[senders.Length];                  RTP_ReceiveStream[] activeSenders       = new RTP_ReceiveStream[senders.Length];                  int                 activeSenderCount   = 0;                  foreach(RTP_Source sender in senders){                      // Remote sender sent RTP data during last RTCP interval.                      if(!sender.IsLocal && sender.LastRtpPacket > m_RtcpLastTransmission){                          acitveSourceRRTimes[activeSenderCount] = sender.LastRRTime;                          activeSenders[activeSenderCount]       = ((RTP_Source_Remote)sender).Stream;                          activeSenderCount++;                      }                  }                                  // Create RR is SR report and no RR created yet.                  if(rr == null){                      rr = new RTCP_Packet_RR();                      rr.SSRC = m_pRtcpSource.SSRC;                      compundPacket.Packets.Add(rr);                  }                  // Sort ASC.                  Array.Sort(acitveSourceRRTimes'activeSenders'0'activeSenderCount);                  // Add up to 31 oldest not reported sources to report.                  for(int i=1;i<31;i++){                      if((activeSenderCount - i) < 0){                          break;                      }                      rr.ReportBlocks.Add(activeSenders[activeSenderCount - i].CreateReceiverReport());                  }                    #endregion                    // Send RTPC packet.                  SendRtcpPacket(compundPacket);                    // Timeout conflicting transport addresses' if not conflicting any more.                  lock(m_pConflictingEPs){                      string[] keys = new string[m_pConflictingEPs.Count];                      m_pConflictingEPs.Keys.CopyTo(keys'0);                      foreach(string key in keys){                          if(m_pConflictingEPs[key].AddMinutes(3) < DateTime.Now){                              m_pConflictingEPs.Remove(key);                          }                      }                  }                    // Since we must check timing out sources at least once per RTCP interval' so we                  // check this before sending RTCP.                  TimeOutSsrc();              }              catch(Exception x){                  m_pSession.OnError(x);              }
Magic Number,LumiSoft.Net.RTP,RTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Session.cs,SendRtcp,The following statement contains a magic number: Schedule(ComputeRtcpTransmissionInterval(m_pMembers.Count'm_pSenders.Count'm_Bandwidth * 0.25'we_sent'm_RtcpAvgPacketSize'false));
Magic Number,LumiSoft.Net.RTP,RTP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Utils.cs,GenerateSSRC,The following statement contains a magic number: return (uint)new Random().Next(100000'int.MaxValue);
Magic Number,LumiSoft.Net.RTP,RTP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Utils.cs,GenerateCNAME,The following statement contains a magic number: return Environment.UserName + "@" + System.Net.Dns.GetHostName() + "." + Guid.NewGuid().ToString().Substring(0'8);
Magic Number,LumiSoft.Net.RTP,RTP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Utils.cs,DateTimeToNTP32,The following statement contains a magic number: return (uint)((DateTimeToNTP64(value) >> 16) & 0xFFFFFFFF);
Magic Number,LumiSoft.Net.RTP,RTP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Utils.cs,DateTimeToNTP64,The following statement contains a magic number: TimeSpan ts = ((TimeSpan)(value.ToUniversalTime() - new DateTime(1900'1'1'0'0'0)));
Magic Number,LumiSoft.Net.RTP,RTP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Utils.cs,DateTimeToNTP64,The following statement contains a magic number: return ((ulong)(ts.TotalMilliseconds % 1000) << 32) | (uint)(ts.Milliseconds << 22);
Magic Number,LumiSoft.Net.RTP,RTP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Utils.cs,DateTimeToNTP64,The following statement contains a magic number: return ((ulong)(ts.TotalMilliseconds % 1000) << 32) | (uint)(ts.Milliseconds << 22);
Magic Number,LumiSoft.Net.RTP,RTP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\RTP\RTP_Utils.cs,DateTimeToNTP64,The following statement contains a magic number: return ((ulong)(ts.TotalMilliseconds % 1000) << 32) | (uint)(ts.Milliseconds << 22);
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_B2BUA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_B2BUA.cs,OnRequestReceived,The following statement contains a magic number: if(request.RequestLine.Method == SIP_Methods.CANCEL){                  /* RFC 3261 9.2.                      If the UAS did not find a matching transaction for the CANCEL                      according to the procedure above' it SHOULD respond to the CANCEL                      with a 481 (Call Leg/Transaction Does Not Exist).                                          Regardless of the method of the original request' as long as the                      CANCEL matched an existing transaction' the UAS answers the CANCEL                      request itself with a 200 (OK) response.                  */                    SIP_ServerTransaction trToCancel = m_pProxy.Stack.TransactionLayer.MatchCancelToTransaction(e.Request);                  if(trToCancel != null){                      trToCancel.Cancel();                      //e.ServerTransaction.SendResponse(request.CreateResponse(SIP_ResponseCodes.x200_Ok));                  }                  else{                      //e.ServerTransaction.SendResponse(request.CreateResponse(SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist));                  }              }              // We never should ge BYE here' because transport layer must match it to dialog.              else if(request.RequestLine.Method == SIP_Methods.BYE){                  /* RFC 3261 15.1.2.                      If the BYE does not match an existing dialog' the UAS core SHOULD generate a 481                      (Call/Transaction Does Not Exist) response and pass that to the server transaction.                  */                  //e.ServerTransaction.SendResponse(request.CreateResponse(SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist));              }              // We never should ge ACK here' because transport layer must match it to dialog.              else if(request.RequestLine.Method == SIP_Methods.ACK){                  // ACK is response less request' so we may not return error to it.              }              // B2BUA must respond to OPTIONS request' not to forward it.              else if(request.RequestLine.Method == SIP_Methods.OPTIONS){     /*                            SIP_Response response = e.Request.CreateResponse(SIP_ResponseCodes.x200_Ok);                                  // Add Allow to non ACK response.                  if(e.Request.RequestLine.Method != SIP_Methods.ACK){                      response.Allow.Add("INVITE'ACK'OPTIONS'CANCEL'BYE'PRACK'MESSAGE'UPDATE");                  }                  // Add Supported to 2xx non ACK response.                  if(response.StatusCodeType == SIP_StatusCodeType.Success && e.Request.RequestLine.Method != SIP_Methods.ACK){                      response.Supported.Add("100rel'timer");                  }                  e.ServerTransaction.SendResponse(response);*/              }              // We never should get PRACK here' because transport layer must match it to dialog.              else if(request.RequestLine.Method == SIP_Methods.PRACK){                  //e.ServerTransaction.SendResponse(request.CreateResponse(SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist));              }              // We never should get UPDATE here' because transport layer must match it to dialog.              else if(request.RequestLine.Method == SIP_Methods.UPDATE){                  //e.ServerTransaction.SendResponse(request.CreateResponse(SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist));              }              else{                  /* draft-marjou-sipping-b2bua-00 4.1.3.                      When the UAS of the B2BUA receives an upstream SIP request' its                      associated UAC generates a new downstream SIP request with its new                      Via' Max-Forwards' Call-Id' CSeq' and Contact header fields. Route                      header fields of the upstream request are copied in the downstream                      request' except the first Route header if it is under the                      responsibility of the B2BUA.  Record-Route header fields of the                      upstream request are not copied in the new downstream request' as                      Record-Route is only meaningful for the upstream dialog.  The UAC                      SHOULD copy other header fields and body from the upstream request                      into this downstream request before sending it.                  */                    SIP_Request b2buaRequest = e.Request.Copy();                  b2buaRequest.Via.RemoveAll();                  b2buaRequest.MaxForwards = 70;                                  b2buaRequest.CallID = SIP_t_CallID.CreateCallID().CallID;                  b2buaRequest.CSeq.SequenceNumber = 1;                  b2buaRequest.Contact.RemoveAll();                  // b2buaRequest.Contact.Add(m_pProxy.CreateContact(b2buaRequest.To.Address).ToStringValue());                  if(b2buaRequest.Route.Count > 0 && m_pProxy.IsLocalRoute(SIP_Uri.Parse(b2buaRequest.Route.GetTopMostValue().Address.Uri.ToString()))){                      b2buaRequest.Route.RemoveTopMostValue();                  }                                  b2buaRequest.RecordRoute.RemoveAll();                    // Remove our Authorization header if it's there.                  foreach(SIP_SingleValueHF<SIP_t_Credentials> header in b2buaRequest.ProxyAuthorization.HeaderFields){                      try{                          Auth_HttpDigest digest = new Auth_HttpDigest(header.ValueX.AuthData'b2buaRequest.RequestLine.Method);                          if(m_pProxy.Stack.Realm == digest.Realm){                              b2buaRequest.ProxyAuthorization.Remove(header);                          }                      }                      catch{                          // We don't care errors here. This can happen if remote server xxx auth method here and                          // we don't know how to parse it' so we leave it as is.                      }                  }                    //--- Add/replace default fields. ------------------------------------------                  b2buaRequest.Allow.RemoveAll();                  b2buaRequest.Supported.RemoveAll();                  // Accept to non ACK'BYE request.                  if(request.RequestLine.Method != SIP_Methods.ACK && request.RequestLine.Method != SIP_Methods.BYE){                      b2buaRequest.Allow.Add("INVITE'ACK'OPTIONS'CANCEL'BYE'PRACK");                  }                  // Supported to non ACK request.                   if(request.RequestLine.Method != SIP_Methods.ACK){                      b2buaRequest.Supported.Add("100rel'timer");                  }                  // Remove Require: header.                  b2buaRequest.Require.RemoveAll();                    // RFC 4028 7.4. For re-INVITE and UPDATE we need to add Session-Expires and Min-SE: headers.                  if(request.RequestLine.Method == SIP_Methods.INVITE || request.RequestLine.Method == SIP_Methods.UPDATE){                      b2buaRequest.SessionExpires = new SIP_t_SessionExpires(m_pProxy.Stack.SessionExpries'"uac");                      b2buaRequest.MinSE = new SIP_t_MinSE(m_pProxy.Stack.MinimumSessionExpries);                  }                    // Forward request.                  m_pProxy.ForwardRequest(true'e'b2buaRequest'false);              }
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registration.cs,AddOrUpdateBindings,The following statement contains a magic number: lock(m_pLock){                  foreach(SIP_t_ContactParam contact in contacts){                      SIP_RegistrationBinding binding = GetBinding(contact.Address.Uri);                      // Add binding.                      if(binding == null){                          binding = new SIP_RegistrationBinding(this'contact.Address.Uri);                          m_pBindings.Add(binding);                      }                        // Update binding.                      binding.Update(                          flow'                          contact.Expires == -1 ? 3600 : contact.Expires'                          contact.QValue == -1 ? 1.0 : contact.QValue'                          callID'                          cseqNo                      );                  }              }
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_Registrar,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_Registrar.cs,SIP_Registrar,The following statement contains a magic number: m_pTimer = new Timer(15000);
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ProcessResponse,The following statement contains a magic number: lock(m_pLock){                    #region 3.  Remove the topmost Via                    /*                       The proxy removes the topmost Via header field value from the                      response.                                         If no Via header field values remain in the response' the                      response was meant for this element and MUST NOT be forwarded.                      The remainder of the processing described in this section is                      not performed on this message' the UAC processing rules                      described in Section 8.1.3 are followed instead (transport                      layer processing has already occurred).                        This will happen' for instance' when the element generates                      CANCEL requests as described in Section 10.                                         NOTE: We MAY NOT do it for B2BUA' skip it for B2BUA                  */                  if(!m_IsB2BUA){                      response.Via.RemoveTopMostValue();                      if(response.Via.GetAllValues().Length == 0){                          return;                      }                  }                    #endregion                    #region 4.  Add the response to the response context                    /*                      Final responses received are stored in the response context                      until a final response is generated on the server transaction                      associated with this context.  The response may be a candidate                      for the best final response to be returned on that server                      transaction.  Information from this response may be needed in                      forming the best response' even if this response is not chosen.                         If the proxy chooses to recurse on any contacts in a 3xx                      response by adding them to the target set' it MUST remove them                      from the response before adding the response to the response                      context.  However' a proxy SHOULD NOT recurse to a non-SIPS URI                      if the Request-URI of the original request was a SIPS URI.  If                      the proxy recurses on all of the contacts in a 3xx response'                      the proxy SHOULD NOT add the resulting contactless response to                      the response context.                                          Removing the contact before adding the response to the response                      context prevents the next element upstream from retrying a                      location this proxy has already attempted.                        3xx responses may contain a mixture of SIP' SIPS' and non-SIP                      URIs.  A proxy may choose to recurse on the SIP and SIPS URIs                      and place the remainder into the response context to be                      returned' potentially in the final response.                  */                    if(response.StatusCodeType == SIP_StatusCodeType.Redirection && !m_NoRecurse && !handler.IsRecursed){                      // Get SIP contacts and remove them from response.                      SIP_t_ContactParam[] contacts = response.Contact.GetAllValues();                      // Remove all contacts from response' we add non-SIP URIs back.                      response.Contact.RemoveAll();                      foreach(SIP_t_ContactParam contact in contacts){                          // SIP URI add it to fork list.                          if(contact.Address.IsSipOrSipsUri){                              m_pTargets.Enqueue(new TargetHandler(this'null'(SIP_Uri)contact.Address.Uri'm_AddRecordRoute'true));                          }                          // Add specified URI back to response.                          else{                              response.Contact.Add(contact.ToStringValue());                          }                      }                        // There are remaining non-SIP contacts' so we need to add the response to reponses collection.                      if(response.Contact.GetAllValues().Length > 0){                          m_pResponses.Add(response);                      }                        // Handle forking                      if(m_pTargets.Count > 0){                          if(m_ForkingMode == SIP_ForkingMode.Parallel){                              while(m_pTargets.Count > 0){                                  TargetHandler h = m_pTargets.Dequeue();                                  m_pTargetsHandlers.Add(handler);                                  h.Start();                              }                          }                          // Just fork next.                          else{                              TargetHandler h = m_pTargets.Dequeue();                              m_pTargetsHandlers.Add(handler);                              h.Start();                          }                            // Because we forked request to new target(s)' we don't need to do steps 5 - 10.                          return;                      }                  }                  // Not 3xx response or recursing disabled.                  else{                      m_pResponses.Add(response);                  }                    #endregion                    #region 5.  Check to see if this response should be forwarded immediately                    /*                      Until a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any provisional response other than 100 (Trying)                        -  Any 2xx response                        If a 6xx response is received' it is not immediately forwarded'                      but the stateful proxy SHOULD cancel all client pending                      transactions as described in Section 10' and it MUST NOT create                      any new branches in this context.                                         After a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any 2xx response to an INVITE request                  */                    if(!m_IsFinalResponseSent){                      if(response.StatusCodeType == SIP_StatusCodeType.Provisional && response.StatusCode != 100){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.Success){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          CancelAllTargets();                      }                  }                  else{                      if(response.StatusCodeType == SIP_StatusCodeType.Success && m_pServerTransaction.Request.RequestLine.Method == SIP_Methods.INVITE){                          forwardResponse = true;                      }                  }                    #endregion                    #region x.  Handle sequential forking                    /*                      Sequential Search: In a sequential search' a proxy server attempts                      each contact address in sequence' proceeding to the next one                      only after the previous has generated a final response.  A 2xx                      or 6xx class final response always terminates a sequential                      search.                  */                  if(m_ForkingMode == SIP_ForkingMode.Sequential && response.StatusCodeType != SIP_StatusCodeType.Provisional){                      if(response.StatusCodeType == SIP_StatusCodeType.Success){                          // Do nothing' 2xx will be always forwarded and step 10. Cancels all targets.                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          // Do nothing' 6xx is already handled in setp 5.                      }                      else if(m_pTargets.Count > 0){                          TargetHandler h = m_pTargets.Dequeue();                          m_pTargetsHandlers.Add(handler);                          h.Start();                            // Skip all next steps' we will get new responses from new target.                          return;                      }                  }                    #endregion                    #region 6.  When necessary' choose the best final response from the response context                    /*                       A stateful proxy MUST send a final response to a response                      context's server transaction if no final responses have been                      immediately forwarded by the above rules and all client                      transactions in this response context have been terminated.                        The stateful proxy MUST choose the "best" final response among                      those received and stored in the response context.                        If there are no final responses in the context' the proxy MUST                      send a 408 (Request Timeout) response to the server                      transaction.                    */                    if(!m_IsFinalResponseSent && !forwardResponse && m_pTargets.Count == 0){                      bool mustChooseBestFinalResponse = true;                       // Check if all transactions terminated.                      foreach(TargetHandler h in m_pTargetsHandlers){                          if(!h.IsCompleted){                              mustChooseBestFinalResponse = false;                              break;                          }                      }                        if(mustChooseBestFinalResponse){                          response = GetBestFinalResponse();                          if(response == null){                              response = this.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pServerTransaction.Request);                          }                            forwardResponse = true;                      }                  }                    #endregion                    if(forwardResponse){                        #region 7.  Aggregate authorization header field values if necessary                        /*                           If the selected response is a 401 (Unauthorized) or 407 (Proxy Authentication Required)'                           the proxy MUST collect any WWW-Authenticate and Proxy-Authenticate header field values                           from all other 401 (Unauthorized) and 407 (Proxy Authentication Required) responses                           received so far in this response context and add them to this response without                           modification before forwarding. The resulting 401 (Unauthorized) or 407 (Proxy                          Authentication Required) response could have several WWW-Authenticate AND                           Proxy-Authenticate header field values.                            This is necessary because any or all of the destinations the request was forwarded to                           may have requested credentials.  The client needs to receive all of those challenges and                           supply credentials for each of them when it retries the request.                      */                      if(response.StatusCode == 401 || response.StatusCode == 407){                          foreach(SIP_Response resp in m_pResponses.ToArray()){                              if(response != resp && (resp.StatusCode == 401 || resp.StatusCode == 407)){                                  // WWW-Authenticate                                  foreach(SIP_HeaderField hf in resp.WWWAuthenticate.HeaderFields){                                      resp.WWWAuthenticate.Add(hf.Value);                                  }                                  // Proxy-Authenticate                                  foreach(SIP_HeaderField hf in resp.ProxyAuthenticate.HeaderFields){                                      resp.ProxyAuthenticate.Add(hf.Value);                                  }                              }                          }                      }                        #endregion                        #region 8.  Optionally rewrite Record-Route header field values                        // This is optional so we currently won't do that.                        #endregion                        #region 9.  Forward the response                        SendResponse(transaction'response);                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsFinalResponseSent = true;                      }                        #endregion                        #region 10. Generate any necessary CANCEL requests                        /*                           If the forwarded response was a final response' the proxy MUST                          generate a CANCEL request for all pending client transactions                          associated with this response context.                      */                                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          CancelAllTargets();                      }                        #endregion                  }              }
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ProcessResponse,The following statement contains a magic number: lock(m_pLock){                    #region 3.  Remove the topmost Via                    /*                       The proxy removes the topmost Via header field value from the                      response.                                         If no Via header field values remain in the response' the                      response was meant for this element and MUST NOT be forwarded.                      The remainder of the processing described in this section is                      not performed on this message' the UAC processing rules                      described in Section 8.1.3 are followed instead (transport                      layer processing has already occurred).                        This will happen' for instance' when the element generates                      CANCEL requests as described in Section 10.                                         NOTE: We MAY NOT do it for B2BUA' skip it for B2BUA                  */                  if(!m_IsB2BUA){                      response.Via.RemoveTopMostValue();                      if(response.Via.GetAllValues().Length == 0){                          return;                      }                  }                    #endregion                    #region 4.  Add the response to the response context                    /*                      Final responses received are stored in the response context                      until a final response is generated on the server transaction                      associated with this context.  The response may be a candidate                      for the best final response to be returned on that server                      transaction.  Information from this response may be needed in                      forming the best response' even if this response is not chosen.                         If the proxy chooses to recurse on any contacts in a 3xx                      response by adding them to the target set' it MUST remove them                      from the response before adding the response to the response                      context.  However' a proxy SHOULD NOT recurse to a non-SIPS URI                      if the Request-URI of the original request was a SIPS URI.  If                      the proxy recurses on all of the contacts in a 3xx response'                      the proxy SHOULD NOT add the resulting contactless response to                      the response context.                                          Removing the contact before adding the response to the response                      context prevents the next element upstream from retrying a                      location this proxy has already attempted.                        3xx responses may contain a mixture of SIP' SIPS' and non-SIP                      URIs.  A proxy may choose to recurse on the SIP and SIPS URIs                      and place the remainder into the response context to be                      returned' potentially in the final response.                  */                    if(response.StatusCodeType == SIP_StatusCodeType.Redirection && !m_NoRecurse && !handler.IsRecursed){                      // Get SIP contacts and remove them from response.                      SIP_t_ContactParam[] contacts = response.Contact.GetAllValues();                      // Remove all contacts from response' we add non-SIP URIs back.                      response.Contact.RemoveAll();                      foreach(SIP_t_ContactParam contact in contacts){                          // SIP URI add it to fork list.                          if(contact.Address.IsSipOrSipsUri){                              m_pTargets.Enqueue(new TargetHandler(this'null'(SIP_Uri)contact.Address.Uri'm_AddRecordRoute'true));                          }                          // Add specified URI back to response.                          else{                              response.Contact.Add(contact.ToStringValue());                          }                      }                        // There are remaining non-SIP contacts' so we need to add the response to reponses collection.                      if(response.Contact.GetAllValues().Length > 0){                          m_pResponses.Add(response);                      }                        // Handle forking                      if(m_pTargets.Count > 0){                          if(m_ForkingMode == SIP_ForkingMode.Parallel){                              while(m_pTargets.Count > 0){                                  TargetHandler h = m_pTargets.Dequeue();                                  m_pTargetsHandlers.Add(handler);                                  h.Start();                              }                          }                          // Just fork next.                          else{                              TargetHandler h = m_pTargets.Dequeue();                              m_pTargetsHandlers.Add(handler);                              h.Start();                          }                            // Because we forked request to new target(s)' we don't need to do steps 5 - 10.                          return;                      }                  }                  // Not 3xx response or recursing disabled.                  else{                      m_pResponses.Add(response);                  }                    #endregion                    #region 5.  Check to see if this response should be forwarded immediately                    /*                      Until a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any provisional response other than 100 (Trying)                        -  Any 2xx response                        If a 6xx response is received' it is not immediately forwarded'                      but the stateful proxy SHOULD cancel all client pending                      transactions as described in Section 10' and it MUST NOT create                      any new branches in this context.                                         After a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any 2xx response to an INVITE request                  */                    if(!m_IsFinalResponseSent){                      if(response.StatusCodeType == SIP_StatusCodeType.Provisional && response.StatusCode != 100){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.Success){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          CancelAllTargets();                      }                  }                  else{                      if(response.StatusCodeType == SIP_StatusCodeType.Success && m_pServerTransaction.Request.RequestLine.Method == SIP_Methods.INVITE){                          forwardResponse = true;                      }                  }                    #endregion                    #region x.  Handle sequential forking                    /*                      Sequential Search: In a sequential search' a proxy server attempts                      each contact address in sequence' proceeding to the next one                      only after the previous has generated a final response.  A 2xx                      or 6xx class final response always terminates a sequential                      search.                  */                  if(m_ForkingMode == SIP_ForkingMode.Sequential && response.StatusCodeType != SIP_StatusCodeType.Provisional){                      if(response.StatusCodeType == SIP_StatusCodeType.Success){                          // Do nothing' 2xx will be always forwarded and step 10. Cancels all targets.                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          // Do nothing' 6xx is already handled in setp 5.                      }                      else if(m_pTargets.Count > 0){                          TargetHandler h = m_pTargets.Dequeue();                          m_pTargetsHandlers.Add(handler);                          h.Start();                            // Skip all next steps' we will get new responses from new target.                          return;                      }                  }                    #endregion                    #region 6.  When necessary' choose the best final response from the response context                    /*                       A stateful proxy MUST send a final response to a response                      context's server transaction if no final responses have been                      immediately forwarded by the above rules and all client                      transactions in this response context have been terminated.                        The stateful proxy MUST choose the "best" final response among                      those received and stored in the response context.                        If there are no final responses in the context' the proxy MUST                      send a 408 (Request Timeout) response to the server                      transaction.                    */                    if(!m_IsFinalResponseSent && !forwardResponse && m_pTargets.Count == 0){                      bool mustChooseBestFinalResponse = true;                       // Check if all transactions terminated.                      foreach(TargetHandler h in m_pTargetsHandlers){                          if(!h.IsCompleted){                              mustChooseBestFinalResponse = false;                              break;                          }                      }                        if(mustChooseBestFinalResponse){                          response = GetBestFinalResponse();                          if(response == null){                              response = this.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pServerTransaction.Request);                          }                            forwardResponse = true;                      }                  }                    #endregion                    if(forwardResponse){                        #region 7.  Aggregate authorization header field values if necessary                        /*                           If the selected response is a 401 (Unauthorized) or 407 (Proxy Authentication Required)'                           the proxy MUST collect any WWW-Authenticate and Proxy-Authenticate header field values                           from all other 401 (Unauthorized) and 407 (Proxy Authentication Required) responses                           received so far in this response context and add them to this response without                           modification before forwarding. The resulting 401 (Unauthorized) or 407 (Proxy                          Authentication Required) response could have several WWW-Authenticate AND                           Proxy-Authenticate header field values.                            This is necessary because any or all of the destinations the request was forwarded to                           may have requested credentials.  The client needs to receive all of those challenges and                           supply credentials for each of them when it retries the request.                      */                      if(response.StatusCode == 401 || response.StatusCode == 407){                          foreach(SIP_Response resp in m_pResponses.ToArray()){                              if(response != resp && (resp.StatusCode == 401 || resp.StatusCode == 407)){                                  // WWW-Authenticate                                  foreach(SIP_HeaderField hf in resp.WWWAuthenticate.HeaderFields){                                      resp.WWWAuthenticate.Add(hf.Value);                                  }                                  // Proxy-Authenticate                                  foreach(SIP_HeaderField hf in resp.ProxyAuthenticate.HeaderFields){                                      resp.ProxyAuthenticate.Add(hf.Value);                                  }                              }                          }                      }                        #endregion                        #region 8.  Optionally rewrite Record-Route header field values                        // This is optional so we currently won't do that.                        #endregion                        #region 9.  Forward the response                        SendResponse(transaction'response);                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsFinalResponseSent = true;                      }                        #endregion                        #region 10. Generate any necessary CANCEL requests                        /*                           If the forwarded response was a final response' the proxy MUST                          generate a CANCEL request for all pending client transactions                          associated with this response context.                      */                                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          CancelAllTargets();                      }                        #endregion                  }              }
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ProcessResponse,The following statement contains a magic number: lock(m_pLock){                    #region 3.  Remove the topmost Via                    /*                       The proxy removes the topmost Via header field value from the                      response.                                         If no Via header field values remain in the response' the                      response was meant for this element and MUST NOT be forwarded.                      The remainder of the processing described in this section is                      not performed on this message' the UAC processing rules                      described in Section 8.1.3 are followed instead (transport                      layer processing has already occurred).                        This will happen' for instance' when the element generates                      CANCEL requests as described in Section 10.                                         NOTE: We MAY NOT do it for B2BUA' skip it for B2BUA                  */                  if(!m_IsB2BUA){                      response.Via.RemoveTopMostValue();                      if(response.Via.GetAllValues().Length == 0){                          return;                      }                  }                    #endregion                    #region 4.  Add the response to the response context                    /*                      Final responses received are stored in the response context                      until a final response is generated on the server transaction                      associated with this context.  The response may be a candidate                      for the best final response to be returned on that server                      transaction.  Information from this response may be needed in                      forming the best response' even if this response is not chosen.                         If the proxy chooses to recurse on any contacts in a 3xx                      response by adding them to the target set' it MUST remove them                      from the response before adding the response to the response                      context.  However' a proxy SHOULD NOT recurse to a non-SIPS URI                      if the Request-URI of the original request was a SIPS URI.  If                      the proxy recurses on all of the contacts in a 3xx response'                      the proxy SHOULD NOT add the resulting contactless response to                      the response context.                                          Removing the contact before adding the response to the response                      context prevents the next element upstream from retrying a                      location this proxy has already attempted.                        3xx responses may contain a mixture of SIP' SIPS' and non-SIP                      URIs.  A proxy may choose to recurse on the SIP and SIPS URIs                      and place the remainder into the response context to be                      returned' potentially in the final response.                  */                    if(response.StatusCodeType == SIP_StatusCodeType.Redirection && !m_NoRecurse && !handler.IsRecursed){                      // Get SIP contacts and remove them from response.                      SIP_t_ContactParam[] contacts = response.Contact.GetAllValues();                      // Remove all contacts from response' we add non-SIP URIs back.                      response.Contact.RemoveAll();                      foreach(SIP_t_ContactParam contact in contacts){                          // SIP URI add it to fork list.                          if(contact.Address.IsSipOrSipsUri){                              m_pTargets.Enqueue(new TargetHandler(this'null'(SIP_Uri)contact.Address.Uri'm_AddRecordRoute'true));                          }                          // Add specified URI back to response.                          else{                              response.Contact.Add(contact.ToStringValue());                          }                      }                        // There are remaining non-SIP contacts' so we need to add the response to reponses collection.                      if(response.Contact.GetAllValues().Length > 0){                          m_pResponses.Add(response);                      }                        // Handle forking                      if(m_pTargets.Count > 0){                          if(m_ForkingMode == SIP_ForkingMode.Parallel){                              while(m_pTargets.Count > 0){                                  TargetHandler h = m_pTargets.Dequeue();                                  m_pTargetsHandlers.Add(handler);                                  h.Start();                              }                          }                          // Just fork next.                          else{                              TargetHandler h = m_pTargets.Dequeue();                              m_pTargetsHandlers.Add(handler);                              h.Start();                          }                            // Because we forked request to new target(s)' we don't need to do steps 5 - 10.                          return;                      }                  }                  // Not 3xx response or recursing disabled.                  else{                      m_pResponses.Add(response);                  }                    #endregion                    #region 5.  Check to see if this response should be forwarded immediately                    /*                      Until a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any provisional response other than 100 (Trying)                        -  Any 2xx response                        If a 6xx response is received' it is not immediately forwarded'                      but the stateful proxy SHOULD cancel all client pending                      transactions as described in Section 10' and it MUST NOT create                      any new branches in this context.                                         After a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any 2xx response to an INVITE request                  */                    if(!m_IsFinalResponseSent){                      if(response.StatusCodeType == SIP_StatusCodeType.Provisional && response.StatusCode != 100){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.Success){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          CancelAllTargets();                      }                  }                  else{                      if(response.StatusCodeType == SIP_StatusCodeType.Success && m_pServerTransaction.Request.RequestLine.Method == SIP_Methods.INVITE){                          forwardResponse = true;                      }                  }                    #endregion                    #region x.  Handle sequential forking                    /*                      Sequential Search: In a sequential search' a proxy server attempts                      each contact address in sequence' proceeding to the next one                      only after the previous has generated a final response.  A 2xx                      or 6xx class final response always terminates a sequential                      search.                  */                  if(m_ForkingMode == SIP_ForkingMode.Sequential && response.StatusCodeType != SIP_StatusCodeType.Provisional){                      if(response.StatusCodeType == SIP_StatusCodeType.Success){                          // Do nothing' 2xx will be always forwarded and step 10. Cancels all targets.                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          // Do nothing' 6xx is already handled in setp 5.                      }                      else if(m_pTargets.Count > 0){                          TargetHandler h = m_pTargets.Dequeue();                          m_pTargetsHandlers.Add(handler);                          h.Start();                            // Skip all next steps' we will get new responses from new target.                          return;                      }                  }                    #endregion                    #region 6.  When necessary' choose the best final response from the response context                    /*                       A stateful proxy MUST send a final response to a response                      context's server transaction if no final responses have been                      immediately forwarded by the above rules and all client                      transactions in this response context have been terminated.                        The stateful proxy MUST choose the "best" final response among                      those received and stored in the response context.                        If there are no final responses in the context' the proxy MUST                      send a 408 (Request Timeout) response to the server                      transaction.                    */                    if(!m_IsFinalResponseSent && !forwardResponse && m_pTargets.Count == 0){                      bool mustChooseBestFinalResponse = true;                       // Check if all transactions terminated.                      foreach(TargetHandler h in m_pTargetsHandlers){                          if(!h.IsCompleted){                              mustChooseBestFinalResponse = false;                              break;                          }                      }                        if(mustChooseBestFinalResponse){                          response = GetBestFinalResponse();                          if(response == null){                              response = this.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pServerTransaction.Request);                          }                            forwardResponse = true;                      }                  }                    #endregion                    if(forwardResponse){                        #region 7.  Aggregate authorization header field values if necessary                        /*                           If the selected response is a 401 (Unauthorized) or 407 (Proxy Authentication Required)'                           the proxy MUST collect any WWW-Authenticate and Proxy-Authenticate header field values                           from all other 401 (Unauthorized) and 407 (Proxy Authentication Required) responses                           received so far in this response context and add them to this response without                           modification before forwarding. The resulting 401 (Unauthorized) or 407 (Proxy                          Authentication Required) response could have several WWW-Authenticate AND                           Proxy-Authenticate header field values.                            This is necessary because any or all of the destinations the request was forwarded to                           may have requested credentials.  The client needs to receive all of those challenges and                           supply credentials for each of them when it retries the request.                      */                      if(response.StatusCode == 401 || response.StatusCode == 407){                          foreach(SIP_Response resp in m_pResponses.ToArray()){                              if(response != resp && (resp.StatusCode == 401 || resp.StatusCode == 407)){                                  // WWW-Authenticate                                  foreach(SIP_HeaderField hf in resp.WWWAuthenticate.HeaderFields){                                      resp.WWWAuthenticate.Add(hf.Value);                                  }                                  // Proxy-Authenticate                                  foreach(SIP_HeaderField hf in resp.ProxyAuthenticate.HeaderFields){                                      resp.ProxyAuthenticate.Add(hf.Value);                                  }                              }                          }                      }                        #endregion                        #region 8.  Optionally rewrite Record-Route header field values                        // This is optional so we currently won't do that.                        #endregion                        #region 9.  Forward the response                        SendResponse(transaction'response);                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsFinalResponseSent = true;                      }                        #endregion                        #region 10. Generate any necessary CANCEL requests                        /*                           If the forwarded response was a final response' the proxy MUST                          generate a CANCEL request for all pending client transactions                          associated with this response context.                      */                                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          CancelAllTargets();                      }                        #endregion                  }              }
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ProcessResponse,The following statement contains a magic number: lock(m_pLock){                    #region 3.  Remove the topmost Via                    /*                       The proxy removes the topmost Via header field value from the                      response.                                         If no Via header field values remain in the response' the                      response was meant for this element and MUST NOT be forwarded.                      The remainder of the processing described in this section is                      not performed on this message' the UAC processing rules                      described in Section 8.1.3 are followed instead (transport                      layer processing has already occurred).                        This will happen' for instance' when the element generates                      CANCEL requests as described in Section 10.                                         NOTE: We MAY NOT do it for B2BUA' skip it for B2BUA                  */                  if(!m_IsB2BUA){                      response.Via.RemoveTopMostValue();                      if(response.Via.GetAllValues().Length == 0){                          return;                      }                  }                    #endregion                    #region 4.  Add the response to the response context                    /*                      Final responses received are stored in the response context                      until a final response is generated on the server transaction                      associated with this context.  The response may be a candidate                      for the best final response to be returned on that server                      transaction.  Information from this response may be needed in                      forming the best response' even if this response is not chosen.                         If the proxy chooses to recurse on any contacts in a 3xx                      response by adding them to the target set' it MUST remove them                      from the response before adding the response to the response                      context.  However' a proxy SHOULD NOT recurse to a non-SIPS URI                      if the Request-URI of the original request was a SIPS URI.  If                      the proxy recurses on all of the contacts in a 3xx response'                      the proxy SHOULD NOT add the resulting contactless response to                      the response context.                                          Removing the contact before adding the response to the response                      context prevents the next element upstream from retrying a                      location this proxy has already attempted.                        3xx responses may contain a mixture of SIP' SIPS' and non-SIP                      URIs.  A proxy may choose to recurse on the SIP and SIPS URIs                      and place the remainder into the response context to be                      returned' potentially in the final response.                  */                    if(response.StatusCodeType == SIP_StatusCodeType.Redirection && !m_NoRecurse && !handler.IsRecursed){                      // Get SIP contacts and remove them from response.                      SIP_t_ContactParam[] contacts = response.Contact.GetAllValues();                      // Remove all contacts from response' we add non-SIP URIs back.                      response.Contact.RemoveAll();                      foreach(SIP_t_ContactParam contact in contacts){                          // SIP URI add it to fork list.                          if(contact.Address.IsSipOrSipsUri){                              m_pTargets.Enqueue(new TargetHandler(this'null'(SIP_Uri)contact.Address.Uri'm_AddRecordRoute'true));                          }                          // Add specified URI back to response.                          else{                              response.Contact.Add(contact.ToStringValue());                          }                      }                        // There are remaining non-SIP contacts' so we need to add the response to reponses collection.                      if(response.Contact.GetAllValues().Length > 0){                          m_pResponses.Add(response);                      }                        // Handle forking                      if(m_pTargets.Count > 0){                          if(m_ForkingMode == SIP_ForkingMode.Parallel){                              while(m_pTargets.Count > 0){                                  TargetHandler h = m_pTargets.Dequeue();                                  m_pTargetsHandlers.Add(handler);                                  h.Start();                              }                          }                          // Just fork next.                          else{                              TargetHandler h = m_pTargets.Dequeue();                              m_pTargetsHandlers.Add(handler);                              h.Start();                          }                            // Because we forked request to new target(s)' we don't need to do steps 5 - 10.                          return;                      }                  }                  // Not 3xx response or recursing disabled.                  else{                      m_pResponses.Add(response);                  }                    #endregion                    #region 5.  Check to see if this response should be forwarded immediately                    /*                      Until a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any provisional response other than 100 (Trying)                        -  Any 2xx response                        If a 6xx response is received' it is not immediately forwarded'                      but the stateful proxy SHOULD cancel all client pending                      transactions as described in Section 10' and it MUST NOT create                      any new branches in this context.                                         After a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any 2xx response to an INVITE request                  */                    if(!m_IsFinalResponseSent){                      if(response.StatusCodeType == SIP_StatusCodeType.Provisional && response.StatusCode != 100){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.Success){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          CancelAllTargets();                      }                  }                  else{                      if(response.StatusCodeType == SIP_StatusCodeType.Success && m_pServerTransaction.Request.RequestLine.Method == SIP_Methods.INVITE){                          forwardResponse = true;                      }                  }                    #endregion                    #region x.  Handle sequential forking                    /*                      Sequential Search: In a sequential search' a proxy server attempts                      each contact address in sequence' proceeding to the next one                      only after the previous has generated a final response.  A 2xx                      or 6xx class final response always terminates a sequential                      search.                  */                  if(m_ForkingMode == SIP_ForkingMode.Sequential && response.StatusCodeType != SIP_StatusCodeType.Provisional){                      if(response.StatusCodeType == SIP_StatusCodeType.Success){                          // Do nothing' 2xx will be always forwarded and step 10. Cancels all targets.                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          // Do nothing' 6xx is already handled in setp 5.                      }                      else if(m_pTargets.Count > 0){                          TargetHandler h = m_pTargets.Dequeue();                          m_pTargetsHandlers.Add(handler);                          h.Start();                            // Skip all next steps' we will get new responses from new target.                          return;                      }                  }                    #endregion                    #region 6.  When necessary' choose the best final response from the response context                    /*                       A stateful proxy MUST send a final response to a response                      context's server transaction if no final responses have been                      immediately forwarded by the above rules and all client                      transactions in this response context have been terminated.                        The stateful proxy MUST choose the "best" final response among                      those received and stored in the response context.                        If there are no final responses in the context' the proxy MUST                      send a 408 (Request Timeout) response to the server                      transaction.                    */                    if(!m_IsFinalResponseSent && !forwardResponse && m_pTargets.Count == 0){                      bool mustChooseBestFinalResponse = true;                       // Check if all transactions terminated.                      foreach(TargetHandler h in m_pTargetsHandlers){                          if(!h.IsCompleted){                              mustChooseBestFinalResponse = false;                              break;                          }                      }                        if(mustChooseBestFinalResponse){                          response = GetBestFinalResponse();                          if(response == null){                              response = this.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pServerTransaction.Request);                          }                            forwardResponse = true;                      }                  }                    #endregion                    if(forwardResponse){                        #region 7.  Aggregate authorization header field values if necessary                        /*                           If the selected response is a 401 (Unauthorized) or 407 (Proxy Authentication Required)'                           the proxy MUST collect any WWW-Authenticate and Proxy-Authenticate header field values                           from all other 401 (Unauthorized) and 407 (Proxy Authentication Required) responses                           received so far in this response context and add them to this response without                           modification before forwarding. The resulting 401 (Unauthorized) or 407 (Proxy                          Authentication Required) response could have several WWW-Authenticate AND                           Proxy-Authenticate header field values.                            This is necessary because any or all of the destinations the request was forwarded to                           may have requested credentials.  The client needs to receive all of those challenges and                           supply credentials for each of them when it retries the request.                      */                      if(response.StatusCode == 401 || response.StatusCode == 407){                          foreach(SIP_Response resp in m_pResponses.ToArray()){                              if(response != resp && (resp.StatusCode == 401 || resp.StatusCode == 407)){                                  // WWW-Authenticate                                  foreach(SIP_HeaderField hf in resp.WWWAuthenticate.HeaderFields){                                      resp.WWWAuthenticate.Add(hf.Value);                                  }                                  // Proxy-Authenticate                                  foreach(SIP_HeaderField hf in resp.ProxyAuthenticate.HeaderFields){                                      resp.ProxyAuthenticate.Add(hf.Value);                                  }                              }                          }                      }                        #endregion                        #region 8.  Optionally rewrite Record-Route header field values                        // This is optional so we currently won't do that.                        #endregion                        #region 9.  Forward the response                        SendResponse(transaction'response);                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsFinalResponseSent = true;                      }                        #endregion                        #region 10. Generate any necessary CANCEL requests                        /*                           If the forwarded response was a final response' the proxy MUST                          generate a CANCEL request for all pending client transactions                          associated with this response context.                      */                                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          CancelAllTargets();                      }                        #endregion                  }              }
Magic Number,LumiSoft.Net.SIP.Proxy,SIP_ProxyContext,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ProcessResponse,The following statement contains a magic number: lock(m_pLock){                    #region 3.  Remove the topmost Via                    /*                       The proxy removes the topmost Via header field value from the                      response.                                         If no Via header field values remain in the response' the                      response was meant for this element and MUST NOT be forwarded.                      The remainder of the processing described in this section is                      not performed on this message' the UAC processing rules                      described in Section 8.1.3 are followed instead (transport                      layer processing has already occurred).                        This will happen' for instance' when the element generates                      CANCEL requests as described in Section 10.                                         NOTE: We MAY NOT do it for B2BUA' skip it for B2BUA                  */                  if(!m_IsB2BUA){                      response.Via.RemoveTopMostValue();                      if(response.Via.GetAllValues().Length == 0){                          return;                      }                  }                    #endregion                    #region 4.  Add the response to the response context                    /*                      Final responses received are stored in the response context                      until a final response is generated on the server transaction                      associated with this context.  The response may be a candidate                      for the best final response to be returned on that server                      transaction.  Information from this response may be needed in                      forming the best response' even if this response is not chosen.                         If the proxy chooses to recurse on any contacts in a 3xx                      response by adding them to the target set' it MUST remove them                      from the response before adding the response to the response                      context.  However' a proxy SHOULD NOT recurse to a non-SIPS URI                      if the Request-URI of the original request was a SIPS URI.  If                      the proxy recurses on all of the contacts in a 3xx response'                      the proxy SHOULD NOT add the resulting contactless response to                      the response context.                                          Removing the contact before adding the response to the response                      context prevents the next element upstream from retrying a                      location this proxy has already attempted.                        3xx responses may contain a mixture of SIP' SIPS' and non-SIP                      URIs.  A proxy may choose to recurse on the SIP and SIPS URIs                      and place the remainder into the response context to be                      returned' potentially in the final response.                  */                    if(response.StatusCodeType == SIP_StatusCodeType.Redirection && !m_NoRecurse && !handler.IsRecursed){                      // Get SIP contacts and remove them from response.                      SIP_t_ContactParam[] contacts = response.Contact.GetAllValues();                      // Remove all contacts from response' we add non-SIP URIs back.                      response.Contact.RemoveAll();                      foreach(SIP_t_ContactParam contact in contacts){                          // SIP URI add it to fork list.                          if(contact.Address.IsSipOrSipsUri){                              m_pTargets.Enqueue(new TargetHandler(this'null'(SIP_Uri)contact.Address.Uri'm_AddRecordRoute'true));                          }                          // Add specified URI back to response.                          else{                              response.Contact.Add(contact.ToStringValue());                          }                      }                        // There are remaining non-SIP contacts' so we need to add the response to reponses collection.                      if(response.Contact.GetAllValues().Length > 0){                          m_pResponses.Add(response);                      }                        // Handle forking                      if(m_pTargets.Count > 0){                          if(m_ForkingMode == SIP_ForkingMode.Parallel){                              while(m_pTargets.Count > 0){                                  TargetHandler h = m_pTargets.Dequeue();                                  m_pTargetsHandlers.Add(handler);                                  h.Start();                              }                          }                          // Just fork next.                          else{                              TargetHandler h = m_pTargets.Dequeue();                              m_pTargetsHandlers.Add(handler);                              h.Start();                          }                            // Because we forked request to new target(s)' we don't need to do steps 5 - 10.                          return;                      }                  }                  // Not 3xx response or recursing disabled.                  else{                      m_pResponses.Add(response);                  }                    #endregion                    #region 5.  Check to see if this response should be forwarded immediately                    /*                      Until a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any provisional response other than 100 (Trying)                        -  Any 2xx response                        If a 6xx response is received' it is not immediately forwarded'                      but the stateful proxy SHOULD cancel all client pending                      transactions as described in Section 10' and it MUST NOT create                      any new branches in this context.                                         After a final response has been sent on the server transaction'                      the following responses MUST be forwarded immediately:                        -  Any 2xx response to an INVITE request                  */                    if(!m_IsFinalResponseSent){                      if(response.StatusCodeType == SIP_StatusCodeType.Provisional && response.StatusCode != 100){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.Success){                          forwardResponse = true;                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          CancelAllTargets();                      }                  }                  else{                      if(response.StatusCodeType == SIP_StatusCodeType.Success && m_pServerTransaction.Request.RequestLine.Method == SIP_Methods.INVITE){                          forwardResponse = true;                      }                  }                    #endregion                    #region x.  Handle sequential forking                    /*                      Sequential Search: In a sequential search' a proxy server attempts                      each contact address in sequence' proceeding to the next one                      only after the previous has generated a final response.  A 2xx                      or 6xx class final response always terminates a sequential                      search.                  */                  if(m_ForkingMode == SIP_ForkingMode.Sequential && response.StatusCodeType != SIP_StatusCodeType.Provisional){                      if(response.StatusCodeType == SIP_StatusCodeType.Success){                          // Do nothing' 2xx will be always forwarded and step 10. Cancels all targets.                      }                      else if(response.StatusCodeType == SIP_StatusCodeType.GlobalFailure){                          // Do nothing' 6xx is already handled in setp 5.                      }                      else if(m_pTargets.Count > 0){                          TargetHandler h = m_pTargets.Dequeue();                          m_pTargetsHandlers.Add(handler);                          h.Start();                            // Skip all next steps' we will get new responses from new target.                          return;                      }                  }                    #endregion                    #region 6.  When necessary' choose the best final response from the response context                    /*                       A stateful proxy MUST send a final response to a response                      context's server transaction if no final responses have been                      immediately forwarded by the above rules and all client                      transactions in this response context have been terminated.                        The stateful proxy MUST choose the "best" final response among                      those received and stored in the response context.                        If there are no final responses in the context' the proxy MUST                      send a 408 (Request Timeout) response to the server                      transaction.                    */                    if(!m_IsFinalResponseSent && !forwardResponse && m_pTargets.Count == 0){                      bool mustChooseBestFinalResponse = true;                       // Check if all transactions terminated.                      foreach(TargetHandler h in m_pTargetsHandlers){                          if(!h.IsCompleted){                              mustChooseBestFinalResponse = false;                              break;                          }                      }                        if(mustChooseBestFinalResponse){                          response = GetBestFinalResponse();                          if(response == null){                              response = this.Proxy.Stack.CreateResponse(SIP_ResponseCodes.x408_Request_Timeout'm_pServerTransaction.Request);                          }                            forwardResponse = true;                      }                  }                    #endregion                    if(forwardResponse){                        #region 7.  Aggregate authorization header field values if necessary                        /*                           If the selected response is a 401 (Unauthorized) or 407 (Proxy Authentication Required)'                           the proxy MUST collect any WWW-Authenticate and Proxy-Authenticate header field values                           from all other 401 (Unauthorized) and 407 (Proxy Authentication Required) responses                           received so far in this response context and add them to this response without                           modification before forwarding. The resulting 401 (Unauthorized) or 407 (Proxy                          Authentication Required) response could have several WWW-Authenticate AND                           Proxy-Authenticate header field values.                            This is necessary because any or all of the destinations the request was forwarded to                           may have requested credentials.  The client needs to receive all of those challenges and                           supply credentials for each of them when it retries the request.                      */                      if(response.StatusCode == 401 || response.StatusCode == 407){                          foreach(SIP_Response resp in m_pResponses.ToArray()){                              if(response != resp && (resp.StatusCode == 401 || resp.StatusCode == 407)){                                  // WWW-Authenticate                                  foreach(SIP_HeaderField hf in resp.WWWAuthenticate.HeaderFields){                                      resp.WWWAuthenticate.Add(hf.Value);                                  }                                  // Proxy-Authenticate                                  foreach(SIP_HeaderField hf in resp.ProxyAuthenticate.HeaderFields){                                      resp.ProxyAuthenticate.Add(hf.Value);                                  }                              }                          }                      }                        #endregion                        #region 8.  Optionally rewrite Record-Route header field values                        // This is optional so we currently won't do that.                        #endregion                        #region 9.  Forward the response                        SendResponse(transaction'response);                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsFinalResponseSent = true;                      }                        #endregion                        #region 10. Generate any necessary CANCEL requests                        /*                           If the forwarded response was a final response' the proxy MUST                          generate a CANCEL request for all pending client transactions                          associated with this response context.                      */                                      if(response.StatusCodeType != SIP_StatusCodeType.Provisional){                          CancelAllTargets();                      }                        #endregion                  }              }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ClientTransaction_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                      m_HasReceivedResponse = true;                        /* RFC 3261 16.7 Response Processing.                          1.  Find the appropriate response context                          2.  Update timer C for provisional responses                                             Steps 3 - 10 done in ProxyContext.ProcessResponse method.                      */                        #region 1. Find Context                        // Done' m_pOwner is it.                        #endregion                        #region 2. Update timer C for provisional responses                        /* For an INVITE transaction' if the response is a provisional                         response with status codes 101 to 199 inclusive (i.e.' anything                         but 100)' the proxy MUST reset timer C for that client                         transaction.  The timer MAY be reset to a different value' but                         this value MUST be greater than 3 minutes.                      */                      if(m_pTimerC != null && e.Response.StatusCode >= 101 && e.Response.StatusCode <= 199){                          m_pTimerC.Interval = 3 * 60 * 1000;                      }                        #endregion                        /*                      // If 401 or 407 (Authentication required)' see i we have specified realm(s) credentials'                       // if so try to authenticate.                      if(e.Response.StatusCode == 401 || e.Response.StatusCode == 407){                          SIP_t_Challenge[] challanges = null;                          if(e.Response.StatusCode == 401){                              challanges = e.Response.WWWAuthenticate.GetAllValues();                          }                          else{                              challanges = e.Response.ProxyAuthenticate.GetAllValues();                          }                            // TODO: Porbably we need to auth only if we can provide authentication data to all realms ?                            SIP_Request request = m_pServerTransaction.Request.Copy();                          request.CSeq.SequenceNumber++;                          bool hasAny = false;                          foreach(SIP_t_Challenge challange in challanges){                              Auth_HttpDigest authDigest = new Auth_HttpDigest(challange.AuthData'm_pServerTransaction.Request.Method);                              NetworkCredential credential = GetCredential(authDigest.Realm);                              if(credential != null){                                  // Don't authenticate again' if we tried already once and failed.                                  // FIX ME: if user passed authorization' then works wrong.                                  if(e.ClientTransaction.Request.Authorization.Count == 0 && e.ClientTransaction.Request.ProxyAuthorization.Count == 0){                                      authDigest.RequestMethod = m_pServerTransaction.Request.Method;                                      authDigest.Uri           = e.ClientTransaction.Request.Uri;                                      authDigest.Realm         = credential.Domain;                                      authDigest.UserName      = credential.UserName;                                      authDigest.Password      = credential.Password;                                      authDigest.CNonce        = Auth_HttpDigest.CreateNonce();                                      authDigest.Qop           = authDigest.Qop;                                      authDigest.Opaque        = authDigest.Opaque;                                      authDigest.Algorithm     = authDigest.Algorithm;                                      if(e.Response.StatusCode == 401){                                          request.Authorization.Add(authDigest.ToAuthorization());                                      }                                      else{                                          request.ProxyAuthorization.Add(authDigest.ToAuthorization());                                      }                                      hasAny = true;                                  }                              }                          }                          if(hasAny){                              // CreateClientTransaction((SIP_Target)e.ClientTransaction.Tag'request);                              return;                          }                      }*/                        if(e.Response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsCompleted = true;                      }                                                        m_pOwner.ProcessResponse(this'm_pTransaction'e.Response);                                  }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ClientTransaction_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                      m_HasReceivedResponse = true;                        /* RFC 3261 16.7 Response Processing.                          1.  Find the appropriate response context                          2.  Update timer C for provisional responses                                             Steps 3 - 10 done in ProxyContext.ProcessResponse method.                      */                        #region 1. Find Context                        // Done' m_pOwner is it.                        #endregion                        #region 2. Update timer C for provisional responses                        /* For an INVITE transaction' if the response is a provisional                         response with status codes 101 to 199 inclusive (i.e.' anything                         but 100)' the proxy MUST reset timer C for that client                         transaction.  The timer MAY be reset to a different value' but                         this value MUST be greater than 3 minutes.                      */                      if(m_pTimerC != null && e.Response.StatusCode >= 101 && e.Response.StatusCode <= 199){                          m_pTimerC.Interval = 3 * 60 * 1000;                      }                        #endregion                        /*                      // If 401 or 407 (Authentication required)' see i we have specified realm(s) credentials'                       // if so try to authenticate.                      if(e.Response.StatusCode == 401 || e.Response.StatusCode == 407){                          SIP_t_Challenge[] challanges = null;                          if(e.Response.StatusCode == 401){                              challanges = e.Response.WWWAuthenticate.GetAllValues();                          }                          else{                              challanges = e.Response.ProxyAuthenticate.GetAllValues();                          }                            // TODO: Porbably we need to auth only if we can provide authentication data to all realms ?                            SIP_Request request = m_pServerTransaction.Request.Copy();                          request.CSeq.SequenceNumber++;                          bool hasAny = false;                          foreach(SIP_t_Challenge challange in challanges){                              Auth_HttpDigest authDigest = new Auth_HttpDigest(challange.AuthData'm_pServerTransaction.Request.Method);                              NetworkCredential credential = GetCredential(authDigest.Realm);                              if(credential != null){                                  // Don't authenticate again' if we tried already once and failed.                                  // FIX ME: if user passed authorization' then works wrong.                                  if(e.ClientTransaction.Request.Authorization.Count == 0 && e.ClientTransaction.Request.ProxyAuthorization.Count == 0){                                      authDigest.RequestMethod = m_pServerTransaction.Request.Method;                                      authDigest.Uri           = e.ClientTransaction.Request.Uri;                                      authDigest.Realm         = credential.Domain;                                      authDigest.UserName      = credential.UserName;                                      authDigest.Password      = credential.Password;                                      authDigest.CNonce        = Auth_HttpDigest.CreateNonce();                                      authDigest.Qop           = authDigest.Qop;                                      authDigest.Opaque        = authDigest.Opaque;                                      authDigest.Algorithm     = authDigest.Algorithm;                                      if(e.Response.StatusCode == 401){                                          request.Authorization.Add(authDigest.ToAuthorization());                                      }                                      else{                                          request.ProxyAuthorization.Add(authDigest.ToAuthorization());                                      }                                      hasAny = true;                                  }                              }                          }                          if(hasAny){                              // CreateClientTransaction((SIP_Target)e.ClientTransaction.Tag'request);                              return;                          }                      }*/                        if(e.Response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsCompleted = true;                      }                                                        m_pOwner.ProcessResponse(this'm_pTransaction'e.Response);                                  }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ClientTransaction_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                      m_HasReceivedResponse = true;                        /* RFC 3261 16.7 Response Processing.                          1.  Find the appropriate response context                          2.  Update timer C for provisional responses                                             Steps 3 - 10 done in ProxyContext.ProcessResponse method.                      */                        #region 1. Find Context                        // Done' m_pOwner is it.                        #endregion                        #region 2. Update timer C for provisional responses                        /* For an INVITE transaction' if the response is a provisional                         response with status codes 101 to 199 inclusive (i.e.' anything                         but 100)' the proxy MUST reset timer C for that client                         transaction.  The timer MAY be reset to a different value' but                         this value MUST be greater than 3 minutes.                      */                      if(m_pTimerC != null && e.Response.StatusCode >= 101 && e.Response.StatusCode <= 199){                          m_pTimerC.Interval = 3 * 60 * 1000;                      }                        #endregion                        /*                      // If 401 or 407 (Authentication required)' see i we have specified realm(s) credentials'                       // if so try to authenticate.                      if(e.Response.StatusCode == 401 || e.Response.StatusCode == 407){                          SIP_t_Challenge[] challanges = null;                          if(e.Response.StatusCode == 401){                              challanges = e.Response.WWWAuthenticate.GetAllValues();                          }                          else{                              challanges = e.Response.ProxyAuthenticate.GetAllValues();                          }                            // TODO: Porbably we need to auth only if we can provide authentication data to all realms ?                            SIP_Request request = m_pServerTransaction.Request.Copy();                          request.CSeq.SequenceNumber++;                          bool hasAny = false;                          foreach(SIP_t_Challenge challange in challanges){                              Auth_HttpDigest authDigest = new Auth_HttpDigest(challange.AuthData'm_pServerTransaction.Request.Method);                              NetworkCredential credential = GetCredential(authDigest.Realm);                              if(credential != null){                                  // Don't authenticate again' if we tried already once and failed.                                  // FIX ME: if user passed authorization' then works wrong.                                  if(e.ClientTransaction.Request.Authorization.Count == 0 && e.ClientTransaction.Request.ProxyAuthorization.Count == 0){                                      authDigest.RequestMethod = m_pServerTransaction.Request.Method;                                      authDigest.Uri           = e.ClientTransaction.Request.Uri;                                      authDigest.Realm         = credential.Domain;                                      authDigest.UserName      = credential.UserName;                                      authDigest.Password      = credential.Password;                                      authDigest.CNonce        = Auth_HttpDigest.CreateNonce();                                      authDigest.Qop           = authDigest.Qop;                                      authDigest.Opaque        = authDigest.Opaque;                                      authDigest.Algorithm     = authDigest.Algorithm;                                      if(e.Response.StatusCode == 401){                                          request.Authorization.Add(authDigest.ToAuthorization());                                      }                                      else{                                          request.ProxyAuthorization.Add(authDigest.ToAuthorization());                                      }                                      hasAny = true;                                  }                              }                          }                          if(hasAny){                              // CreateClientTransaction((SIP_Target)e.ClientTransaction.Tag'request);                              return;                          }                      }*/                        if(e.Response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsCompleted = true;                      }                                                        m_pOwner.ProcessResponse(this'm_pTransaction'e.Response);                                  }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ClientTransaction_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                      m_HasReceivedResponse = true;                        /* RFC 3261 16.7 Response Processing.                          1.  Find the appropriate response context                          2.  Update timer C for provisional responses                                             Steps 3 - 10 done in ProxyContext.ProcessResponse method.                      */                        #region 1. Find Context                        // Done' m_pOwner is it.                        #endregion                        #region 2. Update timer C for provisional responses                        /* For an INVITE transaction' if the response is a provisional                         response with status codes 101 to 199 inclusive (i.e.' anything                         but 100)' the proxy MUST reset timer C for that client                         transaction.  The timer MAY be reset to a different value' but                         this value MUST be greater than 3 minutes.                      */                      if(m_pTimerC != null && e.Response.StatusCode >= 101 && e.Response.StatusCode <= 199){                          m_pTimerC.Interval = 3 * 60 * 1000;                      }                        #endregion                        /*                      // If 401 or 407 (Authentication required)' see i we have specified realm(s) credentials'                       // if so try to authenticate.                      if(e.Response.StatusCode == 401 || e.Response.StatusCode == 407){                          SIP_t_Challenge[] challanges = null;                          if(e.Response.StatusCode == 401){                              challanges = e.Response.WWWAuthenticate.GetAllValues();                          }                          else{                              challanges = e.Response.ProxyAuthenticate.GetAllValues();                          }                            // TODO: Porbably we need to auth only if we can provide authentication data to all realms ?                            SIP_Request request = m_pServerTransaction.Request.Copy();                          request.CSeq.SequenceNumber++;                          bool hasAny = false;                          foreach(SIP_t_Challenge challange in challanges){                              Auth_HttpDigest authDigest = new Auth_HttpDigest(challange.AuthData'm_pServerTransaction.Request.Method);                              NetworkCredential credential = GetCredential(authDigest.Realm);                              if(credential != null){                                  // Don't authenticate again' if we tried already once and failed.                                  // FIX ME: if user passed authorization' then works wrong.                                  if(e.ClientTransaction.Request.Authorization.Count == 0 && e.ClientTransaction.Request.ProxyAuthorization.Count == 0){                                      authDigest.RequestMethod = m_pServerTransaction.Request.Method;                                      authDigest.Uri           = e.ClientTransaction.Request.Uri;                                      authDigest.Realm         = credential.Domain;                                      authDigest.UserName      = credential.UserName;                                      authDigest.Password      = credential.Password;                                      authDigest.CNonce        = Auth_HttpDigest.CreateNonce();                                      authDigest.Qop           = authDigest.Qop;                                      authDigest.Opaque        = authDigest.Opaque;                                      authDigest.Algorithm     = authDigest.Algorithm;                                      if(e.Response.StatusCode == 401){                                          request.Authorization.Add(authDigest.ToAuthorization());                                      }                                      else{                                          request.ProxyAuthorization.Add(authDigest.ToAuthorization());                                      }                                      hasAny = true;                                  }                              }                          }                          if(hasAny){                              // CreateClientTransaction((SIP_Target)e.ClientTransaction.Tag'request);                              return;                          }                      }*/                        if(e.Response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsCompleted = true;                      }                                                        m_pOwner.ProcessResponse(this'm_pTransaction'e.Response);                                  }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,ClientTransaction_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                      m_HasReceivedResponse = true;                        /* RFC 3261 16.7 Response Processing.                          1.  Find the appropriate response context                          2.  Update timer C for provisional responses                                             Steps 3 - 10 done in ProxyContext.ProcessResponse method.                      */                        #region 1. Find Context                        // Done' m_pOwner is it.                        #endregion                        #region 2. Update timer C for provisional responses                        /* For an INVITE transaction' if the response is a provisional                         response with status codes 101 to 199 inclusive (i.e.' anything                         but 100)' the proxy MUST reset timer C for that client                         transaction.  The timer MAY be reset to a different value' but                         this value MUST be greater than 3 minutes.                      */                      if(m_pTimerC != null && e.Response.StatusCode >= 101 && e.Response.StatusCode <= 199){                          m_pTimerC.Interval = 3 * 60 * 1000;                      }                        #endregion                        /*                      // If 401 or 407 (Authentication required)' see i we have specified realm(s) credentials'                       // if so try to authenticate.                      if(e.Response.StatusCode == 401 || e.Response.StatusCode == 407){                          SIP_t_Challenge[] challanges = null;                          if(e.Response.StatusCode == 401){                              challanges = e.Response.WWWAuthenticate.GetAllValues();                          }                          else{                              challanges = e.Response.ProxyAuthenticate.GetAllValues();                          }                            // TODO: Porbably we need to auth only if we can provide authentication data to all realms ?                            SIP_Request request = m_pServerTransaction.Request.Copy();                          request.CSeq.SequenceNumber++;                          bool hasAny = false;                          foreach(SIP_t_Challenge challange in challanges){                              Auth_HttpDigest authDigest = new Auth_HttpDigest(challange.AuthData'm_pServerTransaction.Request.Method);                              NetworkCredential credential = GetCredential(authDigest.Realm);                              if(credential != null){                                  // Don't authenticate again' if we tried already once and failed.                                  // FIX ME: if user passed authorization' then works wrong.                                  if(e.ClientTransaction.Request.Authorization.Count == 0 && e.ClientTransaction.Request.ProxyAuthorization.Count == 0){                                      authDigest.RequestMethod = m_pServerTransaction.Request.Method;                                      authDigest.Uri           = e.ClientTransaction.Request.Uri;                                      authDigest.Realm         = credential.Domain;                                      authDigest.UserName      = credential.UserName;                                      authDigest.Password      = credential.Password;                                      authDigest.CNonce        = Auth_HttpDigest.CreateNonce();                                      authDigest.Qop           = authDigest.Qop;                                      authDigest.Opaque        = authDigest.Opaque;                                      authDigest.Algorithm     = authDigest.Algorithm;                                      if(e.Response.StatusCode == 401){                                          request.Authorization.Add(authDigest.ToAuthorization());                                      }                                      else{                                          request.ProxyAuthorization.Add(authDigest.ToAuthorization());                                      }                                      hasAny = true;                                  }                              }                          }                          if(hasAny){                              // CreateClientTransaction((SIP_Target)e.ClientTransaction.Tag'request);                              return;                          }                      }*/                        if(e.Response.StatusCodeType != SIP_StatusCodeType.Provisional){                          m_IsCompleted = true;                      }                                                        m_pOwner.ProcessResponse(this'm_pTransaction'e.Response);                                  }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,SendToFlow,The following statement contains a magic number: if(request.RequestLine.Method == SIP_Methods.INVITE){                      m_pTimerC = new TimerEx();                      m_pTimerC.AutoReset = false;                      m_pTimerC.Interval = 3 * 60 * 1000;                      m_pTimerC.Elapsed += new ElapsedEventHandler(m_pTimerC_Elapsed);                  }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,SendToFlow,The following statement contains a magic number: if(request.RequestLine.Method == SIP_Methods.INVITE){                      m_pTimerC = new TimerEx();                      m_pTimerC.AutoReset = false;                      m_pTimerC.Interval = 3 * 60 * 1000;                      m_pTimerC.Elapsed += new ElapsedEventHandler(m_pTimerC_Elapsed);                  }
Magic Number,LumiSoft.Net.SIP.Proxy,TargetHandler,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Proxy\SIP_ProxyContext.cs,SendToFlow,The following statement contains a magic number: if(request.RequestLine.Method == SIP_Methods.INVITE){                      m_pTimerC = new TimerEx();                      m_pTimerC.AutoReset = false;                      m_pTimerC.Interval = 3 * 60 * 1000;                      m_pTimerC.Elapsed += new ElapsedEventHandler(m_pTimerC_Elapsed);                  }
Magic Number,LumiSoft.Net.SIP.Stack,UasInvite2xxRetransmit,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,m_pTimer_Elapsed,The following statement contains a magic number: lock(m_pLock){                      if(m_StartTime.AddMilliseconds(64 * SIP_TimerConstants.T1) < DateTime.Now){                          // Log                          if(m_pDialog.Stack.Logger != null){                              m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "'] ACK was not received for (re-)INVITE' terminating INVITE session.");                          }                            m_pDialog.Terminate("Dialog Error: ACK was not received for (re-)INVITE."'true);                          Dispose();                      }                      else{                          // Retransmit response.                          try{                              m_pDialog.Flow.Send(m_pResponse);                                // Log                              if(m_pDialog.Stack.Logger != null){                                  m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "';statusCode=" + m_pResponse.StatusCode + "] UAS 2xx response retransmited");                              }                          }                          catch(Exception x){                              // Log                              if(m_pDialog.Stack.Logger != null){                                  m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "'] UAS 2xx response retransmission failed: " + x.Message);                              }                          }                                                    m_pTimer.Interval = Math.Min(m_pTimer.Interval * 2'SIP_TimerConstants.T2);                          m_pTimer.Enabled = true;                      }                  }
Magic Number,LumiSoft.Net.SIP.Stack,UasInvite2xxRetransmit,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,m_pTimer_Elapsed,The following statement contains a magic number: lock(m_pLock){                      if(m_StartTime.AddMilliseconds(64 * SIP_TimerConstants.T1) < DateTime.Now){                          // Log                          if(m_pDialog.Stack.Logger != null){                              m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "'] ACK was not received for (re-)INVITE' terminating INVITE session.");                          }                            m_pDialog.Terminate("Dialog Error: ACK was not received for (re-)INVITE."'true);                          Dispose();                      }                      else{                          // Retransmit response.                          try{                              m_pDialog.Flow.Send(m_pResponse);                                // Log                              if(m_pDialog.Stack.Logger != null){                                  m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "';statusCode=" + m_pResponse.StatusCode + "] UAS 2xx response retransmited");                              }                          }                          catch(Exception x){                              // Log                              if(m_pDialog.Stack.Logger != null){                                  m_pDialog.Stack.Logger.AddText("Dialog [id='" + m_pDialog.ID + "'] UAS 2xx response retransmission failed: " + x.Message);                              }                          }                                                    m_pTimer.Interval = Math.Min(m_pTimer.Interval * 2'SIP_TimerConstants.T2);                          m_pTimer.Enabled = true;                      }                  }
Magic Number,LumiSoft.Net.SIP.Stack,UacInvite2xxRetransmissionWaiter,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Dialog_Invite.cs,UacInvite2xxRetransmissionWaiter,The following statement contains a magic number: m_pTimer = new TimerEx(64 * SIP_TimerConstants.T1'false);
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Flow,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Flow.cs,BeginReadHeader_Completed,The following statement contains a magic number: try{                  int countStored = m_pTcpSession.TcpStream.EndReadHeader(asyncResult);                          // We got CRLF(ping or pong).                  if(countStored == 0){                       // We have ping request.                      if(this.IsServer){                          // We have full ping request.                          if(m_LastCRLF){                              m_LastCRLF = false;                                m_pStack.TransportLayer.OnMessageReceived(this'new byte[]{(byte)'\r''(byte)'\n''(byte)'\r''(byte)'\n'});                          }                          // We have first CRLF of ping request.                          else{                              m_LastCRLF = true;                          }                      }                      // We got pong to our ping request.                      else{                          m_pStack.TransportLayer.OnMessageReceived(this'new byte[]{(byte)'\r''(byte)'\n'});                      }                        // Wait for new SIP message.                       BeginReadHeader();                  }                  // We have SIP message header.                  else{                      m_LastCRLF = false;                        // Add header terminator blank line.                      m_pMessage.Write(new byte[]{(byte)'\r''(byte)'\n'}'0'2);                        m_pMessage.Position = 0;                      string contentLengthValue = Mime.MimeUtils.ParseHeaderField("Content-Length:"'m_pMessage);                      m_pMessage.Position = m_pMessage.Length;                        int contentLength = 0;                        // Read message body.                      if(contentLengthValue != ""){                          contentLength = Convert.ToInt32(contentLengthValue);                      }                        // Start reading message body.                      if(contentLength > 0){                          // Read body data.                          m_pTcpSession.TcpStream.BeginReadFixedCount(m_pMessage'contentLength'new AsyncCallback(this.BeginReadData_Completed)'null);                      }                      // Message with no body.                      else{                          byte[] messageData = m_pMessage.ToArray();                          // Wait for new SIP message.                           BeginReadHeader();                                                    m_pStack.TransportLayer.OnMessageReceived(this'messageData);                      }                  }              }              catch{                  Dispose();              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerA_Elapsed,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Calling){                      // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) triggered.");                      }                        try{                          // Retransmit request.                          this.Stack.TransportLayer.SendRequest(this.Flow'this.Request'this);                      }                      catch(Exception x){                          OnTransportError(x);                          SetState(SIP_TransactionState.Terminated);                          return;                      }                        // Update(double current) next transmit time.                      m_pTimerA.Interval *= 2;                      m_pTimerA.Enabled = true;                        // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) updated' will triger after " + m_pTimerA.Interval + ".");                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,m_pTimerE_Elapsed,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Trying){                      // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(-NonINVITE request retransmission) triggered.");                      }                        try{                          // Retransmit request.                          this.Stack.TransportLayer.SendRequest(this.Flow'this.Request'this);                      }                      catch(Exception x){                          OnTransportError(x);                          SetState(SIP_TransactionState.Terminated);                          return;                      }                        // Update(double current) next transmit time.                      m_pTimerE.Interval = Math.Min(m_pTimerE.Interval * 2'SIP_TimerConstants.T2);                      m_pTimerE.Enabled = true;                        // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) updated' will triger after " + m_pTimerE.Interval + ".");                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Start,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      throw new ObjectDisposedException(this.GetType().Name);                  }                  else if(this.State != SIP_TransactionState.WaitingToStart){                      throw new InvalidOperationException("Start method is valid only in 'WaitingToStart' state.");                  }                    // Move processing to thread pool.                  ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state){                      lock(this.SyncRoot){                          #region INVITE                            if(this.Method == SIP_Methods.INVITE){                              /* RFC 3261 17.1.1.2.                                  The initial state' "calling"' MUST be entered when the TU                                  initiates a new client transaction with an INVITE request.  The                                  client transaction MUST pass the request to the transport layer for                                  transmission (see Section 18).  If an unreliable transport is being                                  used' the client transaction MUST start timer A with a value of T1.                                  If a reliable transport is being used' the client transaction SHOULD                                  NOT start timer A (Timer A controls request retransmissions).  For                                  any transport' the client transaction MUST start timer B with a value                                  of 64*T1 seconds (Timer B controls transaction timeouts).                              */                                SetState(SIP_TransactionState.Calling);                                try{                                  // Send initial request.                                  this.Stack.TransportLayer.SendRequest(this.Flow'this.Request'this);                              }                              catch(Exception x){                                  OnTransportError(x);                                  // NOTE: TransportError event handler could Dispose this transaction' so we need to check it.                                  if(this.State != SIP_TransactionState.Disposed){                                      SetState(SIP_TransactionState.Terminated);                                  }                                  return;                              }                                                            // Start timer A for unreliable transports.                              if(!this.Flow.IsReliable){                                  m_pTimerA = new TimerEx(SIP_TimerConstants.T1'false);                                  m_pTimerA.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerA_Elapsed);                                  m_pTimerA.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) started' will triger after " + m_pTimerA.Interval + ".");                                  }                              }                                // Start timer B.                              m_pTimerB = new TimerEx(64 * SIP_TimerConstants.T1'false);                              m_pTimerB.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerB_Elapsed);                              m_pTimerB.Enabled = true;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) started' will triger after " + m_pTimerB.Interval + ".");                              }                          }                            #endregion                            #region Non-INVITE                            else{                              /* RFC 3261 17.1.2.2.                                  The "Trying" state is entered when the TU initiates a new client                                  transaction with a request.  When entering this state' the client                                  transaction SHOULD set timer F to fire in 64*T1 seconds.  The request                                  MUST be passed to the transport layer for transmission.  If an                                  unreliable transport is in use' the client transaction MUST set timer                                  E to fire in T1 seconds.                              */                                SetState(SIP_TransactionState.Trying);                                // Start timer F.                              m_pTimerF = new TimerEx(64 * SIP_TimerConstants.T1'false);                              m_pTimerF.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerF_Elapsed);                              m_pTimerF.Enabled = true;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) started' will triger after " + m_pTimerF.Interval + ".");                              }                                try{                                  // Send initial request.                                  this.Stack.TransportLayer.SendRequest(this.Flow'this.Request'this);                                                               }                              catch(Exception x){                                  OnTransportError(x);                                  // NOTE: TransportError event handler could Dispose this transaction' so we need to check it.                                  if(this.State != SIP_TransactionState.Disposed){                                      SetState(SIP_TransactionState.Terminated);                                  }                                  return;                              }                                // Start timer E for unreliable transports.                              if(!this.Flow.IsReliable){                                   m_pTimerE = new TimerEx(SIP_TimerConstants.T1'false);                                  m_pTimerE.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerE_Elapsed);                                  m_pTimerE.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) started' will triger after " + m_pTimerE.Interval + ".");                                  }                              }                          }                            #endregion                      }                  }));                              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,Start,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      throw new ObjectDisposedException(this.GetType().Name);                  }                  else if(this.State != SIP_TransactionState.WaitingToStart){                      throw new InvalidOperationException("Start method is valid only in 'WaitingToStart' state.");                  }                    // Move processing to thread pool.                  ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state){                      lock(this.SyncRoot){                          #region INVITE                            if(this.Method == SIP_Methods.INVITE){                              /* RFC 3261 17.1.1.2.                                  The initial state' "calling"' MUST be entered when the TU                                  initiates a new client transaction with an INVITE request.  The                                  client transaction MUST pass the request to the transport layer for                                  transmission (see Section 18).  If an unreliable transport is being                                  used' the client transaction MUST start timer A with a value of T1.                                  If a reliable transport is being used' the client transaction SHOULD                                  NOT start timer A (Timer A controls request retransmissions).  For                                  any transport' the client transaction MUST start timer B with a value                                  of 64*T1 seconds (Timer B controls transaction timeouts).                              */                                SetState(SIP_TransactionState.Calling);                                try{                                  // Send initial request.                                  this.Stack.TransportLayer.SendRequest(this.Flow'this.Request'this);                              }                              catch(Exception x){                                  OnTransportError(x);                                  // NOTE: TransportError event handler could Dispose this transaction' so we need to check it.                                  if(this.State != SIP_TransactionState.Disposed){                                      SetState(SIP_TransactionState.Terminated);                                  }                                  return;                              }                                                            // Start timer A for unreliable transports.                              if(!this.Flow.IsReliable){                                  m_pTimerA = new TimerEx(SIP_TimerConstants.T1'false);                                  m_pTimerA.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerA_Elapsed);                                  m_pTimerA.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) started' will triger after " + m_pTimerA.Interval + ".");                                  }                              }                                // Start timer B.                              m_pTimerB = new TimerEx(64 * SIP_TimerConstants.T1'false);                              m_pTimerB.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerB_Elapsed);                              m_pTimerB.Enabled = true;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) started' will triger after " + m_pTimerB.Interval + ".");                              }                          }                            #endregion                            #region Non-INVITE                            else{                              /* RFC 3261 17.1.2.2.                                  The "Trying" state is entered when the TU initiates a new client                                  transaction with a request.  When entering this state' the client                                  transaction SHOULD set timer F to fire in 64*T1 seconds.  The request                                  MUST be passed to the transport layer for transmission.  If an                                  unreliable transport is in use' the client transaction MUST set timer                                  E to fire in T1 seconds.                              */                                SetState(SIP_TransactionState.Trying);                                // Start timer F.                              m_pTimerF = new TimerEx(64 * SIP_TimerConstants.T1'false);                              m_pTimerF.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerF_Elapsed);                              m_pTimerF.Enabled = true;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) started' will triger after " + m_pTimerF.Interval + ".");                              }                                try{                                  // Send initial request.                                  this.Stack.TransportLayer.SendRequest(this.Flow'this.Request'this);                                                               }                              catch(Exception x){                                  OnTransportError(x);                                  // NOTE: TransportError event handler could Dispose this transaction' so we need to check it.                                  if(this.State != SIP_TransactionState.Disposed){                                      SetState(SIP_TransactionState.Terminated);                                  }                                  return;                              }                                // Start timer E for unreliable transports.                              if(!this.Flow.IsReliable){                                   m_pTimerE = new TimerEx(SIP_TimerConstants.T1'false);                                  m_pTimerE.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerE_Elapsed);                                  m_pTimerE.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) started' will triger after " + m_pTimerE.Interval + ".");                                  }                              }                          }                            #endregion                      }                  }));                              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      return;                  }                  /* RFC 3261 9.1. CANCEL.                      *) If provisional response' send CANCEL' we should get '478 Request terminated'.                      *) If final response' skip canceling' nothing to cancel.                  */                  else if(m_IsCanceling && response.StatusCodeType == SIP_StatusCodeType.Provisional){                      SendCancel();                      return;                  }                    // Log                  if(this.Stack.Logger != null){                      byte[] responseData = response.ToByteData();                        this.Stack.Logger.AddRead(                          Guid.NewGuid().ToString()'                          null'                          0'                          "Response [transactionID='" +  this.ID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +                           "transport='" + flow.Transport + "'; size='" + responseData.Length + "'; statusCode='" + response.StatusCode + "'; " +                           "reason='" + response.ReasonPhrase + "'; received '" + flow.LocalEP + "' <- '" + flow.RemoteEP + "'."'                          flow.LocalEP'                          flow.RemoteEP'                          responseData                      );                  }                      #region INVITE                    /* RFC 3261 17.1.1.2.                                                     |INVITE from TU                                   Timer A fires     |INVITE sent                                   Reset A'          V                      Timer B fires                                   INVITE sent +-----------+                or Transport Err.                                     +---------|           |---------------+inform TU                                     |         |  Calling  |               |                                     +-------->|           |-------------->|                                               +-----------+ 2xx           |                                                  |  |       2xx to TU     |                                                  |  |1xx                  |                          300-699 +---------------+  |1xx to TU            |                         ACK sent |                  |                     |                      resp. to TU |  1xx             V                     |                                  |  1xx to TU  -----------+               |                                  |  +---------|           |               |                                  |  |         |Proceeding |-------------->|                                  |  +-------->|           | 2xx           |                                  |            +-----------+ 2xx to TU     |                                  |       300-699    |                     |                                  |       ACK sent'  |                     |                                  |       resp. to TU|                     |                                  |                  |                     |      NOTE:                                  |  300-699         V                     |                                  |  ACK sent  +-----------+Transport Err. |  transitions                                  |  +---------|           |Inform TU      |  labeled with                                  |  |         | Completed |-------------->|  the event                                  |  +-------->|           |               |  over the action                                  |            +-----------+               |  to take                                  |              ^   |                     |                                  |              |   | Timer D fires       |                                  +--------------+   | -                   |                                                     |                     |                                                     V                     |                                               +-----------+               |                                               |           |               |                                               | Terminated|<--------------+                                               |           |                                               +-----------+                    */                    if(this.Method == SIP_Methods.INVITE){                      #region Calling                        if(this.State == SIP_TransactionState.Calling){                          // Store response.                          AddResponse(response);                            // Stop timer A'B                          if(m_pTimerA != null){                              m_pTimerA.Dispose();                              m_pTimerA = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) stoped.");                              }                          }                          if(m_pTimerB != null){                              m_pTimerB.Dispose();                              m_pTimerB = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) stoped.");                              }                          }                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Proceeding);                          }                          // 2xx response.                          else if(response.StatusCodeType == SIP_StatusCodeType.Success){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Terminated);                          }                          // 3xx - 6xx response.                          else{                              SendAck(response);                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.1.2.                                   The client transaction SHOULD start timer D when it enters the "Completed" state'                                   with a value of at least 32 seconds for unreliable transports' and a value of zero                                   seconds for reliable transports.                              */                              m_pTimerD = new TimerEx(this.Flow.IsReliable ? 0 : 32000'false);                              m_pTimerD.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerD_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + ".");                              }                              m_pTimerD.Enabled = true;                          }                      }                        #endregion                        #region Proceeding                        else if(this.State == SIP_TransactionState.Proceeding){                          // Store response.                          AddResponse(response);                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                          }                          // 2xx response.                          else if(response.StatusCodeType == SIP_StatusCodeType.Success){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Terminated);                          }                          // 3xx - 6xx response.                          else{                              SendAck(response);                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.1.2.                                   The client transaction SHOULD start timer D when it enters the "Completed" state'                                   with a value of at least 32 seconds for unreliable transports' and a value of zero                                   seconds for reliable transports.                              */                              m_pTimerD = new TimerEx(this.Flow.IsReliable ? 0 : 32000'false);                              m_pTimerD.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerD_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + ".");                              }                              m_pTimerD.Enabled = true;                          }                      }                        #endregion                        #region Completed                        else if(this.State == SIP_TransactionState.Completed){                          // 3xx - 6xx                          if(response.StatusCode >= 300){                              SendAck(response);                          }                      }                        #endregion                        #region Terminated                        else if(this.State == SIP_TransactionState.Terminated){                          // We should never reach here' but if so' do nothing.                      }                        #endregion                  }                    #endregion                    #region Non-INVITE                    /* RFC 3251 17.1.2.2                                                 |Request from TU                                                 |send request                             Timer E             V                             send request  +-----------+                                 +---------|           |-------------------+                                 |         |  Trying   |  Timer F          |                                 +-------->|           |  or Transport Err.|                                           +-----------+  inform TU        |                              200-699         |  |                         |                              resp. to TU     |  |1xx                      |                              +---------------+  |resp. to TU              |                              |                  |                         |                              |   Timer E        V       Timer F           |                              |   send req +-----------+ or Transport Err. |                              |  +---------|           | inform TU         |                              |  |         |Proceeding |------------------>|                              |  +-------->|           |-----+             |                              |            +-----------+     |1xx          |                              |              |      ^        |resp to TU   |                              | 200-699      |      +--------+             |                              | resp. to TU  |                             |                              |              |                             |                              |              V                             |                              |            +-----------+                   |                              |            |           |                   |                              |            | Completed |                   |                              |            |           |                   |                              |            +-----------+                   |                              |              ^   |                         |                              |              |   | Timer K                 |                              +--------------+   | -                       |                                                 |                         |                                                 V                         |                           NOTE:           +-----------+                   |                                           |           |                   |                       transitions         | Terminated|<------------------+                       labeled with        |           |                       the event           +-----------+                       over the action                       to take                  */                    else{                      #region Trying                        if(this.State == SIP_TransactionState.Trying){                          // Store response.                          AddResponse(response);                            // Stop timer E                          if(m_pTimerE != null){                              m_pTimerE.Dispose();                              m_pTimerE = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) stoped.");                              }                          }                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Proceeding);                          }                          // 2xx - 6xx response.                          else{                              // Stop timer F                              if(m_pTimerF != null){                                  m_pTimerF.Dispose();                                  m_pTimerF = null;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped.");                                  }                              }                                OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.2.2.                                   The client transaction enters the "Completed" state' it MUST set                                  Timer K to fire in T4 seconds for unreliable transports' and zero                                  seconds for reliable transports.                              */                              m_pTimerK = new TimerEx(this.Flow.IsReliable ? 1 : SIP_TimerConstants.T4'false);                              m_pTimerK.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerK_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + ".");                              }                              m_pTimerK.Enabled = true;                          }                      }                        #endregion                        #region Proceeding                        else if(this.State == SIP_TransactionState.Proceeding){                          // Store response.                          AddResponse(response);                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                          }                                                  // 2xx - 6xx response.                          else{                              // Stop timer F                              if(m_pTimerF != null){                                  m_pTimerF.Dispose();                                  m_pTimerF = null;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped.");                                  }                              }                                OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.2.2.                                   The client transaction enters the "Completed" state' it MUST set                                  Timer K to fire in T4 seconds for unreliable transports' and zero                                  seconds for reliable transports.                              */                              m_pTimerK = new TimerEx(this.Flow.IsReliable ? 0 : SIP_TimerConstants.T4'false);                              m_pTimerK.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerK_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + ".");                              }                              m_pTimerK.Enabled = true;                          }                      }                        #endregion                        #region Completed                        else if(this.State == SIP_TransactionState.Completed){                          // Eat retransmited response.                      }                        #endregion                        #region Terminated                        else if(this.State == SIP_TransactionState.Terminated){                          // We should never reach here' but if so' do nothing.                      }                        #endregion                  }                    #endregion              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      return;                  }                  /* RFC 3261 9.1. CANCEL.                      *) If provisional response' send CANCEL' we should get '478 Request terminated'.                      *) If final response' skip canceling' nothing to cancel.                  */                  else if(m_IsCanceling && response.StatusCodeType == SIP_StatusCodeType.Provisional){                      SendCancel();                      return;                  }                    // Log                  if(this.Stack.Logger != null){                      byte[] responseData = response.ToByteData();                        this.Stack.Logger.AddRead(                          Guid.NewGuid().ToString()'                          null'                          0'                          "Response [transactionID='" +  this.ID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +                           "transport='" + flow.Transport + "'; size='" + responseData.Length + "'; statusCode='" + response.StatusCode + "'; " +                           "reason='" + response.ReasonPhrase + "'; received '" + flow.LocalEP + "' <- '" + flow.RemoteEP + "'."'                          flow.LocalEP'                          flow.RemoteEP'                          responseData                      );                  }                      #region INVITE                    /* RFC 3261 17.1.1.2.                                                     |INVITE from TU                                   Timer A fires     |INVITE sent                                   Reset A'          V                      Timer B fires                                   INVITE sent +-----------+                or Transport Err.                                     +---------|           |---------------+inform TU                                     |         |  Calling  |               |                                     +-------->|           |-------------->|                                               +-----------+ 2xx           |                                                  |  |       2xx to TU     |                                                  |  |1xx                  |                          300-699 +---------------+  |1xx to TU            |                         ACK sent |                  |                     |                      resp. to TU |  1xx             V                     |                                  |  1xx to TU  -----------+               |                                  |  +---------|           |               |                                  |  |         |Proceeding |-------------->|                                  |  +-------->|           | 2xx           |                                  |            +-----------+ 2xx to TU     |                                  |       300-699    |                     |                                  |       ACK sent'  |                     |                                  |       resp. to TU|                     |                                  |                  |                     |      NOTE:                                  |  300-699         V                     |                                  |  ACK sent  +-----------+Transport Err. |  transitions                                  |  +---------|           |Inform TU      |  labeled with                                  |  |         | Completed |-------------->|  the event                                  |  +-------->|           |               |  over the action                                  |            +-----------+               |  to take                                  |              ^   |                     |                                  |              |   | Timer D fires       |                                  +--------------+   | -                   |                                                     |                     |                                                     V                     |                                               +-----------+               |                                               |           |               |                                               | Terminated|<--------------+                                               |           |                                               +-----------+                    */                    if(this.Method == SIP_Methods.INVITE){                      #region Calling                        if(this.State == SIP_TransactionState.Calling){                          // Store response.                          AddResponse(response);                            // Stop timer A'B                          if(m_pTimerA != null){                              m_pTimerA.Dispose();                              m_pTimerA = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) stoped.");                              }                          }                          if(m_pTimerB != null){                              m_pTimerB.Dispose();                              m_pTimerB = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) stoped.");                              }                          }                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Proceeding);                          }                          // 2xx response.                          else if(response.StatusCodeType == SIP_StatusCodeType.Success){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Terminated);                          }                          // 3xx - 6xx response.                          else{                              SendAck(response);                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.1.2.                                   The client transaction SHOULD start timer D when it enters the "Completed" state'                                   with a value of at least 32 seconds for unreliable transports' and a value of zero                                   seconds for reliable transports.                              */                              m_pTimerD = new TimerEx(this.Flow.IsReliable ? 0 : 32000'false);                              m_pTimerD.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerD_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + ".");                              }                              m_pTimerD.Enabled = true;                          }                      }                        #endregion                        #region Proceeding                        else if(this.State == SIP_TransactionState.Proceeding){                          // Store response.                          AddResponse(response);                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                          }                          // 2xx response.                          else if(response.StatusCodeType == SIP_StatusCodeType.Success){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Terminated);                          }                          // 3xx - 6xx response.                          else{                              SendAck(response);                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.1.2.                                   The client transaction SHOULD start timer D when it enters the "Completed" state'                                   with a value of at least 32 seconds for unreliable transports' and a value of zero                                   seconds for reliable transports.                              */                              m_pTimerD = new TimerEx(this.Flow.IsReliable ? 0 : 32000'false);                              m_pTimerD.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerD_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + ".");                              }                              m_pTimerD.Enabled = true;                          }                      }                        #endregion                        #region Completed                        else if(this.State == SIP_TransactionState.Completed){                          // 3xx - 6xx                          if(response.StatusCode >= 300){                              SendAck(response);                          }                      }                        #endregion                        #region Terminated                        else if(this.State == SIP_TransactionState.Terminated){                          // We should never reach here' but if so' do nothing.                      }                        #endregion                  }                    #endregion                    #region Non-INVITE                    /* RFC 3251 17.1.2.2                                                 |Request from TU                                                 |send request                             Timer E             V                             send request  +-----------+                                 +---------|           |-------------------+                                 |         |  Trying   |  Timer F          |                                 +-------->|           |  or Transport Err.|                                           +-----------+  inform TU        |                              200-699         |  |                         |                              resp. to TU     |  |1xx                      |                              +---------------+  |resp. to TU              |                              |                  |                         |                              |   Timer E        V       Timer F           |                              |   send req +-----------+ or Transport Err. |                              |  +---------|           | inform TU         |                              |  |         |Proceeding |------------------>|                              |  +-------->|           |-----+             |                              |            +-----------+     |1xx          |                              |              |      ^        |resp to TU   |                              | 200-699      |      +--------+             |                              | resp. to TU  |                             |                              |              |                             |                              |              V                             |                              |            +-----------+                   |                              |            |           |                   |                              |            | Completed |                   |                              |            |           |                   |                              |            +-----------+                   |                              |              ^   |                         |                              |              |   | Timer K                 |                              +--------------+   | -                       |                                                 |                         |                                                 V                         |                           NOTE:           +-----------+                   |                                           |           |                   |                       transitions         | Terminated|<------------------+                       labeled with        |           |                       the event           +-----------+                       over the action                       to take                  */                    else{                      #region Trying                        if(this.State == SIP_TransactionState.Trying){                          // Store response.                          AddResponse(response);                            // Stop timer E                          if(m_pTimerE != null){                              m_pTimerE.Dispose();                              m_pTimerE = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) stoped.");                              }                          }                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Proceeding);                          }                          // 2xx - 6xx response.                          else{                              // Stop timer F                              if(m_pTimerF != null){                                  m_pTimerF.Dispose();                                  m_pTimerF = null;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped.");                                  }                              }                                OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.2.2.                                   The client transaction enters the "Completed" state' it MUST set                                  Timer K to fire in T4 seconds for unreliable transports' and zero                                  seconds for reliable transports.                              */                              m_pTimerK = new TimerEx(this.Flow.IsReliable ? 1 : SIP_TimerConstants.T4'false);                              m_pTimerK.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerK_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + ".");                              }                              m_pTimerK.Enabled = true;                          }                      }                        #endregion                        #region Proceeding                        else if(this.State == SIP_TransactionState.Proceeding){                          // Store response.                          AddResponse(response);                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                          }                                                  // 2xx - 6xx response.                          else{                              // Stop timer F                              if(m_pTimerF != null){                                  m_pTimerF.Dispose();                                  m_pTimerF = null;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped.");                                  }                              }                                OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.2.2.                                   The client transaction enters the "Completed" state' it MUST set                                  Timer K to fire in T4 seconds for unreliable transports' and zero                                  seconds for reliable transports.                              */                              m_pTimerK = new TimerEx(this.Flow.IsReliable ? 0 : SIP_TimerConstants.T4'false);                              m_pTimerK.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerK_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + ".");                              }                              m_pTimerK.Enabled = true;                          }                      }                        #endregion                        #region Completed                        else if(this.State == SIP_TransactionState.Completed){                          // Eat retransmited response.                      }                        #endregion                        #region Terminated                        else if(this.State == SIP_TransactionState.Terminated){                          // We should never reach here' but if so' do nothing.                      }                        #endregion                  }                    #endregion              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      return;                  }                  /* RFC 3261 9.1. CANCEL.                      *) If provisional response' send CANCEL' we should get '478 Request terminated'.                      *) If final response' skip canceling' nothing to cancel.                  */                  else if(m_IsCanceling && response.StatusCodeType == SIP_StatusCodeType.Provisional){                      SendCancel();                      return;                  }                    // Log                  if(this.Stack.Logger != null){                      byte[] responseData = response.ToByteData();                        this.Stack.Logger.AddRead(                          Guid.NewGuid().ToString()'                          null'                          0'                          "Response [transactionID='" +  this.ID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +                           "transport='" + flow.Transport + "'; size='" + responseData.Length + "'; statusCode='" + response.StatusCode + "'; " +                           "reason='" + response.ReasonPhrase + "'; received '" + flow.LocalEP + "' <- '" + flow.RemoteEP + "'."'                          flow.LocalEP'                          flow.RemoteEP'                          responseData                      );                  }                      #region INVITE                    /* RFC 3261 17.1.1.2.                                                     |INVITE from TU                                   Timer A fires     |INVITE sent                                   Reset A'          V                      Timer B fires                                   INVITE sent +-----------+                or Transport Err.                                     +---------|           |---------------+inform TU                                     |         |  Calling  |               |                                     +-------->|           |-------------->|                                               +-----------+ 2xx           |                                                  |  |       2xx to TU     |                                                  |  |1xx                  |                          300-699 +---------------+  |1xx to TU            |                         ACK sent |                  |                     |                      resp. to TU |  1xx             V                     |                                  |  1xx to TU  -----------+               |                                  |  +---------|           |               |                                  |  |         |Proceeding |-------------->|                                  |  +-------->|           | 2xx           |                                  |            +-----------+ 2xx to TU     |                                  |       300-699    |                     |                                  |       ACK sent'  |                     |                                  |       resp. to TU|                     |                                  |                  |                     |      NOTE:                                  |  300-699         V                     |                                  |  ACK sent  +-----------+Transport Err. |  transitions                                  |  +---------|           |Inform TU      |  labeled with                                  |  |         | Completed |-------------->|  the event                                  |  +-------->|           |               |  over the action                                  |            +-----------+               |  to take                                  |              ^   |                     |                                  |              |   | Timer D fires       |                                  +--------------+   | -                   |                                                     |                     |                                                     V                     |                                               +-----------+               |                                               |           |               |                                               | Terminated|<--------------+                                               |           |                                               +-----------+                    */                    if(this.Method == SIP_Methods.INVITE){                      #region Calling                        if(this.State == SIP_TransactionState.Calling){                          // Store response.                          AddResponse(response);                            // Stop timer A'B                          if(m_pTimerA != null){                              m_pTimerA.Dispose();                              m_pTimerA = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer A(INVITE request retransmission) stoped.");                              }                          }                          if(m_pTimerB != null){                              m_pTimerB.Dispose();                              m_pTimerB = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer B(INVITE calling state timeout) stoped.");                              }                          }                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Proceeding);                          }                          // 2xx response.                          else if(response.StatusCodeType == SIP_StatusCodeType.Success){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Terminated);                          }                          // 3xx - 6xx response.                          else{                              SendAck(response);                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.1.2.                                   The client transaction SHOULD start timer D when it enters the "Completed" state'                                   with a value of at least 32 seconds for unreliable transports' and a value of zero                                   seconds for reliable transports.                              */                              m_pTimerD = new TimerEx(this.Flow.IsReliable ? 0 : 32000'false);                              m_pTimerD.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerD_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + ".");                              }                              m_pTimerD.Enabled = true;                          }                      }                        #endregion                        #region Proceeding                        else if(this.State == SIP_TransactionState.Proceeding){                          // Store response.                          AddResponse(response);                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                          }                          // 2xx response.                          else if(response.StatusCodeType == SIP_StatusCodeType.Success){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Terminated);                          }                          // 3xx - 6xx response.                          else{                              SendAck(response);                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.1.2.                                   The client transaction SHOULD start timer D when it enters the "Completed" state'                                   with a value of at least 32 seconds for unreliable transports' and a value of zero                                   seconds for reliable transports.                              */                              m_pTimerD = new TimerEx(this.Flow.IsReliable ? 0 : 32000'false);                              m_pTimerD.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerD_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer D(INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerD.Interval + ".");                              }                              m_pTimerD.Enabled = true;                          }                      }                        #endregion                        #region Completed                        else if(this.State == SIP_TransactionState.Completed){                          // 3xx - 6xx                          if(response.StatusCode >= 300){                              SendAck(response);                          }                      }                        #endregion                        #region Terminated                        else if(this.State == SIP_TransactionState.Terminated){                          // We should never reach here' but if so' do nothing.                      }                        #endregion                  }                    #endregion                    #region Non-INVITE                    /* RFC 3251 17.1.2.2                                                 |Request from TU                                                 |send request                             Timer E             V                             send request  +-----------+                                 +---------|           |-------------------+                                 |         |  Trying   |  Timer F          |                                 +-------->|           |  or Transport Err.|                                           +-----------+  inform TU        |                              200-699         |  |                         |                              resp. to TU     |  |1xx                      |                              +---------------+  |resp. to TU              |                              |                  |                         |                              |   Timer E        V       Timer F           |                              |   send req +-----------+ or Transport Err. |                              |  +---------|           | inform TU         |                              |  |         |Proceeding |------------------>|                              |  +-------->|           |-----+             |                              |            +-----------+     |1xx          |                              |              |      ^        |resp to TU   |                              | 200-699      |      +--------+             |                              | resp. to TU  |                             |                              |              |                             |                              |              V                             |                              |            +-----------+                   |                              |            |           |                   |                              |            | Completed |                   |                              |            |           |                   |                              |            +-----------+                   |                              |              ^   |                         |                              |              |   | Timer K                 |                              +--------------+   | -                       |                                                 |                         |                                                 V                         |                           NOTE:           +-----------+                   |                                           |           |                   |                       transitions         | Terminated|<------------------+                       labeled with        |           |                       the event           +-----------+                       over the action                       to take                  */                    else{                      #region Trying                        if(this.State == SIP_TransactionState.Trying){                          // Store response.                          AddResponse(response);                            // Stop timer E                          if(m_pTimerE != null){                              m_pTimerE.Dispose();                              m_pTimerE = null;                                // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer E(Non-INVITE request retransmission) stoped.");                              }                          }                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                              SetState(SIP_TransactionState.Proceeding);                          }                          // 2xx - 6xx response.                          else{                              // Stop timer F                              if(m_pTimerF != null){                                  m_pTimerF.Dispose();                                  m_pTimerF = null;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped.");                                  }                              }                                OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.2.2.                                   The client transaction enters the "Completed" state' it MUST set                                  Timer K to fire in T4 seconds for unreliable transports' and zero                                  seconds for reliable transports.                              */                              m_pTimerK = new TimerEx(this.Flow.IsReliable ? 1 : SIP_TimerConstants.T4'false);                              m_pTimerK.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerK_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + ".");                              }                              m_pTimerK.Enabled = true;                          }                      }                        #endregion                        #region Proceeding                        else if(this.State == SIP_TransactionState.Proceeding){                          // Store response.                          AddResponse(response);                            // 1xx response.                          if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                              OnResponseReceived(response);                          }                                                  // 2xx - 6xx response.                          else{                              // Stop timer F                              if(m_pTimerF != null){                                  m_pTimerF.Dispose();                                  m_pTimerF = null;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer F(Non-INVITE trying'proceeding state timeout) stoped.");                                  }                              }                                OnResponseReceived(response);                              SetState(SIP_TransactionState.Completed);                                /* RFC 3261 17.1.2.2.                                   The client transaction enters the "Completed" state' it MUST set                                  Timer K to fire in T4 seconds for unreliable transports' and zero                                  seconds for reliable transports.                              */                              m_pTimerK = new TimerEx(this.Flow.IsReliable ? 0 : SIP_TimerConstants.T4'false);                              m_pTimerK.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerK_Elapsed);                              // Log                              if(this.Stack.Logger != null){                                  this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer K(Non-INVITE 3xx - 6xx response retransmission wait) started' will triger after " + m_pTimerK.Interval + ".");                              }                              m_pTimerK.Enabled = true;                          }                      }                        #endregion                        #region Completed                        else if(this.State == SIP_TransactionState.Completed){                          // Eat retransmited response.                      }                        #endregion                        #region Terminated                        else if(this.State == SIP_TransactionState.Terminated){                          // We should never reach here' but if so' do nothing.                      }                        #endregion                  }                    #endregion              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,SendCancel,The following statement contains a magic number: cancelRequest.MaxForwards = 70;
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,SendAck,The following statement contains a magic number: ackRequest.MaxForwards = 70;
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,m_pTimerG_Elapsed,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Completed){                      // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer G(INVITE response(3xx - 6xx) retransmission) triggered.");                      }                        try{                          this.Stack.TransportLayer.SendResponse(this'this.FinalResponse);                            // Update(double current) next transmit time.                          m_pTimerG.Interval *= Math.Min(m_pTimerG.Interval * 2'SIP_TimerConstants.T2);                          m_pTimerG.Enabled = true;                            // Log                          if(this.Stack.Logger != null){                              this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=false] timer G(INVITE response(3xx - 6xx) retransmission) updated' will triger after " + m_pTimerG.Interval + ".");                          }                      }                      catch(Exception x){                          OnTransportError(x);                          SetState(SIP_TransactionState.Terminated);                      }                                      }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,Start,The following statement contains a magic number: if(this.Method == SIP_Methods.INVITE){                  /* RFC 3261 17.2.1.                      When a server transaction is constructed for a request' it enters the "Proceeding" state. The server                       transaction MUST generate a 100 (Trying) response unless it knows that the TU will generate a provisional                       or final response within 200 ms' in which case it MAY generate a 100 (Trying) response.                  */                    SetState(SIP_TransactionState.Proceeding);                    m_pTimer100 = new TimerEx(200'false);                  m_pTimer100.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimer100_Elapsed);                  m_pTimer100.Enabled = true;              }                #endregion                #region Non-INVITE                else{                  // RFC 3261 17.2.2. The state machine is initialized in the "Trying" state.                  SetState(SIP_TransactionState.Trying);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      throw new ObjectDisposedException(this.GetType().Name);                  }                  if(response == null){                      throw new ArgumentNullException("response");                  }                    try{                      #region INVITE                        /* RFC 3261 17.2.1.                                             |INVITE                                             |pass INV to TU                          INVITE             V send 100 if TU won't in 200ms                          send response+-----------+                              +--------|           |--------+101-199 from TU                              |        | Proceeding|        |send response                              +------->|           |<-------+                                       |           |          Transport Err.                                       |           |          Inform TU                                       |           |--------------->+                                       +-----------+                |                          300-699 from TU |     |2xx from TU        |                          send response   |     |send response      |                                          |     +------------------>+                                          |                         |                          INVITE          V          Timer G fires  |                          send response+-----------+ send response  |                              +--------|           |--------+       |                              |        | Completed |        |       |                              +------->|           |<-------+       |                                       +-----------+                |                                          |     |                   |                                      ACK |     |                   |                                      -   |     +------------------>+                                          |        Timer H fires    |                                          V        or Transport Err.|                                       +-----------+  Inform TU     |                                       |           |                |                                       | Confirmed |                |                                       |           |                |                                       +-----------+                |                                             |                      |                                             |Timer I fires         |                                             |-                     |                                             |                      |                                             V                      |                                       +-----------+                |                                       |           |                |                                       | Terminated|<---------------+                                       |           |                                       +-----------+                      */                        if(this.Method == SIP_Methods.INVITE){                          #region Proceeding                            if(this.State == SIP_TransactionState.Proceeding){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                              }                              // 2xx                              else if(response.StatusCodeType == SIP_StatusCodeType.Success){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Terminated);                              }                              // 3xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.1.                                      For unreliable transports' timer G is set to fire in T1 seconds' and is not set to fire for reliable transports.                                  */                                  if(!this.Flow.IsReliable){                                      m_pTimerG = new TimerEx(SIP_TimerConstants.T1'false);                                      m_pTimerG.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerG_Elapsed);                                      m_pTimerG.Enabled = true;                                        // Log                                      if(this.Stack.Logger != null){                                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer G(INVITE response(3xx - 6xx) retransmission) started' will triger after " + m_pTimerG.Interval + ".");                                      }                                  }                                    /* RFC 3261 17.2.1.                                      When the "Completed" state is entered' timer H MUST be set to fire in 64*T1 seconds for all transports.                                  */                                  m_pTimerH = new TimerEx(64 * SIP_TimerConstants.T1);                                  m_pTimerH.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerH_Elapsed);                                  m_pTimerH.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer H(INVITE ACK wait) started' will triger after " + m_pTimerH.Interval + ".");                                  }                              }                          }                            #endregion                            #region Completed                                    else if(this.State == SIP_TransactionState.Completed){                              // We do nothing here' we just wait ACK to arrive.                          }                            #endregion                            #region Confirmed                            else if(this.State == SIP_TransactionState.Confirmed){                              // We do nothing' just wait ACK retransmissions.                          }                            #endregion                            #region Terminated                            else if(this.State == SIP_TransactionState.Terminated){                              // We should never rreach here' but if so' skip it.                          }                            #endregion                      }                        #endregion                        #region Non-INVITE                        /* RFC 3261 17.2.2.                                                |Request received                                                |pass to TU                                                V                                          +-----------+                                          |           |                                          | Trying    |-------------+                                          |           |             |                                          +-----------+             |200-699 from TU                                                |                   |send response                                                |1xx from TU        |                                                |send response      |                                                |                   |                             Request            V      1xx from TU  |                             send response+-----------+send response|                                 +--------|           |--------+    |                                 |        | Proceeding|        |    |                                 +------->|           |<-------+    |                          +<--------------|           |             |                          |Trnsprt Err    +-----------+             |                          |Inform TU            |                   |                          |                     |                   |                          |                     |200-699 from TU    |                          |                     |send response      |                          |  Request            V                   |                          |  send response+-----------+             |                          |      +--------|           |             |                          |      |        | Completed |<------------+                          |      +------->|           |                          +<--------------|           |                          |Trnsprt Err    +-----------+                          |Inform TU            |                          |                     |Timer J fires                          |                     |-                          |                     |                          |                     V                          |               +-----------+                          |               |           |                          +-------------->| Terminated|                                          |           |                                          +-----------+                      */                        else{                          #region Trying                            if(this.State == SIP_TransactionState.Trying){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Proceeding);                              }                              // 2xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.2.                                      When the server transaction enters the "Completed" state' it MUST set                                      Timer J to fire in 64*T1 seconds for unreliable transports' and zero                                      seconds for reliable transports.                                  */                                  m_pTimerJ = new TimerEx(64 * SIP_TimerConstants.T1'false);                                  m_pTimerJ.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerJ_Elapsed);                                  m_pTimerJ.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + ".");                                  }                              }                          }                            #endregion                            #region Proceeding                            else if(this.State == SIP_TransactionState.Proceeding){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                              }                              // 2xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.2.                                      When the server transaction enters the "Completed" state' it MUST set                                      Timer J to fire in 64*T1 seconds for unreliable transports' and zero                                      seconds for reliable transports.                                  */                                  m_pTimerJ = new TimerEx(64 * SIP_TimerConstants.T1'false);                                  m_pTimerJ.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerJ_Elapsed);                                  m_pTimerJ.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + ".");                                  }                              }                          }                            #endregion                            #region Completed                            else if(this.State == SIP_TransactionState.Completed){                              // Do nothing.                          }                            #endregion                            #region Terminated                            else if(this.State == SIP_TransactionState.Terminated){                              // Do nothing.                          }                            #endregion                      }                        #endregion                  }                  catch(SIP_TransportException x){                      // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] transport exception: " + x.Message);                      }                        OnTransportError(x);                      SetState(SIP_TransactionState.Terminated);                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      throw new ObjectDisposedException(this.GetType().Name);                  }                  if(response == null){                      throw new ArgumentNullException("response");                  }                    try{                      #region INVITE                        /* RFC 3261 17.2.1.                                             |INVITE                                             |pass INV to TU                          INVITE             V send 100 if TU won't in 200ms                          send response+-----------+                              +--------|           |--------+101-199 from TU                              |        | Proceeding|        |send response                              +------->|           |<-------+                                       |           |          Transport Err.                                       |           |          Inform TU                                       |           |--------------->+                                       +-----------+                |                          300-699 from TU |     |2xx from TU        |                          send response   |     |send response      |                                          |     +------------------>+                                          |                         |                          INVITE          V          Timer G fires  |                          send response+-----------+ send response  |                              +--------|           |--------+       |                              |        | Completed |        |       |                              +------->|           |<-------+       |                                       +-----------+                |                                          |     |                   |                                      ACK |     |                   |                                      -   |     +------------------>+                                          |        Timer H fires    |                                          V        or Transport Err.|                                       +-----------+  Inform TU     |                                       |           |                |                                       | Confirmed |                |                                       |           |                |                                       +-----------+                |                                             |                      |                                             |Timer I fires         |                                             |-                     |                                             |                      |                                             V                      |                                       +-----------+                |                                       |           |                |                                       | Terminated|<---------------+                                       |           |                                       +-----------+                      */                        if(this.Method == SIP_Methods.INVITE){                          #region Proceeding                            if(this.State == SIP_TransactionState.Proceeding){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                              }                              // 2xx                              else if(response.StatusCodeType == SIP_StatusCodeType.Success){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Terminated);                              }                              // 3xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.1.                                      For unreliable transports' timer G is set to fire in T1 seconds' and is not set to fire for reliable transports.                                  */                                  if(!this.Flow.IsReliable){                                      m_pTimerG = new TimerEx(SIP_TimerConstants.T1'false);                                      m_pTimerG.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerG_Elapsed);                                      m_pTimerG.Enabled = true;                                        // Log                                      if(this.Stack.Logger != null){                                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer G(INVITE response(3xx - 6xx) retransmission) started' will triger after " + m_pTimerG.Interval + ".");                                      }                                  }                                    /* RFC 3261 17.2.1.                                      When the "Completed" state is entered' timer H MUST be set to fire in 64*T1 seconds for all transports.                                  */                                  m_pTimerH = new TimerEx(64 * SIP_TimerConstants.T1);                                  m_pTimerH.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerH_Elapsed);                                  m_pTimerH.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer H(INVITE ACK wait) started' will triger after " + m_pTimerH.Interval + ".");                                  }                              }                          }                            #endregion                            #region Completed                                    else if(this.State == SIP_TransactionState.Completed){                              // We do nothing here' we just wait ACK to arrive.                          }                            #endregion                            #region Confirmed                            else if(this.State == SIP_TransactionState.Confirmed){                              // We do nothing' just wait ACK retransmissions.                          }                            #endregion                            #region Terminated                            else if(this.State == SIP_TransactionState.Terminated){                              // We should never rreach here' but if so' skip it.                          }                            #endregion                      }                        #endregion                        #region Non-INVITE                        /* RFC 3261 17.2.2.                                                |Request received                                                |pass to TU                                                V                                          +-----------+                                          |           |                                          | Trying    |-------------+                                          |           |             |                                          +-----------+             |200-699 from TU                                                |                   |send response                                                |1xx from TU        |                                                |send response      |                                                |                   |                             Request            V      1xx from TU  |                             send response+-----------+send response|                                 +--------|           |--------+    |                                 |        | Proceeding|        |    |                                 +------->|           |<-------+    |                          +<--------------|           |             |                          |Trnsprt Err    +-----------+             |                          |Inform TU            |                   |                          |                     |                   |                          |                     |200-699 from TU    |                          |                     |send response      |                          |  Request            V                   |                          |  send response+-----------+             |                          |      +--------|           |             |                          |      |        | Completed |<------------+                          |      +------->|           |                          +<--------------|           |                          |Trnsprt Err    +-----------+                          |Inform TU            |                          |                     |Timer J fires                          |                     |-                          |                     |                          |                     V                          |               +-----------+                          |               |           |                          +-------------->| Terminated|                                          |           |                                          +-----------+                      */                        else{                          #region Trying                            if(this.State == SIP_TransactionState.Trying){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Proceeding);                              }                              // 2xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.2.                                      When the server transaction enters the "Completed" state' it MUST set                                      Timer J to fire in 64*T1 seconds for unreliable transports' and zero                                      seconds for reliable transports.                                  */                                  m_pTimerJ = new TimerEx(64 * SIP_TimerConstants.T1'false);                                  m_pTimerJ.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerJ_Elapsed);                                  m_pTimerJ.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + ".");                                  }                              }                          }                            #endregion                            #region Proceeding                            else if(this.State == SIP_TransactionState.Proceeding){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                              }                              // 2xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.2.                                      When the server transaction enters the "Completed" state' it MUST set                                      Timer J to fire in 64*T1 seconds for unreliable transports' and zero                                      seconds for reliable transports.                                  */                                  m_pTimerJ = new TimerEx(64 * SIP_TimerConstants.T1'false);                                  m_pTimerJ.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerJ_Elapsed);                                  m_pTimerJ.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + ".");                                  }                              }                          }                            #endregion                            #region Completed                            else if(this.State == SIP_TransactionState.Completed){                              // Do nothing.                          }                            #endregion                            #region Terminated                            else if(this.State == SIP_TransactionState.Terminated){                              // Do nothing.                          }                            #endregion                      }                        #endregion                  }                  catch(SIP_TransportException x){                      // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] transport exception: " + x.Message);                      }                        OnTransportError(x);                      SetState(SIP_TransactionState.Terminated);                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The following statement contains a magic number: lock(this.SyncRoot){                  if(this.State == SIP_TransactionState.Disposed){                      throw new ObjectDisposedException(this.GetType().Name);                  }                  if(response == null){                      throw new ArgumentNullException("response");                  }                    try{                      #region INVITE                        /* RFC 3261 17.2.1.                                             |INVITE                                             |pass INV to TU                          INVITE             V send 100 if TU won't in 200ms                          send response+-----------+                              +--------|           |--------+101-199 from TU                              |        | Proceeding|        |send response                              +------->|           |<-------+                                       |           |          Transport Err.                                       |           |          Inform TU                                       |           |--------------->+                                       +-----------+                |                          300-699 from TU |     |2xx from TU        |                          send response   |     |send response      |                                          |     +------------------>+                                          |                         |                          INVITE          V          Timer G fires  |                          send response+-----------+ send response  |                              +--------|           |--------+       |                              |        | Completed |        |       |                              +------->|           |<-------+       |                                       +-----------+                |                                          |     |                   |                                      ACK |     |                   |                                      -   |     +------------------>+                                          |        Timer H fires    |                                          V        or Transport Err.|                                       +-----------+  Inform TU     |                                       |           |                |                                       | Confirmed |                |                                       |           |                |                                       +-----------+                |                                             |                      |                                             |Timer I fires         |                                             |-                     |                                             |                      |                                             V                      |                                       +-----------+                |                                       |           |                |                                       | Terminated|<---------------+                                       |           |                                       +-----------+                      */                        if(this.Method == SIP_Methods.INVITE){                          #region Proceeding                            if(this.State == SIP_TransactionState.Proceeding){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                              }                              // 2xx                              else if(response.StatusCodeType == SIP_StatusCodeType.Success){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Terminated);                              }                              // 3xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.1.                                      For unreliable transports' timer G is set to fire in T1 seconds' and is not set to fire for reliable transports.                                  */                                  if(!this.Flow.IsReliable){                                      m_pTimerG = new TimerEx(SIP_TimerConstants.T1'false);                                      m_pTimerG.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerG_Elapsed);                                      m_pTimerG.Enabled = true;                                        // Log                                      if(this.Stack.Logger != null){                                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer G(INVITE response(3xx - 6xx) retransmission) started' will triger after " + m_pTimerG.Interval + ".");                                      }                                  }                                    /* RFC 3261 17.2.1.                                      When the "Completed" state is entered' timer H MUST be set to fire in 64*T1 seconds for all transports.                                  */                                  m_pTimerH = new TimerEx(64 * SIP_TimerConstants.T1);                                  m_pTimerH.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerH_Elapsed);                                  m_pTimerH.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer H(INVITE ACK wait) started' will triger after " + m_pTimerH.Interval + ".");                                  }                              }                          }                            #endregion                            #region Completed                                    else if(this.State == SIP_TransactionState.Completed){                              // We do nothing here' we just wait ACK to arrive.                          }                            #endregion                            #region Confirmed                            else if(this.State == SIP_TransactionState.Confirmed){                              // We do nothing' just wait ACK retransmissions.                          }                            #endregion                            #region Terminated                            else if(this.State == SIP_TransactionState.Terminated){                              // We should never rreach here' but if so' skip it.                          }                            #endregion                      }                        #endregion                        #region Non-INVITE                        /* RFC 3261 17.2.2.                                                |Request received                                                |pass to TU                                                V                                          +-----------+                                          |           |                                          | Trying    |-------------+                                          |           |             |                                          +-----------+             |200-699 from TU                                                |                   |send response                                                |1xx from TU        |                                                |send response      |                                                |                   |                             Request            V      1xx from TU  |                             send response+-----------+send response|                                 +--------|           |--------+    |                                 |        | Proceeding|        |    |                                 +------->|           |<-------+    |                          +<--------------|           |             |                          |Trnsprt Err    +-----------+             |                          |Inform TU            |                   |                          |                     |                   |                          |                     |200-699 from TU    |                          |                     |send response      |                          |  Request            V                   |                          |  send response+-----------+             |                          |      +--------|           |             |                          |      |        | Completed |<------------+                          |      +------->|           |                          +<--------------|           |                          |Trnsprt Err    +-----------+                          |Inform TU            |                          |                     |Timer J fires                          |                     |-                          |                     |                          |                     V                          |               +-----------+                          |               |           |                          +-------------->| Terminated|                                          |           |                                          +-----------+                      */                        else{                          #region Trying                            if(this.State == SIP_TransactionState.Trying){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Proceeding);                              }                              // 2xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.2.                                      When the server transaction enters the "Completed" state' it MUST set                                      Timer J to fire in 64*T1 seconds for unreliable transports' and zero                                      seconds for reliable transports.                                  */                                  m_pTimerJ = new TimerEx(64 * SIP_TimerConstants.T1'false);                                  m_pTimerJ.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerJ_Elapsed);                                  m_pTimerJ.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + ".");                                  }                              }                          }                            #endregion                            #region Proceeding                            else if(this.State == SIP_TransactionState.Proceeding){                              AddResponse(response);                                // 1xx                              if(response.StatusCodeType == SIP_StatusCodeType.Provisional){                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                              }                              // 2xx - 6xx                              else{                                  this.Stack.TransportLayer.SendResponse(this'response);                                  OnResponseSent(response);                                  SetState(SIP_TransactionState.Completed);                                    /* RFC 3261 17.2.2.                                      When the server transaction enters the "Completed" state' it MUST set                                      Timer J to fire in 64*T1 seconds for unreliable transports' and zero                                      seconds for reliable transports.                                  */                                  m_pTimerJ = new TimerEx(64 * SIP_TimerConstants.T1'false);                                  m_pTimerJ.Elapsed += new System.Timers.ElapsedEventHandler(m_pTimerJ_Elapsed);                                  m_pTimerJ.Enabled = true;                                    // Log                                  if(this.Stack.Logger != null){                                      this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] timer J(Non-INVITE request retransmission wait) started' will triger after " + m_pTimerJ.Interval + ".");                                  }                              }                          }                            #endregion                            #region Completed                            else if(this.State == SIP_TransactionState.Completed){                              // Do nothing.                          }                            #endregion                            #region Terminated                            else if(this.State == SIP_TransactionState.Terminated){                              // Do nothing.                          }                            #endregion                      }                        #endregion                  }                  catch(SIP_TransportException x){                      // Log                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddText(this.ID'"Transaction [branch='" + this.ID + "';method='" + this.Method + "';IsServer=true] transport exception: " + x.Message);                      }                        OnTransportError(x);                      SetState(SIP_TransactionState.Terminated);                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_StatusLine,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_StatusLine.cs,SIP_StatusLine,The following statement contains a magic number: if(statusCode < 100 || statusCode > 699){                  throw new ArgumentException("Argument 'statusCode' value must be >= 100 and <= 699.");              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_StatusLine,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_StatusLine.cs,SIP_StatusLine,The following statement contains a magic number: if(statusCode < 100 || statusCode > 699){                  throw new ArgumentException("Argument 'statusCode' value must be >= 100 and <= 699.");              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,ClientTransaction_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                  m_pFlow = e.ClientTransaction.Request.Flow;                    if(e.Response.StatusCode == 401 || e.Response.StatusCode == 407){                      // Check if authentication failed(We sent authorization data and it's challenged again'                       // probably user name or password inccorect)                      bool hasFailedAuthorization = false;                      foreach(SIP_t_Challenge challange in e.Response.WWWAuthenticate.GetAllValues()){                          foreach(SIP_t_Credentials credentials in m_pTransaction.Request.Authorization.GetAllValues()){                              if(new Auth_HttpDigest(challange.AuthData'"").Realm == new Auth_HttpDigest(credentials.AuthData'"").Realm){                                  hasFailedAuthorization = true;                                  break;                              }                          }                      }                      foreach(SIP_t_Challenge challange in e.Response.ProxyAuthenticate.GetAllValues()){                          foreach(SIP_t_Credentials credentials in m_pTransaction.Request.ProxyAuthorization.GetAllValues()){                              if(new Auth_HttpDigest(challange.AuthData'"").Realm == new Auth_HttpDigest(credentials.AuthData'"").Realm){                                  hasFailedAuthorization = true;                                  break;                              }                          }                      }                        // Authorization failed' pass response to UA.                      if(hasFailedAuthorization){                          OnResponseReceived(e.Response);                      }                      // Try to authorize challanges.                      else{                          SIP_Request request = m_pRequest.Copy();                            /* RFC 3261 22.2.                              When a UAC resubmits a request with its credentials after receiving a                              401 (Unauthorized) or 407 (Proxy Authentication Required) response'                              it MUST increment the CSeq header field value as it would normally                              when sending an updated request.                          */                          request.CSeq = new SIP_t_CSeq(m_pStack.ConsumeCSeq()'request.CSeq.RequestMethod);                            // All challanges authorized' resend request.                          if(Authorize(request'e.Response'this.Credentials.ToArray())){                              SIP_Flow flow  = m_pTransaction.Flow;                              CleanUpActiveTransaction();                                          SendToFlow(flow'request);                          }                          // We don't have credentials for one or more challenges.                          else{                              OnResponseReceived(e.Response);                          }                      }                                     }                  else{                      OnResponseReceived(e.Response);                      if(e.Response.StatusCodeType != SIP_StatusCodeType.Provisional){                          OnCompleted();                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,ClientTransaction_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                  m_pFlow = e.ClientTransaction.Request.Flow;                    if(e.Response.StatusCode == 401 || e.Response.StatusCode == 407){                      // Check if authentication failed(We sent authorization data and it's challenged again'                       // probably user name or password inccorect)                      bool hasFailedAuthorization = false;                      foreach(SIP_t_Challenge challange in e.Response.WWWAuthenticate.GetAllValues()){                          foreach(SIP_t_Credentials credentials in m_pTransaction.Request.Authorization.GetAllValues()){                              if(new Auth_HttpDigest(challange.AuthData'"").Realm == new Auth_HttpDigest(credentials.AuthData'"").Realm){                                  hasFailedAuthorization = true;                                  break;                              }                          }                      }                      foreach(SIP_t_Challenge challange in e.Response.ProxyAuthenticate.GetAllValues()){                          foreach(SIP_t_Credentials credentials in m_pTransaction.Request.ProxyAuthorization.GetAllValues()){                              if(new Auth_HttpDigest(challange.AuthData'"").Realm == new Auth_HttpDigest(credentials.AuthData'"").Realm){                                  hasFailedAuthorization = true;                                  break;                              }                          }                      }                        // Authorization failed' pass response to UA.                      if(hasFailedAuthorization){                          OnResponseReceived(e.Response);                      }                      // Try to authorize challanges.                      else{                          SIP_Request request = m_pRequest.Copy();                            /* RFC 3261 22.2.                              When a UAC resubmits a request with its credentials after receiving a                              401 (Unauthorized) or 407 (Proxy Authentication Required) response'                              it MUST increment the CSeq header field value as it would normally                              when sending an updated request.                          */                          request.CSeq = new SIP_t_CSeq(m_pStack.ConsumeCSeq()'request.CSeq.RequestMethod);                            // All challanges authorized' resend request.                          if(Authorize(request'e.Response'this.Credentials.ToArray())){                              SIP_Flow flow  = m_pTransaction.Flow;                              CleanUpActiveTransaction();                                          SendToFlow(flow'request);                          }                          // We don't have credentials for one or more challenges.                          else{                              OnResponseReceived(e.Response);                          }                      }                                     }                  else{                      OnResponseReceived(e.Response);                      if(e.Response.StatusCodeType != SIP_StatusCodeType.Provisional){                          OnCompleted();                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,Cancel,The following statement contains a magic number: while(m_State == SIP_RequestSenderState.Starting){                  Thread.Sleep(5);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,SIP_UA_Registration,The following statement contains a magic number: m_pTimer = new TimerEx((m_RefreshInterval - 15) * 1000);
Magic Number,LumiSoft.Net.SIP.Stack,SIP_UA_Registration,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_UA_Registration.cs,SIP_UA_Registration,The following statement contains a magic number: m_pTimer = new TimerEx((m_RefreshInterval - 15) * 1000);
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Transaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Transaction.cs,AddResponse,The following statement contains a magic number: if(m_pResponses.Count < 15 || response.StatusCode >= 200){                  m_pResponses.Add(response);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Transaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Transaction.cs,AddResponse,The following statement contains a magic number: if(m_pResponses.Count < 15 || response.StatusCode >= 200){                  m_pResponses.Add(response);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Request,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Request.cs,Validate,The following statement contains a magic number: if(this.MaxForwards == -1){                  // We can fix it by setting it to default value 70.                  this.MaxForwards = 70;              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Request,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Request.cs,Parse,The following statement contains a magic number: if(method_uri_version.Length != 3){                  throw new Exception("Invalid SIP request data ! Method line doesn't contain: SIP-Method SIP-URI SIP-Version.");              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Request,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Request.cs,Parse,The following statement contains a magic number: retVal.RequestLine.Version = method_uri_version[2];
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Response,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Response.cs,Parse,The following statement contains a magic number: string[] version_code_text = r.ReadLineString().Split(new char[]{' '}'3);
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Response,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Response.cs,Parse,The following statement contains a magic number: if(version_code_text.Length != 3){                  throw new SIP_ParseException("Invalid SIP Status-Line syntax ! Syntax: {SIP-Version SP Status-Code SP Reason-Phrase}.");              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Response,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Response.cs,Parse,The following statement contains a magic number: retVal.ReasonPhrase = version_code_text[2];
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,Stop,The following statement contains a magic number: while(m_pRegistrations.Count > 0){                  System.Threading.Thread.Sleep(500);                    // Timeout' just kill all UA.                  if(((TimeSpan)(DateTime.Now - start)).Seconds > 15){                      break;                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,Stop,The following statement contains a magic number: while(m_pRegistrations.Count > 0){                  System.Threading.Thread.Sleep(500);                    // Timeout' just kill all UA.                  if(((TimeSpan)(DateTime.Now - start)).Seconds > 15){                      break;                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,GetHops,The following statement contains a magic number: if(Net_Utils.IsIPAddress(uri.Host)){                  if(uri.Port != -1){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'uri.Port'transport));                  }                  else if(forceTLS || uri.IsSecure){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5061'transport));                  }                  else{                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5060'transport));                  }              }              else if(uri.Port != -1){                  foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                      retVal.Add(new SIP_Hop(ip'uri.Port'transport));                  }              }              else{                  //if(naptrRecords){                      // We need to get (IP:Port)'s foreach SRV record.                      //DnsServerResponse response = m_pDnsClient.Query("??? need NAPTR value here"'QTYPE.SRV);                  //}                      if(transportSetExplicitly){                      DnsServerResponse response = null;                      if(transport == SIP_Transport.TLS){                          response = m_pDnsClient.Query("_sips._tcp." + uri.Host'QTYPE.SRV);                      }                      else if(transport == SIP_Transport.TCP){                          response = m_pDnsClient.Query("_sip._tcp." + uri.Host'QTYPE.SRV);                      }                      else{                          response = m_pDnsClient.Query("_sip._udp." + uri.Host'QTYPE.SRV);                      }                      targetSRV.AddRange(response.GetSRVRecords());                  }                                             // We have SRV records' resovle them to (IP:Port)'s.                  if(targetSRV.Count > 0){                      foreach(DNS_rr_SRV record in targetSRV){                          if(Net_Utils.IsIPAddress(record.Target)){                              retVal.Add(new SIP_Hop(IPAddress.Parse(record.Target)'record.Port'transport));                          }                          else{                              foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(record.Target)){                                  retVal.Add(new SIP_Hop(ip'record.Port'transport));                              }                          }                      }                  }                  // No SRV recors' just use A and AAAA records.                  else{                      int port = 5060;                      if(transport == SIP_Transport.TLS){                          port = 5061;                      }                        foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                          retVal.Add(new SIP_Hop(ip'port'transport));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,GetHops,The following statement contains a magic number: if(Net_Utils.IsIPAddress(uri.Host)){                  if(uri.Port != -1){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'uri.Port'transport));                  }                  else if(forceTLS || uri.IsSecure){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5061'transport));                  }                  else{                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5060'transport));                  }              }              else if(uri.Port != -1){                  foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                      retVal.Add(new SIP_Hop(ip'uri.Port'transport));                  }              }              else{                  //if(naptrRecords){                      // We need to get (IP:Port)'s foreach SRV record.                      //DnsServerResponse response = m_pDnsClient.Query("??? need NAPTR value here"'QTYPE.SRV);                  //}                      if(transportSetExplicitly){                      DnsServerResponse response = null;                      if(transport == SIP_Transport.TLS){                          response = m_pDnsClient.Query("_sips._tcp." + uri.Host'QTYPE.SRV);                      }                      else if(transport == SIP_Transport.TCP){                          response = m_pDnsClient.Query("_sip._tcp." + uri.Host'QTYPE.SRV);                      }                      else{                          response = m_pDnsClient.Query("_sip._udp." + uri.Host'QTYPE.SRV);                      }                      targetSRV.AddRange(response.GetSRVRecords());                  }                                             // We have SRV records' resovle them to (IP:Port)'s.                  if(targetSRV.Count > 0){                      foreach(DNS_rr_SRV record in targetSRV){                          if(Net_Utils.IsIPAddress(record.Target)){                              retVal.Add(new SIP_Hop(IPAddress.Parse(record.Target)'record.Port'transport));                          }                          else{                              foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(record.Target)){                                  retVal.Add(new SIP_Hop(ip'record.Port'transport));                              }                          }                      }                  }                  // No SRV recors' just use A and AAAA records.                  else{                      int port = 5060;                      if(transport == SIP_Transport.TLS){                          port = 5061;                      }                        foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                          retVal.Add(new SIP_Hop(ip'port'transport));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,GetHops,The following statement contains a magic number: if(Net_Utils.IsIPAddress(uri.Host)){                  if(uri.Port != -1){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'uri.Port'transport));                  }                  else if(forceTLS || uri.IsSecure){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5061'transport));                  }                  else{                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5060'transport));                  }              }              else if(uri.Port != -1){                  foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                      retVal.Add(new SIP_Hop(ip'uri.Port'transport));                  }              }              else{                  //if(naptrRecords){                      // We need to get (IP:Port)'s foreach SRV record.                      //DnsServerResponse response = m_pDnsClient.Query("??? need NAPTR value here"'QTYPE.SRV);                  //}                      if(transportSetExplicitly){                      DnsServerResponse response = null;                      if(transport == SIP_Transport.TLS){                          response = m_pDnsClient.Query("_sips._tcp." + uri.Host'QTYPE.SRV);                      }                      else if(transport == SIP_Transport.TCP){                          response = m_pDnsClient.Query("_sip._tcp." + uri.Host'QTYPE.SRV);                      }                      else{                          response = m_pDnsClient.Query("_sip._udp." + uri.Host'QTYPE.SRV);                      }                      targetSRV.AddRange(response.GetSRVRecords());                  }                                             // We have SRV records' resovle them to (IP:Port)'s.                  if(targetSRV.Count > 0){                      foreach(DNS_rr_SRV record in targetSRV){                          if(Net_Utils.IsIPAddress(record.Target)){                              retVal.Add(new SIP_Hop(IPAddress.Parse(record.Target)'record.Port'transport));                          }                          else{                              foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(record.Target)){                                  retVal.Add(new SIP_Hop(ip'record.Port'transport));                              }                          }                      }                  }                  // No SRV recors' just use A and AAAA records.                  else{                      int port = 5060;                      if(transport == SIP_Transport.TLS){                          port = 5061;                      }                        foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                          retVal.Add(new SIP_Hop(ip'port'transport));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_Stack,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_Stack.cs,GetHops,The following statement contains a magic number: if(Net_Utils.IsIPAddress(uri.Host)){                  if(uri.Port != -1){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'uri.Port'transport));                  }                  else if(forceTLS || uri.IsSecure){                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5061'transport));                  }                  else{                      retVal.Add(new SIP_Hop(IPAddress.Parse(uri.Host)'5060'transport));                  }              }              else if(uri.Port != -1){                  foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                      retVal.Add(new SIP_Hop(ip'uri.Port'transport));                  }              }              else{                  //if(naptrRecords){                      // We need to get (IP:Port)'s foreach SRV record.                      //DnsServerResponse response = m_pDnsClient.Query("??? need NAPTR value here"'QTYPE.SRV);                  //}                      if(transportSetExplicitly){                      DnsServerResponse response = null;                      if(transport == SIP_Transport.TLS){                          response = m_pDnsClient.Query("_sips._tcp." + uri.Host'QTYPE.SRV);                      }                      else if(transport == SIP_Transport.TCP){                          response = m_pDnsClient.Query("_sip._tcp." + uri.Host'QTYPE.SRV);                      }                      else{                          response = m_pDnsClient.Query("_sip._udp." + uri.Host'QTYPE.SRV);                      }                      targetSRV.AddRange(response.GetSRVRecords());                  }                                             // We have SRV records' resovle them to (IP:Port)'s.                  if(targetSRV.Count > 0){                      foreach(DNS_rr_SRV record in targetSRV){                          if(Net_Utils.IsIPAddress(record.Target)){                              retVal.Add(new SIP_Hop(IPAddress.Parse(record.Target)'record.Port'transport));                          }                          else{                              foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(record.Target)){                                  retVal.Add(new SIP_Hop(ip'record.Port'transport));                              }                          }                      }                  }                  // No SRV recors' just use A and AAAA records.                  else{                      int port = 5060;                      if(transport == SIP_Transport.TLS){                          port = 5061;                      }                        foreach(IPAddress ip in m_pDnsClient.GetHostAddresses(uri.Host)){                          retVal.Add(new SIP_Hop(ip'port'transport));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransactionLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransactionLayer.cs,SIP_TransactionLayer,The following statement contains a magic number: m_pTimer = new Timer(20000);
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransactionLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransactionLayer.cs,m_pTimer_Elapsed,The following statement contains a magic number: foreach(SIP_Dialog dialog in this.Dialogs){                  // Terminate early dialog after 5 minutes' normally there must be any' but just in case ... .                  if(dialog.State == SIP_DialogState.Early){                      if(dialog.CreateTime.AddMinutes(5) < DateTime.Now){                          dialog.Terminate();                      }                  }                  //                   else if(dialog.State == SIP_DialogState.Confirmed){                      // TODO:                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,The following statement contains a magic number: try{                    #region Ping / pong                    // We have "ping"(CRLFCRLF) request' response with "pong".                  if(message.Length == 4){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"ping\""'flow.LocalEP'flow.RemoteEP);                      }                        // Send "pong".                      flow.SendInternal(new byte[]{(byte)'\r''(byte)'\n'});                        if(this.Stack.Logger != null){                          this.Stack.Logger.AddWrite(""'null'2'"Flow [id='" + flow.ID + "'] sent \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                  // We have pong(CRLF)' do nothing.                  else if(message.Length == 2){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                    #endregion                    #region Response                    if(Encoding.UTF8.GetString(message'0'3).ToUpper().StartsWith("SIP")){                        #region Parse and validate response                        SIP_Response response = null;                      try{                          response = SIP_Response.Parse(message);                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.ToString());                          }                            return;                      }                                                        try{                          response.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Response validation failed: " + x.ToString());                          }                            return;                      }                        #endregion                        /* RFC 3261 18.1.2 Receiving Responses.                          When a response is received' the client transport examines the top                          Via header field value.  If the value of the "sent-by" parameter in                          that header field value does not correspond to a value that the                          client transport is configured to insert into requests' the response                          MUST be silently discarded.                            If there are any client transactions in existence' the client                          transport uses the matching procedures of Section 17.1.3 to attempt                          to match the response to an existing transaction.  If there is a                          match' the response MUST be passed to that transaction.  Otherwise'                          the response MUST be passed to the core (whether it be stateless                          proxy' stateful proxy' or UA) for further processing.  Handling of                          these "stray" responses is dependent on the core (a proxy will                          forward them' while a UA will discard' for example).                      */                                                                SIP_ClientTransaction transaction =  m_pStack.TransactionLayer.MatchClientTransaction(response);                      // Allow client transaction to process response.                      if(transaction != null){                          transaction.ProcessResponse(flow'response);                                              }                      else{                          // Pass response to dialog.                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(response);                          if(dialog != null){                              dialog.ProcessResponse(response);                          }                          // Pass response to core.                          else{                                                  m_pStack.OnResponseReceived(new SIP_ResponseReceivedEventArgs(m_pStack'null'response));                          }                      }                  }                    #endregion                    #region Request                    // SIP request.                  else{                        #region Parse and validate request                        SIP_Request request = null;                      try{                          request = SIP_Request.Parse(message);                      }                      catch(Exception x){                          // Log                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.Message);                          }                            return;                      }                        try{                          request.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Request validation failed: " + x.ToString());                          }                            // Bad request' send error to request maker.                          SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ". " + x.Message'request));                            return;                      }                        #endregion                        // TODO: Is that needed' core can reject message as it would like.                      SIP_ValidateRequestEventArgs eArgs = m_pStack.OnValidateRequest(request'flow.RemoteEP);                      // Request rejected' return response.                      if(eArgs.ResponseCode != null){                          SendResponse(m_pStack.CreateResponse(eArgs.ResponseCode'request));                            return;                      }                        request.Flow = flow;                      request.LocalEndPoint = flow.LocalEP;                      request.RemoteEndPoint = flow.RemoteEP;                        /* RFC 3261 18.2.1.                          When the server transport receives a request over any transport' it                          MUST examine the value of the "sent-by" parameter in the top Via                          header field value.  If the host portion of the "sent-by" parameter                          contains a domain name' or if it contains an IP address that differs                          from the packet source address' the server MUST add a "received"                          parameter to that Via header field value.  This parameter MUST                          contain the source address from which the packet was received.  This                          is to assist the server transport layer in sending the response'                          since it must be sent to the source IP address from which the request                          came.                            Next' the server transport attempts to match the request to a server                          transaction.  It does so using the matching rules described in                          Section 17.2.3.  If a matching server transaction is found' the                          request is passed to that transaction for processing.  If no match is                          found' the request is passed to the core' which may decide to                          construct a new server transaction for that request.  Note that when                          a UAS core sends a 2xx response to INVITE' the server transaction is                          destroyed.  This means that when the ACK arrives' there will be no                          matching server transaction' and based on this rule' the ACK is                          passed to the UAS core' where it is processed.                      */                        /* RFC 3581 4.                           When a server compliant to this specification (which can be a proxy                          or UAS) receives a request' it examines the topmost Via header field                          value.  If this Via header field value contains an "rport" parameter                          with no value' it MUST set the value of the parameter to the source                          port of the request.  This is analogous to the way in which a server                          will insert the "received" parameter into the topmost Via header                          field value.  In fact' the server MUST insert a "received" parameter                          containing the source IP address that the request came from' even if                          it is identical to the value of the "sent-by" component.  Note that                          this processing takes place independent of the transport protocol.                      */                        SIP_t_ViaParm via = request.Via.GetTopMostValue();                      via.Received = flow.RemoteEP.Address;                      if(via.RPort == 0){                          via.RPort = flow.RemoteEP.Port;                      }                        bool processed = false;                      SIP_ServerTransaction transaction = m_pStack.TransactionLayer.MatchServerTransaction(request);                      // Pass request to matched server transaction.                      if(transaction != null){                          transaction.ProcessRequest(flow'request);                            processed = true;                      }                      else{                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(request);                          // Pass request to dialog.                          if(dialog != null){                              processed = dialog.ProcessRequest(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                          }                      }                        // Request not proecced by dialog or transaction' pass request to TU.                      if(!processed){                          // Log                          if(m_pStack.Logger != null){                              byte[] requestData = request.ToByteData();                                m_pStack.Logger.AddRead(                                  Guid.NewGuid().ToString()'                                  null'                                  0'                                  "Request [method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +                                       "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; " +                                       "received '" + flow.RemoteEP + "' -> '" + flow.LocalEP + "'."'                                  flow.LocalEP'                                  flow.RemoteEP'                                  requestData                              );                          }                            m_pStack.OnRequestReceived(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                      }                  }                    #endregion                }              catch(SocketException s){                  // Skip all socket errors here                  string dummy = s.Message;              }              //catch(ArgumentException x){              //    m_pStack.OnError(x);              //}              catch(Exception x){                  m_pStack.OnError(x);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,The following statement contains a magic number: try{                    #region Ping / pong                    // We have "ping"(CRLFCRLF) request' response with "pong".                  if(message.Length == 4){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"ping\""'flow.LocalEP'flow.RemoteEP);                      }                        // Send "pong".                      flow.SendInternal(new byte[]{(byte)'\r''(byte)'\n'});                        if(this.Stack.Logger != null){                          this.Stack.Logger.AddWrite(""'null'2'"Flow [id='" + flow.ID + "'] sent \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                  // We have pong(CRLF)' do nothing.                  else if(message.Length == 2){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                    #endregion                    #region Response                    if(Encoding.UTF8.GetString(message'0'3).ToUpper().StartsWith("SIP")){                        #region Parse and validate response                        SIP_Response response = null;                      try{                          response = SIP_Response.Parse(message);                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.ToString());                          }                            return;                      }                                                        try{                          response.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Response validation failed: " + x.ToString());                          }                            return;                      }                        #endregion                        /* RFC 3261 18.1.2 Receiving Responses.                          When a response is received' the client transport examines the top                          Via header field value.  If the value of the "sent-by" parameter in                          that header field value does not correspond to a value that the                          client transport is configured to insert into requests' the response                          MUST be silently discarded.                            If there are any client transactions in existence' the client                          transport uses the matching procedures of Section 17.1.3 to attempt                          to match the response to an existing transaction.  If there is a                          match' the response MUST be passed to that transaction.  Otherwise'                          the response MUST be passed to the core (whether it be stateless                          proxy' stateful proxy' or UA) for further processing.  Handling of                          these "stray" responses is dependent on the core (a proxy will                          forward them' while a UA will discard' for example).                      */                                                                SIP_ClientTransaction transaction =  m_pStack.TransactionLayer.MatchClientTransaction(response);                      // Allow client transaction to process response.                      if(transaction != null){                          transaction.ProcessResponse(flow'response);                                              }                      else{                          // Pass response to dialog.                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(response);                          if(dialog != null){                              dialog.ProcessResponse(response);                          }                          // Pass response to core.                          else{                                                  m_pStack.OnResponseReceived(new SIP_ResponseReceivedEventArgs(m_pStack'null'response));                          }                      }                  }                    #endregion                    #region Request                    // SIP request.                  else{                        #region Parse and validate request                        SIP_Request request = null;                      try{                          request = SIP_Request.Parse(message);                      }                      catch(Exception x){                          // Log                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.Message);                          }                            return;                      }                        try{                          request.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Request validation failed: " + x.ToString());                          }                            // Bad request' send error to request maker.                          SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ". " + x.Message'request));                            return;                      }                        #endregion                        // TODO: Is that needed' core can reject message as it would like.                      SIP_ValidateRequestEventArgs eArgs = m_pStack.OnValidateRequest(request'flow.RemoteEP);                      // Request rejected' return response.                      if(eArgs.ResponseCode != null){                          SendResponse(m_pStack.CreateResponse(eArgs.ResponseCode'request));                            return;                      }                        request.Flow = flow;                      request.LocalEndPoint = flow.LocalEP;                      request.RemoteEndPoint = flow.RemoteEP;                        /* RFC 3261 18.2.1.                          When the server transport receives a request over any transport' it                          MUST examine the value of the "sent-by" parameter in the top Via                          header field value.  If the host portion of the "sent-by" parameter                          contains a domain name' or if it contains an IP address that differs                          from the packet source address' the server MUST add a "received"                          parameter to that Via header field value.  This parameter MUST                          contain the source address from which the packet was received.  This                          is to assist the server transport layer in sending the response'                          since it must be sent to the source IP address from which the request                          came.                            Next' the server transport attempts to match the request to a server                          transaction.  It does so using the matching rules described in                          Section 17.2.3.  If a matching server transaction is found' the                          request is passed to that transaction for processing.  If no match is                          found' the request is passed to the core' which may decide to                          construct a new server transaction for that request.  Note that when                          a UAS core sends a 2xx response to INVITE' the server transaction is                          destroyed.  This means that when the ACK arrives' there will be no                          matching server transaction' and based on this rule' the ACK is                          passed to the UAS core' where it is processed.                      */                        /* RFC 3581 4.                           When a server compliant to this specification (which can be a proxy                          or UAS) receives a request' it examines the topmost Via header field                          value.  If this Via header field value contains an "rport" parameter                          with no value' it MUST set the value of the parameter to the source                          port of the request.  This is analogous to the way in which a server                          will insert the "received" parameter into the topmost Via header                          field value.  In fact' the server MUST insert a "received" parameter                          containing the source IP address that the request came from' even if                          it is identical to the value of the "sent-by" component.  Note that                          this processing takes place independent of the transport protocol.                      */                        SIP_t_ViaParm via = request.Via.GetTopMostValue();                      via.Received = flow.RemoteEP.Address;                      if(via.RPort == 0){                          via.RPort = flow.RemoteEP.Port;                      }                        bool processed = false;                      SIP_ServerTransaction transaction = m_pStack.TransactionLayer.MatchServerTransaction(request);                      // Pass request to matched server transaction.                      if(transaction != null){                          transaction.ProcessRequest(flow'request);                            processed = true;                      }                      else{                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(request);                          // Pass request to dialog.                          if(dialog != null){                              processed = dialog.ProcessRequest(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                          }                      }                        // Request not proecced by dialog or transaction' pass request to TU.                      if(!processed){                          // Log                          if(m_pStack.Logger != null){                              byte[] requestData = request.ToByteData();                                m_pStack.Logger.AddRead(                                  Guid.NewGuid().ToString()'                                  null'                                  0'                                  "Request [method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +                                       "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; " +                                       "received '" + flow.RemoteEP + "' -> '" + flow.LocalEP + "'."'                                  flow.LocalEP'                                  flow.RemoteEP'                                  requestData                              );                          }                            m_pStack.OnRequestReceived(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                      }                  }                    #endregion                }              catch(SocketException s){                  // Skip all socket errors here                  string dummy = s.Message;              }              //catch(ArgumentException x){              //    m_pStack.OnError(x);              //}              catch(Exception x){                  m_pStack.OnError(x);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,The following statement contains a magic number: try{                    #region Ping / pong                    // We have "ping"(CRLFCRLF) request' response with "pong".                  if(message.Length == 4){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"ping\""'flow.LocalEP'flow.RemoteEP);                      }                        // Send "pong".                      flow.SendInternal(new byte[]{(byte)'\r''(byte)'\n'});                        if(this.Stack.Logger != null){                          this.Stack.Logger.AddWrite(""'null'2'"Flow [id='" + flow.ID + "'] sent \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                  // We have pong(CRLF)' do nothing.                  else if(message.Length == 2){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                    #endregion                    #region Response                    if(Encoding.UTF8.GetString(message'0'3).ToUpper().StartsWith("SIP")){                        #region Parse and validate response                        SIP_Response response = null;                      try{                          response = SIP_Response.Parse(message);                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.ToString());                          }                            return;                      }                                                        try{                          response.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Response validation failed: " + x.ToString());                          }                            return;                      }                        #endregion                        /* RFC 3261 18.1.2 Receiving Responses.                          When a response is received' the client transport examines the top                          Via header field value.  If the value of the "sent-by" parameter in                          that header field value does not correspond to a value that the                          client transport is configured to insert into requests' the response                          MUST be silently discarded.                            If there are any client transactions in existence' the client                          transport uses the matching procedures of Section 17.1.3 to attempt                          to match the response to an existing transaction.  If there is a                          match' the response MUST be passed to that transaction.  Otherwise'                          the response MUST be passed to the core (whether it be stateless                          proxy' stateful proxy' or UA) for further processing.  Handling of                          these "stray" responses is dependent on the core (a proxy will                          forward them' while a UA will discard' for example).                      */                                                                SIP_ClientTransaction transaction =  m_pStack.TransactionLayer.MatchClientTransaction(response);                      // Allow client transaction to process response.                      if(transaction != null){                          transaction.ProcessResponse(flow'response);                                              }                      else{                          // Pass response to dialog.                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(response);                          if(dialog != null){                              dialog.ProcessResponse(response);                          }                          // Pass response to core.                          else{                                                  m_pStack.OnResponseReceived(new SIP_ResponseReceivedEventArgs(m_pStack'null'response));                          }                      }                  }                    #endregion                    #region Request                    // SIP request.                  else{                        #region Parse and validate request                        SIP_Request request = null;                      try{                          request = SIP_Request.Parse(message);                      }                      catch(Exception x){                          // Log                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.Message);                          }                            return;                      }                        try{                          request.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Request validation failed: " + x.ToString());                          }                            // Bad request' send error to request maker.                          SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ". " + x.Message'request));                            return;                      }                        #endregion                        // TODO: Is that needed' core can reject message as it would like.                      SIP_ValidateRequestEventArgs eArgs = m_pStack.OnValidateRequest(request'flow.RemoteEP);                      // Request rejected' return response.                      if(eArgs.ResponseCode != null){                          SendResponse(m_pStack.CreateResponse(eArgs.ResponseCode'request));                            return;                      }                        request.Flow = flow;                      request.LocalEndPoint = flow.LocalEP;                      request.RemoteEndPoint = flow.RemoteEP;                        /* RFC 3261 18.2.1.                          When the server transport receives a request over any transport' it                          MUST examine the value of the "sent-by" parameter in the top Via                          header field value.  If the host portion of the "sent-by" parameter                          contains a domain name' or if it contains an IP address that differs                          from the packet source address' the server MUST add a "received"                          parameter to that Via header field value.  This parameter MUST                          contain the source address from which the packet was received.  This                          is to assist the server transport layer in sending the response'                          since it must be sent to the source IP address from which the request                          came.                            Next' the server transport attempts to match the request to a server                          transaction.  It does so using the matching rules described in                          Section 17.2.3.  If a matching server transaction is found' the                          request is passed to that transaction for processing.  If no match is                          found' the request is passed to the core' which may decide to                          construct a new server transaction for that request.  Note that when                          a UAS core sends a 2xx response to INVITE' the server transaction is                          destroyed.  This means that when the ACK arrives' there will be no                          matching server transaction' and based on this rule' the ACK is                          passed to the UAS core' where it is processed.                      */                        /* RFC 3581 4.                           When a server compliant to this specification (which can be a proxy                          or UAS) receives a request' it examines the topmost Via header field                          value.  If this Via header field value contains an "rport" parameter                          with no value' it MUST set the value of the parameter to the source                          port of the request.  This is analogous to the way in which a server                          will insert the "received" parameter into the topmost Via header                          field value.  In fact' the server MUST insert a "received" parameter                          containing the source IP address that the request came from' even if                          it is identical to the value of the "sent-by" component.  Note that                          this processing takes place independent of the transport protocol.                      */                        SIP_t_ViaParm via = request.Via.GetTopMostValue();                      via.Received = flow.RemoteEP.Address;                      if(via.RPort == 0){                          via.RPort = flow.RemoteEP.Port;                      }                        bool processed = false;                      SIP_ServerTransaction transaction = m_pStack.TransactionLayer.MatchServerTransaction(request);                      // Pass request to matched server transaction.                      if(transaction != null){                          transaction.ProcessRequest(flow'request);                            processed = true;                      }                      else{                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(request);                          // Pass request to dialog.                          if(dialog != null){                              processed = dialog.ProcessRequest(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                          }                      }                        // Request not proecced by dialog or transaction' pass request to TU.                      if(!processed){                          // Log                          if(m_pStack.Logger != null){                              byte[] requestData = request.ToByteData();                                m_pStack.Logger.AddRead(                                  Guid.NewGuid().ToString()'                                  null'                                  0'                                  "Request [method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +                                       "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; " +                                       "received '" + flow.RemoteEP + "' -> '" + flow.LocalEP + "'."'                                  flow.LocalEP'                                  flow.RemoteEP'                                  requestData                              );                          }                            m_pStack.OnRequestReceived(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                      }                  }                    #endregion                }              catch(SocketException s){                  // Skip all socket errors here                  string dummy = s.Message;              }              //catch(ArgumentException x){              //    m_pStack.OnError(x);              //}              catch(Exception x){                  m_pStack.OnError(x);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,The following statement contains a magic number: try{                    #region Ping / pong                    // We have "ping"(CRLFCRLF) request' response with "pong".                  if(message.Length == 4){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"ping\""'flow.LocalEP'flow.RemoteEP);                      }                        // Send "pong".                      flow.SendInternal(new byte[]{(byte)'\r''(byte)'\n'});                        if(this.Stack.Logger != null){                          this.Stack.Logger.AddWrite(""'null'2'"Flow [id='" + flow.ID + "'] sent \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                  // We have pong(CRLF)' do nothing.                  else if(message.Length == 2){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                    #endregion                    #region Response                    if(Encoding.UTF8.GetString(message'0'3).ToUpper().StartsWith("SIP")){                        #region Parse and validate response                        SIP_Response response = null;                      try{                          response = SIP_Response.Parse(message);                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.ToString());                          }                            return;                      }                                                        try{                          response.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Response validation failed: " + x.ToString());                          }                            return;                      }                        #endregion                        /* RFC 3261 18.1.2 Receiving Responses.                          When a response is received' the client transport examines the top                          Via header field value.  If the value of the "sent-by" parameter in                          that header field value does not correspond to a value that the                          client transport is configured to insert into requests' the response                          MUST be silently discarded.                            If there are any client transactions in existence' the client                          transport uses the matching procedures of Section 17.1.3 to attempt                          to match the response to an existing transaction.  If there is a                          match' the response MUST be passed to that transaction.  Otherwise'                          the response MUST be passed to the core (whether it be stateless                          proxy' stateful proxy' or UA) for further processing.  Handling of                          these "stray" responses is dependent on the core (a proxy will                          forward them' while a UA will discard' for example).                      */                                                                SIP_ClientTransaction transaction =  m_pStack.TransactionLayer.MatchClientTransaction(response);                      // Allow client transaction to process response.                      if(transaction != null){                          transaction.ProcessResponse(flow'response);                                              }                      else{                          // Pass response to dialog.                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(response);                          if(dialog != null){                              dialog.ProcessResponse(response);                          }                          // Pass response to core.                          else{                                                  m_pStack.OnResponseReceived(new SIP_ResponseReceivedEventArgs(m_pStack'null'response));                          }                      }                  }                    #endregion                    #region Request                    // SIP request.                  else{                        #region Parse and validate request                        SIP_Request request = null;                      try{                          request = SIP_Request.Parse(message);                      }                      catch(Exception x){                          // Log                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.Message);                          }                            return;                      }                        try{                          request.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Request validation failed: " + x.ToString());                          }                            // Bad request' send error to request maker.                          SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ". " + x.Message'request));                            return;                      }                        #endregion                        // TODO: Is that needed' core can reject message as it would like.                      SIP_ValidateRequestEventArgs eArgs = m_pStack.OnValidateRequest(request'flow.RemoteEP);                      // Request rejected' return response.                      if(eArgs.ResponseCode != null){                          SendResponse(m_pStack.CreateResponse(eArgs.ResponseCode'request));                            return;                      }                        request.Flow = flow;                      request.LocalEndPoint = flow.LocalEP;                      request.RemoteEndPoint = flow.RemoteEP;                        /* RFC 3261 18.2.1.                          When the server transport receives a request over any transport' it                          MUST examine the value of the "sent-by" parameter in the top Via                          header field value.  If the host portion of the "sent-by" parameter                          contains a domain name' or if it contains an IP address that differs                          from the packet source address' the server MUST add a "received"                          parameter to that Via header field value.  This parameter MUST                          contain the source address from which the packet was received.  This                          is to assist the server transport layer in sending the response'                          since it must be sent to the source IP address from which the request                          came.                            Next' the server transport attempts to match the request to a server                          transaction.  It does so using the matching rules described in                          Section 17.2.3.  If a matching server transaction is found' the                          request is passed to that transaction for processing.  If no match is                          found' the request is passed to the core' which may decide to                          construct a new server transaction for that request.  Note that when                          a UAS core sends a 2xx response to INVITE' the server transaction is                          destroyed.  This means that when the ACK arrives' there will be no                          matching server transaction' and based on this rule' the ACK is                          passed to the UAS core' where it is processed.                      */                        /* RFC 3581 4.                           When a server compliant to this specification (which can be a proxy                          or UAS) receives a request' it examines the topmost Via header field                          value.  If this Via header field value contains an "rport" parameter                          with no value' it MUST set the value of the parameter to the source                          port of the request.  This is analogous to the way in which a server                          will insert the "received" parameter into the topmost Via header                          field value.  In fact' the server MUST insert a "received" parameter                          containing the source IP address that the request came from' even if                          it is identical to the value of the "sent-by" component.  Note that                          this processing takes place independent of the transport protocol.                      */                        SIP_t_ViaParm via = request.Via.GetTopMostValue();                      via.Received = flow.RemoteEP.Address;                      if(via.RPort == 0){                          via.RPort = flow.RemoteEP.Port;                      }                        bool processed = false;                      SIP_ServerTransaction transaction = m_pStack.TransactionLayer.MatchServerTransaction(request);                      // Pass request to matched server transaction.                      if(transaction != null){                          transaction.ProcessRequest(flow'request);                            processed = true;                      }                      else{                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(request);                          // Pass request to dialog.                          if(dialog != null){                              processed = dialog.ProcessRequest(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                          }                      }                        // Request not proecced by dialog or transaction' pass request to TU.                      if(!processed){                          // Log                          if(m_pStack.Logger != null){                              byte[] requestData = request.ToByteData();                                m_pStack.Logger.AddRead(                                  Guid.NewGuid().ToString()'                                  null'                                  0'                                  "Request [method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +                                       "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; " +                                       "received '" + flow.RemoteEP + "' -> '" + flow.LocalEP + "'."'                                  flow.LocalEP'                                  flow.RemoteEP'                                  requestData                              );                          }                            m_pStack.OnRequestReceived(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                      }                  }                    #endregion                }              catch(SocketException s){                  // Skip all socket errors here                  string dummy = s.Message;              }              //catch(ArgumentException x){              //    m_pStack.OnError(x);              //}              catch(Exception x){                  m_pStack.OnError(x);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,The following statement contains a magic number: try{                    #region Ping / pong                    // We have "ping"(CRLFCRLF) request' response with "pong".                  if(message.Length == 4){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"ping\""'flow.LocalEP'flow.RemoteEP);                      }                        // Send "pong".                      flow.SendInternal(new byte[]{(byte)'\r''(byte)'\n'});                        if(this.Stack.Logger != null){                          this.Stack.Logger.AddWrite(""'null'2'"Flow [id='" + flow.ID + "'] sent \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                  // We have pong(CRLF)' do nothing.                  else if(message.Length == 2){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                    #endregion                    #region Response                    if(Encoding.UTF8.GetString(message'0'3).ToUpper().StartsWith("SIP")){                        #region Parse and validate response                        SIP_Response response = null;                      try{                          response = SIP_Response.Parse(message);                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.ToString());                          }                            return;                      }                                                        try{                          response.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Response validation failed: " + x.ToString());                          }                            return;                      }                        #endregion                        /* RFC 3261 18.1.2 Receiving Responses.                          When a response is received' the client transport examines the top                          Via header field value.  If the value of the "sent-by" parameter in                          that header field value does not correspond to a value that the                          client transport is configured to insert into requests' the response                          MUST be silently discarded.                            If there are any client transactions in existence' the client                          transport uses the matching procedures of Section 17.1.3 to attempt                          to match the response to an existing transaction.  If there is a                          match' the response MUST be passed to that transaction.  Otherwise'                          the response MUST be passed to the core (whether it be stateless                          proxy' stateful proxy' or UA) for further processing.  Handling of                          these "stray" responses is dependent on the core (a proxy will                          forward them' while a UA will discard' for example).                      */                                                                SIP_ClientTransaction transaction =  m_pStack.TransactionLayer.MatchClientTransaction(response);                      // Allow client transaction to process response.                      if(transaction != null){                          transaction.ProcessResponse(flow'response);                                              }                      else{                          // Pass response to dialog.                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(response);                          if(dialog != null){                              dialog.ProcessResponse(response);                          }                          // Pass response to core.                          else{                                                  m_pStack.OnResponseReceived(new SIP_ResponseReceivedEventArgs(m_pStack'null'response));                          }                      }                  }                    #endregion                    #region Request                    // SIP request.                  else{                        #region Parse and validate request                        SIP_Request request = null;                      try{                          request = SIP_Request.Parse(message);                      }                      catch(Exception x){                          // Log                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.Message);                          }                            return;                      }                        try{                          request.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Request validation failed: " + x.ToString());                          }                            // Bad request' send error to request maker.                          SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ". " + x.Message'request));                            return;                      }                        #endregion                        // TODO: Is that needed' core can reject message as it would like.                      SIP_ValidateRequestEventArgs eArgs = m_pStack.OnValidateRequest(request'flow.RemoteEP);                      // Request rejected' return response.                      if(eArgs.ResponseCode != null){                          SendResponse(m_pStack.CreateResponse(eArgs.ResponseCode'request));                            return;                      }                        request.Flow = flow;                      request.LocalEndPoint = flow.LocalEP;                      request.RemoteEndPoint = flow.RemoteEP;                        /* RFC 3261 18.2.1.                          When the server transport receives a request over any transport' it                          MUST examine the value of the "sent-by" parameter in the top Via                          header field value.  If the host portion of the "sent-by" parameter                          contains a domain name' or if it contains an IP address that differs                          from the packet source address' the server MUST add a "received"                          parameter to that Via header field value.  This parameter MUST                          contain the source address from which the packet was received.  This                          is to assist the server transport layer in sending the response'                          since it must be sent to the source IP address from which the request                          came.                            Next' the server transport attempts to match the request to a server                          transaction.  It does so using the matching rules described in                          Section 17.2.3.  If a matching server transaction is found' the                          request is passed to that transaction for processing.  If no match is                          found' the request is passed to the core' which may decide to                          construct a new server transaction for that request.  Note that when                          a UAS core sends a 2xx response to INVITE' the server transaction is                          destroyed.  This means that when the ACK arrives' there will be no                          matching server transaction' and based on this rule' the ACK is                          passed to the UAS core' where it is processed.                      */                        /* RFC 3581 4.                           When a server compliant to this specification (which can be a proxy                          or UAS) receives a request' it examines the topmost Via header field                          value.  If this Via header field value contains an "rport" parameter                          with no value' it MUST set the value of the parameter to the source                          port of the request.  This is analogous to the way in which a server                          will insert the "received" parameter into the topmost Via header                          field value.  In fact' the server MUST insert a "received" parameter                          containing the source IP address that the request came from' even if                          it is identical to the value of the "sent-by" component.  Note that                          this processing takes place independent of the transport protocol.                      */                        SIP_t_ViaParm via = request.Via.GetTopMostValue();                      via.Received = flow.RemoteEP.Address;                      if(via.RPort == 0){                          via.RPort = flow.RemoteEP.Port;                      }                        bool processed = false;                      SIP_ServerTransaction transaction = m_pStack.TransactionLayer.MatchServerTransaction(request);                      // Pass request to matched server transaction.                      if(transaction != null){                          transaction.ProcessRequest(flow'request);                            processed = true;                      }                      else{                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(request);                          // Pass request to dialog.                          if(dialog != null){                              processed = dialog.ProcessRequest(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                          }                      }                        // Request not proecced by dialog or transaction' pass request to TU.                      if(!processed){                          // Log                          if(m_pStack.Logger != null){                              byte[] requestData = request.ToByteData();                                m_pStack.Logger.AddRead(                                  Guid.NewGuid().ToString()'                                  null'                                  0'                                  "Request [method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +                                       "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; " +                                       "received '" + flow.RemoteEP + "' -> '" + flow.LocalEP + "'."'                                  flow.LocalEP'                                  flow.RemoteEP'                                  requestData                              );                          }                            m_pStack.OnRequestReceived(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                      }                  }                    #endregion                }              catch(SocketException s){                  // Skip all socket errors here                  string dummy = s.Message;              }              //catch(ArgumentException x){              //    m_pStack.OnError(x);              //}              catch(Exception x){                  m_pStack.OnError(x);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,OnMessageReceived,The following statement contains a magic number: try{                    #region Ping / pong                    // We have "ping"(CRLFCRLF) request' response with "pong".                  if(message.Length == 4){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"ping\""'flow.LocalEP'flow.RemoteEP);                      }                        // Send "pong".                      flow.SendInternal(new byte[]{(byte)'\r''(byte)'\n'});                        if(this.Stack.Logger != null){                          this.Stack.Logger.AddWrite(""'null'2'"Flow [id='" + flow.ID + "'] sent \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                  // We have pong(CRLF)' do nothing.                  else if(message.Length == 2){                      if(this.Stack.Logger != null){                          this.Stack.Logger.AddRead(""'null'2'"Flow [id='" + flow.ID + "'] received \"pong\""'flow.LocalEP'flow.RemoteEP);                      }                        return;                  }                    #endregion                    #region Response                    if(Encoding.UTF8.GetString(message'0'3).ToUpper().StartsWith("SIP")){                        #region Parse and validate response                        SIP_Response response = null;                      try{                          response = SIP_Response.Parse(message);                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.ToString());                          }                            return;                      }                                                        try{                          response.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Response validation failed: " + x.ToString());                          }                            return;                      }                        #endregion                        /* RFC 3261 18.1.2 Receiving Responses.                          When a response is received' the client transport examines the top                          Via header field value.  If the value of the "sent-by" parameter in                          that header field value does not correspond to a value that the                          client transport is configured to insert into requests' the response                          MUST be silently discarded.                            If there are any client transactions in existence' the client                          transport uses the matching procedures of Section 17.1.3 to attempt                          to match the response to an existing transaction.  If there is a                          match' the response MUST be passed to that transaction.  Otherwise'                          the response MUST be passed to the core (whether it be stateless                          proxy' stateful proxy' or UA) for further processing.  Handling of                          these "stray" responses is dependent on the core (a proxy will                          forward them' while a UA will discard' for example).                      */                                                                SIP_ClientTransaction transaction =  m_pStack.TransactionLayer.MatchClientTransaction(response);                      // Allow client transaction to process response.                      if(transaction != null){                          transaction.ProcessResponse(flow'response);                                              }                      else{                          // Pass response to dialog.                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(response);                          if(dialog != null){                              dialog.ProcessResponse(response);                          }                          // Pass response to core.                          else{                                                  m_pStack.OnResponseReceived(new SIP_ResponseReceivedEventArgs(m_pStack'null'response));                          }                      }                  }                    #endregion                    #region Request                    // SIP request.                  else{                        #region Parse and validate request                        SIP_Request request = null;                      try{                          request = SIP_Request.Parse(message);                      }                      catch(Exception x){                          // Log                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Skipping message' parse error: " + x.Message);                          }                            return;                      }                        try{                          request.Validate();                      }                      catch(Exception x){                          if(m_pStack.Logger != null){                              m_pStack.Logger.AddText("Request validation failed: " + x.ToString());                          }                            // Bad request' send error to request maker.                          SendResponse(m_pStack.CreateResponse(SIP_ResponseCodes.x400_Bad_Request + ". " + x.Message'request));                            return;                      }                        #endregion                        // TODO: Is that needed' core can reject message as it would like.                      SIP_ValidateRequestEventArgs eArgs = m_pStack.OnValidateRequest(request'flow.RemoteEP);                      // Request rejected' return response.                      if(eArgs.ResponseCode != null){                          SendResponse(m_pStack.CreateResponse(eArgs.ResponseCode'request));                            return;                      }                        request.Flow = flow;                      request.LocalEndPoint = flow.LocalEP;                      request.RemoteEndPoint = flow.RemoteEP;                        /* RFC 3261 18.2.1.                          When the server transport receives a request over any transport' it                          MUST examine the value of the "sent-by" parameter in the top Via                          header field value.  If the host portion of the "sent-by" parameter                          contains a domain name' or if it contains an IP address that differs                          from the packet source address' the server MUST add a "received"                          parameter to that Via header field value.  This parameter MUST                          contain the source address from which the packet was received.  This                          is to assist the server transport layer in sending the response'                          since it must be sent to the source IP address from which the request                          came.                            Next' the server transport attempts to match the request to a server                          transaction.  It does so using the matching rules described in                          Section 17.2.3.  If a matching server transaction is found' the                          request is passed to that transaction for processing.  If no match is                          found' the request is passed to the core' which may decide to                          construct a new server transaction for that request.  Note that when                          a UAS core sends a 2xx response to INVITE' the server transaction is                          destroyed.  This means that when the ACK arrives' there will be no                          matching server transaction' and based on this rule' the ACK is                          passed to the UAS core' where it is processed.                      */                        /* RFC 3581 4.                           When a server compliant to this specification (which can be a proxy                          or UAS) receives a request' it examines the topmost Via header field                          value.  If this Via header field value contains an "rport" parameter                          with no value' it MUST set the value of the parameter to the source                          port of the request.  This is analogous to the way in which a server                          will insert the "received" parameter into the topmost Via header                          field value.  In fact' the server MUST insert a "received" parameter                          containing the source IP address that the request came from' even if                          it is identical to the value of the "sent-by" component.  Note that                          this processing takes place independent of the transport protocol.                      */                        SIP_t_ViaParm via = request.Via.GetTopMostValue();                      via.Received = flow.RemoteEP.Address;                      if(via.RPort == 0){                          via.RPort = flow.RemoteEP.Port;                      }                        bool processed = false;                      SIP_ServerTransaction transaction = m_pStack.TransactionLayer.MatchServerTransaction(request);                      // Pass request to matched server transaction.                      if(transaction != null){                          transaction.ProcessRequest(flow'request);                            processed = true;                      }                      else{                          SIP_Dialog dialog = m_pStack.TransactionLayer.MatchDialog(request);                          // Pass request to dialog.                          if(dialog != null){                              processed = dialog.ProcessRequest(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                          }                      }                        // Request not proecced by dialog or transaction' pass request to TU.                      if(!processed){                          // Log                          if(m_pStack.Logger != null){                              byte[] requestData = request.ToByteData();                                m_pStack.Logger.AddRead(                                  Guid.NewGuid().ToString()'                                  null'                                  0'                                  "Request [method='" + request.RequestLine.Method + "'; cseq='" + request.CSeq.SequenceNumber + "'; " +                                       "transport='" + flow.Transport + "'; size='" + requestData.Length + "'; " +                                       "received '" + flow.RemoteEP + "' -> '" + flow.LocalEP + "'."'                                  flow.LocalEP'                                  flow.RemoteEP'                                  requestData                              );                          }                            m_pStack.OnRequestReceived(new SIP_RequestReceivedEventArgs(m_pStack'flow'request));                      }                  }                    #endregion                }              catch(SocketException s){                  // Skip all socket errors here                  string dummy = s.Message;              }              //catch(ArgumentException x){              //    m_pStack.OnError(x);              //}              catch(Exception x){                  m_pStack.OnError(x);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,GetOrCreateFlow,The following statement contains a magic number: if(localEP == null){                  if(transport == SIP_Transport.UDP){                      //  Get load-balanched local endpoint.                      localEP = m_pUdpServer.GetLocalEndPoint(remoteEP);                  }                  else if(transport == SIP_Transport.TCP){                      // Get load-balanched local IP for TCP and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }                  else if(transport == SIP_Transport.TLS){                      // Get load-balanched local IP for TLS and create random port.                      if(remoteEP.AddressFamily == AddressFamily.InterNetwork){                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                      else{                          localEP = new IPEndPoint(m_pLocalIPv4.Next()'m_pRandom.Next(10000'65000));                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_TransportLayer,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SendResponseInternal,The following statement contains a magic number: if(SIP_Utils.IsReliableTransport(via.ProtocolTransport)){                  // Get original request remote end point.                  IPEndPoint remoteEP = null;                  if(transaction != null && transaction.Request.RemoteEndPoint != null){                      remoteEP = transaction.Request.RemoteEndPoint;                  }                  else if(via.Received != null){                      remoteEP = new IPEndPoint(via.Received'via.SentBy.Port == -1 ? 5060 : via.SentBy.Port);                  }                                        #region If original request connection alive' use it                    try{                      SIP_Flow flow = null;                        // Statefull                      if(transaction != null){                          if(transaction.Request.Flow != null && !transaction.Request.Flow.IsDisposed){                              flow = transaction.Request.Flow;                          }                      }                      // Stateless                      else{                          string flowID = via.Parameters["connectionID"].Value;                          if(flowID != null){                              flow = m_pFlowManager[flowID];                          }                      }                        if(flow != null){                          flow.Send(response);                            if(m_pStack.Logger != null){                              m_pStack.Logger.AddWrite(                                  logID'                                  null'                                  0'                                  "Response [flowReuse=true; transactionID='" + transactionID + "'; method='" + response.CSeq.RequestMethod + "'; cseq='" + response.CSeq.SequenceNumber + "'; " +                                       "transport='" + flow.Transport + "'; size='" + responseData.Length + "'; statusCode='" + response.StatusCode + "'; " +                                       "reason='" + response.ReasonPhrase + "'; sent '" + flow.RemoteEP + "' -> '" + flow.LocalEP + "'."'                                  localEP'                                  remoteEP'                                  responseData                              );                          }                            return;                      }                  }                  catch{                      // Do nothing' processing will continue.                      // Override RFC' if there is any existing connection and it gives error' try always RFC 3261 18.2.2(recieved) and 3265 5.                  }                    #endregion                    #region Send RFC 3261 18.2.2(recieved)                    if(remoteEP != null){                      try{                          SendResponseToHost(logID'transactionID'null'remoteEP.Address.ToString()'remoteEP.Port'via.ProtocolTransport'response);                      }                      catch{                          // Do nothing' processing will continue -> "RFC 3265 5.".                      }                  }                    #endregion                    #region Send RFC 3265 5.                    SendResponse_RFC_3263_5(logID'transactionID'localEP'response);                    #endregion                }                #endregion                #region UDP Via: maddr parameter                else if(via.Maddr != null){                  throw new SIP_TransportException("Sending responses to multicast address(Via: 'maddr') is not supported.");              }                #endregion                #region RFC 3581 4. UDP Via: received and rport parameters                else if(via.Maddr == null && via.Received != null && via.RPort > 0){                  SendResponseToHost(logID'transactionID'localEP'via.Received.ToString()'via.RPort'via.ProtocolTransport'response);              }                #endregion                #region UDP Via: received parameter                else if(via.Received != null){                  SendResponseToHost(logID'transactionID'localEP'via.Received.ToString()'via.SentByPortWithDefault'via.ProtocolTransport'response);              }                #endregion                #region UDP                else{                  SendResponse_RFC_3263_5(logID'transactionID'localEP'response);              }
Magic Number,LumiSoft.Net.SIP.Stack,SIP_FlowManager,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_TransportLayer.cs,SIP_FlowManager,The following statement contains a magic number: m_pTimeoutTimer = new TimerEx(15000);
Magic Number,LumiSoft.Net.SIP.UA,SIP_UA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA.cs,Dispose,The following statement contains a magic number: lock(m_pLock){                  if(m_IsDisposed){                      return;                  }                                                                // Hang up all calls.                  foreach(SIP_UA_Call call in m_pCalls.ToArray()){                      call.Terminate();                  }                    // Wait till all registrations and calls disposed or wait timeout reached.                  DateTime start = DateTime.Now;                  while(m_pCalls.Count > 0){                      System.Threading.Thread.Sleep(500);                        // Timeout' just kill all UA.                      if(((TimeSpan)(DateTime.Now - start)).Seconds > 15){                          break;                      }                  }                    m_IsDisposed = true;                    this.RequestReceived = null;                  this.IncomingCall = null;                    m_pStack.Dispose();                  m_pStack = null;                             }
Magic Number,LumiSoft.Net.SIP.UA,SIP_UA,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA.cs,Dispose,The following statement contains a magic number: lock(m_pLock){                  if(m_IsDisposed){                      return;                  }                                                                // Hang up all calls.                  foreach(SIP_UA_Call call in m_pCalls.ToArray()){                      call.Terminate();                  }                    // Wait till all registrations and calls disposed or wait timeout reached.                  DateTime start = DateTime.Now;                  while(m_pCalls.Count > 0){                      System.Threading.Thread.Sleep(500);                        // Timeout' just kill all UA.                      if(((TimeSpan)(DateTime.Now - start)).Seconds > 15){                          break;                      }                  }                    m_IsDisposed = true;                    this.RequestReceived = null;                  this.IncomingCall = null;                    m_pStack.Dispose();                  m_pStack = null;                             }
Magic Number,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,m_pInitialInviteSender_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                  // If remote party provided SDP' parse it.                                 if(e.Response.ContentType != null && e.Response.ContentType.ToLower().IndexOf("application/sdp") > -1){                      m_pRemoteSDP = SDP_Message.Parse(Encoding.UTF8.GetString(e.Response.Data));                        // TODO: If parsing failed' end call.                  }                    if(e.Response.StatusCodeType == SIP_StatusCodeType.Provisional){                      if(e.Response.StatusCode == 180){                          SetState(SIP_UA_CallState.Ringing);                      }                      else if(e.Response.StatusCode == 182){                          SetState(SIP_UA_CallState.Queued);                      }                      // We don't care other status responses.                        /* RFC 3261 13.2.2.1.                          Zero' one or multiple provisional responses may arrive before one or                          more final responses are received.  Provisional responses for an                          INVITE request can create "early dialogs".  If a provisional response                          has a tag in the To field' and if the dialog ID of the response does                          not match an existing dialog' one is constructed using the procedures                          defined in Section 12.1.2.                      */                      if(e.Response.StatusCode > 100 && e.Response.To.Tag != null){                          m_pEarlyDialogs.Add(m_pUA.Stack.TransactionLayer.GetOrCreateDialog(e.ClientTransaction'e.Response));                      }                  }                  else if(e.Response.StatusCodeType == SIP_StatusCodeType.Success){                      m_StartTime = DateTime.Now;                      SetState(SIP_UA_CallState.Active);                        m_pDialog = m_pUA.Stack.TransactionLayer.GetOrCreateDialog(e.ClientTransaction'e.Response);                      m_pDialog.StateChanged += new EventHandler(m_pDialog_StateChanged);                        /* Exit all all other dialogs created by this call (due to forking).                         That is not defined in RFC but' since UAC can send BYE to early and confirmed dialogs'                          because of this all 100% valid.                      */                      foreach(SIP_Dialog dialog in m_pEarlyDialogs.ToArray()){                          if(!m_pDialog.Equals(dialog)){                              dialog.Terminate("Another forking leg accepted."'true);                          }                      }                  }                  else{                      /* RFC 3261 13.2.2.3.                          All early dialogs are considered terminated upon reception of the non-2xx final response.                      */                      foreach(SIP_Dialog dialog in m_pEarlyDialogs.ToArray()){                          dialog.Terminate("All early dialogs are considered terminated upon reception of the non-2xx final response. (RFC 3261 13.2.2.3)"'false);                      }                      m_pEarlyDialogs.Clear();                        Error();                        SetState(SIP_UA_CallState.Terminated);                                  }              }
Magic Number,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,m_pInitialInviteSender_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                  // If remote party provided SDP' parse it.                                 if(e.Response.ContentType != null && e.Response.ContentType.ToLower().IndexOf("application/sdp") > -1){                      m_pRemoteSDP = SDP_Message.Parse(Encoding.UTF8.GetString(e.Response.Data));                        // TODO: If parsing failed' end call.                  }                    if(e.Response.StatusCodeType == SIP_StatusCodeType.Provisional){                      if(e.Response.StatusCode == 180){                          SetState(SIP_UA_CallState.Ringing);                      }                      else if(e.Response.StatusCode == 182){                          SetState(SIP_UA_CallState.Queued);                      }                      // We don't care other status responses.                        /* RFC 3261 13.2.2.1.                          Zero' one or multiple provisional responses may arrive before one or                          more final responses are received.  Provisional responses for an                          INVITE request can create "early dialogs".  If a provisional response                          has a tag in the To field' and if the dialog ID of the response does                          not match an existing dialog' one is constructed using the procedures                          defined in Section 12.1.2.                      */                      if(e.Response.StatusCode > 100 && e.Response.To.Tag != null){                          m_pEarlyDialogs.Add(m_pUA.Stack.TransactionLayer.GetOrCreateDialog(e.ClientTransaction'e.Response));                      }                  }                  else if(e.Response.StatusCodeType == SIP_StatusCodeType.Success){                      m_StartTime = DateTime.Now;                      SetState(SIP_UA_CallState.Active);                        m_pDialog = m_pUA.Stack.TransactionLayer.GetOrCreateDialog(e.ClientTransaction'e.Response);                      m_pDialog.StateChanged += new EventHandler(m_pDialog_StateChanged);                        /* Exit all all other dialogs created by this call (due to forking).                         That is not defined in RFC but' since UAC can send BYE to early and confirmed dialogs'                          because of this all 100% valid.                      */                      foreach(SIP_Dialog dialog in m_pEarlyDialogs.ToArray()){                          if(!m_pDialog.Equals(dialog)){                              dialog.Terminate("Another forking leg accepted."'true);                          }                      }                  }                  else{                      /* RFC 3261 13.2.2.3.                          All early dialogs are considered terminated upon reception of the non-2xx final response.                      */                      foreach(SIP_Dialog dialog in m_pEarlyDialogs.ToArray()){                          dialog.Terminate("All early dialogs are considered terminated upon reception of the non-2xx final response. (RFC 3261 13.2.2.3)"'false);                      }                      m_pEarlyDialogs.Clear();                        Error();                        SetState(SIP_UA_CallState.Terminated);                                  }              }
Magic Number,LumiSoft.Net.SIP.UA,SIP_UA_Call,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\UA\SIP_UA_Call.cs,m_pInitialInviteSender_ResponseReceived,The following statement contains a magic number: lock(m_pLock){                  // If remote party provided SDP' parse it.                                 if(e.Response.ContentType != null && e.Response.ContentType.ToLower().IndexOf("application/sdp") > -1){                      m_pRemoteSDP = SDP_Message.Parse(Encoding.UTF8.GetString(e.Response.Data));                        // TODO: If parsing failed' end call.                  }                    if(e.Response.StatusCodeType == SIP_StatusCodeType.Provisional){                      if(e.Response.StatusCode == 180){                          SetState(SIP_UA_CallState.Ringing);                      }                      else if(e.Response.StatusCode == 182){                          SetState(SIP_UA_CallState.Queued);                      }                      // We don't care other status responses.                        /* RFC 3261 13.2.2.1.                          Zero' one or multiple provisional responses may arrive before one or                          more final responses are received.  Provisional responses for an                          INVITE request can create "early dialogs".  If a provisional response                          has a tag in the To field' and if the dialog ID of the response does                          not match an existing dialog' one is constructed using the procedures                          defined in Section 12.1.2.                      */                      if(e.Response.StatusCode > 100 && e.Response.To.Tag != null){                          m_pEarlyDialogs.Add(m_pUA.Stack.TransactionLayer.GetOrCreateDialog(e.ClientTransaction'e.Response));                      }                  }                  else if(e.Response.StatusCodeType == SIP_StatusCodeType.Success){                      m_StartTime = DateTime.Now;                      SetState(SIP_UA_CallState.Active);                        m_pDialog = m_pUA.Stack.TransactionLayer.GetOrCreateDialog(e.ClientTransaction'e.Response);                      m_pDialog.StateChanged += new EventHandler(m_pDialog_StateChanged);                        /* Exit all all other dialogs created by this call (due to forking).                         That is not defined in RFC but' since UAC can send BYE to early and confirmed dialogs'                          because of this all 100% valid.                      */                      foreach(SIP_Dialog dialog in m_pEarlyDialogs.ToArray()){                          if(!m_pDialog.Equals(dialog)){                              dialog.Terminate("Another forking leg accepted."'true);                          }                      }                  }                  else{                      /* RFC 3261 13.2.2.3.                          All early dialogs are considered terminated upon reception of the non-2xx final response.                      */                      foreach(SIP_Dialog dialog in m_pEarlyDialogs.ToArray()){                          dialog.Terminate("All early dialogs are considered terminated upon reception of the non-2xx final response. (RFC 3261 13.2.2.3)"'false);                      }                      m_pEarlyDialogs.Clear();                        Error();                        SetState(SIP_UA_CallState.Terminated);                                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,SendMessage,The following statement contains a magic number: if(!bdatSupported){                  /* RFC 2821 4.1.1.4 DATA  			        Notes:  			 		    Message must be period handled for DATA command. This meas if message line starts with .'  			 		    additional .(period) must be added.  			 		    Message send is ended with <CRLF>.<CRLF>.                    			 	    Examples:  			 		    C: DATA<CRLF>  			 		    S: 354 Start sending message' end with <crlf>.<crlf><CRLF>  			 		    C: send_message  			 		    C: <CRLF>.<CRLF>                          S: 250 Ok<CRLF>  			    */                    WriteLine("DATA");                    string line = ReadLine();                  if(line.StartsWith("354")){                      long writtenCount = this.TcpStream.WritePeriodTerminated(message);                      LogAddWrite(writtenCount'"Wrote " + writtenCount.ToString() + " bytes.");                        // Read server reply.                      line = ReadLine();                      if(!line.StartsWith("250")){                          throw new SMTP_ClientException(line);                      }                  }                  else{                      throw new SMTP_ClientException(line);                  }              }                #endregion                #region BDAT                else{                  /* RFC 3030 BDAT  			 	    Syntax:                          BDAT<SP>ChunkSize[<SP>LAST]<CRLF>  			 	  			 	    Exapmle:      			 		C: BDAT 1000 LAST<CRLF>  	    		 		C: send_1000_byte_message  		    	 		S: 250 OK<CRLF>			    			    */                      // TODO: Get rid of BDAT 0 LAST' this is valid syntax but many servers can't handle it.                  // We just read 1 buffer ahead' then you see when source stream has EOS.                  byte[] buffer1         = new byte[16000];                  byte[] buffer2         = new byte[16000];                  byte[] currentBuffer   = buffer1;                  byte[] lastBuffer      = buffer2;                  int    lastReadedCount = 0;                    // Buffer first data block.                  lastReadedCount = message.Read(lastBuffer'0'lastBuffer.Length);                    while(true){                      // Read data block to free buffer.                      int readedCount = message.Read(currentBuffer'0'currentBuffer.Length);                        // End of stream reached' "last data block" is last one.                      if(readedCount == 0){                          WriteLine("BDAT " + lastReadedCount.ToString() + " LAST");                                                  this.TcpStream.Write(lastBuffer'0'lastReadedCount);                          LogAddWrite(readedCount'"Wrote " + lastReadedCount.ToString() + " bytes.");                            // Read server response.                          string line = ReadLine();                          if(!line.StartsWith("250")){                              throw new SMTP_ClientException(line);                          }                            // We are done' exit while.                          break;                      }                      // Send last data block' free it up for reuse.                      else{                          WriteLine("BDAT " + lastReadedCount.ToString());                                                  this.TcpStream.Write(lastBuffer'0'lastReadedCount);                          LogAddWrite(readedCount'"Wrote " + lastReadedCount.ToString() + " bytes.");                            // Read server response.                          string line = ReadLine();                          if(!line.StartsWith("250")){                              throw new SMTP_ClientException(line);                          }                            // Mark last buffer as current(free it up)' just mark current buffer as last for next while cycle.                          byte[] tmp    = lastBuffer;                          lastBuffer    = currentBuffer;                          currentBuffer = tmp;                                                                     }                        lastReadedCount = readedCount;                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,SendMessage,The following statement contains a magic number: if(!bdatSupported){                  /* RFC 2821 4.1.1.4 DATA  			        Notes:  			 		    Message must be period handled for DATA command. This meas if message line starts with .'  			 		    additional .(period) must be added.  			 		    Message send is ended with <CRLF>.<CRLF>.                    			 	    Examples:  			 		    C: DATA<CRLF>  			 		    S: 354 Start sending message' end with <crlf>.<crlf><CRLF>  			 		    C: send_message  			 		    C: <CRLF>.<CRLF>                          S: 250 Ok<CRLF>  			    */                    WriteLine("DATA");                    string line = ReadLine();                  if(line.StartsWith("354")){                      long writtenCount = this.TcpStream.WritePeriodTerminated(message);                      LogAddWrite(writtenCount'"Wrote " + writtenCount.ToString() + " bytes.");                        // Read server reply.                      line = ReadLine();                      if(!line.StartsWith("250")){                          throw new SMTP_ClientException(line);                      }                  }                  else{                      throw new SMTP_ClientException(line);                  }              }                #endregion                #region BDAT                else{                  /* RFC 3030 BDAT  			 	    Syntax:                          BDAT<SP>ChunkSize[<SP>LAST]<CRLF>  			 	  			 	    Exapmle:      			 		C: BDAT 1000 LAST<CRLF>  	    		 		C: send_1000_byte_message  		    	 		S: 250 OK<CRLF>			    			    */                      // TODO: Get rid of BDAT 0 LAST' this is valid syntax but many servers can't handle it.                  // We just read 1 buffer ahead' then you see when source stream has EOS.                  byte[] buffer1         = new byte[16000];                  byte[] buffer2         = new byte[16000];                  byte[] currentBuffer   = buffer1;                  byte[] lastBuffer      = buffer2;                  int    lastReadedCount = 0;                    // Buffer first data block.                  lastReadedCount = message.Read(lastBuffer'0'lastBuffer.Length);                    while(true){                      // Read data block to free buffer.                      int readedCount = message.Read(currentBuffer'0'currentBuffer.Length);                        // End of stream reached' "last data block" is last one.                      if(readedCount == 0){                          WriteLine("BDAT " + lastReadedCount.ToString() + " LAST");                                                  this.TcpStream.Write(lastBuffer'0'lastReadedCount);                          LogAddWrite(readedCount'"Wrote " + lastReadedCount.ToString() + " bytes.");                            // Read server response.                          string line = ReadLine();                          if(!line.StartsWith("250")){                              throw new SMTP_ClientException(line);                          }                            // We are done' exit while.                          break;                      }                      // Send last data block' free it up for reuse.                      else{                          WriteLine("BDAT " + lastReadedCount.ToString());                                                  this.TcpStream.Write(lastBuffer'0'lastReadedCount);                          LogAddWrite(readedCount'"Wrote " + lastReadedCount.ToString() + " bytes.");                            // Read server response.                          string line = ReadLine();                          if(!line.StartsWith("250")){                              throw new SMTP_ClientException(line);                          }                            // Mark last buffer as current(free it up)' just mark current buffer as last for next while cycle.                          byte[] tmp    = lastBuffer;                          lastBuffer    = currentBuffer;                          currentBuffer = tmp;                                                                     }                        lastReadedCount = readedCount;                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,The following statement contains a magic number: while(line.Length >= 4 && line[3] == '-'){                  line = ReadLine();                  response.AppendLine(line);              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,The following statement contains a magic number: while(line.Length >= 4 && line[3] == '-'){                  line = ReadLine();                  response.AppendLine(line);              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,The following statement contains a magic number: if(line.StartsWith("250")){                  m_IsEsmtpSupported = true;                    /* RFC 2821 4.1.1.1 EHLO  					Examples:                          C: EHLO domain<CRLF>  				    	S: 250-domain freeText<CRLF>  				        S: 250-EHLO_keyword<CRLF>  						S: 250 EHLO_keyword<CRLF>  				   						250<SP> specifies that last EHLO response line.  			    */                    // We may have 250- or 250 SP as domain separator.                  // 250-                  if(line.StartsWith("250-")){                      m_RemoteHostName = line.Substring(4).Split(new char[]{' '}'2)[0];                  }                  // 250 SP                  else{                      m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                    m_pEsmtpFeatures = new List<string>();                  // Read multiline response' EHLO keywords.                  while(line.StartsWith("250-")){                      line = ReadLine();                        if(line.StartsWith("250-")){                          m_pEsmtpFeatures.Add(line.Substring(4));                      }                  }              }              // Probably EHLO not supported' try HELO.              else{                  m_IsEsmtpSupported = false;                  m_pEsmtpFeatures   = new List<string>();                    WriteLine("HELO " + localHostName);                    line = ReadLine();                  if(line.StartsWith("250")){                      /* Rfc 2821 4.1.1.1 EHLO/HELO  			            Syntax: "HELO" SP Domain CRLF                                                Examples:                              C: HELO domain<CRLF>                              S: 250 domain freeText<CRLF>  			        */                        m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                  // Server rejects us for some reason.                  else{                      throw new SMTP_ClientException(line);                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,The following statement contains a magic number: if(line.StartsWith("250")){                  m_IsEsmtpSupported = true;                    /* RFC 2821 4.1.1.1 EHLO  					Examples:                          C: EHLO domain<CRLF>  				    	S: 250-domain freeText<CRLF>  				        S: 250-EHLO_keyword<CRLF>  						S: 250 EHLO_keyword<CRLF>  				   						250<SP> specifies that last EHLO response line.  			    */                    // We may have 250- or 250 SP as domain separator.                  // 250-                  if(line.StartsWith("250-")){                      m_RemoteHostName = line.Substring(4).Split(new char[]{' '}'2)[0];                  }                  // 250 SP                  else{                      m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                    m_pEsmtpFeatures = new List<string>();                  // Read multiline response' EHLO keywords.                  while(line.StartsWith("250-")){                      line = ReadLine();                        if(line.StartsWith("250-")){                          m_pEsmtpFeatures.Add(line.Substring(4));                      }                  }              }              // Probably EHLO not supported' try HELO.              else{                  m_IsEsmtpSupported = false;                  m_pEsmtpFeatures   = new List<string>();                    WriteLine("HELO " + localHostName);                    line = ReadLine();                  if(line.StartsWith("250")){                      /* Rfc 2821 4.1.1.1 EHLO/HELO  			            Syntax: "HELO" SP Domain CRLF                                                Examples:                              C: HELO domain<CRLF>                              S: 250 domain freeText<CRLF>  			        */                        m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                  // Server rejects us for some reason.                  else{                      throw new SMTP_ClientException(line);                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,The following statement contains a magic number: if(line.StartsWith("250")){                  m_IsEsmtpSupported = true;                    /* RFC 2821 4.1.1.1 EHLO  					Examples:                          C: EHLO domain<CRLF>  				    	S: 250-domain freeText<CRLF>  				        S: 250-EHLO_keyword<CRLF>  						S: 250 EHLO_keyword<CRLF>  				   						250<SP> specifies that last EHLO response line.  			    */                    // We may have 250- or 250 SP as domain separator.                  // 250-                  if(line.StartsWith("250-")){                      m_RemoteHostName = line.Substring(4).Split(new char[]{' '}'2)[0];                  }                  // 250 SP                  else{                      m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                    m_pEsmtpFeatures = new List<string>();                  // Read multiline response' EHLO keywords.                  while(line.StartsWith("250-")){                      line = ReadLine();                        if(line.StartsWith("250-")){                          m_pEsmtpFeatures.Add(line.Substring(4));                      }                  }              }              // Probably EHLO not supported' try HELO.              else{                  m_IsEsmtpSupported = false;                  m_pEsmtpFeatures   = new List<string>();                    WriteLine("HELO " + localHostName);                    line = ReadLine();                  if(line.StartsWith("250")){                      /* Rfc 2821 4.1.1.1 EHLO/HELO  			            Syntax: "HELO" SP Domain CRLF                                                Examples:                              C: HELO domain<CRLF>                              S: 250 domain freeText<CRLF>  			        */                        m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                  // Server rejects us for some reason.                  else{                      throw new SMTP_ClientException(line);                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,The following statement contains a magic number: if(line.StartsWith("250")){                  m_IsEsmtpSupported = true;                    /* RFC 2821 4.1.1.1 EHLO  					Examples:                          C: EHLO domain<CRLF>  				    	S: 250-domain freeText<CRLF>  				        S: 250-EHLO_keyword<CRLF>  						S: 250 EHLO_keyword<CRLF>  				   						250<SP> specifies that last EHLO response line.  			    */                    // We may have 250- or 250 SP as domain separator.                  // 250-                  if(line.StartsWith("250-")){                      m_RemoteHostName = line.Substring(4).Split(new char[]{' '}'2)[0];                  }                  // 250 SP                  else{                      m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                    m_pEsmtpFeatures = new List<string>();                  // Read multiline response' EHLO keywords.                  while(line.StartsWith("250-")){                      line = ReadLine();                        if(line.StartsWith("250-")){                          m_pEsmtpFeatures.Add(line.Substring(4));                      }                  }              }              // Probably EHLO not supported' try HELO.              else{                  m_IsEsmtpSupported = false;                  m_pEsmtpFeatures   = new List<string>();                    WriteLine("HELO " + localHostName);                    line = ReadLine();                  if(line.StartsWith("250")){                      /* Rfc 2821 4.1.1.1 EHLO/HELO  			            Syntax: "HELO" SP Domain CRLF                                                Examples:                              C: HELO domain<CRLF>                              S: 250 domain freeText<CRLF>  			        */                        m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                  // Server rejects us for some reason.                  else{                      throw new SMTP_ClientException(line);                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,OnConnected,The following statement contains a magic number: if(line.StartsWith("250")){                  m_IsEsmtpSupported = true;                    /* RFC 2821 4.1.1.1 EHLO  					Examples:                          C: EHLO domain<CRLF>  				    	S: 250-domain freeText<CRLF>  				        S: 250-EHLO_keyword<CRLF>  						S: 250 EHLO_keyword<CRLF>  				   						250<SP> specifies that last EHLO response line.  			    */                    // We may have 250- or 250 SP as domain separator.                  // 250-                  if(line.StartsWith("250-")){                      m_RemoteHostName = line.Substring(4).Split(new char[]{' '}'2)[0];                  }                  // 250 SP                  else{                      m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                    m_pEsmtpFeatures = new List<string>();                  // Read multiline response' EHLO keywords.                  while(line.StartsWith("250-")){                      line = ReadLine();                        if(line.StartsWith("250-")){                          m_pEsmtpFeatures.Add(line.Substring(4));                      }                  }              }              // Probably EHLO not supported' try HELO.              else{                  m_IsEsmtpSupported = false;                  m_pEsmtpFeatures   = new List<string>();                    WriteLine("HELO " + localHostName);                    line = ReadLine();                  if(line.StartsWith("250")){                      /* Rfc 2821 4.1.1.1 EHLO/HELO  			            Syntax: "HELO" SP Domain CRLF                                                Examples:                              C: HELO domain<CRLF>                              S: 250 domain freeText<CRLF>  			        */                        m_RemoteHostName = line.Split(new char[]{' '}'3)[1];                  }                  // Server rejects us for some reason.                  else{                      throw new SMTP_ClientException(line);                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_Client.cs,QuickSend,The following statement contains a magic number: QuickSendSmartHost(localHost'SMTP_Client.GetDomainHosts(to)[0]'25'false'from'new string[]{to}'message);
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_ClientException.cs,SMTP_ClientException,The following statement contains a magic number: string[] code_text = responseLine.Split(new char[]{' '''-'}'2);
Magic Number,LumiSoft.Net.SMTP.Client,SMTP_ClientException,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Client\SMTP_ClientException.cs,SMTP_ClientException,The following statement contains a magic number: if(code_text.Length == 2){                  m_ResponseText =  code_text[1];                              }
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,Connect,The following statement contains a magic number: string responseLine = m_pSocket.ReadLine(1000);
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,Connect,The following statement contains a magic number: while(!responseLine.StartsWith("220 ")){  				// If lisne won't start with 220' then its error response  				if(!responseLine.StartsWith("220")){  					throw new Exception(responseLine);  				}    				responseLine = m_pSocket.ReadLine(1000);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginConnect_workerThread,The following statement contains a magic number: CommadCompleted callback = (CommadCompleted)((object[])tag)[4];
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginConnect_workerThread,The following statement contains a magic number: try{  				IPEndPoint localEndpoint = (IPEndPoint)((object[])tag)[0];  				string     host          = (string)((object[])tag)[1];  				int        port          = (int)((object[])tag)[2];                                  bool       ssl           = (bool)((object[])tag)[3];  			  				Connect(localEndpoint'host'port'ssl);    				// Connect completed susscessfully' call callback method.  				callback(SocketCallBackResult.Ok'null);  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,BeginConnect_workerThread,The following statement contains a magic number: try{  				IPEndPoint localEndpoint = (IPEndPoint)((object[])tag)[0];  				string     host          = (string)((object[])tag)[1];  				int        port          = (int)((object[])tag)[2];                                  bool       ssl           = (bool)((object[])tag)[3];  			  				Connect(localEndpoint'host'port'ssl);    				// Connect completed susscessfully' call callback method.  				callback(SocketCallBackResult.Ok'null);  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnEhloSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					// Begin reading server EHLO command response  					MemoryStream ms = new MemoryStream();  					m_pSocket.BeginReadLine(ms'1000'new object[]{((object[])tag)[0]'callback'ms}'new SocketCallBack(this.OnEhloReadServerResponseFinished));  				}  				else{   					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnEhloReadServerResponseFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					string responseLine = System.Text.Encoding.ASCII.GetString(((MemoryStream)(((object[])tag)[2])).ToArray());    					/* RFC 2821 4.1.1.1 EHLO  					*	Examples:  					*		250-domain<SP>free_text<CRLF>  					*       250-EHLO_keyword<CRLF>  					*		250<SP>EHLO_keyword<CRLF>  					*   					* 250<SP> specifies that last EHLO response line.  					*/    					// Response line must start with 250 or otherwise it's error response  					if(!responseLine.StartsWith("250")){  						// Server isn't required to support EHLO' try HELO  						string hostName = (string)(((object[])tag)[0]);  						m_pSocket.BeginWriteLine("HELO " + hostName'callback'new SocketCallBack(this.OnHeloSendFinished));					  					}  					else{  						//---- Store supported ESMTP features --------------------//  						if(responseLine.ToLower().IndexOf("size") > -1){  							m_Supports_Size = true;  						}  						else if(responseLine.ToLower().IndexOf("chunking") > -1){  							m_Supports_Bdat = true;  						}  						else if(responseLine.ToLower().IndexOf("cram-md5") > -1){  							m_Supports_CramMd5 = true;  						}  						else if(responseLine.ToLower().IndexOf("login") > -1){  							m_Supports_Login = true;  						}  						//--------------------------------------------------------//    						// This isn't last EHLO response line  						if(!responseLine.StartsWith("250 ")){  							MemoryStream ms = new MemoryStream();  							m_pSocket.BeginReadLine(ms'1000'new object[]{(((object[])tag)[0])'callback'ms}'new SocketCallBack(this.OnEhloReadServerResponseFinished));  						}  						else{  							// EHLO completed susscessfully' call callback method.  							callback(SocketCallBackResult.Ok'null);  						}  					}  				}  				else{   					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnEhloReadServerResponseFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					string responseLine = System.Text.Encoding.ASCII.GetString(((MemoryStream)(((object[])tag)[2])).ToArray());    					/* RFC 2821 4.1.1.1 EHLO  					*	Examples:  					*		250-domain<SP>free_text<CRLF>  					*       250-EHLO_keyword<CRLF>  					*		250<SP>EHLO_keyword<CRLF>  					*   					* 250<SP> specifies that last EHLO response line.  					*/    					// Response line must start with 250 or otherwise it's error response  					if(!responseLine.StartsWith("250")){  						// Server isn't required to support EHLO' try HELO  						string hostName = (string)(((object[])tag)[0]);  						m_pSocket.BeginWriteLine("HELO " + hostName'callback'new SocketCallBack(this.OnHeloSendFinished));					  					}  					else{  						//---- Store supported ESMTP features --------------------//  						if(responseLine.ToLower().IndexOf("size") > -1){  							m_Supports_Size = true;  						}  						else if(responseLine.ToLower().IndexOf("chunking") > -1){  							m_Supports_Bdat = true;  						}  						else if(responseLine.ToLower().IndexOf("cram-md5") > -1){  							m_Supports_CramMd5 = true;  						}  						else if(responseLine.ToLower().IndexOf("login") > -1){  							m_Supports_Login = true;  						}  						//--------------------------------------------------------//    						// This isn't last EHLO response line  						if(!responseLine.StartsWith("250 ")){  							MemoryStream ms = new MemoryStream();  							m_pSocket.BeginReadLine(ms'1000'new object[]{(((object[])tag)[0])'callback'ms}'new SocketCallBack(this.OnEhloReadServerResponseFinished));  						}  						else{  							// EHLO completed susscessfully' call callback method.  							callback(SocketCallBackResult.Ok'null);  						}  					}  				}  				else{   					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnHeloSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					// Begin reading server HELO command response  					MemoryStream ms = new MemoryStream();  					m_pSocket.BeginReadLine(ms'1000'new object[]{callback'ms}'new SocketCallBack(this.OnHeloReadServerResponseFinished));  				}  				else{   					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthCramMd5SendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					MemoryStream ms = new MemoryStream();                      stateData.Tag = ms;  					m_pSocket.BeginReadLine(ms'1000'stateData'new SocketCallBack(this.OnAuthCramMd5ReadServerResponseFinished));  				}  				else{					  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				stateData.Callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthCramMd5UserPwdSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					MemoryStream ms = new MemoryStream();                      stateData.Tag = ms;  					m_pSocket.BeginReadLine(ms'1000'stateData'new SocketCallBack(this.OnAuthCramMd5UserPwdReadServerResponseFinished));  				}  				else{					  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				stateData.Callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthLoginSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					MemoryStream ms = new MemoryStream();                      stateData.Tag = ms;  					m_pSocket.BeginReadLine(ms'1000'stateData'new SocketCallBack(this.OnAuthLoginReadServerResponseFinished));  				}  				else{					  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				stateData.Callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthLoginUserSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					MemoryStream ms = new MemoryStream();                      stateData.Tag = ms;  					m_pSocket.BeginReadLine(ms'1000'stateData'new SocketCallBack(this.OnAuthLoginUserReadServerResponseFinished));  				}  				else{					  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				stateData.Callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnAuthLoginPasswordSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					MemoryStream ms = new MemoryStream();                      stateData.Tag = ms;  					m_pSocket.BeginReadLine(ms'1000'stateData'new SocketCallBack(this.OnAuthLoginPwdReadServerResponseFinished));  				}  				else{					  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				stateData.Callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnMailSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					MemoryStream ms = new MemoryStream();  					m_pSocket.BeginReadLine(ms'1000'new object[]{callback'ms}'new SocketCallBack(this.OnMailReadServerResponseFinished));  				}  				else{					  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnRcptSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					MemoryStream ms = new MemoryStream();  					m_pSocket.BeginReadLine(ms'1000'new object[]{callback'ms}'new SocketCallBack(this.OnRcptReadServerResponseFinished));	  				}  				else{  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnBdatDataSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					// BDAT message data successfully sent to SMTP server' start reading server response  					MemoryStream ms = new MemoryStream();  					m_pSocket.BeginReadLine(ms'1000'new object[]{callback'ms}'new SocketCallBack(this.OnBdatReadServerResponseFinished));	  				}  				else{  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnDataSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					// DATA command has sent to SMTP server' start reading server response.  					MemoryStream ms = new MemoryStream();  					m_pSocket.BeginReadLine(ms'1000'new object[]{(Stream)(((object[])tag)[0])'callback'ms}'new SocketCallBack(this.OnDataReadServerResponseFinished));	  				}  				else{  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnDataReadServerResponseFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					string responseLine = System.Text.Encoding.ASCII.GetString(((MemoryStream)(((object[])tag)[2])).ToArray());    					// Response line must start with 334 or otherwise it's error response  					if(!responseLine.StartsWith("354")){  						throw new Exception(responseLine);  					}  					else{  						Stream message = (Stream)(((object[])tag)[0]);  					  						// Start sending message to smtp server  						m_pSocket.BeginWritePeriodTerminated(message'callback'new SocketCallBack(this.OnDataMessageSendFinished));	  					}				  				}  				else{  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,OnDataMessageSendFinished,The following statement contains a magic number: try{  				if(result == SocketCallBackResult.Ok){  					// Message has successfully sent to smtp server' start reading server response  					MemoryStream ms = new MemoryStream();  					m_pSocket.BeginReadLine(ms'1000'new object[]{callback'ms}'new SocketCallBack(this.OnDataMessageSendReadServerResponseFinished));	  				}  				else{  					HandleSocketError(result'exception);  				}  			}  			catch(Exception x){  				// Pass exception to callback method  				callback(SocketCallBackResult.Exception'x);  			}
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,HandleSocketError,The following statement contains a magic number: if(m_pSocket.Logger != null){                  if(result == SocketCallBackResult.SocketClosed){                      m_pSocket.Logger.AddTextEntry("Server closed socket !");                  }                  else if(x != null && x is SocketException){                      SocketException socketException = (SocketException)x;                      // Server disconnected or aborted connection                      if(socketException.ErrorCode == 10054 || socketException.ErrorCode == 10053){                          m_pSocket.Logger.AddTextEntry("Server closed socket or aborted connection !");                      }                  }                  else{                      m_pSocket.Logger.AddTextEntry("Unknown error !");                  }              }
Magic Number,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,HandleSocketError,The following statement contains a magic number: if(m_pSocket.Logger != null){                  if(result == SocketCallBackResult.SocketClosed){                      m_pSocket.Logger.AddTextEntry("Server closed socket !");                  }                  else if(x != null && x is SocketException){                      SocketException socketException = (SocketException)x;                      // Server disconnected or aborted connection                      if(socketException.ErrorCode == 10054 || socketException.ErrorCode == 10053){                          m_pSocket.Logger.AddTextEntry("Server closed socket or aborted connection !");                      }                  }                  else{                      m_pSocket.Logger.AddTextEntry("Unknown error !");                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run,The following statement contains a magic number: while(m_IsRunning){                  try{                      // Bind info has changed' create new local end points.                      if(m_HasBindingsChanged){                          m_pLocalEndPoints.Clear();                            foreach(IPBindInfo binding in m_pBindings){                              if(binding.IP == IPAddress.Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetwork){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else if(binding.IP == IPAddress.IPv6Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetworkV6){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else{                                  IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'binding.IP'25);                                  if(!m_pLocalEndPoints.Contains(b)){                                      m_pLocalEndPoints.Add(b);                                  }                              }                          }                            m_HasBindingsChanged = false;                      }                        // There are no local end points specified.                      if(m_pLocalEndPoints.Count == 0){                          Thread.Sleep(10);                      }                      // Maximum allowed relay sessions exceeded' skip adding new ones.                      else if(m_MaxConnections != 0 && m_pSessions.Count >= m_MaxConnections){                          Thread.Sleep(10);                      }                      else{                          Relay_QueueItem item = null;                            // Get next queued message from highest possible priority queue.                          foreach(Relay_Queue queue in m_pQueues){                              item = queue.DequeueMessage();                              // There is queued message.                              if(item != null){                                  break;                              }                              // No messages in this queue' see next lower priority queue.                          }                            // There are no messages in any queue.                          if(item == null){                              Thread.Sleep(10);                          }                          // Create new session for queued relay item.                          else{                              // Get round-robin local end point for that session.                              // This ensures if multiple network connections' all will be load balanced.                              IPBindInfo localBindInfo = m_pLocalEndPoints.Next();                                if(m_RelayMode == Relay_Mode.Dns){                                  Relay_Session session = new Relay_Session(this'localBindInfo'item);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                              else if(m_RelayMode == Relay_Mode.SmartHost){                                  // Get smart hosts in balance mode order.                                  Relay_SmartHost[] smartHosts = null;                                  if(m_SmartHostsBalanceMode == BalanceMode.FailOver){                                      smartHosts = m_pSmartHosts.ToArray();                                  }                                  else{                                      smartHosts = m_pSmartHosts.ToCurrentOrderArray();                                  }                                    Relay_Session session = new Relay_Session(this'localBindInfo'item'smartHosts);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                                                      }                      }                                      }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run,The following statement contains a magic number: while(m_IsRunning){                  try{                      // Bind info has changed' create new local end points.                      if(m_HasBindingsChanged){                          m_pLocalEndPoints.Clear();                            foreach(IPBindInfo binding in m_pBindings){                              if(binding.IP == IPAddress.Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetwork){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else if(binding.IP == IPAddress.IPv6Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetworkV6){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else{                                  IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'binding.IP'25);                                  if(!m_pLocalEndPoints.Contains(b)){                                      m_pLocalEndPoints.Add(b);                                  }                              }                          }                            m_HasBindingsChanged = false;                      }                        // There are no local end points specified.                      if(m_pLocalEndPoints.Count == 0){                          Thread.Sleep(10);                      }                      // Maximum allowed relay sessions exceeded' skip adding new ones.                      else if(m_MaxConnections != 0 && m_pSessions.Count >= m_MaxConnections){                          Thread.Sleep(10);                      }                      else{                          Relay_QueueItem item = null;                            // Get next queued message from highest possible priority queue.                          foreach(Relay_Queue queue in m_pQueues){                              item = queue.DequeueMessage();                              // There is queued message.                              if(item != null){                                  break;                              }                              // No messages in this queue' see next lower priority queue.                          }                            // There are no messages in any queue.                          if(item == null){                              Thread.Sleep(10);                          }                          // Create new session for queued relay item.                          else{                              // Get round-robin local end point for that session.                              // This ensures if multiple network connections' all will be load balanced.                              IPBindInfo localBindInfo = m_pLocalEndPoints.Next();                                if(m_RelayMode == Relay_Mode.Dns){                                  Relay_Session session = new Relay_Session(this'localBindInfo'item);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                              else if(m_RelayMode == Relay_Mode.SmartHost){                                  // Get smart hosts in balance mode order.                                  Relay_SmartHost[] smartHosts = null;                                  if(m_SmartHostsBalanceMode == BalanceMode.FailOver){                                      smartHosts = m_pSmartHosts.ToArray();                                  }                                  else{                                      smartHosts = m_pSmartHosts.ToCurrentOrderArray();                                  }                                    Relay_Session session = new Relay_Session(this'localBindInfo'item'smartHosts);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                                                      }                      }                                      }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run,The following statement contains a magic number: while(m_IsRunning){                  try{                      // Bind info has changed' create new local end points.                      if(m_HasBindingsChanged){                          m_pLocalEndPoints.Clear();                            foreach(IPBindInfo binding in m_pBindings){                              if(binding.IP == IPAddress.Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetwork){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else if(binding.IP == IPAddress.IPv6Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetworkV6){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else{                                  IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'binding.IP'25);                                  if(!m_pLocalEndPoints.Contains(b)){                                      m_pLocalEndPoints.Add(b);                                  }                              }                          }                            m_HasBindingsChanged = false;                      }                        // There are no local end points specified.                      if(m_pLocalEndPoints.Count == 0){                          Thread.Sleep(10);                      }                      // Maximum allowed relay sessions exceeded' skip adding new ones.                      else if(m_MaxConnections != 0 && m_pSessions.Count >= m_MaxConnections){                          Thread.Sleep(10);                      }                      else{                          Relay_QueueItem item = null;                            // Get next queued message from highest possible priority queue.                          foreach(Relay_Queue queue in m_pQueues){                              item = queue.DequeueMessage();                              // There is queued message.                              if(item != null){                                  break;                              }                              // No messages in this queue' see next lower priority queue.                          }                            // There are no messages in any queue.                          if(item == null){                              Thread.Sleep(10);                          }                          // Create new session for queued relay item.                          else{                              // Get round-robin local end point for that session.                              // This ensures if multiple network connections' all will be load balanced.                              IPBindInfo localBindInfo = m_pLocalEndPoints.Next();                                if(m_RelayMode == Relay_Mode.Dns){                                  Relay_Session session = new Relay_Session(this'localBindInfo'item);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                              else if(m_RelayMode == Relay_Mode.SmartHost){                                  // Get smart hosts in balance mode order.                                  Relay_SmartHost[] smartHosts = null;                                  if(m_SmartHostsBalanceMode == BalanceMode.FailOver){                                      smartHosts = m_pSmartHosts.ToArray();                                  }                                  else{                                      smartHosts = m_pSmartHosts.ToCurrentOrderArray();                                  }                                    Relay_Session session = new Relay_Session(this'localBindInfo'item'smartHosts);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                                                      }                      }                                      }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run,The following statement contains a magic number: while(m_IsRunning){                  try{                      // Bind info has changed' create new local end points.                      if(m_HasBindingsChanged){                          m_pLocalEndPoints.Clear();                            foreach(IPBindInfo binding in m_pBindings){                              if(binding.IP == IPAddress.Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetwork){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else if(binding.IP == IPAddress.IPv6Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetworkV6){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else{                                  IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'binding.IP'25);                                  if(!m_pLocalEndPoints.Contains(b)){                                      m_pLocalEndPoints.Add(b);                                  }                              }                          }                            m_HasBindingsChanged = false;                      }                        // There are no local end points specified.                      if(m_pLocalEndPoints.Count == 0){                          Thread.Sleep(10);                      }                      // Maximum allowed relay sessions exceeded' skip adding new ones.                      else if(m_MaxConnections != 0 && m_pSessions.Count >= m_MaxConnections){                          Thread.Sleep(10);                      }                      else{                          Relay_QueueItem item = null;                            // Get next queued message from highest possible priority queue.                          foreach(Relay_Queue queue in m_pQueues){                              item = queue.DequeueMessage();                              // There is queued message.                              if(item != null){                                  break;                              }                              // No messages in this queue' see next lower priority queue.                          }                            // There are no messages in any queue.                          if(item == null){                              Thread.Sleep(10);                          }                          // Create new session for queued relay item.                          else{                              // Get round-robin local end point for that session.                              // This ensures if multiple network connections' all will be load balanced.                              IPBindInfo localBindInfo = m_pLocalEndPoints.Next();                                if(m_RelayMode == Relay_Mode.Dns){                                  Relay_Session session = new Relay_Session(this'localBindInfo'item);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                              else if(m_RelayMode == Relay_Mode.SmartHost){                                  // Get smart hosts in balance mode order.                                  Relay_SmartHost[] smartHosts = null;                                  if(m_SmartHostsBalanceMode == BalanceMode.FailOver){                                      smartHosts = m_pSmartHosts.ToArray();                                  }                                  else{                                      smartHosts = m_pSmartHosts.ToCurrentOrderArray();                                  }                                    Relay_Session session = new Relay_Session(this'localBindInfo'item'smartHosts);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                                                      }                      }                                      }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run,The following statement contains a magic number: while(m_IsRunning){                  try{                      // Bind info has changed' create new local end points.                      if(m_HasBindingsChanged){                          m_pLocalEndPoints.Clear();                            foreach(IPBindInfo binding in m_pBindings){                              if(binding.IP == IPAddress.Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetwork){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else if(binding.IP == IPAddress.IPv6Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetworkV6){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else{                                  IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'binding.IP'25);                                  if(!m_pLocalEndPoints.Contains(b)){                                      m_pLocalEndPoints.Add(b);                                  }                              }                          }                            m_HasBindingsChanged = false;                      }                        // There are no local end points specified.                      if(m_pLocalEndPoints.Count == 0){                          Thread.Sleep(10);                      }                      // Maximum allowed relay sessions exceeded' skip adding new ones.                      else if(m_MaxConnections != 0 && m_pSessions.Count >= m_MaxConnections){                          Thread.Sleep(10);                      }                      else{                          Relay_QueueItem item = null;                            // Get next queued message from highest possible priority queue.                          foreach(Relay_Queue queue in m_pQueues){                              item = queue.DequeueMessage();                              // There is queued message.                              if(item != null){                                  break;                              }                              // No messages in this queue' see next lower priority queue.                          }                            // There are no messages in any queue.                          if(item == null){                              Thread.Sleep(10);                          }                          // Create new session for queued relay item.                          else{                              // Get round-robin local end point for that session.                              // This ensures if multiple network connections' all will be load balanced.                              IPBindInfo localBindInfo = m_pLocalEndPoints.Next();                                if(m_RelayMode == Relay_Mode.Dns){                                  Relay_Session session = new Relay_Session(this'localBindInfo'item);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                              else if(m_RelayMode == Relay_Mode.SmartHost){                                  // Get smart hosts in balance mode order.                                  Relay_SmartHost[] smartHosts = null;                                  if(m_SmartHostsBalanceMode == BalanceMode.FailOver){                                      smartHosts = m_pSmartHosts.ToArray();                                  }                                  else{                                      smartHosts = m_pSmartHosts.ToCurrentOrderArray();                                  }                                    Relay_Session session = new Relay_Session(this'localBindInfo'item'smartHosts);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                                                      }                      }                                      }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run,The following statement contains a magic number: while(m_IsRunning){                  try{                      // Bind info has changed' create new local end points.                      if(m_HasBindingsChanged){                          m_pLocalEndPoints.Clear();                            foreach(IPBindInfo binding in m_pBindings){                              if(binding.IP == IPAddress.Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetwork){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else if(binding.IP == IPAddress.IPv6Any){                                  foreach(IPAddress ip in System.Net.Dns.GetHostAddresses("")){                                      if(ip.AddressFamily == AddressFamily.InterNetworkV6){                                          IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'ip'25);                                          if(!m_pLocalEndPoints.Contains(b)){                                              m_pLocalEndPoints.Add(b);                                          }                                      }                                  }                              }                              else{                                  IPBindInfo b = new IPBindInfo(binding.HostName'binding.Protocol'binding.IP'25);                                  if(!m_pLocalEndPoints.Contains(b)){                                      m_pLocalEndPoints.Add(b);                                  }                              }                          }                            m_HasBindingsChanged = false;                      }                        // There are no local end points specified.                      if(m_pLocalEndPoints.Count == 0){                          Thread.Sleep(10);                      }                      // Maximum allowed relay sessions exceeded' skip adding new ones.                      else if(m_MaxConnections != 0 && m_pSessions.Count >= m_MaxConnections){                          Thread.Sleep(10);                      }                      else{                          Relay_QueueItem item = null;                            // Get next queued message from highest possible priority queue.                          foreach(Relay_Queue queue in m_pQueues){                              item = queue.DequeueMessage();                              // There is queued message.                              if(item != null){                                  break;                              }                              // No messages in this queue' see next lower priority queue.                          }                            // There are no messages in any queue.                          if(item == null){                              Thread.Sleep(10);                          }                          // Create new session for queued relay item.                          else{                              // Get round-robin local end point for that session.                              // This ensures if multiple network connections' all will be load balanced.                              IPBindInfo localBindInfo = m_pLocalEndPoints.Next();                                if(m_RelayMode == Relay_Mode.Dns){                                  Relay_Session session = new Relay_Session(this'localBindInfo'item);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                              else if(m_RelayMode == Relay_Mode.SmartHost){                                  // Get smart hosts in balance mode order.                                  Relay_SmartHost[] smartHosts = null;                                  if(m_SmartHostsBalanceMode == BalanceMode.FailOver){                                      smartHosts = m_pSmartHosts.ToArray();                                  }                                  else{                                      smartHosts = m_pSmartHosts.ToCurrentOrderArray();                                  }                                    Relay_Session session = new Relay_Session(this'localBindInfo'item'smartHosts);                                  m_pSessions.Add(session);                                  ThreadPool.QueueUserWorkItem(new WaitCallback(session.Start));                              }                                                      }                      }                                      }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run_CheckTimedOutSessions,The following statement contains a magic number: while(this.IsRunning){                  try{                      // Check interval reached.                      if(m_SessionIdleTimeout > 0 && lastCheck.AddSeconds(30) < DateTime.Now){                          foreach(Relay_Session session in this.Sessions.ToArray()){                              try{                                  if(session.LastActivity.AddSeconds(m_SessionIdleTimeout) < DateTime.Now){                                      session.Dispose(new Exception("Session idle timeout."));                                  }                              }                              catch{                              }                          }                          lastCheck = DateTime.Now;                      }                      // Not check interval yet.                      else{                          Thread.Sleep(1000);                      }                  }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Server.cs,Run_CheckTimedOutSessions,The following statement contains a magic number: while(this.IsRunning){                  try{                      // Check interval reached.                      if(m_SessionIdleTimeout > 0 && lastCheck.AddSeconds(30) < DateTime.Now){                          foreach(Relay_Session session in this.Sessions.ToArray()){                              try{                                  if(session.LastActivity.AddSeconds(m_SessionIdleTimeout) < DateTime.Now){                                      session.Dispose(new Exception("Session idle timeout."));                                  }                              }                              catch{                              }                          }                          lastCheck = DateTime.Now;                      }                      // Not check interval yet.                      else{                          Thread.Sleep(1000);                      }                  }                  catch(Exception x){                      OnError(x);                  }              }
Magic Number,LumiSoft.Net.SMTP.Relay,Relay_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Relay\Relay_Session.cs,Start,The following statement contains a magic number: try{                  m_pSmtpClient = new SMTP_Client();                  m_pSmtpClient.LocalHostName = m_pLocalBindInfo.HostName;                  if(m_pServer.Logger != null){                      m_pSmtpClient.Logger = new Logger();                      m_pSmtpClient.Logger.WriteLog += new EventHandler<WriteLogEventArgs>(SmtpClient_WriteLog);                  }                    LogText("Starting to relay message '" + m_pRelayItem.MessageID + "' from '" + m_pRelayItem.From + "' to '" + m_pRelayItem.To + "'.");                    // Get all possible target hosts for active recipient.                  List<string> targetHosts = new List<string>();                                  if(m_RelayMode == Relay_Mode.Dns){                      foreach(string host in SMTP_Client.GetDomainHosts(m_pRelayItem.To)){                          try{                              foreach(IPAddress ip in Dns_Client.Resolve(host)){                                  m_pTargets.Add(new Relay_Target(new IPEndPoint(ip'25)));                                                              }                          }                          catch{                              // Failed to resolve host name.                                                            LogText("Failed to resolve host '" + host + "' name.");                          }                      }                  }                  else if(m_RelayMode == Relay_Mode.SmartHost){                      foreach(Relay_SmartHost smartHost in m_pSmartHosts){                          try{                              m_pTargets.Add(new Relay_Target(new IPEndPoint(Dns_Client.Resolve(smartHost.Host)[0]'smartHost.Port)'smartHost.SslMode'smartHost.UserName'smartHost.Password));                                                      }                          catch{                              // Failed to resolve smart host name.                                                            LogText("Failed to resolve smart host '" + smartHost.Host + "' name.");                          }                      }                  }                                                    BeginConnect();              }              catch(Exception x){                  Dispose(x);              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Reply,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Reply.cs,SMTP_Reply,The following statement contains a magic number: if(replyCode < 200 || replyCode > 599){                  throw new ArgumentException("Argument 'replyCode' value must be >= 200 and <= 599."'"replyCode");              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Reply,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Reply.cs,SMTP_Reply,The following statement contains a magic number: if(replyCode < 200 || replyCode > 599){                  throw new ArgumentException("Argument 'replyCode' value must be >= 200 and <= 599."'"replyCode");              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,Start,The following statement contains a magic number: try{                  SMTP_Reply reply = null;                  if(string.IsNullOrEmpty(this.Server.GreetingText)){                      reply = new SMTP_Reply(220'"<" + Net_Utils.GetLocalHostName(this.LocalHostName) + "> Simple Mail Transfer Service Ready.");                  }                  else{                      reply = new SMTP_Reply(220'this.Server.GreetingText);                  }                    reply = OnStarted(reply);                    WriteLine(reply.ToString());                    // Setup rejected flag' so we respond "503 bad sequence of commands" any command except QUIT.                  if(reply.ReplyCode >= 300){                      m_SessionRejected = true;                  }                                                   BeginReadCmd();              }              catch(Exception x){                  OnError(x);              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,Start,The following statement contains a magic number: try{                  SMTP_Reply reply = null;                  if(string.IsNullOrEmpty(this.Server.GreetingText)){                      reply = new SMTP_Reply(220'"<" + Net_Utils.GetLocalHostName(this.LocalHostName) + "> Simple Mail Transfer Service Ready.");                  }                  else{                      reply = new SMTP_Reply(220'this.Server.GreetingText);                  }                    reply = OnStarted(reply);                    WriteLine(reply.ToString());                    // Setup rejected flag' so we respond "503 bad sequence of commands" any command except QUIT.                  if(reply.ReplyCode >= 300){                      m_SessionRejected = true;                  }                                                   BeginReadCmd();              }              catch(Exception x){                  OnError(x);              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,Start,The following statement contains a magic number: try{                  SMTP_Reply reply = null;                  if(string.IsNullOrEmpty(this.Server.GreetingText)){                      reply = new SMTP_Reply(220'"<" + Net_Utils.GetLocalHostName(this.LocalHostName) + "> Simple Mail Transfer Service Ready.");                  }                  else{                      reply = new SMTP_Reply(220'this.Server.GreetingText);                  }                    reply = OnStarted(reply);                    WriteLine(reply.ToString());                    // Setup rejected flag' so we respond "503 bad sequence of commands" any command except QUIT.                  if(reply.ReplyCode >= 300){                      m_SessionRejected = true;                  }                                                   BeginReadCmd();              }              catch(Exception x){                  OnError(x);              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BeginReadCmd,The following statement contains a magic number: try{                  SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);                  // This event is raised only if read period-terminated opeartion completes asynchronously.                  readLineOP.Completed += new EventHandler<EventArgs<SmartStream.ReadLineAsyncOP>>(delegate(object sender'EventArgs<SmartStream.ReadLineAsyncOP> e){                                      if(ProcessCmd(readLineOP)){                          BeginReadCmd();                      }                  });                  // Process incoming commands while' command reading completes synchronously.                  while(this.TcpStream.ReadLine(readLineOP'true)){                      if(!ProcessCmd(readLineOP)){                          break;                      }                  }              }              catch(Exception x){                  OnError(x);              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,ProcessCmd,The following statement contains a magic number: try{                  if(this.IsDisposed){                      return false;                  }                    // Log.                  if(this.Server.Logger != null){                      this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'op.BytesInBuffer'op.LineUtf8'this.LocalEndPoint'this.RemoteEndPoint);                  }                    string[] cmd_args = Encoding.UTF8.GetString(op.Buffer'0'op.LineBytesInBuffer).Split(new char[]{' '}'2);                  string   cmd      = cmd_args[0].ToUpperInvariant();                  string   args     = cmd_args.Length == 2 ? cmd_args[1] : "";                    if(cmd == "EHLO"){                      EHLO(args);                  }                  else if(cmd == "HELO"){                      HELO(args);                  }                  else if(cmd == "STARTTLS"){                      STARTTLS(args);                  }                  else if(cmd == "AUTH"){                      AUTH(args);                  }                  else if(cmd == "MAIL"){                      MAIL(args);                  }                  else if(cmd == "RCPT"){                      RCPT(args);                  }                  else if(cmd == "DATA"){                      readNextCommand = DATA(args);                  }                  else if(cmd == "BDAT"){                      readNextCommand = BDAT(args);                  }                  else if(cmd == "RSET"){                      RSET(args);                  }                  else if(cmd == "NOOP"){                       NOOP(args);                  }                  else if(cmd == "QUIT"){                       QUIT(args);                       readNextCommand = false;                  }                  else{                       m_BadCommands++;                         // Maximum allowed bad commands exceeded.                       if(this.Server.MaxBadCommands != 0 && m_BadCommands > this.Server.MaxBadCommands){                           WriteLine("421 Too many bad commands' closing transmission channel.");                           Disconnect();                           return false;                       }                                                     WriteLine("502 Error: command '" + cmd + "' not recognized.");                   }               }               catch(Exception x){                   OnError(x);               }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,ProcessCmd,The following statement contains a magic number: try{                  if(this.IsDisposed){                      return false;                  }                    // Log.                  if(this.Server.Logger != null){                      this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'op.BytesInBuffer'op.LineUtf8'this.LocalEndPoint'this.RemoteEndPoint);                  }                    string[] cmd_args = Encoding.UTF8.GetString(op.Buffer'0'op.LineBytesInBuffer).Split(new char[]{' '}'2);                  string   cmd      = cmd_args[0].ToUpperInvariant();                  string   args     = cmd_args.Length == 2 ? cmd_args[1] : "";                    if(cmd == "EHLO"){                      EHLO(args);                  }                  else if(cmd == "HELO"){                      HELO(args);                  }                  else if(cmd == "STARTTLS"){                      STARTTLS(args);                  }                  else if(cmd == "AUTH"){                      AUTH(args);                  }                  else if(cmd == "MAIL"){                      MAIL(args);                  }                  else if(cmd == "RCPT"){                      RCPT(args);                  }                  else if(cmd == "DATA"){                      readNextCommand = DATA(args);                  }                  else if(cmd == "BDAT"){                      readNextCommand = BDAT(args);                  }                  else if(cmd == "RSET"){                      RSET(args);                  }                  else if(cmd == "NOOP"){                       NOOP(args);                  }                  else if(cmd == "QUIT"){                       QUIT(args);                       readNextCommand = false;                  }                  else{                       m_BadCommands++;                         // Maximum allowed bad commands exceeded.                       if(this.Server.MaxBadCommands != 0 && m_BadCommands > this.Server.MaxBadCommands){                           WriteLine("421 Too many bad commands' closing transmission channel.");                           Disconnect();                           return false;                       }                                                     WriteLine("502 Error: command '" + cmd + "' not recognized.");                   }               }               catch(Exception x){                   OnError(x);               }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,EHLO,The following statement contains a magic number: SMTP_Reply reply = new SMTP_Reply(250'ehloLines.ToArray());
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,EHLO,The following statement contains a magic number: if(reply.ReplyCode < 300){                  m_EhloHost = cmdText;                    /* RFC 5321 4.1.4.                      An EHLO command MAY be issued by a client later in the session.  If                      it is issued after the session begins and the EHLO command is                      acceptable to the SMTP server' the SMTP server MUST clear all buffers                      and reset the state exactly as if a RSET command had been issued.  In                      other words' the sequence of RSET followed immediately by EHLO is                      redundant' but not harmful other than in the performance cost of                      executing unnecessary commands.                  */                  Reset();              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,HELO,The following statement contains a magic number: SMTP_Reply reply = new SMTP_Reply(250'Net_Utils.GetLocalHostName(this.LocalHostName));
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,HELO,The following statement contains a magic number: if(reply.ReplyCode < 300){                  m_EhloHost = cmdText;                    /* RFC 5321 4.1.4.                      An EHLO command MAY be issued by a client later in the session.  If                      it is issued after the session begins and the EHLO command is                      acceptable to the SMTP server' the SMTP server MUST clear all buffers                      and reset the state exactly as if a RSET command had been issued.  In                      other words' the sequence of RSET followed immediately by EHLO is                      redundant' but not harmful other than in the performance cost of                      executing unnecessary commands.                  */                  Reset();              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,AUTH,The following statement contains a magic number: if(arguments.Length > 2){                  WriteLine("501 Syntax error' syntax: AUTH SP mechanism [SP initial-response] CRLF");                  return;              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,AUTH,The following statement contains a magic number: if(arguments.Length == 2){                  if(arguments[1] == "="){                      // Skip.                  }                  else{                      try{                          initialClientResponse = Encoding.UTF8.GetString(Convert.FromBase64String(arguments[1]));                      }                      catch{                          WriteLine("501 Syntax error: Parameter 'initial-response' value must be BASE64 or contain a single character '='.");                          return;                      }                  }              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,AUTH,The following statement contains a magic number: while(true){                  string serverResponse = auth.Continue(clientResponse);                  // Authentication completed.                  if(auth.IsCompleted){                      if(auth.IsAuthenticated){                          m_pUser = new GenericIdentity(auth.UserName'"SASL-" + auth.Name);                            WriteLine("235 2.7.0 Authentication succeeded.");                      }                      else{                          WriteLine("535 5.7.8 Authentication credentials invalid.");                      }                      break;                  }                  // Authentication continues.                  else{                      // Send server challange.                      if(string.IsNullOrEmpty(serverResponse)){                          WriteLine("334 ");                      }                      else{                          WriteLine("334 " + Convert.ToBase64String(Encoding.UTF8.GetBytes(serverResponse)));                      }                        // Read client response.                       SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);                      this.TcpStream.ReadLine(readLineOP'false);                      if(readLineOP.Error != null){                          throw readLineOP.Error;                      }                      clientResponse = readLineOP.LineUtf8;                      // Log                      if(this.Server.Logger != null){                          this.Server.Logger.AddRead(this.ID'this.AuthenticatedUserIdentity'readLineOP.BytesInBuffer'"base64 auth-data"'this.LocalEndPoint'this.RemoteEndPoint);                      }                        // Client canceled authentication.                      if(clientResponse == "*"){                          WriteLine("501 Authentication canceled.");                          return;                      }                      // We have base64 client response' decode it.                      else{                          try{                              clientResponse = Encoding.UTF8.GetString(Convert.FromBase64String(clientResponse));                          }                          catch{                              WriteLine("501 Invalid client response '" + clientResponse + "'.");                              return;                          }                      }                  }              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,MAIL,The following statement contains a magic number: if(cmdText.ToUpper().StartsWith("FROM:")){                  // Remove FROM: from command text.                  cmdText = cmdText.Substring(5).Trim();              }              else{                  WriteLine("501 Syntax error' syntax: \"MAIL FROM:\" \"<\" address \">\" / \"<>\" [SP Mail-parameters] CRLF");                  return;              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,MAIL,The following statement contains a magic number: foreach(string parameter in parameters){                  string[] name_value = parameter.Split(new char[]{'='}'2);                    // SIZE                  if(this.Server.Extentions.Contains(SMTP_ServiceExtensions.SIZE) && name_value[0].ToUpper() == "SIZE"){                      // RFC 1870.                      //  size-value ::= 1*20DIGIT                      if(name_value.Length == 1){                          WriteLine("501 Syntax error: SIZE parameter value must be specified.");                          return;                      }                      if(!int.TryParse(name_value[1]'out size)){                          WriteLine("501 Syntax error: SIZE parameter value must be integer.");                          return;                      }                        // Message size exceeds maximum allowed message size.                      if(size > this.Server.MaxMessageSize){                          WriteLine("552 Message exceeds fixed maximum message size.");                          return;                      }                  }                  // BODY                  else if(this.Server.Extentions.Contains(SMTP_ServiceExtensions._8BITMIME) && name_value[0].ToUpper() == "BODY"){                      // RFC 1652.                      //  body-value ::= "7BIT" / "8BITMIME" / "BINARYMIME"                      //                      // BINARYMIME - defined in RFC 3030.                      if(name_value.Length == 1){                          WriteLine("501 Syntax error: BODY parameter value must be specified.");                          return;                      }                      if(name_value[1].ToUpper() != "7BIT" && name_value[1].ToUpper() != "8BITMIME" && name_value[1].ToUpper() != "BINARYMIME"){                          WriteLine("501 Syntax error: BODY parameter value must be \"7BIT\"'\"8BITMIME\" or \"BINARYMIME\".");                          return;                      }                      body = name_value[1].ToUpper();                  }                  // RET                  else if(this.Server.Extentions.Contains(SMTP_ServiceExtensions.DSN) && name_value[0].ToUpper() == "RET"){                      // RFC 1891 5.3.                      //  ret-value = "FULL" / "HDRS"                      if(name_value.Length == 1){                          WriteLine("501 Syntax error: RET parameter value must be specified.");                          return;                      }                      if(name_value[1].ToUpper() != "FULL" && name_value[1].ToUpper() != "HDRS"){                          WriteLine("501 Syntax error: RET parameter value must be \"FULL\" or \"HDRS\".");                          return;                      }                      ret = name_value[1].ToUpper();                  }                  // ENVID                  else if(this.Server.Extentions.Contains(SMTP_ServiceExtensions.DSN) && name_value[0].ToUpper() == "ENVID"){                      if(name_value.Length == 1){                          WriteLine("501 Syntax error: ENVID parameter value must be specified.");                          return;                      }                        envID = name_value[1].ToUpper();                  }                  // Unsupported parameter.                  else{                      WriteLine("555 Unsupported parameter: " + parameter);                      return;                  }              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,MAIL,The following statement contains a magic number: SMTP_Reply    reply = new SMTP_Reply(250'"OK.");
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,MAIL,The following statement contains a magic number: if(reply.ReplyCode < 300){                  m_pFrom = from;                  m_Transactions++;              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,RCPT,The following statement contains a magic number: if(cmdText.ToUpper().StartsWith("TO:")){                  // Remove TO: from command text.                  cmdText = cmdText.Substring(3).Trim();              }              else{                  WriteLine("501 Syntax error' syntax: \"RCPT TO:\" \"<\" address \">\" [SP Rcpt-parameters] CRLF");                  return;              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,RCPT,The following statement contains a magic number: foreach(string parameter in parameters){                  string[] name_value = parameter.Split(new char[]{'='}'2);                    // NOTIFY                  if(this.Server.Extentions.Contains(SMTP_ServiceExtensions.DSN) && name_value[0].ToUpper() == "NOTIFY"){                      /* RFC 1891 5.1.                          notify-esmtp-value  = "NEVER" / 1#notify-list-element                          notify-list-element = "SUCCESS" / "FAILURE" / "DELAY"                                                  a. Multiple notify-list-elements' separated by commas' MAY appear in a                             NOTIFY parameter; however' the NEVER keyword MUST appear by itself.                      */                      if(name_value.Length == 1){                          WriteLine("501 Syntax error: NOTIFY parameter value must be specified.");                          return;                      }                      string[] notifyItems = name_value[1].ToUpper().Split(''');                      foreach(string notifyItem in notifyItems){                          if(notifyItem.Trim().ToUpper() == "NEVER"){                              notify |= SMTP_Notify.Never;                          }                          else if(notifyItem.Trim().ToUpper() == "SUCCESS"){                              notify |= SMTP_Notify.Success;                          }                          else if(notifyItem.Trim().ToUpper() == "FAILURE"){                              notify |= SMTP_Notify.Failure;                          }                          else if(notifyItem.Trim().ToUpper() == "DELAY"){                              notify |= SMTP_Notify.Delay;                          }                          // Invalid or not supported notify item.                          else{                              WriteLine("501 Syntax error: Not supported NOTIFY parameter value '" + notifyItem + "'.");                              return;                          }                      }                  }                  // ORCPT                  else if(this.Server.Extentions.Contains(SMTP_ServiceExtensions.DSN) && name_value[0].ToUpper() == "ORCPT"){                      if(name_value.Length == 1){                          WriteLine("501 Syntax error: ORCPT parameter value must be specified.");                          return;                      }                      orcpt = name_value[1].ToUpper();                  }                  // Unsupported parameter.                  else{                      WriteLine("555 Unsupported parameter: " + parameter);                  }              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,RCPT,The following statement contains a magic number: SMTP_Reply  reply = new SMTP_Reply(250'"OK.");
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,RCPT,The following statement contains a magic number: if(reply.ReplyCode < 300){                  if(!m_pTo.ContainsKey(address.ToLower())){                      m_pTo.Add(address.ToLower()'to);                  }              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,DATA,The following statement contains a magic number: if(m_pMessageStream == null){                  m_pMessageStream = File.Create(Path.GetTempFileName()'1024'FileOptions.DeleteOnClose);              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,DATA_End,The following statement contains a magic number: try{                  if(op.Error != null){                      if(op.Error is LineSizeExceededException){                          WriteLine("500 Line too long.");                      }                      else if(op.Error is DataSizeExceededException){                          WriteLine("552 Too much mail data.");                      }                      else{                          OnError(op.Error);                      }                        OnMessageStoringCanceled();                  }                  else{                      SMTP_Reply reply = new SMTP_Reply(250'"DATA completed in " + (DateTime.Now - startTime).TotalSeconds.ToString("f2") + " seconds.");                        reply = OnMessageStoringCompleted(reply);                        WriteLine(reply.ToString());                  }              }              catch(Exception x){                  OnError(x);                              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BDAT,The following statement contains a magic number: if(cmdText == string.Empty || args.Length > 2){                  WriteLine("501 Syntax error' syntax: \"BDAT\" SP chunk-size [SP \"LAST\"] CRLF");                  return true;              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BDAT,The following statement contains a magic number: if(args.Length == 2){                  if(args[1].ToUpperInvariant() != "LAST"){                      WriteLine("501 Syntax error' syntax: \"BDAT\" SP chunk-size [SP \"LAST\"] CRLF");                      return true;                  }                  last = true;              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BDAT,The following statement contains a magic number: if(m_pMessageStream == null){                  m_pMessageStream = OnGetMessageStream();                  if(m_pMessageStream == null){                      m_pMessageStream = File.Create(Path.GetTempFileName()'1024'FileOptions.DeleteOnClose);                  }                  // RFC 5321.4.4 trace info.                  byte[] recevived = CreateReceivedHeader();                  m_pMessageStream.Write(recevived'0'recevived.Length);              }
Magic Number,LumiSoft.Net.SMTP.Server,SMTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SMTP\Server\SMTP_Session.cs,BDAT,The following statement contains a magic number: this.TcpStream.BeginReadFixedCount(                  storeStream'                  chunkSize'                  new AsyncCallback(delegate(IAsyncResult ar){                      try{                          this.TcpStream.EndReadFixedCount(ar);                            m_BDatReadedCount += chunkSize;                            // Maximum allowed message size exceeded.                          if(m_BDatReadedCount > this.Server.MaxMessageSize){                              WriteLine("552 Too much mail data.");                                OnMessageStoringCanceled();                                      }                          else{                              SMTP_Reply reply = new SMTP_Reply(250'chunkSize + " bytes received in " + (DateTime.Now - startTime).TotalSeconds.ToString("f2") + " seconds.");                                if(last){                                  reply = OnMessageStoringCompleted(reply);                              }                                                            WriteLine(reply.ToString());                                                      }                            if(last){                              // Accoring RFC 3030' client should send RSET and we must wait it and reject transaction commands.                              // If we reset internally' then all works as specified.                               Reset();                          }                      }                      catch(Exception x){                          OnError(x);                      }                        BeginReadCmd();                  })'                  null              );
Magic Number,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,Connect,The following statement contains a magic number: try{                                  socket.SendTimeout = 30000;                  socket.ReceiveTimeout = 30000;                    if(localEP != null){                      socket.Bind(localEP);                  }                    LogAddText("Connecting to " + remoteEP.ToString() + ".");                    socket.Connect(remoteEP);                    m_IsConnected = true;                  m_ID          = Guid.NewGuid().ToString();                  m_ConnectTime = DateTime.Now;                  m_pLocalEP    = (IPEndPoint)socket.LocalEndPoint;                  m_pRemoteEP   = (IPEndPoint)socket.RemoteEndPoint;                  m_pTcpStream  = new SmartStream(new NetworkStream(socket'true)'true);                    LogAddText("Connected' localEP='" + m_pLocalEP.ToString() + "'; remoteEP='" + remoteEP.ToString() + "'.");                                    if(ssl){  					SwitchToSecure();                  }                              }              catch(Exception x){                  LogAddException("Exception: " + x.Message'x);                    // Switching to secure failed.                  if(m_IsConnected){                      Disconnect();                  }                  // Bind or connect failed.                  else{                      socket.Close();                  }                                    OnError(x);                                    throw x;              }
Magic Number,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,Connect,The following statement contains a magic number: try{                                  socket.SendTimeout = 30000;                  socket.ReceiveTimeout = 30000;                    if(localEP != null){                      socket.Bind(localEP);                  }                    LogAddText("Connecting to " + remoteEP.ToString() + ".");                    socket.Connect(remoteEP);                    m_IsConnected = true;                  m_ID          = Guid.NewGuid().ToString();                  m_ConnectTime = DateTime.Now;                  m_pLocalEP    = (IPEndPoint)socket.LocalEndPoint;                  m_pRemoteEP   = (IPEndPoint)socket.RemoteEndPoint;                  m_pTcpStream  = new SmartStream(new NetworkStream(socket'true)'true);                    LogAddText("Connected' localEP='" + m_pLocalEP.ToString() + "'; remoteEP='" + remoteEP.ToString() + "'.");                                    if(ssl){  					SwitchToSecure();                  }                              }              catch(Exception x){                  LogAddException("Exception: " + x.Message'x);                    // Switching to secure failed.                  if(m_IsConnected){                      Disconnect();                  }                  // Bind or connect failed.                  else{                      socket.Close();                  }                                    OnError(x);                                    throw x;              }
Magic Number,LumiSoft.Net.TCP,TCP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Client.cs,ReadLine,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.TCP,TCP_Server<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Server.cs,Start,The following statement contains a magic number: m_pTimer_IdleTimeout = new TimerEx(30000'true);
Magic Number,LumiSoft.Net.TCP,TCP_Server<T>,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_Server.cs,StartListen,The following statement contains a magic number: try{                  // Dispose all old binds.                  foreach(ListeningPoint listeningPoint in m_pListeningPoints.ToArray()){                      try{                          listeningPoint.Socket.Close();                      }                      catch(Exception x){                          OnError(x);                      }                  }                  m_pListeningPoints.Clear();                    // Create new listening points and start accepting connections.                  bool ioCompletion_asyncSockets = Net_Utils.IsIoCompletionPortsSupported();                  foreach(IPBindInfo bind in m_pBindings){                      try{                          Socket socket = null;                          if(bind.IP.AddressFamily == AddressFamily.InterNetwork){                              socket = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);                          }                          else if(bind.IP.AddressFamily == AddressFamily.InterNetworkV6){                              socket = new Socket(AddressFamily.InterNetworkV6'SocketType.Stream'ProtocolType.Tcp);                          }                          else{                              // Invalid address family' just skip it.                              continue;                          }                          socket.Bind(new IPEndPoint(bind.IP'bind.Port));                          socket.Listen(100);                            ListeningPoint listeningPoint = new ListeningPoint(socket'bind);                          m_pListeningPoints.Add(listeningPoint);                                                    // Begin accept.                          //   We MUST use socket.AcceptAsync method' this consume all threading power in Windows paltform(IO completion ports).                          //   For other platforms we need to use BeginAccept.                            #region IO completion ports                            if(ioCompletion_asyncSockets){                              SocketAsyncEventArgs eArgs = new SocketAsyncEventArgs();                              eArgs.Completed += delegate(object s'SocketAsyncEventArgs e){                                  if(e.SocketError == SocketError.Success){                                      ProcessConnection(e.AcceptSocket'bind);                                  }                                    // Start accepting new connection.                                  IOCompletionBeginAccept(e'socket'bind);                              };                                // Move processing to thread-pool' because IOCompletionBeginAccept keeps using calling thread as loang as there is work todo.                              ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state){                                  // Start accepting new connection.                                  IOCompletionBeginAccept(eArgs'socket'bind);                              }));                          }                            #endregion                            #region Async sockets                            else{                                                                // Begin accepting connection.                              socket.BeginAccept(new AsyncCallback(this.AsynSocketsAcceptCompleted)'listeningPoint);                          }                            #endregion                      }                      catch(Exception x){                          // The only exception what we should get there is if socket is in use.                          OnError(x);                      }                  }              }              catch(Exception x){                  OnError(x);              }
Magic Number,LumiSoft.Net.TCP,TCP_ServerSession,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_ServerSession.cs,Init,The following statement contains a magic number: socket.ReceiveBufferSize = 32000;
Magic Number,LumiSoft.Net.TCP,TCP_ServerSession,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\TCP\TCP_ServerSession.cs,Init,The following statement contains a magic number: socket.SendBufferSize = 32000;
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Server.cs,IMAP_Server,The following statement contains a magic number: this.BindInfo = new IPBindInfo[]{new IPBindInfo(""'IPAddress.Any'143'SslMode.None'null)};
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,OnError,The following statement contains a magic number: try{                  // We must see InnerException too' SocketException may be as inner exception.                  SocketException socketException = null;                  if(x is SocketException){                      socketException = (SocketException)x;                  }                  else if(x.InnerException != null && x.InnerException is SocketException){                      socketException = (SocketException)x.InnerException;                  }    				if(socketException != null){  					// Client disconnected without shutting down  					if(socketException.ErrorCode == 10054 || socketException.ErrorCode == 10053){  						if(m_pServer.LogCommands){  							this.Socket.Logger.AddTextEntry("Client aborted/disconnected");  						}    						EndSession();    						// Exception handled' return  						return;  					}                      // Read/Write timed-out                      else if(socketException.ErrorCode == 10060){                          if(m_pServer.LogCommands){                              this.Socket.Logger.AddTextEntry("Read or write to destination host timed-out !");                          }                            // Exception handled' return  						return;                      }  				}    				m_pServer.OnSysError(""'x);  			}  			catch(Exception ex){  				m_pServer.OnSysError(""'ex);  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,OnError,The following statement contains a magic number: try{                  // We must see InnerException too' SocketException may be as inner exception.                  SocketException socketException = null;                  if(x is SocketException){                      socketException = (SocketException)x;                  }                  else if(x.InnerException != null && x.InnerException is SocketException){                      socketException = (SocketException)x.InnerException;                  }    				if(socketException != null){  					// Client disconnected without shutting down  					if(socketException.ErrorCode == 10054 || socketException.ErrorCode == 10053){  						if(m_pServer.LogCommands){  							this.Socket.Logger.AddTextEntry("Client aborted/disconnected");  						}    						EndSession();    						// Exception handled' return  						return;  					}                      // Read/Write timed-out                      else if(socketException.ErrorCode == 10060){                          if(m_pServer.LogCommands){                              this.Socket.Logger.AddTextEntry("Read or write to destination host timed-out !");                          }                            // Exception handled' return  						return;                      }  				}    				m_pServer.OnSysError(""'x);  			}  			catch(Exception ex){  				m_pServer.OnSysError(""'ex);  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,OnError,The following statement contains a magic number: try{                  // We must see InnerException too' SocketException may be as inner exception.                  SocketException socketException = null;                  if(x is SocketException){                      socketException = (SocketException)x;                  }                  else if(x.InnerException != null && x.InnerException is SocketException){                      socketException = (SocketException)x.InnerException;                  }    				if(socketException != null){  					// Client disconnected without shutting down  					if(socketException.ErrorCode == 10054 || socketException.ErrorCode == 10053){  						if(m_pServer.LogCommands){  							this.Socket.Logger.AddTextEntry("Client aborted/disconnected");  						}    						EndSession();    						// Exception handled' return  						return;  					}                      // Read/Write timed-out                      else if(socketException.ErrorCode == 10060){                          if(m_pServer.LogCommands){                              this.Socket.Logger.AddTextEntry("Read or write to destination host timed-out !");                          }                            // Exception handled' return  						return;                      }  				}    				m_pServer.OnSysError(""'x);  			}  			catch(Exception ex){  				m_pServer.OnSysError(""'ex);  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginRecieveCmd,The following statement contains a magic number: this.Socket.BeginReadLine(strm'1024'strm'new SocketCallBack(this.EndRecieveCmd));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,SwitchCommand,The following statement contains a magic number: if(cmdParts.Length < 2){  				cmdParts = new string[]{""'""};  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Authenticate,The following statement contains a magic number: switch(argsText.ToUpper())  			{  				case "CRAM-MD5":    					#region CRAM-MDD5 authentication    					/* Cram-M5  					C: A0001 AUTH CRAM-MD5  					S: + <md5_calculation_hash_in_base64>  					C: base64(decoded:username password_hash)  					S: A0001 OK CRAM authentication successful  					*/  					  					string md5Hash = "<" + Guid.NewGuid().ToString().ToLower() + ">";  					this.Socket.WriteLine("+ " + Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(md5Hash)));    					string reply = this.Socket.ReadLine();								  					reply = System.Text.Encoding.Default.GetString(Convert.FromBase64String(reply));  					string[] replyArgs = reply.Split(' ');  					userName = replyArgs[0];  					  					aArgs = m_pServer.OnAuthUser(this'userName'replyArgs[1]'md5Hash'AuthType.CRAM_MD5);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.WriteLine(cmdTag + " NO " + aArgs.ErrorText);                          return;                      }    					if(aArgs.Validated){  						this.Socket.WriteLine(cmdTag + " OK Authentication successful.");  						  						this.SetUserName(userName);  					}  					else{  						this.Socket.WriteLine(cmdTag + " NO Authentication failed");  					}    					#endregion    					break;    				case "DIGEST-MD5":  					  					#region DIGEST-MD5 authentication    					/* RFC 2831 AUTH DIGEST-MD5  					 *   					 * Example:  					 *   					 * C: AUTH DIGEST-MD5  					 * S: + base64(realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'qop="auth"'algorithm=md5-sess)  					 * C: base64(username="chris"'realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'  					 *    nc=00000001'cnonce="OA6MHXh6VqTrRk"'digest-uri="imap/elwood.innosoft.com"'                       *    response=d388dad90d4bbd760a152321f2143af7'qop=auth)  					 * S: + base64(rspauth=ea40f60335c427b5527b84dbabcdfffd)  					 * C:  					 * S: A0001 OK Authentication successful.  					*/    					string realm = this.BindInfo.HostName;  					string nonce = AuthHelper.GenerateNonce();    					this.Socket.WriteLine("+ " + AuthHelper.Base64en(AuthHelper.Create_Digest_Md5_ServerResponse(realm'nonce)));    					string clientResponse = AuthHelper.Base64de(this.Socket.ReadLine());					  					// Check that realm and nonce in client response are same as we specified  					if(clientResponse.IndexOf("realm=\"" + realm + "\"") > - 1 && clientResponse.IndexOf("nonce=\"" + nonce + "\"") > - 1){  						// Parse user name and password compare value  				//		string userName  = "";  						string passwData = "";  						string cnonce = "";   						foreach(string clntRespParam in clientResponse.Split(''')){  							if(clntRespParam.StartsWith("username=")){  								userName = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  							else if(clntRespParam.StartsWith("response=")){  								passwData = clntRespParam.Split(new char[]{'='}'2)[1];  							}							  							else if(clntRespParam.StartsWith("cnonce=")){  								cnonce = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  						}    						aArgs = m_pServer.OnAuthUser(this'userName'passwData'clientResponse'AuthType.DIGEST_MD5);                            // There is custom error' return it                          if(aArgs.ErrorText != null){                              this.Socket.WriteLine(cmdTag + " NO " + aArgs.ErrorText);                              return;                          }    						if(aArgs.Validated){  							// Send server computed password hash  							this.Socket.WriteLine("+ " + AuthHelper.Base64en("rspauth=" + aArgs.ReturnData));  					  							// We must got empty line here  							clientResponse = this.Socket.ReadLine();  							if(clientResponse == ""){  								this.Socket.WriteLine(cmdTag + " OK Authentication successful.");                                    this.SetUserName(userName);  							}  							else{  								this.Socket.WriteLine(cmdTag + " NO Authentication failed");  							}  						}  						else{  							this.Socket.WriteLine(cmdTag + " NO Authentication failed");  						}  					}  					else{  						this.Socket.WriteLine(cmdTag + " NO Authentication failed");  					}  				  					#endregion    					break;    				default:  					this.Socket.WriteLine(cmdTag + " NO unsupported authentication mechanism");  					break;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Authenticate,The following statement contains a magic number: switch(argsText.ToUpper())  			{  				case "CRAM-MD5":    					#region CRAM-MDD5 authentication    					/* Cram-M5  					C: A0001 AUTH CRAM-MD5  					S: + <md5_calculation_hash_in_base64>  					C: base64(decoded:username password_hash)  					S: A0001 OK CRAM authentication successful  					*/  					  					string md5Hash = "<" + Guid.NewGuid().ToString().ToLower() + ">";  					this.Socket.WriteLine("+ " + Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(md5Hash)));    					string reply = this.Socket.ReadLine();								  					reply = System.Text.Encoding.Default.GetString(Convert.FromBase64String(reply));  					string[] replyArgs = reply.Split(' ');  					userName = replyArgs[0];  					  					aArgs = m_pServer.OnAuthUser(this'userName'replyArgs[1]'md5Hash'AuthType.CRAM_MD5);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.WriteLine(cmdTag + " NO " + aArgs.ErrorText);                          return;                      }    					if(aArgs.Validated){  						this.Socket.WriteLine(cmdTag + " OK Authentication successful.");  						  						this.SetUserName(userName);  					}  					else{  						this.Socket.WriteLine(cmdTag + " NO Authentication failed");  					}    					#endregion    					break;    				case "DIGEST-MD5":  					  					#region DIGEST-MD5 authentication    					/* RFC 2831 AUTH DIGEST-MD5  					 *   					 * Example:  					 *   					 * C: AUTH DIGEST-MD5  					 * S: + base64(realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'qop="auth"'algorithm=md5-sess)  					 * C: base64(username="chris"'realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'  					 *    nc=00000001'cnonce="OA6MHXh6VqTrRk"'digest-uri="imap/elwood.innosoft.com"'                       *    response=d388dad90d4bbd760a152321f2143af7'qop=auth)  					 * S: + base64(rspauth=ea40f60335c427b5527b84dbabcdfffd)  					 * C:  					 * S: A0001 OK Authentication successful.  					*/    					string realm = this.BindInfo.HostName;  					string nonce = AuthHelper.GenerateNonce();    					this.Socket.WriteLine("+ " + AuthHelper.Base64en(AuthHelper.Create_Digest_Md5_ServerResponse(realm'nonce)));    					string clientResponse = AuthHelper.Base64de(this.Socket.ReadLine());					  					// Check that realm and nonce in client response are same as we specified  					if(clientResponse.IndexOf("realm=\"" + realm + "\"") > - 1 && clientResponse.IndexOf("nonce=\"" + nonce + "\"") > - 1){  						// Parse user name and password compare value  				//		string userName  = "";  						string passwData = "";  						string cnonce = "";   						foreach(string clntRespParam in clientResponse.Split(''')){  							if(clntRespParam.StartsWith("username=")){  								userName = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  							else if(clntRespParam.StartsWith("response=")){  								passwData = clntRespParam.Split(new char[]{'='}'2)[1];  							}							  							else if(clntRespParam.StartsWith("cnonce=")){  								cnonce = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  						}    						aArgs = m_pServer.OnAuthUser(this'userName'passwData'clientResponse'AuthType.DIGEST_MD5);                            // There is custom error' return it                          if(aArgs.ErrorText != null){                              this.Socket.WriteLine(cmdTag + " NO " + aArgs.ErrorText);                              return;                          }    						if(aArgs.Validated){  							// Send server computed password hash  							this.Socket.WriteLine("+ " + AuthHelper.Base64en("rspauth=" + aArgs.ReturnData));  					  							// We must got empty line here  							clientResponse = this.Socket.ReadLine();  							if(clientResponse == ""){  								this.Socket.WriteLine(cmdTag + " OK Authentication successful.");                                    this.SetUserName(userName);  							}  							else{  								this.Socket.WriteLine(cmdTag + " NO Authentication failed");  							}  						}  						else{  							this.Socket.WriteLine(cmdTag + " NO Authentication failed");  						}  					}  					else{  						this.Socket.WriteLine(cmdTag + " NO Authentication failed");  					}  				  					#endregion    					break;    				default:  					this.Socket.WriteLine(cmdTag + " NO unsupported authentication mechanism");  					break;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Authenticate,The following statement contains a magic number: switch(argsText.ToUpper())  			{  				case "CRAM-MD5":    					#region CRAM-MDD5 authentication    					/* Cram-M5  					C: A0001 AUTH CRAM-MD5  					S: + <md5_calculation_hash_in_base64>  					C: base64(decoded:username password_hash)  					S: A0001 OK CRAM authentication successful  					*/  					  					string md5Hash = "<" + Guid.NewGuid().ToString().ToLower() + ">";  					this.Socket.WriteLine("+ " + Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(md5Hash)));    					string reply = this.Socket.ReadLine();								  					reply = System.Text.Encoding.Default.GetString(Convert.FromBase64String(reply));  					string[] replyArgs = reply.Split(' ');  					userName = replyArgs[0];  					  					aArgs = m_pServer.OnAuthUser(this'userName'replyArgs[1]'md5Hash'AuthType.CRAM_MD5);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.WriteLine(cmdTag + " NO " + aArgs.ErrorText);                          return;                      }    					if(aArgs.Validated){  						this.Socket.WriteLine(cmdTag + " OK Authentication successful.");  						  						this.SetUserName(userName);  					}  					else{  						this.Socket.WriteLine(cmdTag + " NO Authentication failed");  					}    					#endregion    					break;    				case "DIGEST-MD5":  					  					#region DIGEST-MD5 authentication    					/* RFC 2831 AUTH DIGEST-MD5  					 *   					 * Example:  					 *   					 * C: AUTH DIGEST-MD5  					 * S: + base64(realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'qop="auth"'algorithm=md5-sess)  					 * C: base64(username="chris"'realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'  					 *    nc=00000001'cnonce="OA6MHXh6VqTrRk"'digest-uri="imap/elwood.innosoft.com"'                       *    response=d388dad90d4bbd760a152321f2143af7'qop=auth)  					 * S: + base64(rspauth=ea40f60335c427b5527b84dbabcdfffd)  					 * C:  					 * S: A0001 OK Authentication successful.  					*/    					string realm = this.BindInfo.HostName;  					string nonce = AuthHelper.GenerateNonce();    					this.Socket.WriteLine("+ " + AuthHelper.Base64en(AuthHelper.Create_Digest_Md5_ServerResponse(realm'nonce)));    					string clientResponse = AuthHelper.Base64de(this.Socket.ReadLine());					  					// Check that realm and nonce in client response are same as we specified  					if(clientResponse.IndexOf("realm=\"" + realm + "\"") > - 1 && clientResponse.IndexOf("nonce=\"" + nonce + "\"") > - 1){  						// Parse user name and password compare value  				//		string userName  = "";  						string passwData = "";  						string cnonce = "";   						foreach(string clntRespParam in clientResponse.Split(''')){  							if(clntRespParam.StartsWith("username=")){  								userName = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  							else if(clntRespParam.StartsWith("response=")){  								passwData = clntRespParam.Split(new char[]{'='}'2)[1];  							}							  							else if(clntRespParam.StartsWith("cnonce=")){  								cnonce = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  						}    						aArgs = m_pServer.OnAuthUser(this'userName'passwData'clientResponse'AuthType.DIGEST_MD5);                            // There is custom error' return it                          if(aArgs.ErrorText != null){                              this.Socket.WriteLine(cmdTag + " NO " + aArgs.ErrorText);                              return;                          }    						if(aArgs.Validated){  							// Send server computed password hash  							this.Socket.WriteLine("+ " + AuthHelper.Base64en("rspauth=" + aArgs.ReturnData));  					  							// We must got empty line here  							clientResponse = this.Socket.ReadLine();  							if(clientResponse == ""){  								this.Socket.WriteLine(cmdTag + " OK Authentication successful.");                                    this.SetUserName(userName);  							}  							else{  								this.Socket.WriteLine(cmdTag + " NO Authentication failed");  							}  						}  						else{  							this.Socket.WriteLine(cmdTag + " NO Authentication failed");  						}  					}  					else{  						this.Socket.WriteLine(cmdTag + " NO Authentication failed");  					}  				  					#endregion    					break;    				default:  					this.Socket.WriteLine(cmdTag + " NO unsupported authentication mechanism");  					break;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,LogIn,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD Invalid arguments' syntax: {<command-tag> LOGIN \"<user-name>\" \"<password>\"}");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,LogIn,The following statement contains a magic number: if(aArgs.Validated){  				this.Socket.WriteLine(cmdTag + " OK LOGIN Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds");    				this.SetUserName(userName);			  			}  			else{  				this.Socket.WriteLine(cmdTag + " NO LOGIN failed");  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Select,The following statement contains a magic number: if(eArgs.ErrorText == null){  				m_pSelectedFolder = selectedFolder;  				m_SelectedMailbox = Core.Decode_IMAP_UTF7_String(args[0]);    				string response = "";  				response += "* FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\r\n";  				response += "* " + m_pSelectedFolder.Messages.Count + " EXISTS\r\n";  				response += "* " + m_pSelectedFolder.RecentCount + " RECENT\r\n";  				response += "* OK [UNSEEN " + m_pSelectedFolder.FirstUnseen + "] Message " + m_pSelectedFolder.FirstUnseen + " is first unseen\r\n";  				response += "* OK [UIDVALIDITY " + m_pSelectedFolder.FolderUID + "] Folder UID\r\n";  				response += "* OK [UIDNEXT " + m_pSelectedFolder.MessageUidNext + "] Predicted next message UID\r\n";  				response += "* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)] Available permanent flags\r\n";  				response += cmdTag + " OK [" + (m_pSelectedFolder.ReadOnly ? "READ-ONLY" : "READ-WRITE") + "] SELECT Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n";    				this.Socket.Write(response);  			}  			else{  				this.Socket.WriteLine(cmdTag + " NO " + eArgs.ErrorText);  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Examine,The following statement contains a magic number: if(eArgs.ErrorText == null){                  m_pSelectedFolder = selectedFolder;  				m_pSelectedFolder.ReadOnly = true;				  				m_SelectedMailbox = Core.Decode_IMAP_UTF7_String(args[0]);    				string response = "";  				response += "* FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\r\n";  				response += "* " + m_pSelectedFolder.Messages.Count + " EXISTS\r\n";  				response += "* " + m_pSelectedFolder.RecentCount + " RECENT\r\n";  				response += "* OK [UNSEEN " + m_pSelectedFolder.FirstUnseen + "] Message " + m_pSelectedFolder.FirstUnseen + " is first unseen\r\n";  				response += "* OK [UIDVALIDITY " + m_pSelectedFolder.FolderUID + "] UIDs valid\r\n";  				response += "* OK [UIDNEXT " + m_pSelectedFolder.MessageUidNext + "] Predicted next UID\r\n";  				response += "* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)] Available permanent falgs\r\n";  				response += cmdTag + " OK [READ-ONLY] EXAMINE  Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n";    				this.Socket.Write(response);  			}  			else{  				this.Socket.WriteLine(cmdTag + " NO " + eArgs.ErrorText);  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Create,The following statement contains a magic number: if(errorText == null){  				this.Socket.WriteLine(cmdTag + " OK CREATE Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds" );  			}  			else{  				this.Socket.WriteLine(cmdTag + " NO " + errorText);  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Rename,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD RENAME invalid arguments. Syntax: {<command-tag> RENAME \"mailboxName\" \"newMailboxName\"}");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,List,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD Invalid LIST arguments. Syntax: {<command-tag> LIST \"<reference-name>\" \"<mailbox-name>\"}");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,List,The following statement contains a magic number: reply += cmdTag + " OK LIST Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n";
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,LSub,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD LSUB invalid arguments");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Status,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD Invalid STATUS arguments. Syntax: {<command-tag> STATUS \"<mailbox-name>\" \"(status-data-items)\"}");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The following statement contains a magic number: if(args.Length < 2 || args.Length > 4){  				this.Socket.WriteLine(cmdTag + " BAD APPEND Invalid arguments");  				return true;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The following statement contains a magic number: if(args.Length < 2 || args.Length > 4){  				this.Socket.WriteLine(cmdTag + " BAD APPEND Invalid arguments");  				return true;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The following statement contains a magic number: if(args.Length == 4){  				//--- Parse flags' see if valid ----------------  				string flags = args[1].ToUpper();  				if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){  					this.Socket.WriteLine(cmdTag + " BAD arguments invalid");  					return false;  				}  				  				mFlags = IMAP_Utils.ParseMessageFlags(flags);				  				date = MimeUtils.ParseDate(args[2]);  			}  			else if(args.Length == 3){  				// See if date or flags specified' try date first  				try{  					date = MimeUtils.ParseDate(args[1]);  				}  				catch{  					//--- Parse flags' see if valid ----------------  					string flags = args[1].ToUpper();  					if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){  						this.Socket.WriteLine(cmdTag + " BAD arguments invalid");  						return false;  					}  			  					mFlags = IMAP_Utils.ParseMessageFlags(flags);  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The following statement contains a magic number: if(args.Length == 4){  				//--- Parse flags' see if valid ----------------  				string flags = args[1].ToUpper();  				if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){  					this.Socket.WriteLine(cmdTag + " BAD arguments invalid");  					return false;  				}  				  				mFlags = IMAP_Utils.ParseMessageFlags(flags);				  				date = MimeUtils.ParseDate(args[2]);  			}  			else if(args.Length == 3){  				// See if date or flags specified' try date first  				try{  					date = MimeUtils.ParseDate(args[1]);  				}  				catch{  					//--- Parse flags' see if valid ----------------  					string flags = args[1].ToUpper();  					if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){  						this.Socket.WriteLine(cmdTag + " BAD arguments invalid");  						return false;  					}  			  					mFlags = IMAP_Utils.ParseMessageFlags(flags);  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The following statement contains a magic number: if(args.Length == 4){  				//--- Parse flags' see if valid ----------------  				string flags = args[1].ToUpper();  				if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){  					this.Socket.WriteLine(cmdTag + " BAD arguments invalid");  					return false;  				}  				  				mFlags = IMAP_Utils.ParseMessageFlags(flags);				  				date = MimeUtils.ParseDate(args[2]);  			}  			else if(args.Length == 3){  				// See if date or flags specified' try date first  				try{  					date = MimeUtils.ParseDate(args[1]);  				}  				catch{  					//--- Parse flags' see if valid ----------------  					string flags = args[1].ToUpper();  					if(flags.Replace("\\ANSWERED"'"").Replace("\\FLAGGED"'"").Replace("\\DELETED"'"").Replace("\\SEEN"'"").Replace("\\DRAFT"'"").Trim().Length > 0){  						this.Socket.WriteLine(cmdTag + " BAD arguments invalid");  						return false;  					}  			  					mFlags = IMAP_Utils.ParseMessageFlags(flags);  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,BeginAppendCmd,The following statement contains a magic number: this.Socket.BeginReadSpecifiedLength(strm'(int)msgLen + 2'param'new SocketCallBack(this.EndAppendCmd));
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,SETACL,The following statement contains a magic number: if(args.Length != 3){  				this.Socket.WriteLine(cmdTag + " BAD GETACL invalid arguments. Syntax: SETACL<SP>FolderName<SP>UserName<SP>ACL_Flags<CRLF>");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,SETACL,The following statement contains a magic number: string aclFlags = args[2];
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,DELETEACL,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD GETACL invalid arguments. Syntax: DELETEACL<SP>FolderName<SP>UserName<CRLF>");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,LISTRIGHTS,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD GETACL invalid arguments. Syntax: LISTRIGHTS<SP>FolderName<SP>UserName<CRLF>");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The following statement contains a magic number: if(argsText.ToUpper().StartsWith("CHARSET")){  				// Remove CHARSET from argsText  				argsText = argsText.Substring(7).Trim();    				string charsetValueString = IMAP_Utils.ParseQuotedParam(ref argsText);    				try{  					System.Text.Encoding.GetEncoding(charsetValueString);    					charset = charsetValueString;  				}  				catch{  					this.Socket.WriteLine(cmdTag + " NO [BADCHARSET UTF-8] " + charsetValueString + " is not supported");  					return;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The following statement contains a magic number: while(argsText.EndsWith("}") && argsText.IndexOf("{") > -1){  				long dataLength = 0;  				try{  					// Get data length from {xxx}  					dataLength = Convert.ToInt64(argsText.Substring(argsText.LastIndexOf("{") + 1 'argsText.Length - argsText.LastIndexOf("{") - 2));					  				}  				// There is no valid numeric value between {}' just skip and allow SearchGroup parser to handle this value  				catch{  					break;  				}  		  				MemoryStream dataStream = new MemoryStream();    				this.Socket.WriteLine("+ Continue");  				this.Socket.ReadSpecifiedLength((int)dataLength'dataStream);  				string argsContinueLine = this.Socket.ReadLine().TrimEnd();  					  				// Append readed data + [args conitnue] line  				argsText += System.Text.Encoding.GetEncoding(charset).GetString(dataStream.ToArray()) + argsContinueLine;    				// There is no more argumets' stop getting.   				// We must check this because if length = 0 and no args returned' last line ends with {0}'  				// leaves this into endless loop.  				if(argsContinueLine == ""){  					break;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Search,The following statement contains a magic number: searchResponse += cmdTag + " OK SEARCH completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n";
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD Invalid arguments");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: while(argsReader.Available > 0){  				argsReader.ReadToFirstChar();  				  				#region BODYSTRUCTURE    				// BODYSTRUCTURE  				if(argsReader.StartsWith("BODYSTRUCTURE")){  					argsReader.ReadSpecifiedLength("BODYSTRUCTURE".Length);    					fetchFlags.Add(new object[]{"BODYSTRUCTURE"});                      messageItems |= IMAP_MessageItems_enum.BodyStructure;  				}    				#endregion    				#region BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>    				// BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  				else if(argsReader.StartsWith("BODY")){  					// Remove BODY  					argsReader.ReadSpecifiedLength("BODY".Length);    					bool peek = false;  					// BODY.PEEK  					if(argsReader.StartsWith(".PEEK")){  						// Remove .PEEK  						argsReader.ReadSpecifiedLength(".PEEK".Length);    						peek = true;  					}    					// [<section>]<<partial>>  					if(argsReader.StartsWith("[")){                          // Read value between []                          string section = "";                          try{                              section = argsReader.ReadParenthesized();                                                      }                          catch{                              this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]' closing ] parenthesize is missing !");                              return;                          }    						string originalSectionValue = section;  						string mimePartsSpecifier = "";  						string sectionType = "";  						string sectionArgs = "";  						/* Validate <section>  							 Section can be:  								""                                                    - entire message								  								[MimePartsSepcifier.]HEADER                           - message header  								[MimePartsSepcifier.]HEADER.FIELDS (headerFields)     - message header fields  								[MimePartsSepcifier.]HEADER.FIELDS.NOT (headerFields) - message header fields except requested  								[MimePartsSepcifier.]TEXT                             - message text  								[MimePartsSepcifier.]MIME                             - same as header' different response  						*/  						if(section.Length > 0){  							string[] section_args = section.Split(new char[]{' '}'2);  							section = section_args[0];  							if(section_args.Length == 2){  								sectionArgs = section_args[1];  							}    							if(section.EndsWith("HEADER")){  								// Remove HEADER from end  								section = section.Substring(0'section.Length - "HEADER".Length);    								sectionType = "HEADER";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS")){  								// Remove HEADER.FIELDS from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS".Length);    								sectionType = "HEADER.FIELDS";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS.NOT")){  								// Remove HEADER.FIELDS.NOT from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS.NOT".Length);    								sectionType = "HEADER.FIELDS.NOT";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("TEXT")){  								// Remove TEXT from end  								section = section.Substring(0'section.Length - "TEXT".Length);    								sectionType = "TEXT";  								messageItems |= IMAP_MessageItems_enum.Message;  							}							  							else if(section.EndsWith("MIME")){  								// Remove MIME from end  								section = section.Substring(0'section.Length - "MIME".Length);    								sectionType = "MIME";  								messageItems = IMAP_MessageItems_enum.Header;  							}    							// Remove last .' if there is any  							if(section.EndsWith(".")){  								section = section.Substring(0'section.Length - 1);  							}    							// MimePartsSepcifier is specified' validate it. It can contain numbers only.  							if(section.Length > 0){  								// Now we certainly need full message' because nested mime parts wanted  								messageItems |= IMAP_MessageItems_enum.Message;  								  								string[] sectionParts = section.Split('.');  								foreach(string sectionPart in sectionParts){  									if(!Core.IsNumber(sectionPart)){  										this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[<section>] argument. Invalid <section>: " + section);  										return;  									}  								}    								mimePartsSpecifier = section;  							}  						}  						else{  							messageItems |= IMAP_MessageItems_enum.Message;  						}    						long startPosition = -1;  						long length = -1;  						// See if partial fetch  						if(argsReader.StartsWith("<")){                              /* <partial> syntax:  									startPosition[.endPosition]							    							*/                                // Read partial value between <>                              string partial = "";                              try{                                  partial = argsReader.ReadParenthesized();                                                          }                              catch{                                  this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<start[.length]>' closing > parenthesize is missing !");                                  return;                              }    							string[] start_length = partial.Split('.');    							// Validate <partial>  							if(start_length.Length == 0 || start_length.Length > 2 || !Core.IsNumber(start_length[0]) || (start_length.Length == 2 && !Core.IsNumber(start_length[1]))){  								this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<partial> argument. Invalid <partial>: " + partial);  								return;  							}  					  							startPosition = Convert.ToInt64(start_length[0]);  							if(start_length.Length == 2){  								length = Convert.ToInt64(start_length[1]);  							}  						}                            						// object[] structure for BODY[]  						//	fetchFlagName  						//	isPeek  						//	mimePartsSpecifier  						//  originalSectionValue  						//	sectionType  						//	sectionArgs  						//	startPosition  						//	length  						fetchFlags.Add(new object[]{"BODY[]"'peek'mimePartsSpecifier'originalSectionValue'sectionType'sectionArgs'startPosition'length});  					}  					// BODY  					else{						  						fetchFlags.Add(new object[]{"BODY"});                          messageItems |= IMAP_MessageItems_enum.BodyStructure;  					}  				}    				#endregion    				#region ENVELOPE    				// ENVELOPE  				else if(argsReader.StartsWith("ENVELOPE")){  					argsReader.ReadSpecifiedLength("ENVELOPE".Length);    					fetchFlags.Add(new object[]{"ENVELOPE"});                      messageItems |= IMAP_MessageItems_enum.Envelope;  				}    				#endregion    				#region FLAGS    				// FLAGS  				//	The flags that are set for this message.  				else if(argsReader.StartsWith("FLAGS")){  					argsReader.ReadSpecifiedLength("FLAGS".Length);    					fetchFlags.Add(new object[]{"FLAGS"});  				}    				#endregion    				#region INTERNALDATE    				// INTERNALDATE  				else if(argsReader.StartsWith("INTERNALDATE")){  					argsReader.ReadSpecifiedLength("INTERNALDATE".Length);    					fetchFlags.Add(new object[]{"INTERNALDATE"});  				}    				#endregion    				#region RFC822.HEADER    				// RFC822.HEADER  				else if(argsReader.StartsWith("RFC822.HEADER")){  					argsReader.ReadSpecifiedLength("RFC822.HEADER".Length);    					fetchFlags.Add(new object[]{"RFC822.HEADER"});                      messageItems |= IMAP_MessageItems_enum.Header;  				}    				#endregion    				#region RFC822.SIZE    				// RFC822.SIZE  				//	The [RFC-2822] size of the message.  				else if(argsReader.StartsWith("RFC822.SIZE")){  					argsReader.ReadSpecifiedLength("RFC822.SIZE".Length);    					fetchFlags.Add(new object[]{"RFC822.SIZE"});  				}    				#endregion    				#region RFC822.TEXT    				// RFC822.TEXT  				else if(argsReader.StartsWith("RFC822.TEXT")){  					argsReader.ReadSpecifiedLength("RFC822.TEXT".Length);    					fetchFlags.Add(new object[]{"RFC822.TEXT"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion  	  				#region RFC822  				  				// RFC822 NOTE: RFC822 must be below RFC822.xxx or is parsed wrong !  				else if(argsReader.StartsWith("RFC822")){  					argsReader.ReadSpecifiedLength("RFC822".Length);    					fetchFlags.Add(new object[]{"RFC822"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion    				#region UID    				// UID  				//	The unique identifier for the message.  				else if(argsReader.StartsWith("UID")){  					argsReader.ReadSpecifiedLength("UID".Length);    					fetchFlags.Add(new object[]{"UID"});  				}    				#endregion    				// This must be unknown fetch flag  				else{  					this.Socket.WriteLine(cmdTag + " BAD Invalid fetch-items argument. Unkown part starts from: " + argsReader.SourceString);  					return;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: while(argsReader.Available > 0){  				argsReader.ReadToFirstChar();  				  				#region BODYSTRUCTURE    				// BODYSTRUCTURE  				if(argsReader.StartsWith("BODYSTRUCTURE")){  					argsReader.ReadSpecifiedLength("BODYSTRUCTURE".Length);    					fetchFlags.Add(new object[]{"BODYSTRUCTURE"});                      messageItems |= IMAP_MessageItems_enum.BodyStructure;  				}    				#endregion    				#region BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>    				// BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  				else if(argsReader.StartsWith("BODY")){  					// Remove BODY  					argsReader.ReadSpecifiedLength("BODY".Length);    					bool peek = false;  					// BODY.PEEK  					if(argsReader.StartsWith(".PEEK")){  						// Remove .PEEK  						argsReader.ReadSpecifiedLength(".PEEK".Length);    						peek = true;  					}    					// [<section>]<<partial>>  					if(argsReader.StartsWith("[")){                          // Read value between []                          string section = "";                          try{                              section = argsReader.ReadParenthesized();                                                      }                          catch{                              this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]' closing ] parenthesize is missing !");                              return;                          }    						string originalSectionValue = section;  						string mimePartsSpecifier = "";  						string sectionType = "";  						string sectionArgs = "";  						/* Validate <section>  							 Section can be:  								""                                                    - entire message								  								[MimePartsSepcifier.]HEADER                           - message header  								[MimePartsSepcifier.]HEADER.FIELDS (headerFields)     - message header fields  								[MimePartsSepcifier.]HEADER.FIELDS.NOT (headerFields) - message header fields except requested  								[MimePartsSepcifier.]TEXT                             - message text  								[MimePartsSepcifier.]MIME                             - same as header' different response  						*/  						if(section.Length > 0){  							string[] section_args = section.Split(new char[]{' '}'2);  							section = section_args[0];  							if(section_args.Length == 2){  								sectionArgs = section_args[1];  							}    							if(section.EndsWith("HEADER")){  								// Remove HEADER from end  								section = section.Substring(0'section.Length - "HEADER".Length);    								sectionType = "HEADER";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS")){  								// Remove HEADER.FIELDS from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS".Length);    								sectionType = "HEADER.FIELDS";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS.NOT")){  								// Remove HEADER.FIELDS.NOT from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS.NOT".Length);    								sectionType = "HEADER.FIELDS.NOT";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("TEXT")){  								// Remove TEXT from end  								section = section.Substring(0'section.Length - "TEXT".Length);    								sectionType = "TEXT";  								messageItems |= IMAP_MessageItems_enum.Message;  							}							  							else if(section.EndsWith("MIME")){  								// Remove MIME from end  								section = section.Substring(0'section.Length - "MIME".Length);    								sectionType = "MIME";  								messageItems = IMAP_MessageItems_enum.Header;  							}    							// Remove last .' if there is any  							if(section.EndsWith(".")){  								section = section.Substring(0'section.Length - 1);  							}    							// MimePartsSepcifier is specified' validate it. It can contain numbers only.  							if(section.Length > 0){  								// Now we certainly need full message' because nested mime parts wanted  								messageItems |= IMAP_MessageItems_enum.Message;  								  								string[] sectionParts = section.Split('.');  								foreach(string sectionPart in sectionParts){  									if(!Core.IsNumber(sectionPart)){  										this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[<section>] argument. Invalid <section>: " + section);  										return;  									}  								}    								mimePartsSpecifier = section;  							}  						}  						else{  							messageItems |= IMAP_MessageItems_enum.Message;  						}    						long startPosition = -1;  						long length = -1;  						// See if partial fetch  						if(argsReader.StartsWith("<")){                              /* <partial> syntax:  									startPosition[.endPosition]							    							*/                                // Read partial value between <>                              string partial = "";                              try{                                  partial = argsReader.ReadParenthesized();                                                          }                              catch{                                  this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<start[.length]>' closing > parenthesize is missing !");                                  return;                              }    							string[] start_length = partial.Split('.');    							// Validate <partial>  							if(start_length.Length == 0 || start_length.Length > 2 || !Core.IsNumber(start_length[0]) || (start_length.Length == 2 && !Core.IsNumber(start_length[1]))){  								this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<partial> argument. Invalid <partial>: " + partial);  								return;  							}  					  							startPosition = Convert.ToInt64(start_length[0]);  							if(start_length.Length == 2){  								length = Convert.ToInt64(start_length[1]);  							}  						}                            						// object[] structure for BODY[]  						//	fetchFlagName  						//	isPeek  						//	mimePartsSpecifier  						//  originalSectionValue  						//	sectionType  						//	sectionArgs  						//	startPosition  						//	length  						fetchFlags.Add(new object[]{"BODY[]"'peek'mimePartsSpecifier'originalSectionValue'sectionType'sectionArgs'startPosition'length});  					}  					// BODY  					else{						  						fetchFlags.Add(new object[]{"BODY"});                          messageItems |= IMAP_MessageItems_enum.BodyStructure;  					}  				}    				#endregion    				#region ENVELOPE    				// ENVELOPE  				else if(argsReader.StartsWith("ENVELOPE")){  					argsReader.ReadSpecifiedLength("ENVELOPE".Length);    					fetchFlags.Add(new object[]{"ENVELOPE"});                      messageItems |= IMAP_MessageItems_enum.Envelope;  				}    				#endregion    				#region FLAGS    				// FLAGS  				//	The flags that are set for this message.  				else if(argsReader.StartsWith("FLAGS")){  					argsReader.ReadSpecifiedLength("FLAGS".Length);    					fetchFlags.Add(new object[]{"FLAGS"});  				}    				#endregion    				#region INTERNALDATE    				// INTERNALDATE  				else if(argsReader.StartsWith("INTERNALDATE")){  					argsReader.ReadSpecifiedLength("INTERNALDATE".Length);    					fetchFlags.Add(new object[]{"INTERNALDATE"});  				}    				#endregion    				#region RFC822.HEADER    				// RFC822.HEADER  				else if(argsReader.StartsWith("RFC822.HEADER")){  					argsReader.ReadSpecifiedLength("RFC822.HEADER".Length);    					fetchFlags.Add(new object[]{"RFC822.HEADER"});                      messageItems |= IMAP_MessageItems_enum.Header;  				}    				#endregion    				#region RFC822.SIZE    				// RFC822.SIZE  				//	The [RFC-2822] size of the message.  				else if(argsReader.StartsWith("RFC822.SIZE")){  					argsReader.ReadSpecifiedLength("RFC822.SIZE".Length);    					fetchFlags.Add(new object[]{"RFC822.SIZE"});  				}    				#endregion    				#region RFC822.TEXT    				// RFC822.TEXT  				else if(argsReader.StartsWith("RFC822.TEXT")){  					argsReader.ReadSpecifiedLength("RFC822.TEXT".Length);    					fetchFlags.Add(new object[]{"RFC822.TEXT"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion  	  				#region RFC822  				  				// RFC822 NOTE: RFC822 must be below RFC822.xxx or is parsed wrong !  				else if(argsReader.StartsWith("RFC822")){  					argsReader.ReadSpecifiedLength("RFC822".Length);    					fetchFlags.Add(new object[]{"RFC822"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion    				#region UID    				// UID  				//	The unique identifier for the message.  				else if(argsReader.StartsWith("UID")){  					argsReader.ReadSpecifiedLength("UID".Length);    					fetchFlags.Add(new object[]{"UID"});  				}    				#endregion    				// This must be unknown fetch flag  				else{  					this.Socket.WriteLine(cmdTag + " BAD Invalid fetch-items argument. Unkown part starts from: " + argsReader.SourceString);  					return;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: while(argsReader.Available > 0){  				argsReader.ReadToFirstChar();  				  				#region BODYSTRUCTURE    				// BODYSTRUCTURE  				if(argsReader.StartsWith("BODYSTRUCTURE")){  					argsReader.ReadSpecifiedLength("BODYSTRUCTURE".Length);    					fetchFlags.Add(new object[]{"BODYSTRUCTURE"});                      messageItems |= IMAP_MessageItems_enum.BodyStructure;  				}    				#endregion    				#region BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>    				// BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  				else if(argsReader.StartsWith("BODY")){  					// Remove BODY  					argsReader.ReadSpecifiedLength("BODY".Length);    					bool peek = false;  					// BODY.PEEK  					if(argsReader.StartsWith(".PEEK")){  						// Remove .PEEK  						argsReader.ReadSpecifiedLength(".PEEK".Length);    						peek = true;  					}    					// [<section>]<<partial>>  					if(argsReader.StartsWith("[")){                          // Read value between []                          string section = "";                          try{                              section = argsReader.ReadParenthesized();                                                      }                          catch{                              this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]' closing ] parenthesize is missing !");                              return;                          }    						string originalSectionValue = section;  						string mimePartsSpecifier = "";  						string sectionType = "";  						string sectionArgs = "";  						/* Validate <section>  							 Section can be:  								""                                                    - entire message								  								[MimePartsSepcifier.]HEADER                           - message header  								[MimePartsSepcifier.]HEADER.FIELDS (headerFields)     - message header fields  								[MimePartsSepcifier.]HEADER.FIELDS.NOT (headerFields) - message header fields except requested  								[MimePartsSepcifier.]TEXT                             - message text  								[MimePartsSepcifier.]MIME                             - same as header' different response  						*/  						if(section.Length > 0){  							string[] section_args = section.Split(new char[]{' '}'2);  							section = section_args[0];  							if(section_args.Length == 2){  								sectionArgs = section_args[1];  							}    							if(section.EndsWith("HEADER")){  								// Remove HEADER from end  								section = section.Substring(0'section.Length - "HEADER".Length);    								sectionType = "HEADER";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS")){  								// Remove HEADER.FIELDS from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS".Length);    								sectionType = "HEADER.FIELDS";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS.NOT")){  								// Remove HEADER.FIELDS.NOT from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS.NOT".Length);    								sectionType = "HEADER.FIELDS.NOT";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("TEXT")){  								// Remove TEXT from end  								section = section.Substring(0'section.Length - "TEXT".Length);    								sectionType = "TEXT";  								messageItems |= IMAP_MessageItems_enum.Message;  							}							  							else if(section.EndsWith("MIME")){  								// Remove MIME from end  								section = section.Substring(0'section.Length - "MIME".Length);    								sectionType = "MIME";  								messageItems = IMAP_MessageItems_enum.Header;  							}    							// Remove last .' if there is any  							if(section.EndsWith(".")){  								section = section.Substring(0'section.Length - 1);  							}    							// MimePartsSepcifier is specified' validate it. It can contain numbers only.  							if(section.Length > 0){  								// Now we certainly need full message' because nested mime parts wanted  								messageItems |= IMAP_MessageItems_enum.Message;  								  								string[] sectionParts = section.Split('.');  								foreach(string sectionPart in sectionParts){  									if(!Core.IsNumber(sectionPart)){  										this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[<section>] argument. Invalid <section>: " + section);  										return;  									}  								}    								mimePartsSpecifier = section;  							}  						}  						else{  							messageItems |= IMAP_MessageItems_enum.Message;  						}    						long startPosition = -1;  						long length = -1;  						// See if partial fetch  						if(argsReader.StartsWith("<")){                              /* <partial> syntax:  									startPosition[.endPosition]							    							*/                                // Read partial value between <>                              string partial = "";                              try{                                  partial = argsReader.ReadParenthesized();                                                          }                              catch{                                  this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<start[.length]>' closing > parenthesize is missing !");                                  return;                              }    							string[] start_length = partial.Split('.');    							// Validate <partial>  							if(start_length.Length == 0 || start_length.Length > 2 || !Core.IsNumber(start_length[0]) || (start_length.Length == 2 && !Core.IsNumber(start_length[1]))){  								this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<partial> argument. Invalid <partial>: " + partial);  								return;  							}  					  							startPosition = Convert.ToInt64(start_length[0]);  							if(start_length.Length == 2){  								length = Convert.ToInt64(start_length[1]);  							}  						}                            						// object[] structure for BODY[]  						//	fetchFlagName  						//	isPeek  						//	mimePartsSpecifier  						//  originalSectionValue  						//	sectionType  						//	sectionArgs  						//	startPosition  						//	length  						fetchFlags.Add(new object[]{"BODY[]"'peek'mimePartsSpecifier'originalSectionValue'sectionType'sectionArgs'startPosition'length});  					}  					// BODY  					else{						  						fetchFlags.Add(new object[]{"BODY"});                          messageItems |= IMAP_MessageItems_enum.BodyStructure;  					}  				}    				#endregion    				#region ENVELOPE    				// ENVELOPE  				else if(argsReader.StartsWith("ENVELOPE")){  					argsReader.ReadSpecifiedLength("ENVELOPE".Length);    					fetchFlags.Add(new object[]{"ENVELOPE"});                      messageItems |= IMAP_MessageItems_enum.Envelope;  				}    				#endregion    				#region FLAGS    				// FLAGS  				//	The flags that are set for this message.  				else if(argsReader.StartsWith("FLAGS")){  					argsReader.ReadSpecifiedLength("FLAGS".Length);    					fetchFlags.Add(new object[]{"FLAGS"});  				}    				#endregion    				#region INTERNALDATE    				// INTERNALDATE  				else if(argsReader.StartsWith("INTERNALDATE")){  					argsReader.ReadSpecifiedLength("INTERNALDATE".Length);    					fetchFlags.Add(new object[]{"INTERNALDATE"});  				}    				#endregion    				#region RFC822.HEADER    				// RFC822.HEADER  				else if(argsReader.StartsWith("RFC822.HEADER")){  					argsReader.ReadSpecifiedLength("RFC822.HEADER".Length);    					fetchFlags.Add(new object[]{"RFC822.HEADER"});                      messageItems |= IMAP_MessageItems_enum.Header;  				}    				#endregion    				#region RFC822.SIZE    				// RFC822.SIZE  				//	The [RFC-2822] size of the message.  				else if(argsReader.StartsWith("RFC822.SIZE")){  					argsReader.ReadSpecifiedLength("RFC822.SIZE".Length);    					fetchFlags.Add(new object[]{"RFC822.SIZE"});  				}    				#endregion    				#region RFC822.TEXT    				// RFC822.TEXT  				else if(argsReader.StartsWith("RFC822.TEXT")){  					argsReader.ReadSpecifiedLength("RFC822.TEXT".Length);    					fetchFlags.Add(new object[]{"RFC822.TEXT"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion  	  				#region RFC822  				  				// RFC822 NOTE: RFC822 must be below RFC822.xxx or is parsed wrong !  				else if(argsReader.StartsWith("RFC822")){  					argsReader.ReadSpecifiedLength("RFC822".Length);    					fetchFlags.Add(new object[]{"RFC822"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion    				#region UID    				// UID  				//	The unique identifier for the message.  				else if(argsReader.StartsWith("UID")){  					argsReader.ReadSpecifiedLength("UID".Length);    					fetchFlags.Add(new object[]{"UID"});  				}    				#endregion    				// This must be unknown fetch flag  				else{  					this.Socket.WriteLine(cmdTag + " BAD Invalid fetch-items argument. Unkown part starts from: " + argsReader.SourceString);  					return;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: while(argsReader.Available > 0){  				argsReader.ReadToFirstChar();  				  				#region BODYSTRUCTURE    				// BODYSTRUCTURE  				if(argsReader.StartsWith("BODYSTRUCTURE")){  					argsReader.ReadSpecifiedLength("BODYSTRUCTURE".Length);    					fetchFlags.Add(new object[]{"BODYSTRUCTURE"});                      messageItems |= IMAP_MessageItems_enum.BodyStructure;  				}    				#endregion    				#region BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>    				// BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  				else if(argsReader.StartsWith("BODY")){  					// Remove BODY  					argsReader.ReadSpecifiedLength("BODY".Length);    					bool peek = false;  					// BODY.PEEK  					if(argsReader.StartsWith(".PEEK")){  						// Remove .PEEK  						argsReader.ReadSpecifiedLength(".PEEK".Length);    						peek = true;  					}    					// [<section>]<<partial>>  					if(argsReader.StartsWith("[")){                          // Read value between []                          string section = "";                          try{                              section = argsReader.ReadParenthesized();                                                      }                          catch{                              this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]' closing ] parenthesize is missing !");                              return;                          }    						string originalSectionValue = section;  						string mimePartsSpecifier = "";  						string sectionType = "";  						string sectionArgs = "";  						/* Validate <section>  							 Section can be:  								""                                                    - entire message								  								[MimePartsSepcifier.]HEADER                           - message header  								[MimePartsSepcifier.]HEADER.FIELDS (headerFields)     - message header fields  								[MimePartsSepcifier.]HEADER.FIELDS.NOT (headerFields) - message header fields except requested  								[MimePartsSepcifier.]TEXT                             - message text  								[MimePartsSepcifier.]MIME                             - same as header' different response  						*/  						if(section.Length > 0){  							string[] section_args = section.Split(new char[]{' '}'2);  							section = section_args[0];  							if(section_args.Length == 2){  								sectionArgs = section_args[1];  							}    							if(section.EndsWith("HEADER")){  								// Remove HEADER from end  								section = section.Substring(0'section.Length - "HEADER".Length);    								sectionType = "HEADER";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS")){  								// Remove HEADER.FIELDS from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS".Length);    								sectionType = "HEADER.FIELDS";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS.NOT")){  								// Remove HEADER.FIELDS.NOT from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS.NOT".Length);    								sectionType = "HEADER.FIELDS.NOT";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("TEXT")){  								// Remove TEXT from end  								section = section.Substring(0'section.Length - "TEXT".Length);    								sectionType = "TEXT";  								messageItems |= IMAP_MessageItems_enum.Message;  							}							  							else if(section.EndsWith("MIME")){  								// Remove MIME from end  								section = section.Substring(0'section.Length - "MIME".Length);    								sectionType = "MIME";  								messageItems = IMAP_MessageItems_enum.Header;  							}    							// Remove last .' if there is any  							if(section.EndsWith(".")){  								section = section.Substring(0'section.Length - 1);  							}    							// MimePartsSepcifier is specified' validate it. It can contain numbers only.  							if(section.Length > 0){  								// Now we certainly need full message' because nested mime parts wanted  								messageItems |= IMAP_MessageItems_enum.Message;  								  								string[] sectionParts = section.Split('.');  								foreach(string sectionPart in sectionParts){  									if(!Core.IsNumber(sectionPart)){  										this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[<section>] argument. Invalid <section>: " + section);  										return;  									}  								}    								mimePartsSpecifier = section;  							}  						}  						else{  							messageItems |= IMAP_MessageItems_enum.Message;  						}    						long startPosition = -1;  						long length = -1;  						// See if partial fetch  						if(argsReader.StartsWith("<")){                              /* <partial> syntax:  									startPosition[.endPosition]							    							*/                                // Read partial value between <>                              string partial = "";                              try{                                  partial = argsReader.ReadParenthesized();                                                          }                              catch{                                  this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<start[.length]>' closing > parenthesize is missing !");                                  return;                              }    							string[] start_length = partial.Split('.');    							// Validate <partial>  							if(start_length.Length == 0 || start_length.Length > 2 || !Core.IsNumber(start_length[0]) || (start_length.Length == 2 && !Core.IsNumber(start_length[1]))){  								this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<partial> argument. Invalid <partial>: " + partial);  								return;  							}  					  							startPosition = Convert.ToInt64(start_length[0]);  							if(start_length.Length == 2){  								length = Convert.ToInt64(start_length[1]);  							}  						}                            						// object[] structure for BODY[]  						//	fetchFlagName  						//	isPeek  						//	mimePartsSpecifier  						//  originalSectionValue  						//	sectionType  						//	sectionArgs  						//	startPosition  						//	length  						fetchFlags.Add(new object[]{"BODY[]"'peek'mimePartsSpecifier'originalSectionValue'sectionType'sectionArgs'startPosition'length});  					}  					// BODY  					else{						  						fetchFlags.Add(new object[]{"BODY"});                          messageItems |= IMAP_MessageItems_enum.BodyStructure;  					}  				}    				#endregion    				#region ENVELOPE    				// ENVELOPE  				else if(argsReader.StartsWith("ENVELOPE")){  					argsReader.ReadSpecifiedLength("ENVELOPE".Length);    					fetchFlags.Add(new object[]{"ENVELOPE"});                      messageItems |= IMAP_MessageItems_enum.Envelope;  				}    				#endregion    				#region FLAGS    				// FLAGS  				//	The flags that are set for this message.  				else if(argsReader.StartsWith("FLAGS")){  					argsReader.ReadSpecifiedLength("FLAGS".Length);    					fetchFlags.Add(new object[]{"FLAGS"});  				}    				#endregion    				#region INTERNALDATE    				// INTERNALDATE  				else if(argsReader.StartsWith("INTERNALDATE")){  					argsReader.ReadSpecifiedLength("INTERNALDATE".Length);    					fetchFlags.Add(new object[]{"INTERNALDATE"});  				}    				#endregion    				#region RFC822.HEADER    				// RFC822.HEADER  				else if(argsReader.StartsWith("RFC822.HEADER")){  					argsReader.ReadSpecifiedLength("RFC822.HEADER".Length);    					fetchFlags.Add(new object[]{"RFC822.HEADER"});                      messageItems |= IMAP_MessageItems_enum.Header;  				}    				#endregion    				#region RFC822.SIZE    				// RFC822.SIZE  				//	The [RFC-2822] size of the message.  				else if(argsReader.StartsWith("RFC822.SIZE")){  					argsReader.ReadSpecifiedLength("RFC822.SIZE".Length);    					fetchFlags.Add(new object[]{"RFC822.SIZE"});  				}    				#endregion    				#region RFC822.TEXT    				// RFC822.TEXT  				else if(argsReader.StartsWith("RFC822.TEXT")){  					argsReader.ReadSpecifiedLength("RFC822.TEXT".Length);    					fetchFlags.Add(new object[]{"RFC822.TEXT"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion  	  				#region RFC822  				  				// RFC822 NOTE: RFC822 must be below RFC822.xxx or is parsed wrong !  				else if(argsReader.StartsWith("RFC822")){  					argsReader.ReadSpecifiedLength("RFC822".Length);    					fetchFlags.Add(new object[]{"RFC822"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion    				#region UID    				// UID  				//	The unique identifier for the message.  				else if(argsReader.StartsWith("UID")){  					argsReader.ReadSpecifiedLength("UID".Length);    					fetchFlags.Add(new object[]{"UID"});  				}    				#endregion    				// This must be unknown fetch flag  				else{  					this.Socket.WriteLine(cmdTag + " BAD Invalid fetch-items argument. Unkown part starts from: " + argsReader.SourceString);  					return;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: while(argsReader.Available > 0){  				argsReader.ReadToFirstChar();  				  				#region BODYSTRUCTURE    				// BODYSTRUCTURE  				if(argsReader.StartsWith("BODYSTRUCTURE")){  					argsReader.ReadSpecifiedLength("BODYSTRUCTURE".Length);    					fetchFlags.Add(new object[]{"BODYSTRUCTURE"});                      messageItems |= IMAP_MessageItems_enum.BodyStructure;  				}    				#endregion    				#region BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>    				// BODY' BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  				else if(argsReader.StartsWith("BODY")){  					// Remove BODY  					argsReader.ReadSpecifiedLength("BODY".Length);    					bool peek = false;  					// BODY.PEEK  					if(argsReader.StartsWith(".PEEK")){  						// Remove .PEEK  						argsReader.ReadSpecifiedLength(".PEEK".Length);    						peek = true;  					}    					// [<section>]<<partial>>  					if(argsReader.StartsWith("[")){                          // Read value between []                          string section = "";                          try{                              section = argsReader.ReadParenthesized();                                                      }                          catch{                              this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]' closing ] parenthesize is missing !");                              return;                          }    						string originalSectionValue = section;  						string mimePartsSpecifier = "";  						string sectionType = "";  						string sectionArgs = "";  						/* Validate <section>  							 Section can be:  								""                                                    - entire message								  								[MimePartsSepcifier.]HEADER                           - message header  								[MimePartsSepcifier.]HEADER.FIELDS (headerFields)     - message header fields  								[MimePartsSepcifier.]HEADER.FIELDS.NOT (headerFields) - message header fields except requested  								[MimePartsSepcifier.]TEXT                             - message text  								[MimePartsSepcifier.]MIME                             - same as header' different response  						*/  						if(section.Length > 0){  							string[] section_args = section.Split(new char[]{' '}'2);  							section = section_args[0];  							if(section_args.Length == 2){  								sectionArgs = section_args[1];  							}    							if(section.EndsWith("HEADER")){  								// Remove HEADER from end  								section = section.Substring(0'section.Length - "HEADER".Length);    								sectionType = "HEADER";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS")){  								// Remove HEADER.FIELDS from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS".Length);    								sectionType = "HEADER.FIELDS";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("HEADER.FIELDS.NOT")){  								// Remove HEADER.FIELDS.NOT from end  								section = section.Substring(0'section.Length - "HEADER.FIELDS.NOT".Length);    								sectionType = "HEADER.FIELDS.NOT";  								messageItems |= IMAP_MessageItems_enum.Header;  							}  							else if(section.EndsWith("TEXT")){  								// Remove TEXT from end  								section = section.Substring(0'section.Length - "TEXT".Length);    								sectionType = "TEXT";  								messageItems |= IMAP_MessageItems_enum.Message;  							}							  							else if(section.EndsWith("MIME")){  								// Remove MIME from end  								section = section.Substring(0'section.Length - "MIME".Length);    								sectionType = "MIME";  								messageItems = IMAP_MessageItems_enum.Header;  							}    							// Remove last .' if there is any  							if(section.EndsWith(".")){  								section = section.Substring(0'section.Length - 1);  							}    							// MimePartsSepcifier is specified' validate it. It can contain numbers only.  							if(section.Length > 0){  								// Now we certainly need full message' because nested mime parts wanted  								messageItems |= IMAP_MessageItems_enum.Message;  								  								string[] sectionParts = section.Split('.');  								foreach(string sectionPart in sectionParts){  									if(!Core.IsNumber(sectionPart)){  										this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[<section>] argument. Invalid <section>: " + section);  										return;  									}  								}    								mimePartsSpecifier = section;  							}  						}  						else{  							messageItems |= IMAP_MessageItems_enum.Message;  						}    						long startPosition = -1;  						long length = -1;  						// See if partial fetch  						if(argsReader.StartsWith("<")){                              /* <partial> syntax:  									startPosition[.endPosition]							    							*/                                // Read partial value between <>                              string partial = "";                              try{                                  partial = argsReader.ReadParenthesized();                                                          }                              catch{                                  this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<start[.length]>' closing > parenthesize is missing !");                                  return;                              }    							string[] start_length = partial.Split('.');    							// Validate <partial>  							if(start_length.Length == 0 || start_length.Length > 2 || !Core.IsNumber(start_length[0]) || (start_length.Length == 2 && !Core.IsNumber(start_length[1]))){  								this.Socket.WriteLine(cmdTag + " BAD Invalid BODY[]<partial> argument. Invalid <partial>: " + partial);  								return;  							}  					  							startPosition = Convert.ToInt64(start_length[0]);  							if(start_length.Length == 2){  								length = Convert.ToInt64(start_length[1]);  							}  						}                            						// object[] structure for BODY[]  						//	fetchFlagName  						//	isPeek  						//	mimePartsSpecifier  						//  originalSectionValue  						//	sectionType  						//	sectionArgs  						//	startPosition  						//	length  						fetchFlags.Add(new object[]{"BODY[]"'peek'mimePartsSpecifier'originalSectionValue'sectionType'sectionArgs'startPosition'length});  					}  					// BODY  					else{						  						fetchFlags.Add(new object[]{"BODY"});                          messageItems |= IMAP_MessageItems_enum.BodyStructure;  					}  				}    				#endregion    				#region ENVELOPE    				// ENVELOPE  				else if(argsReader.StartsWith("ENVELOPE")){  					argsReader.ReadSpecifiedLength("ENVELOPE".Length);    					fetchFlags.Add(new object[]{"ENVELOPE"});                      messageItems |= IMAP_MessageItems_enum.Envelope;  				}    				#endregion    				#region FLAGS    				// FLAGS  				//	The flags that are set for this message.  				else if(argsReader.StartsWith("FLAGS")){  					argsReader.ReadSpecifiedLength("FLAGS".Length);    					fetchFlags.Add(new object[]{"FLAGS"});  				}    				#endregion    				#region INTERNALDATE    				// INTERNALDATE  				else if(argsReader.StartsWith("INTERNALDATE")){  					argsReader.ReadSpecifiedLength("INTERNALDATE".Length);    					fetchFlags.Add(new object[]{"INTERNALDATE"});  				}    				#endregion    				#region RFC822.HEADER    				// RFC822.HEADER  				else if(argsReader.StartsWith("RFC822.HEADER")){  					argsReader.ReadSpecifiedLength("RFC822.HEADER".Length);    					fetchFlags.Add(new object[]{"RFC822.HEADER"});                      messageItems |= IMAP_MessageItems_enum.Header;  				}    				#endregion    				#region RFC822.SIZE    				// RFC822.SIZE  				//	The [RFC-2822] size of the message.  				else if(argsReader.StartsWith("RFC822.SIZE")){  					argsReader.ReadSpecifiedLength("RFC822.SIZE".Length);    					fetchFlags.Add(new object[]{"RFC822.SIZE"});  				}    				#endregion    				#region RFC822.TEXT    				// RFC822.TEXT  				else if(argsReader.StartsWith("RFC822.TEXT")){  					argsReader.ReadSpecifiedLength("RFC822.TEXT".Length);    					fetchFlags.Add(new object[]{"RFC822.TEXT"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion  	  				#region RFC822  				  				// RFC822 NOTE: RFC822 must be below RFC822.xxx or is parsed wrong !  				else if(argsReader.StartsWith("RFC822")){  					argsReader.ReadSpecifiedLength("RFC822".Length);    					fetchFlags.Add(new object[]{"RFC822"});                      messageItems |= IMAP_MessageItems_enum.Message;  				}    				#endregion    				#region UID    				// UID  				//	The unique identifier for the message.  				else if(argsReader.StartsWith("UID")){  					argsReader.ReadSpecifiedLength("UID".Length);    					fetchFlags.Add(new object[]{"UID"});  				}    				#endregion    				// This must be unknown fetch flag  				else{  					this.Socket.WriteLine(cmdTag + " BAD Invalid fetch-items argument. Unkown part starts from: " + argsReader.SourceString);  					return;  				}  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: for(int i=0;i<m_pSelectedFolder.Messages.Count;i++){  				IMAP_Message msg = m_pSelectedFolder.Messages[i];    				// For UID FETCH we must compare UIDs and for normal FETCH message numbers.   				bool sequenceSetContains = false;  				if(uidFetch){  					sequenceSetContains = sequenceSet.Contains(msg.UID);  				}  				else{  					sequenceSetContains = sequenceSet.Contains(i + 1);  				}    				if(sequenceSetContains){                                  IMAP_eArgs_MessageItems eArgs = null;                      // Get message items only if they are needed.                      if(messageItems != IMAP_MessageItems_enum.None){                          // Raise event GetMessageItems to get all neccesary message itmes                          eArgs = m_pServer.OnGetMessageItems(this'msg'messageItems);                            // Message doesn't exist any more' notify email client.                          if(!eArgs.MessageExists){                              bufferedWriter.Write("* " + msg.SequenceNo + " EXPUNGE");                              m_pSelectedFolder.Messages.Remove(msg);                              i--;                              continue;                          }                          try{                              // Ensure that all requested items were provided.                              eArgs.Validate();                          }                          catch(Exception x){                              m_pServer.OnSysError(x.Message'x);                              this.Socket.WriteLine(cmdTag + " NO Internal IMAP server component error: " + x.Message);                              return;                          }                      }                                                                                  // Write fetch start data "* msgNo FETCH ("                      bufferedWriter.Write("* " + (i + 1) + " FETCH (");  					  					IMAP_MessageFlags msgFlagsOr = msg.Flags;  					// Construct reply here' based on requested fetch items  					int nCount = 0;  					foreach(object[] fetchFlag in fetchFlags){  						string fetchFlagName = (string)fetchFlag[0];    						#region BODY    						// BODY  						if(fetchFlagName == "BODY"){  							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// BODY ()                              bufferedWriter.Write("BODY " + eArgs.BodyStructure);  						}    						#endregion    						#region BODY[]' BODY.PEEK[]    						// BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  						else if(fetchFlagName == "BODY[]"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// object[] structure for BODY[]  							//	fetchFlagName  							//	isPeek  							//	mimePartsSpecifier  							//  originalSectionValue  							//	sectionType  							//	sectionArgs  							//	startPosition  							//	length  							bool   isPeek               = (bool)fetchFlag[1];  							string mimePartsSpecifier   = (string)fetchFlag[2];  							string originalSectionValue = (string)fetchFlag[3];  							string sectionType          = (string)fetchFlag[4];  							string sectionArgs          = (string)fetchFlag[5];  							long   startPosition        = (long)fetchFlag[6];  							long   length               = (long)fetchFlag[7];    							// Difference between BODY[] and BODY.PEEK[] is that .PEEK won't set seen flag  							if(!isPeek){  								// Sets \seen flag  								msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							}  							  							/* Section value:  								""                - entire message								  								HEADER            - message header  								HEADER.FIELDS     - message header fields  								HEADER.FIELDS.NOT - message header fields except requested  								TEXT              - message text  								MIME              - same as header' different response  							*/  							Stream dataStream = null;  							if(sectionType == "" && mimePartsSpecifier == ""){  								dataStream = eArgs.MessageStream;  							}  							else{                                  LumiSoft.Net.Mime.Mime parser = null;                                  try{                                      if(eArgs.MessageStream == null){                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.Header);                                      }                                      else{                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);                                      }                                  }                                                                  // Invalid message' parsing failed                                  catch{                                      parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"BAD Message"'"This is BAD message' mail server failed to parse it !"'"");                                  }  								MimeEntity currentEntity = parser.MainEntity;  								// Specific mime entity requested' get it  								if(mimePartsSpecifier != ""){  									currentEntity = FetchHelper.GetMimeEntity(parser'mimePartsSpecifier);  								}    								if(currentEntity != null){  									if(sectionType == "HEADER"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFields(sectionArgs'currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS.NOT"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFieldsNot(sectionArgs'currentEntity));  									}  									else if(sectionType == "TEXT"){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  									else if(sectionType == "MIME"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == ""){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  								}  							}  							  							// Partial fetch. Reports <origin position> in fetch reply.  							if(startPosition > -1){  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  								}  								else{  									long lengthToSend = length;  									if(lengthToSend == -1){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}  									if((lengthToSend + startPosition) > (dataStream.Length - dataStream.Position)){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}    									if(startPosition >= (dataStream.Length - dataStream.Position)){                                          this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  									}  									else{	  						                this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> {" + lengthToSend + "}\r\n");										                                          dataStream.Position += startPosition;  										this.Socket.Write(dataStream'lengthToSend);  									}  								}  							}  							// Normal fetch  							else{  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "] \"\"\r\n");  								}  								else{                                      this.Socket.Write("BODY[" + originalSectionValue + "] {" + (dataStream.Length - dataStream.Position) + "}\r\n");  									this.Socket.Write(dataStream);  								}  							}  						}    						#endregion    						#region BODYSTRUCTURE    						// BODYSTRUCTURE  						else if(fetchFlagName == "BODYSTRUCTURE"){                              bufferedWriter.Write("BODYSTRUCTURE " + eArgs.BodyStructure);  						}    						#endregion    						#region ENVELOPE    						// ENVELOPE  						else if(fetchFlagName == "ENVELOPE"){                              bufferedWriter.Write("ENVELOPE " + eArgs.Envelope);  						}    						#endregion    						#region FLAGS    						// FLAGS  						else if(fetchFlagName == "FLAGS"){                              bufferedWriter.Write("FLAGS (" + msg.FlagsString + ")");  						}    						#endregion    						#region INTERNALDATE    						// INTERNALDATE  						else if(fetchFlagName == "INTERNALDATE"){  							// INTERNALDATE "date"                              bufferedWriter.Write("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(msg.InternalDate) + "\"");  						}    						#endregion    						#region RFC822    						// RFC822  						else if(fetchFlagName == "RFC822"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// RFC822 {size}  							// msg data                              this.Socket.Write("RFC822 {" + eArgs.MessageSize.ToString() + "}\r\n");  							this.Socket.Write(eArgs.MessageStream);  						}    						#endregion    						#region RFC822.HEADER    						// RFC822.HEADER  						else if(fetchFlagName == "RFC822.HEADER"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// RFC822.HEADER {size}  							// msg header data  						    this.Socket.Write("RFC822.HEADER {" + eArgs.Header.Length + "}\r\n");  							this.Socket.Write(eArgs.Header);	  						}    						#endregion    						#region RFC822.SIZE  						  						// RFC822.SIZE  						else if(fetchFlagName == "RFC822.SIZE"){  							// RFC822.SIZE size                              bufferedWriter.Write("RFC822.SIZE " + msg.Size);  						}    						#endregion  						  						#region RFC822.TEXT    						// RFC822.TEXT  						else if(fetchFlagName == "RFC822.TEXT"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							  							//--- Find body text entity ------------------------------------//                              LumiSoft.Net.Mime.Mime parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);  							MimeEntity bodyTextEntity = null;  							if(parser.MainEntity.ContentType == MediaType_enum.NotSpecified){  								if(parser.MainEntity.DataEncoded != null){  									bodyTextEntity = parser.MainEntity;  								}  							}  							else{  								MimeEntity[] entities = parser.MimeEntities;  								foreach(MimeEntity entity in entities){  									if(entity.ContentType == MediaType_enum.Text_plain){  										bodyTextEntity = entity;  										break;  									}  								}  							}  							//----------------------------------------------------------------//    							// RFC822.TEXT {size}  							// msg text	  							byte[] data = null;  							if(bodyTextEntity != null){  								data = bodyTextEntity.DataEncoded;  							}  							else{  								data = System.Text.Encoding.ASCII.GetBytes("");  							}  									                              this.Socket.Write("RFC822.TEXT {" + data.Length + "}\r\n");  							this.Socket.Write(data);  						}    						#endregion    						#region UID    						// UID  						else if(fetchFlagName == "UID"){                              bufferedWriter.Write("UID " + msg.UID);  						}    						#endregion    						nCount++;    						// Write fetch item separator data " "  						// We don't write it for last item  						if(nCount < fetchFlags.Count){                              bufferedWriter.Write(" ");  						}                         					}                                            					// Write fetch end data ")"                      bufferedWriter.Write(")\r\n");                        // Free event args' close message stream' ... .                      if(eArgs != null){                          eArgs.Dispose();                      }    					// Set message flags here if required or changed  					if(((int)IMAP_MessageFlags.Recent & (int)msg.Flags) != 0 || msgFlagsOr != msg.Flags){  						msg.SetFlags(msg.Flags & ~IMAP_MessageFlags.Recent);    						m_pServer.OnStoreMessageFlags(this'msg);  					}  				}               			  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: for(int i=0;i<m_pSelectedFolder.Messages.Count;i++){  				IMAP_Message msg = m_pSelectedFolder.Messages[i];    				// For UID FETCH we must compare UIDs and for normal FETCH message numbers.   				bool sequenceSetContains = false;  				if(uidFetch){  					sequenceSetContains = sequenceSet.Contains(msg.UID);  				}  				else{  					sequenceSetContains = sequenceSet.Contains(i + 1);  				}    				if(sequenceSetContains){                                  IMAP_eArgs_MessageItems eArgs = null;                      // Get message items only if they are needed.                      if(messageItems != IMAP_MessageItems_enum.None){                          // Raise event GetMessageItems to get all neccesary message itmes                          eArgs = m_pServer.OnGetMessageItems(this'msg'messageItems);                            // Message doesn't exist any more' notify email client.                          if(!eArgs.MessageExists){                              bufferedWriter.Write("* " + msg.SequenceNo + " EXPUNGE");                              m_pSelectedFolder.Messages.Remove(msg);                              i--;                              continue;                          }                          try{                              // Ensure that all requested items were provided.                              eArgs.Validate();                          }                          catch(Exception x){                              m_pServer.OnSysError(x.Message'x);                              this.Socket.WriteLine(cmdTag + " NO Internal IMAP server component error: " + x.Message);                              return;                          }                      }                                                                                  // Write fetch start data "* msgNo FETCH ("                      bufferedWriter.Write("* " + (i + 1) + " FETCH (");  					  					IMAP_MessageFlags msgFlagsOr = msg.Flags;  					// Construct reply here' based on requested fetch items  					int nCount = 0;  					foreach(object[] fetchFlag in fetchFlags){  						string fetchFlagName = (string)fetchFlag[0];    						#region BODY    						// BODY  						if(fetchFlagName == "BODY"){  							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// BODY ()                              bufferedWriter.Write("BODY " + eArgs.BodyStructure);  						}    						#endregion    						#region BODY[]' BODY.PEEK[]    						// BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  						else if(fetchFlagName == "BODY[]"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// object[] structure for BODY[]  							//	fetchFlagName  							//	isPeek  							//	mimePartsSpecifier  							//  originalSectionValue  							//	sectionType  							//	sectionArgs  							//	startPosition  							//	length  							bool   isPeek               = (bool)fetchFlag[1];  							string mimePartsSpecifier   = (string)fetchFlag[2];  							string originalSectionValue = (string)fetchFlag[3];  							string sectionType          = (string)fetchFlag[4];  							string sectionArgs          = (string)fetchFlag[5];  							long   startPosition        = (long)fetchFlag[6];  							long   length               = (long)fetchFlag[7];    							// Difference between BODY[] and BODY.PEEK[] is that .PEEK won't set seen flag  							if(!isPeek){  								// Sets \seen flag  								msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							}  							  							/* Section value:  								""                - entire message								  								HEADER            - message header  								HEADER.FIELDS     - message header fields  								HEADER.FIELDS.NOT - message header fields except requested  								TEXT              - message text  								MIME              - same as header' different response  							*/  							Stream dataStream = null;  							if(sectionType == "" && mimePartsSpecifier == ""){  								dataStream = eArgs.MessageStream;  							}  							else{                                  LumiSoft.Net.Mime.Mime parser = null;                                  try{                                      if(eArgs.MessageStream == null){                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.Header);                                      }                                      else{                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);                                      }                                  }                                                                  // Invalid message' parsing failed                                  catch{                                      parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"BAD Message"'"This is BAD message' mail server failed to parse it !"'"");                                  }  								MimeEntity currentEntity = parser.MainEntity;  								// Specific mime entity requested' get it  								if(mimePartsSpecifier != ""){  									currentEntity = FetchHelper.GetMimeEntity(parser'mimePartsSpecifier);  								}    								if(currentEntity != null){  									if(sectionType == "HEADER"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFields(sectionArgs'currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS.NOT"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFieldsNot(sectionArgs'currentEntity));  									}  									else if(sectionType == "TEXT"){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  									else if(sectionType == "MIME"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == ""){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  								}  							}  							  							// Partial fetch. Reports <origin position> in fetch reply.  							if(startPosition > -1){  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  								}  								else{  									long lengthToSend = length;  									if(lengthToSend == -1){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}  									if((lengthToSend + startPosition) > (dataStream.Length - dataStream.Position)){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}    									if(startPosition >= (dataStream.Length - dataStream.Position)){                                          this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  									}  									else{	  						                this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> {" + lengthToSend + "}\r\n");										                                          dataStream.Position += startPosition;  										this.Socket.Write(dataStream'lengthToSend);  									}  								}  							}  							// Normal fetch  							else{  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "] \"\"\r\n");  								}  								else{                                      this.Socket.Write("BODY[" + originalSectionValue + "] {" + (dataStream.Length - dataStream.Position) + "}\r\n");  									this.Socket.Write(dataStream);  								}  							}  						}    						#endregion    						#region BODYSTRUCTURE    						// BODYSTRUCTURE  						else if(fetchFlagName == "BODYSTRUCTURE"){                              bufferedWriter.Write("BODYSTRUCTURE " + eArgs.BodyStructure);  						}    						#endregion    						#region ENVELOPE    						// ENVELOPE  						else if(fetchFlagName == "ENVELOPE"){                              bufferedWriter.Write("ENVELOPE " + eArgs.Envelope);  						}    						#endregion    						#region FLAGS    						// FLAGS  						else if(fetchFlagName == "FLAGS"){                              bufferedWriter.Write("FLAGS (" + msg.FlagsString + ")");  						}    						#endregion    						#region INTERNALDATE    						// INTERNALDATE  						else if(fetchFlagName == "INTERNALDATE"){  							// INTERNALDATE "date"                              bufferedWriter.Write("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(msg.InternalDate) + "\"");  						}    						#endregion    						#region RFC822    						// RFC822  						else if(fetchFlagName == "RFC822"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// RFC822 {size}  							// msg data                              this.Socket.Write("RFC822 {" + eArgs.MessageSize.ToString() + "}\r\n");  							this.Socket.Write(eArgs.MessageStream);  						}    						#endregion    						#region RFC822.HEADER    						// RFC822.HEADER  						else if(fetchFlagName == "RFC822.HEADER"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// RFC822.HEADER {size}  							// msg header data  						    this.Socket.Write("RFC822.HEADER {" + eArgs.Header.Length + "}\r\n");  							this.Socket.Write(eArgs.Header);	  						}    						#endregion    						#region RFC822.SIZE  						  						// RFC822.SIZE  						else if(fetchFlagName == "RFC822.SIZE"){  							// RFC822.SIZE size                              bufferedWriter.Write("RFC822.SIZE " + msg.Size);  						}    						#endregion  						  						#region RFC822.TEXT    						// RFC822.TEXT  						else if(fetchFlagName == "RFC822.TEXT"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							  							//--- Find body text entity ------------------------------------//                              LumiSoft.Net.Mime.Mime parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);  							MimeEntity bodyTextEntity = null;  							if(parser.MainEntity.ContentType == MediaType_enum.NotSpecified){  								if(parser.MainEntity.DataEncoded != null){  									bodyTextEntity = parser.MainEntity;  								}  							}  							else{  								MimeEntity[] entities = parser.MimeEntities;  								foreach(MimeEntity entity in entities){  									if(entity.ContentType == MediaType_enum.Text_plain){  										bodyTextEntity = entity;  										break;  									}  								}  							}  							//----------------------------------------------------------------//    							// RFC822.TEXT {size}  							// msg text	  							byte[] data = null;  							if(bodyTextEntity != null){  								data = bodyTextEntity.DataEncoded;  							}  							else{  								data = System.Text.Encoding.ASCII.GetBytes("");  							}  									                              this.Socket.Write("RFC822.TEXT {" + data.Length + "}\r\n");  							this.Socket.Write(data);  						}    						#endregion    						#region UID    						// UID  						else if(fetchFlagName == "UID"){                              bufferedWriter.Write("UID " + msg.UID);  						}    						#endregion    						nCount++;    						// Write fetch item separator data " "  						// We don't write it for last item  						if(nCount < fetchFlags.Count){                              bufferedWriter.Write(" ");  						}                         					}                                            					// Write fetch end data ")"                      bufferedWriter.Write(")\r\n");                        // Free event args' close message stream' ... .                      if(eArgs != null){                          eArgs.Dispose();                      }    					// Set message flags here if required or changed  					if(((int)IMAP_MessageFlags.Recent & (int)msg.Flags) != 0 || msgFlagsOr != msg.Flags){  						msg.SetFlags(msg.Flags & ~IMAP_MessageFlags.Recent);    						m_pServer.OnStoreMessageFlags(this'msg);  					}  				}               			  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: for(int i=0;i<m_pSelectedFolder.Messages.Count;i++){  				IMAP_Message msg = m_pSelectedFolder.Messages[i];    				// For UID FETCH we must compare UIDs and for normal FETCH message numbers.   				bool sequenceSetContains = false;  				if(uidFetch){  					sequenceSetContains = sequenceSet.Contains(msg.UID);  				}  				else{  					sequenceSetContains = sequenceSet.Contains(i + 1);  				}    				if(sequenceSetContains){                                  IMAP_eArgs_MessageItems eArgs = null;                      // Get message items only if they are needed.                      if(messageItems != IMAP_MessageItems_enum.None){                          // Raise event GetMessageItems to get all neccesary message itmes                          eArgs = m_pServer.OnGetMessageItems(this'msg'messageItems);                            // Message doesn't exist any more' notify email client.                          if(!eArgs.MessageExists){                              bufferedWriter.Write("* " + msg.SequenceNo + " EXPUNGE");                              m_pSelectedFolder.Messages.Remove(msg);                              i--;                              continue;                          }                          try{                              // Ensure that all requested items were provided.                              eArgs.Validate();                          }                          catch(Exception x){                              m_pServer.OnSysError(x.Message'x);                              this.Socket.WriteLine(cmdTag + " NO Internal IMAP server component error: " + x.Message);                              return;                          }                      }                                                                                  // Write fetch start data "* msgNo FETCH ("                      bufferedWriter.Write("* " + (i + 1) + " FETCH (");  					  					IMAP_MessageFlags msgFlagsOr = msg.Flags;  					// Construct reply here' based on requested fetch items  					int nCount = 0;  					foreach(object[] fetchFlag in fetchFlags){  						string fetchFlagName = (string)fetchFlag[0];    						#region BODY    						// BODY  						if(fetchFlagName == "BODY"){  							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// BODY ()                              bufferedWriter.Write("BODY " + eArgs.BodyStructure);  						}    						#endregion    						#region BODY[]' BODY.PEEK[]    						// BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  						else if(fetchFlagName == "BODY[]"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// object[] structure for BODY[]  							//	fetchFlagName  							//	isPeek  							//	mimePartsSpecifier  							//  originalSectionValue  							//	sectionType  							//	sectionArgs  							//	startPosition  							//	length  							bool   isPeek               = (bool)fetchFlag[1];  							string mimePartsSpecifier   = (string)fetchFlag[2];  							string originalSectionValue = (string)fetchFlag[3];  							string sectionType          = (string)fetchFlag[4];  							string sectionArgs          = (string)fetchFlag[5];  							long   startPosition        = (long)fetchFlag[6];  							long   length               = (long)fetchFlag[7];    							// Difference between BODY[] and BODY.PEEK[] is that .PEEK won't set seen flag  							if(!isPeek){  								// Sets \seen flag  								msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							}  							  							/* Section value:  								""                - entire message								  								HEADER            - message header  								HEADER.FIELDS     - message header fields  								HEADER.FIELDS.NOT - message header fields except requested  								TEXT              - message text  								MIME              - same as header' different response  							*/  							Stream dataStream = null;  							if(sectionType == "" && mimePartsSpecifier == ""){  								dataStream = eArgs.MessageStream;  							}  							else{                                  LumiSoft.Net.Mime.Mime parser = null;                                  try{                                      if(eArgs.MessageStream == null){                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.Header);                                      }                                      else{                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);                                      }                                  }                                                                  // Invalid message' parsing failed                                  catch{                                      parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"BAD Message"'"This is BAD message' mail server failed to parse it !"'"");                                  }  								MimeEntity currentEntity = parser.MainEntity;  								// Specific mime entity requested' get it  								if(mimePartsSpecifier != ""){  									currentEntity = FetchHelper.GetMimeEntity(parser'mimePartsSpecifier);  								}    								if(currentEntity != null){  									if(sectionType == "HEADER"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFields(sectionArgs'currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS.NOT"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFieldsNot(sectionArgs'currentEntity));  									}  									else if(sectionType == "TEXT"){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  									else if(sectionType == "MIME"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == ""){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  								}  							}  							  							// Partial fetch. Reports <origin position> in fetch reply.  							if(startPosition > -1){  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  								}  								else{  									long lengthToSend = length;  									if(lengthToSend == -1){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}  									if((lengthToSend + startPosition) > (dataStream.Length - dataStream.Position)){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}    									if(startPosition >= (dataStream.Length - dataStream.Position)){                                          this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  									}  									else{	  						                this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> {" + lengthToSend + "}\r\n");										                                          dataStream.Position += startPosition;  										this.Socket.Write(dataStream'lengthToSend);  									}  								}  							}  							// Normal fetch  							else{  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "] \"\"\r\n");  								}  								else{                                      this.Socket.Write("BODY[" + originalSectionValue + "] {" + (dataStream.Length - dataStream.Position) + "}\r\n");  									this.Socket.Write(dataStream);  								}  							}  						}    						#endregion    						#region BODYSTRUCTURE    						// BODYSTRUCTURE  						else if(fetchFlagName == "BODYSTRUCTURE"){                              bufferedWriter.Write("BODYSTRUCTURE " + eArgs.BodyStructure);  						}    						#endregion    						#region ENVELOPE    						// ENVELOPE  						else if(fetchFlagName == "ENVELOPE"){                              bufferedWriter.Write("ENVELOPE " + eArgs.Envelope);  						}    						#endregion    						#region FLAGS    						// FLAGS  						else if(fetchFlagName == "FLAGS"){                              bufferedWriter.Write("FLAGS (" + msg.FlagsString + ")");  						}    						#endregion    						#region INTERNALDATE    						// INTERNALDATE  						else if(fetchFlagName == "INTERNALDATE"){  							// INTERNALDATE "date"                              bufferedWriter.Write("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(msg.InternalDate) + "\"");  						}    						#endregion    						#region RFC822    						// RFC822  						else if(fetchFlagName == "RFC822"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// RFC822 {size}  							// msg data                              this.Socket.Write("RFC822 {" + eArgs.MessageSize.ToString() + "}\r\n");  							this.Socket.Write(eArgs.MessageStream);  						}    						#endregion    						#region RFC822.HEADER    						// RFC822.HEADER  						else if(fetchFlagName == "RFC822.HEADER"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// RFC822.HEADER {size}  							// msg header data  						    this.Socket.Write("RFC822.HEADER {" + eArgs.Header.Length + "}\r\n");  							this.Socket.Write(eArgs.Header);	  						}    						#endregion    						#region RFC822.SIZE  						  						// RFC822.SIZE  						else if(fetchFlagName == "RFC822.SIZE"){  							// RFC822.SIZE size                              bufferedWriter.Write("RFC822.SIZE " + msg.Size);  						}    						#endregion  						  						#region RFC822.TEXT    						// RFC822.TEXT  						else if(fetchFlagName == "RFC822.TEXT"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							  							//--- Find body text entity ------------------------------------//                              LumiSoft.Net.Mime.Mime parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);  							MimeEntity bodyTextEntity = null;  							if(parser.MainEntity.ContentType == MediaType_enum.NotSpecified){  								if(parser.MainEntity.DataEncoded != null){  									bodyTextEntity = parser.MainEntity;  								}  							}  							else{  								MimeEntity[] entities = parser.MimeEntities;  								foreach(MimeEntity entity in entities){  									if(entity.ContentType == MediaType_enum.Text_plain){  										bodyTextEntity = entity;  										break;  									}  								}  							}  							//----------------------------------------------------------------//    							// RFC822.TEXT {size}  							// msg text	  							byte[] data = null;  							if(bodyTextEntity != null){  								data = bodyTextEntity.DataEncoded;  							}  							else{  								data = System.Text.Encoding.ASCII.GetBytes("");  							}  									                              this.Socket.Write("RFC822.TEXT {" + data.Length + "}\r\n");  							this.Socket.Write(data);  						}    						#endregion    						#region UID    						// UID  						else if(fetchFlagName == "UID"){                              bufferedWriter.Write("UID " + msg.UID);  						}    						#endregion    						nCount++;    						// Write fetch item separator data " "  						// We don't write it for last item  						if(nCount < fetchFlags.Count){                              bufferedWriter.Write(" ");  						}                         					}                                            					// Write fetch end data ")"                      bufferedWriter.Write(")\r\n");                        // Free event args' close message stream' ... .                      if(eArgs != null){                          eArgs.Dispose();                      }    					// Set message flags here if required or changed  					if(((int)IMAP_MessageFlags.Recent & (int)msg.Flags) != 0 || msgFlagsOr != msg.Flags){  						msg.SetFlags(msg.Flags & ~IMAP_MessageFlags.Recent);    						m_pServer.OnStoreMessageFlags(this'msg);  					}  				}               			  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: for(int i=0;i<m_pSelectedFolder.Messages.Count;i++){  				IMAP_Message msg = m_pSelectedFolder.Messages[i];    				// For UID FETCH we must compare UIDs and for normal FETCH message numbers.   				bool sequenceSetContains = false;  				if(uidFetch){  					sequenceSetContains = sequenceSet.Contains(msg.UID);  				}  				else{  					sequenceSetContains = sequenceSet.Contains(i + 1);  				}    				if(sequenceSetContains){                                  IMAP_eArgs_MessageItems eArgs = null;                      // Get message items only if they are needed.                      if(messageItems != IMAP_MessageItems_enum.None){                          // Raise event GetMessageItems to get all neccesary message itmes                          eArgs = m_pServer.OnGetMessageItems(this'msg'messageItems);                            // Message doesn't exist any more' notify email client.                          if(!eArgs.MessageExists){                              bufferedWriter.Write("* " + msg.SequenceNo + " EXPUNGE");                              m_pSelectedFolder.Messages.Remove(msg);                              i--;                              continue;                          }                          try{                              // Ensure that all requested items were provided.                              eArgs.Validate();                          }                          catch(Exception x){                              m_pServer.OnSysError(x.Message'x);                              this.Socket.WriteLine(cmdTag + " NO Internal IMAP server component error: " + x.Message);                              return;                          }                      }                                                                                  // Write fetch start data "* msgNo FETCH ("                      bufferedWriter.Write("* " + (i + 1) + " FETCH (");  					  					IMAP_MessageFlags msgFlagsOr = msg.Flags;  					// Construct reply here' based on requested fetch items  					int nCount = 0;  					foreach(object[] fetchFlag in fetchFlags){  						string fetchFlagName = (string)fetchFlag[0];    						#region BODY    						// BODY  						if(fetchFlagName == "BODY"){  							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// BODY ()                              bufferedWriter.Write("BODY " + eArgs.BodyStructure);  						}    						#endregion    						#region BODY[]' BODY.PEEK[]    						// BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  						else if(fetchFlagName == "BODY[]"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// object[] structure for BODY[]  							//	fetchFlagName  							//	isPeek  							//	mimePartsSpecifier  							//  originalSectionValue  							//	sectionType  							//	sectionArgs  							//	startPosition  							//	length  							bool   isPeek               = (bool)fetchFlag[1];  							string mimePartsSpecifier   = (string)fetchFlag[2];  							string originalSectionValue = (string)fetchFlag[3];  							string sectionType          = (string)fetchFlag[4];  							string sectionArgs          = (string)fetchFlag[5];  							long   startPosition        = (long)fetchFlag[6];  							long   length               = (long)fetchFlag[7];    							// Difference between BODY[] and BODY.PEEK[] is that .PEEK won't set seen flag  							if(!isPeek){  								// Sets \seen flag  								msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							}  							  							/* Section value:  								""                - entire message								  								HEADER            - message header  								HEADER.FIELDS     - message header fields  								HEADER.FIELDS.NOT - message header fields except requested  								TEXT              - message text  								MIME              - same as header' different response  							*/  							Stream dataStream = null;  							if(sectionType == "" && mimePartsSpecifier == ""){  								dataStream = eArgs.MessageStream;  							}  							else{                                  LumiSoft.Net.Mime.Mime parser = null;                                  try{                                      if(eArgs.MessageStream == null){                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.Header);                                      }                                      else{                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);                                      }                                  }                                                                  // Invalid message' parsing failed                                  catch{                                      parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"BAD Message"'"This is BAD message' mail server failed to parse it !"'"");                                  }  								MimeEntity currentEntity = parser.MainEntity;  								// Specific mime entity requested' get it  								if(mimePartsSpecifier != ""){  									currentEntity = FetchHelper.GetMimeEntity(parser'mimePartsSpecifier);  								}    								if(currentEntity != null){  									if(sectionType == "HEADER"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFields(sectionArgs'currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS.NOT"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFieldsNot(sectionArgs'currentEntity));  									}  									else if(sectionType == "TEXT"){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  									else if(sectionType == "MIME"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == ""){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  								}  							}  							  							// Partial fetch. Reports <origin position> in fetch reply.  							if(startPosition > -1){  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  								}  								else{  									long lengthToSend = length;  									if(lengthToSend == -1){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}  									if((lengthToSend + startPosition) > (dataStream.Length - dataStream.Position)){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}    									if(startPosition >= (dataStream.Length - dataStream.Position)){                                          this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  									}  									else{	  						                this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> {" + lengthToSend + "}\r\n");										                                          dataStream.Position += startPosition;  										this.Socket.Write(dataStream'lengthToSend);  									}  								}  							}  							// Normal fetch  							else{  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "] \"\"\r\n");  								}  								else{                                      this.Socket.Write("BODY[" + originalSectionValue + "] {" + (dataStream.Length - dataStream.Position) + "}\r\n");  									this.Socket.Write(dataStream);  								}  							}  						}    						#endregion    						#region BODYSTRUCTURE    						// BODYSTRUCTURE  						else if(fetchFlagName == "BODYSTRUCTURE"){                              bufferedWriter.Write("BODYSTRUCTURE " + eArgs.BodyStructure);  						}    						#endregion    						#region ENVELOPE    						// ENVELOPE  						else if(fetchFlagName == "ENVELOPE"){                              bufferedWriter.Write("ENVELOPE " + eArgs.Envelope);  						}    						#endregion    						#region FLAGS    						// FLAGS  						else if(fetchFlagName == "FLAGS"){                              bufferedWriter.Write("FLAGS (" + msg.FlagsString + ")");  						}    						#endregion    						#region INTERNALDATE    						// INTERNALDATE  						else if(fetchFlagName == "INTERNALDATE"){  							// INTERNALDATE "date"                              bufferedWriter.Write("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(msg.InternalDate) + "\"");  						}    						#endregion    						#region RFC822    						// RFC822  						else if(fetchFlagName == "RFC822"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// RFC822 {size}  							// msg data                              this.Socket.Write("RFC822 {" + eArgs.MessageSize.ToString() + "}\r\n");  							this.Socket.Write(eArgs.MessageStream);  						}    						#endregion    						#region RFC822.HEADER    						// RFC822.HEADER  						else if(fetchFlagName == "RFC822.HEADER"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// RFC822.HEADER {size}  							// msg header data  						    this.Socket.Write("RFC822.HEADER {" + eArgs.Header.Length + "}\r\n");  							this.Socket.Write(eArgs.Header);	  						}    						#endregion    						#region RFC822.SIZE  						  						// RFC822.SIZE  						else if(fetchFlagName == "RFC822.SIZE"){  							// RFC822.SIZE size                              bufferedWriter.Write("RFC822.SIZE " + msg.Size);  						}    						#endregion  						  						#region RFC822.TEXT    						// RFC822.TEXT  						else if(fetchFlagName == "RFC822.TEXT"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							  							//--- Find body text entity ------------------------------------//                              LumiSoft.Net.Mime.Mime parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);  							MimeEntity bodyTextEntity = null;  							if(parser.MainEntity.ContentType == MediaType_enum.NotSpecified){  								if(parser.MainEntity.DataEncoded != null){  									bodyTextEntity = parser.MainEntity;  								}  							}  							else{  								MimeEntity[] entities = parser.MimeEntities;  								foreach(MimeEntity entity in entities){  									if(entity.ContentType == MediaType_enum.Text_plain){  										bodyTextEntity = entity;  										break;  									}  								}  							}  							//----------------------------------------------------------------//    							// RFC822.TEXT {size}  							// msg text	  							byte[] data = null;  							if(bodyTextEntity != null){  								data = bodyTextEntity.DataEncoded;  							}  							else{  								data = System.Text.Encoding.ASCII.GetBytes("");  							}  									                              this.Socket.Write("RFC822.TEXT {" + data.Length + "}\r\n");  							this.Socket.Write(data);  						}    						#endregion    						#region UID    						// UID  						else if(fetchFlagName == "UID"){                              bufferedWriter.Write("UID " + msg.UID);  						}    						#endregion    						nCount++;    						// Write fetch item separator data " "  						// We don't write it for last item  						if(nCount < fetchFlags.Count){                              bufferedWriter.Write(" ");  						}                         					}                                            					// Write fetch end data ")"                      bufferedWriter.Write(")\r\n");                        // Free event args' close message stream' ... .                      if(eArgs != null){                          eArgs.Dispose();                      }    					// Set message flags here if required or changed  					if(((int)IMAP_MessageFlags.Recent & (int)msg.Flags) != 0 || msgFlagsOr != msg.Flags){  						msg.SetFlags(msg.Flags & ~IMAP_MessageFlags.Recent);    						m_pServer.OnStoreMessageFlags(this'msg);  					}  				}               			  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: for(int i=0;i<m_pSelectedFolder.Messages.Count;i++){  				IMAP_Message msg = m_pSelectedFolder.Messages[i];    				// For UID FETCH we must compare UIDs and for normal FETCH message numbers.   				bool sequenceSetContains = false;  				if(uidFetch){  					sequenceSetContains = sequenceSet.Contains(msg.UID);  				}  				else{  					sequenceSetContains = sequenceSet.Contains(i + 1);  				}    				if(sequenceSetContains){                                  IMAP_eArgs_MessageItems eArgs = null;                      // Get message items only if they are needed.                      if(messageItems != IMAP_MessageItems_enum.None){                          // Raise event GetMessageItems to get all neccesary message itmes                          eArgs = m_pServer.OnGetMessageItems(this'msg'messageItems);                            // Message doesn't exist any more' notify email client.                          if(!eArgs.MessageExists){                              bufferedWriter.Write("* " + msg.SequenceNo + " EXPUNGE");                              m_pSelectedFolder.Messages.Remove(msg);                              i--;                              continue;                          }                          try{                              // Ensure that all requested items were provided.                              eArgs.Validate();                          }                          catch(Exception x){                              m_pServer.OnSysError(x.Message'x);                              this.Socket.WriteLine(cmdTag + " NO Internal IMAP server component error: " + x.Message);                              return;                          }                      }                                                                                  // Write fetch start data "* msgNo FETCH ("                      bufferedWriter.Write("* " + (i + 1) + " FETCH (");  					  					IMAP_MessageFlags msgFlagsOr = msg.Flags;  					// Construct reply here' based on requested fetch items  					int nCount = 0;  					foreach(object[] fetchFlag in fetchFlags){  						string fetchFlagName = (string)fetchFlag[0];    						#region BODY    						// BODY  						if(fetchFlagName == "BODY"){  							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// BODY ()                              bufferedWriter.Write("BODY " + eArgs.BodyStructure);  						}    						#endregion    						#region BODY[]' BODY.PEEK[]    						// BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  						else if(fetchFlagName == "BODY[]"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// object[] structure for BODY[]  							//	fetchFlagName  							//	isPeek  							//	mimePartsSpecifier  							//  originalSectionValue  							//	sectionType  							//	sectionArgs  							//	startPosition  							//	length  							bool   isPeek               = (bool)fetchFlag[1];  							string mimePartsSpecifier   = (string)fetchFlag[2];  							string originalSectionValue = (string)fetchFlag[3];  							string sectionType          = (string)fetchFlag[4];  							string sectionArgs          = (string)fetchFlag[5];  							long   startPosition        = (long)fetchFlag[6];  							long   length               = (long)fetchFlag[7];    							// Difference between BODY[] and BODY.PEEK[] is that .PEEK won't set seen flag  							if(!isPeek){  								// Sets \seen flag  								msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							}  							  							/* Section value:  								""                - entire message								  								HEADER            - message header  								HEADER.FIELDS     - message header fields  								HEADER.FIELDS.NOT - message header fields except requested  								TEXT              - message text  								MIME              - same as header' different response  							*/  							Stream dataStream = null;  							if(sectionType == "" && mimePartsSpecifier == ""){  								dataStream = eArgs.MessageStream;  							}  							else{                                  LumiSoft.Net.Mime.Mime parser = null;                                  try{                                      if(eArgs.MessageStream == null){                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.Header);                                      }                                      else{                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);                                      }                                  }                                                                  // Invalid message' parsing failed                                  catch{                                      parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"BAD Message"'"This is BAD message' mail server failed to parse it !"'"");                                  }  								MimeEntity currentEntity = parser.MainEntity;  								// Specific mime entity requested' get it  								if(mimePartsSpecifier != ""){  									currentEntity = FetchHelper.GetMimeEntity(parser'mimePartsSpecifier);  								}    								if(currentEntity != null){  									if(sectionType == "HEADER"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFields(sectionArgs'currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS.NOT"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFieldsNot(sectionArgs'currentEntity));  									}  									else if(sectionType == "TEXT"){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  									else if(sectionType == "MIME"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == ""){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  								}  							}  							  							// Partial fetch. Reports <origin position> in fetch reply.  							if(startPosition > -1){  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  								}  								else{  									long lengthToSend = length;  									if(lengthToSend == -1){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}  									if((lengthToSend + startPosition) > (dataStream.Length - dataStream.Position)){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}    									if(startPosition >= (dataStream.Length - dataStream.Position)){                                          this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  									}  									else{	  						                this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> {" + lengthToSend + "}\r\n");										                                          dataStream.Position += startPosition;  										this.Socket.Write(dataStream'lengthToSend);  									}  								}  							}  							// Normal fetch  							else{  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "] \"\"\r\n");  								}  								else{                                      this.Socket.Write("BODY[" + originalSectionValue + "] {" + (dataStream.Length - dataStream.Position) + "}\r\n");  									this.Socket.Write(dataStream);  								}  							}  						}    						#endregion    						#region BODYSTRUCTURE    						// BODYSTRUCTURE  						else if(fetchFlagName == "BODYSTRUCTURE"){                              bufferedWriter.Write("BODYSTRUCTURE " + eArgs.BodyStructure);  						}    						#endregion    						#region ENVELOPE    						// ENVELOPE  						else if(fetchFlagName == "ENVELOPE"){                              bufferedWriter.Write("ENVELOPE " + eArgs.Envelope);  						}    						#endregion    						#region FLAGS    						// FLAGS  						else if(fetchFlagName == "FLAGS"){                              bufferedWriter.Write("FLAGS (" + msg.FlagsString + ")");  						}    						#endregion    						#region INTERNALDATE    						// INTERNALDATE  						else if(fetchFlagName == "INTERNALDATE"){  							// INTERNALDATE "date"                              bufferedWriter.Write("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(msg.InternalDate) + "\"");  						}    						#endregion    						#region RFC822    						// RFC822  						else if(fetchFlagName == "RFC822"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// RFC822 {size}  							// msg data                              this.Socket.Write("RFC822 {" + eArgs.MessageSize.ToString() + "}\r\n");  							this.Socket.Write(eArgs.MessageStream);  						}    						#endregion    						#region RFC822.HEADER    						// RFC822.HEADER  						else if(fetchFlagName == "RFC822.HEADER"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// RFC822.HEADER {size}  							// msg header data  						    this.Socket.Write("RFC822.HEADER {" + eArgs.Header.Length + "}\r\n");  							this.Socket.Write(eArgs.Header);	  						}    						#endregion    						#region RFC822.SIZE  						  						// RFC822.SIZE  						else if(fetchFlagName == "RFC822.SIZE"){  							// RFC822.SIZE size                              bufferedWriter.Write("RFC822.SIZE " + msg.Size);  						}    						#endregion  						  						#region RFC822.TEXT    						// RFC822.TEXT  						else if(fetchFlagName == "RFC822.TEXT"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							  							//--- Find body text entity ------------------------------------//                              LumiSoft.Net.Mime.Mime parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);  							MimeEntity bodyTextEntity = null;  							if(parser.MainEntity.ContentType == MediaType_enum.NotSpecified){  								if(parser.MainEntity.DataEncoded != null){  									bodyTextEntity = parser.MainEntity;  								}  							}  							else{  								MimeEntity[] entities = parser.MimeEntities;  								foreach(MimeEntity entity in entities){  									if(entity.ContentType == MediaType_enum.Text_plain){  										bodyTextEntity = entity;  										break;  									}  								}  							}  							//----------------------------------------------------------------//    							// RFC822.TEXT {size}  							// msg text	  							byte[] data = null;  							if(bodyTextEntity != null){  								data = bodyTextEntity.DataEncoded;  							}  							else{  								data = System.Text.Encoding.ASCII.GetBytes("");  							}  									                              this.Socket.Write("RFC822.TEXT {" + data.Length + "}\r\n");  							this.Socket.Write(data);  						}    						#endregion    						#region UID    						// UID  						else if(fetchFlagName == "UID"){                              bufferedWriter.Write("UID " + msg.UID);  						}    						#endregion    						nCount++;    						// Write fetch item separator data " "  						// We don't write it for last item  						if(nCount < fetchFlags.Count){                              bufferedWriter.Write(" ");  						}                         					}                                            					// Write fetch end data ")"                      bufferedWriter.Write(")\r\n");                        // Free event args' close message stream' ... .                      if(eArgs != null){                          eArgs.Dispose();                      }    					// Set message flags here if required or changed  					if(((int)IMAP_MessageFlags.Recent & (int)msg.Flags) != 0 || msgFlagsOr != msg.Flags){  						msg.SetFlags(msg.Flags & ~IMAP_MessageFlags.Recent);    						m_pServer.OnStoreMessageFlags(this'msg);  					}  				}               			  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: for(int i=0;i<m_pSelectedFolder.Messages.Count;i++){  				IMAP_Message msg = m_pSelectedFolder.Messages[i];    				// For UID FETCH we must compare UIDs and for normal FETCH message numbers.   				bool sequenceSetContains = false;  				if(uidFetch){  					sequenceSetContains = sequenceSet.Contains(msg.UID);  				}  				else{  					sequenceSetContains = sequenceSet.Contains(i + 1);  				}    				if(sequenceSetContains){                                  IMAP_eArgs_MessageItems eArgs = null;                      // Get message items only if they are needed.                      if(messageItems != IMAP_MessageItems_enum.None){                          // Raise event GetMessageItems to get all neccesary message itmes                          eArgs = m_pServer.OnGetMessageItems(this'msg'messageItems);                            // Message doesn't exist any more' notify email client.                          if(!eArgs.MessageExists){                              bufferedWriter.Write("* " + msg.SequenceNo + " EXPUNGE");                              m_pSelectedFolder.Messages.Remove(msg);                              i--;                              continue;                          }                          try{                              // Ensure that all requested items were provided.                              eArgs.Validate();                          }                          catch(Exception x){                              m_pServer.OnSysError(x.Message'x);                              this.Socket.WriteLine(cmdTag + " NO Internal IMAP server component error: " + x.Message);                              return;                          }                      }                                                                                  // Write fetch start data "* msgNo FETCH ("                      bufferedWriter.Write("* " + (i + 1) + " FETCH (");  					  					IMAP_MessageFlags msgFlagsOr = msg.Flags;  					// Construct reply here' based on requested fetch items  					int nCount = 0;  					foreach(object[] fetchFlag in fetchFlags){  						string fetchFlagName = (string)fetchFlag[0];    						#region BODY    						// BODY  						if(fetchFlagName == "BODY"){  							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// BODY ()                              bufferedWriter.Write("BODY " + eArgs.BodyStructure);  						}    						#endregion    						#region BODY[]' BODY.PEEK[]    						// BODY[<section>]<<partial>>' BODY.PEEK[<section>]<<partial>>  						else if(fetchFlagName == "BODY[]"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// object[] structure for BODY[]  							//	fetchFlagName  							//	isPeek  							//	mimePartsSpecifier  							//  originalSectionValue  							//	sectionType  							//	sectionArgs  							//	startPosition  							//	length  							bool   isPeek               = (bool)fetchFlag[1];  							string mimePartsSpecifier   = (string)fetchFlag[2];  							string originalSectionValue = (string)fetchFlag[3];  							string sectionType          = (string)fetchFlag[4];  							string sectionArgs          = (string)fetchFlag[5];  							long   startPosition        = (long)fetchFlag[6];  							long   length               = (long)fetchFlag[7];    							// Difference between BODY[] and BODY.PEEK[] is that .PEEK won't set seen flag  							if(!isPeek){  								// Sets \seen flag  								msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							}  							  							/* Section value:  								""                - entire message								  								HEADER            - message header  								HEADER.FIELDS     - message header fields  								HEADER.FIELDS.NOT - message header fields except requested  								TEXT              - message text  								MIME              - same as header' different response  							*/  							Stream dataStream = null;  							if(sectionType == "" && mimePartsSpecifier == ""){  								dataStream = eArgs.MessageStream;  							}  							else{                                  LumiSoft.Net.Mime.Mime parser = null;                                  try{                                      if(eArgs.MessageStream == null){                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.Header);                                      }                                      else{                                          parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);                                      }                                  }                                                                  // Invalid message' parsing failed                                  catch{                                      parser = LumiSoft.Net.Mime.Mime.CreateSimple(new AddressList()'new AddressList()'"BAD Message"'"This is BAD message' mail server failed to parse it !"'"");                                  }  								MimeEntity currentEntity = parser.MainEntity;  								// Specific mime entity requested' get it  								if(mimePartsSpecifier != ""){  									currentEntity = FetchHelper.GetMimeEntity(parser'mimePartsSpecifier);  								}    								if(currentEntity != null){  									if(sectionType == "HEADER"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFields(sectionArgs'currentEntity));  									}  									else if(sectionType == "HEADER.FIELDS.NOT"){  										dataStream = new MemoryStream(FetchHelper.ParseHeaderFieldsNot(sectionArgs'currentEntity));  									}  									else if(sectionType == "TEXT"){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  									else if(sectionType == "MIME"){  										dataStream = new MemoryStream(FetchHelper.GetMimeEntityHeader(currentEntity));  									}  									else if(sectionType == ""){  										try{  											dataStream = new MemoryStream(currentEntity.DataEncoded);  										}  										catch{ // This probably multipart entity' data isn't available  										}  									}  								}  							}  							  							// Partial fetch. Reports <origin position> in fetch reply.  							if(startPosition > -1){  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  								}  								else{  									long lengthToSend = length;  									if(lengthToSend == -1){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}  									if((lengthToSend + startPosition) > (dataStream.Length - dataStream.Position)){  										lengthToSend = (dataStream.Length - dataStream.Position) - startPosition;  									}    									if(startPosition >= (dataStream.Length - dataStream.Position)){                                          this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> \"\"\r\n");  									}  									else{	  						                this.Socket.Write("BODY[" + originalSectionValue + "]<" + startPosition.ToString() + "> {" + lengthToSend + "}\r\n");										                                          dataStream.Position += startPosition;  										this.Socket.Write(dataStream'lengthToSend);  									}  								}  							}  							// Normal fetch  							else{  								if(dataStream == null){                                      this.Socket.Write("BODY[" + originalSectionValue + "] \"\"\r\n");  								}  								else{                                      this.Socket.Write("BODY[" + originalSectionValue + "] {" + (dataStream.Length - dataStream.Position) + "}\r\n");  									this.Socket.Write(dataStream);  								}  							}  						}    						#endregion    						#region BODYSTRUCTURE    						// BODYSTRUCTURE  						else if(fetchFlagName == "BODYSTRUCTURE"){                              bufferedWriter.Write("BODYSTRUCTURE " + eArgs.BodyStructure);  						}    						#endregion    						#region ENVELOPE    						// ENVELOPE  						else if(fetchFlagName == "ENVELOPE"){                              bufferedWriter.Write("ENVELOPE " + eArgs.Envelope);  						}    						#endregion    						#region FLAGS    						// FLAGS  						else if(fetchFlagName == "FLAGS"){                              bufferedWriter.Write("FLAGS (" + msg.FlagsString + ")");  						}    						#endregion    						#region INTERNALDATE    						// INTERNALDATE  						else if(fetchFlagName == "INTERNALDATE"){  							// INTERNALDATE "date"                              bufferedWriter.Write("INTERNALDATE \"" + IMAP_Utils.DateTimeToString(msg.InternalDate) + "\"");  						}    						#endregion    						#region RFC822    						// RFC822  						else if(fetchFlagName == "RFC822"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);    							// RFC822 {size}  							// msg data                              this.Socket.Write("RFC822 {" + eArgs.MessageSize.ToString() + "}\r\n");  							this.Socket.Write(eArgs.MessageStream);  						}    						#endregion    						#region RFC822.HEADER    						// RFC822.HEADER  						else if(fetchFlagName == "RFC822.HEADER"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// RFC822.HEADER {size}  							// msg header data  						    this.Socket.Write("RFC822.HEADER {" + eArgs.Header.Length + "}\r\n");  							this.Socket.Write(eArgs.Header);	  						}    						#endregion    						#region RFC822.SIZE  						  						// RFC822.SIZE  						else if(fetchFlagName == "RFC822.SIZE"){  							// RFC822.SIZE size                              bufferedWriter.Write("RFC822.SIZE " + msg.Size);  						}    						#endregion  						  						#region RFC822.TEXT    						// RFC822.TEXT  						else if(fetchFlagName == "RFC822.TEXT"){                              // Force to write all buffered data.                              bufferedWriter.Flush();    							// Sets \seen flag  							msg.SetFlags(msg.Flags | IMAP_MessageFlags.Seen);  							  							//--- Find body text entity ------------------------------------//                              LumiSoft.Net.Mime.Mime parser = LumiSoft.Net.Mime.Mime.Parse(eArgs.MessageStream);  							MimeEntity bodyTextEntity = null;  							if(parser.MainEntity.ContentType == MediaType_enum.NotSpecified){  								if(parser.MainEntity.DataEncoded != null){  									bodyTextEntity = parser.MainEntity;  								}  							}  							else{  								MimeEntity[] entities = parser.MimeEntities;  								foreach(MimeEntity entity in entities){  									if(entity.ContentType == MediaType_enum.Text_plain){  										bodyTextEntity = entity;  										break;  									}  								}  							}  							//----------------------------------------------------------------//    							// RFC822.TEXT {size}  							// msg text	  							byte[] data = null;  							if(bodyTextEntity != null){  								data = bodyTextEntity.DataEncoded;  							}  							else{  								data = System.Text.Encoding.ASCII.GetBytes("");  							}  									                              this.Socket.Write("RFC822.TEXT {" + data.Length + "}\r\n");  							this.Socket.Write(data);  						}    						#endregion    						#region UID    						// UID  						else if(fetchFlagName == "UID"){                              bufferedWriter.Write("UID " + msg.UID);  						}    						#endregion    						nCount++;    						// Write fetch item separator data " "  						// We don't write it for last item  						if(nCount < fetchFlags.Count){                              bufferedWriter.Write(" ");  						}                         					}                                            					// Write fetch end data ")"                      bufferedWriter.Write(")\r\n");                        // Free event args' close message stream' ... .                      if(eArgs != null){                          eArgs.Dispose();                      }    					// Set message flags here if required or changed  					if(((int)IMAP_MessageFlags.Recent & (int)msg.Flags) != 0 || msgFlagsOr != msg.Flags){  						msg.SetFlags(msg.Flags & ~IMAP_MessageFlags.Recent);    						m_pServer.OnStoreMessageFlags(this'msg);  					}  				}               			  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Fetch,The following statement contains a magic number: this.Socket.WriteLine(cmdTag + " OK FETCH completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds");
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The following statement contains a magic number: if(args.Length != 3){  				this.Socket.WriteLine(cmdTag + " BAD STORE invalid arguments. Syntax: {<command-tag> STORE <sequnce-set> <data-item> (<message-flags>)}");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The following statement contains a magic number: string flags = args[2].ToUpper();
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The following statement contains a magic number: this.Socket.WriteLine(cmdTag + " OK STORE completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds");
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Copy,The following statement contains a magic number: if(args.Length != 2){  				this.Socket.WriteLine(cmdTag + " BAD Invalid arguments");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Uid,The following statement contains a magic number: if(args.Length < 2){ // We must have at least command and message-set or cmd args  				this.Socket.WriteLine(cmdTag + " BAD Invalid arguments");  				return;  			}
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Noop,The following statement contains a magic number: if(m_SelectedMailbox.Length > 0){                  ProcessMailboxChanges();                    this.Socket.WriteLine(cmdTag + " OK NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n");                  			}              else{  			    this.Socket.WriteLine(cmdTag + " OK NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n");              }
Magic Number,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Noop,The following statement contains a magic number: if(m_SelectedMailbox.Length > 0){                  ProcessMailboxChanges();                    this.Socket.WriteLine(cmdTag + " OK NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n");                  			}              else{  			    this.Socket.WriteLine(cmdTag + " OK NOOP Completed in " + ((DateTime.Now.Ticks - startTime) / (decimal)10000000).ToString("f2") + " seconds\r\n");              }
Magic Number,LumiSoft.Net.IMAP.Server,Command_IDLE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Start,The following statement contains a magic number: m_pTimer = new TimerEx(60000'true);
Magic Number,LumiSoft.Net.IMAP.Server,Command_IDLE,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Start,The following statement contains a magic number: m_pSession.Socket.BeginReadLine(ms'1024'ms'new SocketCallBack(this.ReadLineCompleted));
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Open,The following statement contains a magic number: while(true){  				try{  					m_pDbFile = File.Open(fileName'FileMode.Open'FileAccess.ReadWrite'FileShare.ReadWrite);    					break;  				}  				catch(IOException x){  					// Make this because to get rid of "The variable 'x' is declared but never used"  					string dummy = x.Message;    					System.Threading.Thread.Sleep(15);    					// Lock wait time timed out                      if(DateTime.Now > lockExpireTime){  						throw new Exception("Database file is locked and lock wait time expired !");  					}  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Open,The following statement contains a magic number: byte[] freeDataPagesCount = new byte[10];
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Open,The following statement contains a magic number: byte[] dataPageDataAreaSize = new byte[6];
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Open,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] columnInfo = r.ReadLine();  				if(columnInfo == null){  					throw new Exception("Invalid columns data area length !");  				}    				if(columnInfo[0] != '\0'){					  					m_pColumns.Parse(columnInfo);  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: Create(fileName'1000);
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: byte[] versionData = new byte[52];
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: versionData[2] = (byte)'0';
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: versionData[50] = (byte)'\r';
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: versionData[51] = (byte)'\n';
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: byte[] freeDataPagesCount = new byte[10];
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: freeDataPagesCount[8] = (byte)'\r';
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: freeDataPagesCount[9] = (byte)'\n';
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: byte[] dataPageDataAreaSizeB = new byte[6];
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: Array.Copy(ldb_Utils.IntToByte(dataPageDataAreaSize)'0'dataPageDataAreaSizeB'0'4);
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: dataPageDataAreaSizeB[4] = (byte)'\r';
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: dataPageDataAreaSizeB[5] = (byte)'\n';
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] data = new byte[100];  				m_pDbFile.Write(data'0'data.Length);  				m_pDbFile.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] data = new byte[100];  				m_pDbFile.Write(data'0'data.Length);  				m_pDbFile.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,Create,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] data = new byte[100];  				m_pDbFile.Write(data'0'data.Length);  				m_pDbFile.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,LockTable,The following statement contains a magic number: while(true){  				try{  					// We just lock first byte  					m_pDbFile.Lock(0'1);  					m_TableLocked = true;    					break;  				}  				// Catch the IOException generated if the   				// specified part of the file is locked.  				catch(IOException x){  					// Make this because to get rid of "The variable 'x' is declared but never used"  					string dummy = x.Message;    					System.Threading.Thread.Sleep(15);    					// Lock wait time timed out                      if(DateTime.Now > lockExpireTime){  						throw new Exception("Table is locked and lock wait time expired !");  					}  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,NextRecord,The following statement contains a magic number: if(m_pCurrentRecord == null){  				nextRowStartOffset = m_DatapagesStartOffset;  			}  			else{  				nextRowStartOffset = m_pCurrentRecord.DataPage.Pointer + m_DataPageDataAreaSize + 33;  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,NextRecord,The following statement contains a magic number: while(true){  				if(m_FileLength > nextRowStartOffset){  					DataPage dataPage = new DataPage(m_DataPageDataAreaSize'this'nextRowStartOffset);    					// We want datapage with used space  					if(dataPage.Used && dataPage.OwnerDataPagePointer < 1){  						m_pCurrentRecord = new LDB_Record(this'dataPage);  						break;  					}  				}  				else{  					return true;  				}  				  				nextRowStartOffset += m_DataPageDataAreaSize + 33;  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,AppendRecord,The following statement contains a magic number: if(this.TableLocked){  				unlock = false;  			}  			else{  				LockTable(15);  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,DeleteCurrentRecord,The following statement contains a magic number: if(this.TableLocked){  				unlock = false;  			}  			else{  				LockTable(15);  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,DeleteCurrentRecord,The following statement contains a magic number: byte[] freeDataPagesCount = new byte[8];
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,DeleteCurrentRecord,The following statement contains a magic number: SetFilePosition(52);
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,DeleteCurrentRecord,The following statement contains a magic number: SetFilePosition(52);
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,GetDataPages,The following statement contains a magic number: byte[] freeDataPagesCount = new byte[8];
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,GetDataPages,The following statement contains a magic number: SetFilePosition(52);
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,GetDataPages,The following statement contains a magic number: if(nFreeDataPages > 1000 && nFreeDataPages > count){  				long nextDataPagePointer = m_DatapagesStartOffset + 1;  				while(freeDataPages.Count < count){  					DataPage dataPage = new DataPage(m_DataPageDataAreaSize'this'nextDataPagePointer);  					if(!dataPage.Used){  						dataPage.Used = true;  						freeDataPages.Add(dataPage);  					}    					nextDataPagePointer += m_DataPageDataAreaSize + 33;  				}    				// Decrease free data pages count in table header  				SetFilePosition(52);  				ReadFromFile(ldb_Utils.LongToByte(nFreeDataPages - count)'0'8);  			}  			// Just create new data pages  			else{  				for(int i=0;i<count;i++){  					byte[] dataPage = DataPage.CreateDataPage(m_DataPageDataAreaSize'true'0'0'0'new byte[m_DataPageDataAreaSize]);  					GoToFileEnd();  					long dataPageStartPointer = GetFilePosition();  					WriteToFile(dataPage'0'dataPage.Length);    					freeDataPages.Add(new DataPage(m_DataPageDataAreaSize'this'dataPageStartPointer));  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,GetDataPages,The following statement contains a magic number: if(nFreeDataPages > 1000 && nFreeDataPages > count){  				long nextDataPagePointer = m_DatapagesStartOffset + 1;  				while(freeDataPages.Count < count){  					DataPage dataPage = new DataPage(m_DataPageDataAreaSize'this'nextDataPagePointer);  					if(!dataPage.Used){  						dataPage.Used = true;  						freeDataPages.Add(dataPage);  					}    					nextDataPagePointer += m_DataPageDataAreaSize + 33;  				}    				// Decrease free data pages count in table header  				SetFilePosition(52);  				ReadFromFile(ldb_Utils.LongToByte(nFreeDataPages - count)'0'8);  			}  			// Just create new data pages  			else{  				for(int i=0;i<count;i++){  					byte[] dataPage = DataPage.CreateDataPage(m_DataPageDataAreaSize'true'0'0'0'new byte[m_DataPageDataAreaSize]);  					GoToFileEnd();  					long dataPageStartPointer = GetFilePosition();  					WriteToFile(dataPage'0'dataPage.Length);    					freeDataPages.Add(new DataPage(m_DataPageDataAreaSize'this'dataPageStartPointer));  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,GetDataPages,The following statement contains a magic number: if(nFreeDataPages > 1000 && nFreeDataPages > count){  				long nextDataPagePointer = m_DatapagesStartOffset + 1;  				while(freeDataPages.Count < count){  					DataPage dataPage = new DataPage(m_DataPageDataAreaSize'this'nextDataPagePointer);  					if(!dataPage.Used){  						dataPage.Used = true;  						freeDataPages.Add(dataPage);  					}    					nextDataPagePointer += m_DataPageDataAreaSize + 33;  				}    				// Decrease free data pages count in table header  				SetFilePosition(52);  				ReadFromFile(ldb_Utils.LongToByte(nFreeDataPages - count)'0'8);  			}  			// Just create new data pages  			else{  				for(int i=0;i<count;i++){  					byte[] dataPage = DataPage.CreateDataPage(m_DataPageDataAreaSize'true'0'0'0'new byte[m_DataPageDataAreaSize]);  					GoToFileEnd();  					long dataPageStartPointer = GetFilePosition();  					WriteToFile(dataPage'0'dataPage.Length);    					freeDataPages.Add(new DataPage(m_DataPageDataAreaSize'this'dataPageStartPointer));  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,GetDataPages,The following statement contains a magic number: if(nFreeDataPages > 1000 && nFreeDataPages > count){  				long nextDataPagePointer = m_DatapagesStartOffset + 1;  				while(freeDataPages.Count < count){  					DataPage dataPage = new DataPage(m_DataPageDataAreaSize'this'nextDataPagePointer);  					if(!dataPage.Used){  						dataPage.Used = true;  						freeDataPages.Add(dataPage);  					}    					nextDataPagePointer += m_DataPageDataAreaSize + 33;  				}    				// Decrease free data pages count in table header  				SetFilePosition(52);  				ReadFromFile(ldb_Utils.LongToByte(nFreeDataPages - count)'0'8);  			}  			// Just create new data pages  			else{  				for(int i=0;i<count;i++){  					byte[] dataPage = DataPage.CreateDataPage(m_DataPageDataAreaSize'true'0'0'0'new byte[m_DataPageDataAreaSize]);  					GoToFileEnd();  					long dataPageStartPointer = GetFilePosition();  					WriteToFile(dataPage'0'dataPage.Length);    					freeDataPages.Add(new DataPage(m_DataPageDataAreaSize'this'dataPageStartPointer));  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,AddColumn,The following statement contains a magic number: m_pDbFile.Position = 68;
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,AddColumn,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] columnInfo = r.ReadLine();  				if(columnInfo == null){  					throw new Exception("Invalid columns data area length !");  				}    				// We found unused column data area  				if(columnInfo[0] == '\0'){  					freeColumnPosition = m_pDbFile.Position;  					break;  				}  			}
Magic Number,LumiSoft.Data.lsDB,DbFile,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\DbFile.cs,AddColumn,The following statement contains a magic number: if(freeColumnPosition != -1){  				// TODO: If there is data ???    				// Move to row start  				SetFilePosition(GetFilePosition() - 102);    				// Store column  				byte[] columnData = column.ToColumnInfo();  				WriteToFile(columnData'0'columnData.Length);  			}  			else{  				throw new Exception("Couldn't find free column space ! ");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,LDB_DataColumn,The following statement contains a magic number: if(dataType == LDB_DataType.Bool){                  m_ColumSize = 1;              }              else if(dataType == LDB_DataType.DateTime){                  m_ColumSize = 13;              }              else if(dataType == LDB_DataType.Int){                  m_ColumSize = 4;              }              else if(dataType == LDB_DataType.Long){                  m_ColumSize = 8;              }              else{                  m_ColumSize = columnSize;              }
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,LDB_DataColumn,The following statement contains a magic number: if(dataType == LDB_DataType.Bool){                  m_ColumSize = 1;              }              else if(dataType == LDB_DataType.DateTime){                  m_ColumSize = 13;              }              else if(dataType == LDB_DataType.Int){                  m_ColumSize = 4;              }              else if(dataType == LDB_DataType.Long){                  m_ColumSize = 8;              }              else{                  m_ColumSize = columnSize;              }
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,LDB_DataColumn,The following statement contains a magic number: if(dataType == LDB_DataType.Bool){                  m_ColumSize = 1;              }              else if(dataType == LDB_DataType.DateTime){                  m_ColumSize = 13;              }              else if(dataType == LDB_DataType.Int){                  m_ColumSize = 4;              }              else if(dataType == LDB_DataType.Long){                  m_ColumSize = 8;              }              else{                  m_ColumSize = columnSize;              }
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: if(columnData.Length != 102){  				throw new Exception("Invalid column data length '" + columnData.Length.ToString() + "' !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: m_ColumSize = (columnData[1] << 24) | (columnData[2] << 16) | (columnData[3] << 8) | (columnData[4] << 0);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: m_ColumSize = (columnData[1] << 24) | (columnData[2] << 16) | (columnData[3] << 8) | (columnData[4] << 0);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: m_ColumSize = (columnData[1] << 24) | (columnData[2] << 16) | (columnData[3] << 8) | (columnData[4] << 0);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: m_ColumSize = (columnData[1] << 24) | (columnData[2] << 16) | (columnData[3] << 8) | (columnData[4] << 0);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: m_ColumSize = (columnData[1] << 24) | (columnData[2] << 16) | (columnData[3] << 8) | (columnData[4] << 0);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: m_ColumSize = (columnData[1] << 24) | (columnData[2] << 16) | (columnData[3] << 8) | (columnData[4] << 0);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: byte[] columnName = new byte[50];
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: Array.Copy(columnData'50'columnName'0'columnName.Length);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: if(m_DataType == LDB_DataType.Bool){                  m_ColumSize = 1;              }              else if(m_DataType == LDB_DataType.DateTime){                  m_ColumSize = 13;              }              else if(m_DataType == LDB_DataType.Int){                  m_ColumSize = 4;              }              else if(m_DataType == LDB_DataType.Long){                  m_ColumSize = 8;              }
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: if(m_DataType == LDB_DataType.Bool){                  m_ColumSize = 1;              }              else if(m_DataType == LDB_DataType.DateTime){                  m_ColumSize = 13;              }              else if(m_DataType == LDB_DataType.Int){                  m_ColumSize = 4;              }              else if(m_DataType == LDB_DataType.Long){                  m_ColumSize = 8;              }
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,Parse,The following statement contains a magic number: if(m_DataType == LDB_DataType.Bool){                  m_ColumSize = 1;              }              else if(m_DataType == LDB_DataType.DateTime){                  m_ColumSize = 13;              }              else if(m_DataType == LDB_DataType.Int){                  m_ColumSize = 4;              }              else if(m_DataType == LDB_DataType.Long){                  m_ColumSize = 8;              }
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: byte[] columnData = new byte[102];
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[1] = (byte)((m_ColumSize & (1 << 24)) >> 24);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[1] = (byte)((m_ColumSize & (1 << 24)) >> 24);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[2] = (byte)((m_ColumSize & (1 << 16)) >> 16);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[2] = (byte)((m_ColumSize & (1 << 16)) >> 16);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[2] = (byte)((m_ColumSize & (1 << 16)) >> 16);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[3] = (byte)((m_ColumSize & (1 << 8)) >> 8);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[3] = (byte)((m_ColumSize & (1 << 8)) >> 8);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[3] = (byte)((m_ColumSize & (1 << 8)) >> 8);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[4] = (byte)((m_ColumSize & (1 << 0)) >> 0);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: Array.Copy(columnName'0'columnData'50'columnName.Length);
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[100] = (byte)'\r';
Magic Number,LumiSoft.Data.lsDB,LDB_DataColumn,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_DataColumn.cs,ToColumnInfo,The following statement contains a magic number: columnData[101] = (byte)'\n';
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,CreateRecord,The following statement contains a magic number: for(int i=0;i<rowByteValues.Count;i++){  				msRecord.Write(ldb_Utils.IntToByte(((byte[])rowByteValues[i]).Length)'0'4);  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ParseRowInfo,The following statement contains a magic number: byte[] columnValueSizes = m_pDataPage.ReadData(0'4 * m_pOwnerDb.Columns.Count);
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ParseRowInfo,The following statement contains a magic number: for(int i=0;i<m_pOwnerDb.Columns.Count;i++){  				m_ColumnValueSize[i] = ldb_Utils.ByteToInt(columnValueSizes'i * 4);  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,GetColumnData,The following statement contains a magic number: int columnStartOffset = 4 * m_pOwnerDb.Columns.Count;
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,UpdateRecord,The following statement contains a magic number: if(m_pOwnerDb.TableLocked){  				unlock = false;  			}  			else{  				m_pOwnerDb.LockTable(15);  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				if(val.GetType() != typeof(bool)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of bool' but value contains '" +val.GetType().ToString() + "' !");  				}    				return new byte[]{Convert.ToByte((bool)val)};  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				if(val.GetType() != typeof(DateTime)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of DateTime' but value contains '" + val.GetType().ToString() + "' !");  				}    				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/    				DateTime d = (DateTime)val;  				byte[] dateBytes = new byte[13];  				// day  				dateBytes[0] = (byte)d.Day;  				// month  				dateBytes[1] = (byte)d.Month;  				// year  				Array.Copy(ldb_Utils.IntToByte(d.Year)'0'dateBytes'2'4);  				// hour  				dateBytes[6] = (byte)d.Hour;  				// minute  				dateBytes[7] = (byte)d.Minute;  				// second  				dateBytes[8] = (byte)d.Second;    				return dateBytes;  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				if(val.GetType() != typeof(long)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Long' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.LongToByte((long)val);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				if(val.GetType() != typeof(int)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Int' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.IntToByte((int)val);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				if(val.GetType() != typeof(string)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of String' but value contains '" + val.GetType().ToString() + "' !");  				}    				return System.Text.Encoding.UTF8.GetBytes(val.ToString());  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				if(val.GetType() != typeof(bool)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of bool' but value contains '" +val.GetType().ToString() + "' !");  				}    				return new byte[]{Convert.ToByte((bool)val)};  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				if(val.GetType() != typeof(DateTime)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of DateTime' but value contains '" + val.GetType().ToString() + "' !");  				}    				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/    				DateTime d = (DateTime)val;  				byte[] dateBytes = new byte[13];  				// day  				dateBytes[0] = (byte)d.Day;  				// month  				dateBytes[1] = (byte)d.Month;  				// year  				Array.Copy(ldb_Utils.IntToByte(d.Year)'0'dateBytes'2'4);  				// hour  				dateBytes[6] = (byte)d.Hour;  				// minute  				dateBytes[7] = (byte)d.Minute;  				// second  				dateBytes[8] = (byte)d.Second;    				return dateBytes;  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				if(val.GetType() != typeof(long)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Long' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.LongToByte((long)val);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				if(val.GetType() != typeof(int)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Int' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.IntToByte((int)val);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				if(val.GetType() != typeof(string)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of String' but value contains '" + val.GetType().ToString() + "' !");  				}    				return System.Text.Encoding.UTF8.GetBytes(val.ToString());  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				if(val.GetType() != typeof(bool)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of bool' but value contains '" +val.GetType().ToString() + "' !");  				}    				return new byte[]{Convert.ToByte((bool)val)};  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				if(val.GetType() != typeof(DateTime)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of DateTime' but value contains '" + val.GetType().ToString() + "' !");  				}    				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/    				DateTime d = (DateTime)val;  				byte[] dateBytes = new byte[13];  				// day  				dateBytes[0] = (byte)d.Day;  				// month  				dateBytes[1] = (byte)d.Month;  				// year  				Array.Copy(ldb_Utils.IntToByte(d.Year)'0'dateBytes'2'4);  				// hour  				dateBytes[6] = (byte)d.Hour;  				// minute  				dateBytes[7] = (byte)d.Minute;  				// second  				dateBytes[8] = (byte)d.Second;    				return dateBytes;  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				if(val.GetType() != typeof(long)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Long' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.LongToByte((long)val);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				if(val.GetType() != typeof(int)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Int' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.IntToByte((int)val);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				if(val.GetType() != typeof(string)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of String' but value contains '" + val.GetType().ToString() + "' !");  				}    				return System.Text.Encoding.UTF8.GetBytes(val.ToString());  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				if(val.GetType() != typeof(bool)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of bool' but value contains '" +val.GetType().ToString() + "' !");  				}    				return new byte[]{Convert.ToByte((bool)val)};  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				if(val.GetType() != typeof(DateTime)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of DateTime' but value contains '" + val.GetType().ToString() + "' !");  				}    				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/    				DateTime d = (DateTime)val;  				byte[] dateBytes = new byte[13];  				// day  				dateBytes[0] = (byte)d.Day;  				// month  				dateBytes[1] = (byte)d.Month;  				// year  				Array.Copy(ldb_Utils.IntToByte(d.Year)'0'dateBytes'2'4);  				// hour  				dateBytes[6] = (byte)d.Hour;  				// minute  				dateBytes[7] = (byte)d.Minute;  				// second  				dateBytes[8] = (byte)d.Second;    				return dateBytes;  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				if(val.GetType() != typeof(long)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Long' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.LongToByte((long)val);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				if(val.GetType() != typeof(int)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Int' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.IntToByte((int)val);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				if(val.GetType() != typeof(string)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of String' but value contains '" + val.GetType().ToString() + "' !");  				}    				return System.Text.Encoding.UTF8.GetBytes(val.ToString());  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				if(val.GetType() != typeof(bool)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of bool' but value contains '" +val.GetType().ToString() + "' !");  				}    				return new byte[]{Convert.ToByte((bool)val)};  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				if(val.GetType() != typeof(DateTime)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of DateTime' but value contains '" + val.GetType().ToString() + "' !");  				}    				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/    				DateTime d = (DateTime)val;  				byte[] dateBytes = new byte[13];  				// day  				dateBytes[0] = (byte)d.Day;  				// month  				dateBytes[1] = (byte)d.Month;  				// year  				Array.Copy(ldb_Utils.IntToByte(d.Year)'0'dateBytes'2'4);  				// hour  				dateBytes[6] = (byte)d.Hour;  				// minute  				dateBytes[7] = (byte)d.Minute;  				// second  				dateBytes[8] = (byte)d.Second;    				return dateBytes;  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				if(val.GetType() != typeof(long)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Long' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.LongToByte((long)val);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				if(val.GetType() != typeof(int)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Int' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.IntToByte((int)val);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				if(val.GetType() != typeof(string)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of String' but value contains '" + val.GetType().ToString() + "' !");  				}    				return System.Text.Encoding.UTF8.GetBytes(val.ToString());  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertToInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				if(val.GetType() != typeof(bool)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of bool' but value contains '" +val.GetType().ToString() + "' !");  				}    				return new byte[]{Convert.ToByte((bool)val)};  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				if(val.GetType() != typeof(DateTime)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of DateTime' but value contains '" + val.GetType().ToString() + "' !");  				}    				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/    				DateTime d = (DateTime)val;  				byte[] dateBytes = new byte[13];  				// day  				dateBytes[0] = (byte)d.Day;  				// month  				dateBytes[1] = (byte)d.Month;  				// year  				Array.Copy(ldb_Utils.IntToByte(d.Year)'0'dateBytes'2'4);  				// hour  				dateBytes[6] = (byte)d.Hour;  				// minute  				dateBytes[7] = (byte)d.Minute;  				// second  				dateBytes[8] = (byte)d.Second;    				return dateBytes;  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				if(val.GetType() != typeof(long)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Long' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.LongToByte((long)val);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				if(val.GetType() != typeof(int)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of Int' but value contains '" + val.GetType().ToString() + "' !");  				}    				return ldb_Utils.IntToByte((int)val);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				if(val.GetType() != typeof(string)){  					throw new Exception("Column '" + coulmn.ColumnName + "' requires datatype of String' but value contains '" + val.GetType().ToString() + "' !");  				}    				return System.Text.Encoding.UTF8.GetBytes(val.ToString());  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertFromInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[0]);  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				byte[] dateBytes = new byte[13];  				// day  				int day = val[0];  				// month  				int month = val[1];  				// year  				int year = ldb_Utils.ByteToInt(val'2);  				// hour  				int hour = val[6];  				// minute  				int minute = val[7];  				// second  				int second = val[8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'0);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'0);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertFromInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[0]);  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				byte[] dateBytes = new byte[13];  				// day  				int day = val[0];  				// month  				int month = val[1];  				// year  				int year = ldb_Utils.ByteToInt(val'2);  				// hour  				int hour = val[6];  				// minute  				int minute = val[7];  				// second  				int second = val[8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'0);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'0);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertFromInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[0]);  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				byte[] dateBytes = new byte[13];  				// day  				int day = val[0];  				// month  				int month = val[1];  				// year  				int year = ldb_Utils.ByteToInt(val'2);  				// hour  				int hour = val[6];  				// minute  				int minute = val[7];  				// second  				int second = val[8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'0);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'0);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertFromInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[0]);  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				byte[] dateBytes = new byte[13];  				// day  				int day = val[0];  				// month  				int month = val[1];  				// year  				int year = ldb_Utils.ByteToInt(val'2);  				// hour  				int hour = val[6];  				// minute  				int minute = val[7];  				// second  				int second = val[8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'0);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'0);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,LDB_Record,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\LDB_Record.cs,ConvertFromInternalData,The following statement contains a magic number: if(coulmn.DataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[0]);  			}  			else if(coulmn.DataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				byte[] dateBytes = new byte[13];  				// day  				int day = val[0];  				// month  				int month = val[1];  				// year  				int year = ldb_Utils.ByteToInt(val'2);  				// hour  				int hour = val[6];  				// minute  				int minute = val[7];  				// second  				int second = val[8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(coulmn.DataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'0);  			}								  			else if(coulmn.DataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'0);  			}  			else if(coulmn.DataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthRecord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthRecord.cs,ConvertFromInternalData,The following statement contains a magic number: if(dataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[offset + 0]);  			}  			else if(dataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				// day  				int day = val[offset + 0];  				// month  				int month = val[offset + 1];  				// year  				int year = ldb_Utils.ByteToInt(val'offset + 2);  				// hour  				int hour = val[offset + 6];  				// minute  				int minute = val[offset + 7];  				// second  				int second = val[offset + 8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(dataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'offset + 0);  			}								  			else if(dataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'offset + 0);  			}  			else if(dataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val'offset'length);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthRecord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthRecord.cs,ConvertFromInternalData,The following statement contains a magic number: if(dataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[offset + 0]);  			}  			else if(dataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				// day  				int day = val[offset + 0];  				// month  				int month = val[offset + 1];  				// year  				int year = ldb_Utils.ByteToInt(val'offset + 2);  				// hour  				int hour = val[offset + 6];  				// minute  				int minute = val[offset + 7];  				// second  				int second = val[offset + 8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(dataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'offset + 0);  			}								  			else if(dataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'offset + 0);  			}  			else if(dataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val'offset'length);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthRecord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthRecord.cs,ConvertFromInternalData,The following statement contains a magic number: if(dataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[offset + 0]);  			}  			else if(dataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				// day  				int day = val[offset + 0];  				// month  				int month = val[offset + 1];  				// year  				int year = ldb_Utils.ByteToInt(val'offset + 2);  				// hour  				int hour = val[offset + 6];  				// minute  				int minute = val[offset + 7];  				// second  				int second = val[offset + 8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(dataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'offset + 0);  			}								  			else if(dataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'offset + 0);  			}  			else if(dataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val'offset'length);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthRecord,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthRecord.cs,ConvertFromInternalData,The following statement contains a magic number: if(dataType == LDB_DataType.Bool){  				return Convert.ToBoolean(val[offset + 0]);  			}  			else if(dataType == LDB_DataType.DateTime){  				/* Data structure  					1 byte day  					1 byte month  					4 byte year (int)  					1 byte hour  					1 byte minute  					1 byte second  				*/  				  				// day  				int day = val[offset + 0];  				// month  				int month = val[offset + 1];  				// year  				int year = ldb_Utils.ByteToInt(val'offset + 2);  				// hour  				int hour = val[offset + 6];  				// minute  				int minute = val[offset + 7];  				// second  				int second = val[offset + 8];    				return new DateTime(year'month'day'hour'minute'second);  			}				  			else if(dataType == LDB_DataType.Long){  				return ldb_Utils.ByteToLong(val'offset + 0);  			}								  			else if(dataType == LDB_DataType.Int){  				return ldb_Utils.ByteToInt(val'offset + 0);  			}  			else if(dataType == LDB_DataType.String){  				return System.Text.Encoding.UTF8.GetString(val'offset'length);  			}  			else{  				throw new Exception("Invalid column data type' never must reach here !");  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: while(true){  				try{  					m_pDbFile = File.Open(fileName'FileMode.Open'FileAccess.ReadWrite'FileShare.ReadWrite);    					break;  				}  				catch(IOException x){                      if(!File.Exists(fileName)){                          throw new Exception("Specified database file '" + fileName + "' does not exists !");                      }    					// Make this because to get rid of "The variable 'x' is declared but never used"  					string dummy = x.Message;    					System.Threading.Thread.Sleep(15);    					// Lock wait time timed out                      if(DateTime.Now > lockExpireTime){  						throw new Exception("Database file is locked and lock wait time expired !");  					}  				}  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: byte[] version = new byte[52];
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: byte[] freeRows = new byte[6];
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: long currentColumnOffset = 58;
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] columnInfo = new byte[102];                  				if(ReadFromFile(currentColumnOffset'columnInfo'0'columnInfo.Length) != columnInfo.Length){  					throw new Exception("Invalid columns data area length !");  				}    				if(columnInfo[0] != '\0'){					  					m_pColumns.Parse(columnInfo);  				}                    currentColumnOffset += 102;  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] columnInfo = new byte[102];                  				if(ReadFromFile(currentColumnOffset'columnInfo'0'columnInfo.Length) != columnInfo.Length){  					throw new Exception("Invalid columns data area length !");  				}    				if(columnInfo[0] != '\0'){					  					m_pColumns.Parse(columnInfo);  				}                    currentColumnOffset += 102;  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] columnInfo = new byte[102];                  				if(ReadFromFile(currentColumnOffset'columnInfo'0'columnInfo.Length) != columnInfo.Length){  					throw new Exception("Invalid columns data area length !");  				}    				if(columnInfo[0] != '\0'){					  					m_pColumns.Parse(columnInfo);  				}                    currentColumnOffset += 102;  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Open,The following statement contains a magic number: m_RowLength = 1 + 2;
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: byte[] versionData = new byte[52];
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: versionData[2] = (byte)'0';
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: versionData[50] = (byte)'\r';
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: versionData[51] = (byte)'\n';
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: byte[] freeRows = new byte[6];
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: freeRows[4] = (byte)'\r';
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: freeRows[5] = (byte)'\n';
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] data = new byte[100];  				m_pDbFile.Write(data'0'data.Length);  				m_pDbFile.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] data = new byte[100];  				m_pDbFile.Write(data'0'data.Length);  				m_pDbFile.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: for(int i=0;i<100;i++){  				byte[] data = new byte[100];  				m_pDbFile.Write(data'0'data.Length);  				m_pDbFile.Write(new byte[]{(int)'\r''(int)'\n'}'0'2);  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,Create,The following statement contains a magic number: m_RowLength = 1 + 2;
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,LockTable,The following statement contains a magic number: while(true){  				try{  					// We just lock first byte  					m_pDbFile.Lock(0'1);  					m_TableLocked = true;    					break;  				}  				// Catch the IOException generated if the   				// specified part of the file is locked.  				catch(IOException x){  					// Make this because to get rid of "The variable 'x' is declared but never used"  					string dummy = x.Message;    					System.Threading.Thread.Sleep(15);    					// Lock wait time timed out                      if(DateTime.Now > lockExpireTime){  						throw new Exception("Table is locked and lock wait time expired !");  					}  				}  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: if(this.TableLocked){  				unlock = false;  			}  			else{  				LockTable(15);  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: int rowLength = 1 + 2;
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: record[rowLength - 2] = (int)'\r';
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: byte[] freeRowsBuffer = new byte[4];
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: ReadFromFile(52'freeRowsBuffer'0'freeRowsBuffer.Length);
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: if(freeRows > 100){                  //--- Find free record ---------------------------------------------------//  			    long nextRowStartOffset = m_RowsStartOffset;                  long rowOffset = 0;                    byte[] rowData = new byte[m_RowLength];  	    		while(true){                      ReadFromFile(nextRowStartOffset'rowData'0'm_RowLength);                        // We want used row                      if(rowData[0] == 'f'){                          rowOffset = nextRowStartOffset;                          break;                      }  				  				    nextRowStartOffset += m_RowLength;  			    }  			    //-------------------------------------------------------------------------//                    // Write new record to file                  WriteToFile(rowOffset'record'0'record.Length);                    // Update free rows count                  WriteToFile(52'ldb_Utils.IntToByte(freeRows - 1)'0'4);              }              // There are few empty rows' just append it              else{                  AppendToFile(record'0'record.Length);              }
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: if(freeRows > 100){                  //--- Find free record ---------------------------------------------------//  			    long nextRowStartOffset = m_RowsStartOffset;                  long rowOffset = 0;                    byte[] rowData = new byte[m_RowLength];  	    		while(true){                      ReadFromFile(nextRowStartOffset'rowData'0'm_RowLength);                        // We want used row                      if(rowData[0] == 'f'){                          rowOffset = nextRowStartOffset;                          break;                      }  				  				    nextRowStartOffset += m_RowLength;  			    }  			    //-------------------------------------------------------------------------//                    // Write new record to file                  WriteToFile(rowOffset'record'0'record.Length);                    // Update free rows count                  WriteToFile(52'ldb_Utils.IntToByte(freeRows - 1)'0'4);              }              // There are few empty rows' just append it              else{                  AppendToFile(record'0'record.Length);              }
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AppendRecord,The following statement contains a magic number: if(freeRows > 100){                  //--- Find free record ---------------------------------------------------//  			    long nextRowStartOffset = m_RowsStartOffset;                  long rowOffset = 0;                    byte[] rowData = new byte[m_RowLength];  	    		while(true){                      ReadFromFile(nextRowStartOffset'rowData'0'm_RowLength);                        // We want used row                      if(rowData[0] == 'f'){                          rowOffset = nextRowStartOffset;                          break;                      }  				  				    nextRowStartOffset += m_RowLength;  			    }  			    //-------------------------------------------------------------------------//                    // Write new record to file                  WriteToFile(rowOffset'record'0'record.Length);                    // Update free rows count                  WriteToFile(52'ldb_Utils.IntToByte(freeRows - 1)'0'4);              }              // There are few empty rows' just append it              else{                  AppendToFile(record'0'record.Length);              }
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,DeleteCurrentRecord,The following statement contains a magic number: if(this.TableLocked){  				unlock = false;  			}  			else{  				LockTable(15);  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,DeleteCurrentRecord,The following statement contains a magic number: data[m_RowLength - 2] = (byte)'\r';
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,DeleteCurrentRecord,The following statement contains a magic number: byte[] freeRowsBuffer = new byte[4];
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,DeleteCurrentRecord,The following statement contains a magic number: ReadFromFile(52'freeRowsBuffer'0'freeRowsBuffer.Length);
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,DeleteCurrentRecord,The following statement contains a magic number: WriteToFile(52'ldb_Utils.IntToByte(freeRows + 1)'0'4);
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,DeleteCurrentRecord,The following statement contains a magic number: WriteToFile(52'ldb_Utils.IntToByte(freeRows + 1)'0'4);
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AddColumn,The following statement contains a magic number: for(int i=0;i<100;i++){                  byte[] columnInfo = new byte[102];                  				if(ReadFromFile(currentColumnOffset'columnInfo'0'columnInfo.Length) != columnInfo.Length){  					throw new Exception("Invalid columns data area length !");  				}    				// We found unused column data area  				if(columnInfo[0] == '\0'){  					freeColumnPosition = currentColumnOffset - 102;  					break;  				}                    currentColumnOffset += 102;  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AddColumn,The following statement contains a magic number: for(int i=0;i<100;i++){                  byte[] columnInfo = new byte[102];                  				if(ReadFromFile(currentColumnOffset'columnInfo'0'columnInfo.Length) != columnInfo.Length){  					throw new Exception("Invalid columns data area length !");  				}    				// We found unused column data area  				if(columnInfo[0] == '\0'){  					freeColumnPosition = currentColumnOffset - 102;  					break;  				}                    currentColumnOffset += 102;  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AddColumn,The following statement contains a magic number: for(int i=0;i<100;i++){                  byte[] columnInfo = new byte[102];                  				if(ReadFromFile(currentColumnOffset'columnInfo'0'columnInfo.Length) != columnInfo.Length){  					throw new Exception("Invalid columns data area length !");  				}    				// We found unused column data area  				if(columnInfo[0] == '\0'){  					freeColumnPosition = currentColumnOffset - 102;  					break;  				}                    currentColumnOffset += 102;  			}
Magic Number,LumiSoft.Data.lsDB,lsDB_FixedLengthTable,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\lsDB_FixedLengthTable.cs,AddColumn,The following statement contains a magic number: for(int i=0;i<100;i++){                  byte[] columnInfo = new byte[102];                  				if(ReadFromFile(currentColumnOffset'columnInfo'0'columnInfo.Length) != columnInfo.Length){  					throw new Exception("Invalid columns data area length !");  				}    				// We found unused column data area  				if(columnInfo[0] == '\0'){  					freeColumnPosition = currentColumnOffset - 102;  					break;  				}                    currentColumnOffset += 102;  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: byte[] dataPageInfo = new byte[33];
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: if(dataPageInfo[2] == (byte)'u'){  				m_Used = true;  			}  			else{  				m_Used = false;  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: m_OwnerID = ldb_Utils.ByteToLong(dataPageInfo'3);
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: m_OwnerDataPagePointer = ldb_Utils.ByteToLong(dataPageInfo'11);
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: m_NextDataPagePointer = ldb_Utils.ByteToLong(dataPageInfo'19);
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: m_StoredDataLength = ldb_Utils.ByteToInt(dataPageInfo'27);
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: if(dataPageInfo[31] != (byte)'\r'){  				throw new Exception("Not right data page startOffset' or invalid data page <CR> is expected but is '" + (int)dataPageInfo[31] + "' !");  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: if(dataPageInfo[31] != (byte)'\r'){  				throw new Exception("Not right data page startOffset' or invalid data page <CR> is expected but is '" + (int)dataPageInfo[31] + "' !");  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: if(dataPageInfo[32] != (byte)'\n'){  				throw new Exception("Not right data page startOffset' or invalid data page <LF> is expected but is '" + (int)dataPageInfo[32] + "' !");  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,DataPage,The following statement contains a magic number: if(dataPageInfo[32] != (byte)'\n'){  				throw new Exception("Not right data page startOffset' or invalid data page <LF> is expected but is '" + (int)dataPageInfo[32] + "' !");  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: byte[] dataPage = new byte[dataPageDataAreaSize + 33];
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,CreateDataPage,The following statement contains a magic number: if(used){  				// used  				dataPage[2] = (byte)'u';  				// owner object id  				Array.Copy(ldb_Utils.LongToByte(ownerID)'0'dataPage'3'8);  				// owner data page pointer  				Array.Copy(ldb_Utils.LongToByte(ownerDataPagePointer)'0'dataPage'11'8);  				// continuing data page pointer  				Array.Copy(ldb_Utils.LongToByte(nextDataPagePointer)'0'dataPage'19'8);  				// stored data length in data area  				Array.Copy(ldb_Utils.IntToByte(data.Length)'0'dataPage'27'4);  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  				// data area  				Array.Copy(data'0'dataPage'33'data.Length);  			}  			else{  				// used  				dataPage[2] = (byte)'f';  				// CRLF  				dataPage[31] = (byte)'\r';  				dataPage[32] = (byte)'\n';  			}
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,WriteData,The following statement contains a magic number: m_pOwnerDB.SetFilePosition(m_StartPointer + 27);
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,WriteData,The following statement contains a magic number: m_pOwnerDB.WriteToFile(ldb_Utils.IntToByte(data.Length)'0'4);
Magic Number,LumiSoft.Data.lsDB,DataPage,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_DataPage.cs,WriteData,The following statement contains a magic number: m_pOwnerDB.SetFilePosition(m_StartPointer + 33);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: byte[] retVal = new byte[8];
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[0] = (byte)((val >> 56) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[1] = (byte)((val >> 48) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[2] = (byte)((val >> 40) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[2] = (byte)((val >> 40) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[3] = (byte)((val >> 32) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[3] = (byte)((val >> 32) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[4] = (byte)((val >> 24) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[4] = (byte)((val >> 24) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[5] = (byte)((val >> 16) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[5] = (byte)((val >> 16) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[6] = (byte)((val >> 8) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[6] = (byte)((val >> 8) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,LongToByte,The following statement contains a magic number: retVal[7] = (byte)((val >> 0) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 0] << 56;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 1] << 48;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 2] << 40;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 2] << 40;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 3] << 32;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 3] << 32;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 4] << 24;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 4] << 24;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 5] << 16;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 5] << 16;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 6] << 8;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 6] << 8;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToLong,The following statement contains a magic number: retVal |= (long)array[offset + 7] << 0;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,IntToByte,The following statement contains a magic number: byte[] retVal = new byte[4];
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,IntToByte,The following statement contains a magic number: retVal[0] = (byte)((val >> 24) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,IntToByte,The following statement contains a magic number: retVal[1] = (byte)((val >> 16) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,IntToByte,The following statement contains a magic number: retVal[2] = (byte)((val >> 8) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,IntToByte,The following statement contains a magic number: retVal[2] = (byte)((val >> 8) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,IntToByte,The following statement contains a magic number: retVal[3] = (byte)((val >> 0) & 0xFF);
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToInt,The following statement contains a magic number: retVal |= (int)array[offset + 0] << 24;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToInt,The following statement contains a magic number: retVal |= (int)array[offset + 1] << 16;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToInt,The following statement contains a magic number: retVal |= (int)array[offset + 2] << 8;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToInt,The following statement contains a magic number: retVal |= (int)array[offset + 2] << 8;
Magic Number,LumiSoft.Data.lsDB,ldb_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\Data\_ldb_Utils.cs,ByteToInt,The following statement contains a magic number: retVal |= (int)array[offset + 3] << 0;
Magic Number,LumiSoft.Net.FTP.Server,FTP_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Server.cs,FTP_Server,The following statement contains a magic number: this.BindInfo = new IPBindInfo[]{new IPBindInfo(""'IPAddress.Any'21'SslMode.None'null)};
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,OnError,The following statement contains a magic number: try{  				if(x is SocketException){  					SocketException xs = (SocketException)x;    					// Client disconnected without shutting down  					if(xs.ErrorCode == 10054 || xs.ErrorCode == 10053){  						if(m_pServer.LogCommands){  						//	m_pLogWriter.AddEntry("Client aborted/disconnected"'this.SessionID'this.RemoteEndPoint.Address.ToString()'"C");  							this.Socket.Logger.AddTextEntry("Client aborted/disconnected");  						}    						EndSession();    						// Exception handled' return  						return;  					}  				}    				m_pServer.OnSysError(""'x);  			}  			catch(Exception ex){  				m_pServer.OnSysError(""'ex);  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,OnError,The following statement contains a magic number: try{  				if(x is SocketException){  					SocketException xs = (SocketException)x;    					// Client disconnected without shutting down  					if(xs.ErrorCode == 10054 || xs.ErrorCode == 10053){  						if(m_pServer.LogCommands){  						//	m_pLogWriter.AddEntry("Client aborted/disconnected"'this.SessionID'this.RemoteEndPoint.Address.ToString()'"C");  							this.Socket.Logger.AddTextEntry("Client aborted/disconnected");  						}    						EndSession();    						// Exception handled' return  						return;  					}  				}    				m_pServer.OnSysError(""'x);  			}  			catch(Exception ex){  				m_pServer.OnSysError(""'ex);  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,BeginRecieveCmd,The following statement contains a magic number: this.Socket.BeginReadLine(strm'1024'strm'new SocketCallBack(this.EndRecieveCmd));
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,CDUP,The following statement contains a magic number: if(pathParts.Length > 1){  				m_CurrentDir = "";  				for(int i=0;i<(pathParts.Length - 2);i++){  					m_CurrentDir += pathParts[i] + "/";  				}    				if(m_CurrentDir.Length == 0){  					m_CurrentDir = "/";  				}  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,RETR,The following statement contains a magic number: try{  			//	string file = GetAndNormailizePath(argsText);  			//	file = file.Substring(0'file.Length - 1);    			//	using(Stream fileStream = m_pServer.OnGetFile(file)){  					if(fileStream != null){  						// ToDo: bandwidth limiting here    						int readed = 1;  						while(readed > 0){  							byte[] data = new byte[10000];  							readed = fileStream.Read(data'0'data.Length);  							socket.Send(data'readed'SocketFlags.None);  						}  					}  			//	}  				  				socket.Shutdown(SocketShutdown.Both);  				socket.Close();    				this.Socket.WriteLine("226 Transfer Complete.");  			}  			catch{  				this.Socket.WriteLine("426 Connection closed; transfer aborted.");  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,STOR,The following statement contains a magic number: try{  				string file = GetAndNormailizePath(argsText);  				file = file.Substring(0'file.Length - 1);    			//	using(Stream fileStream = m_pServer.OnStoreFile(file)){  					if(fileStream != null){  						// ToDo: bandwidth limiting here    						int readed = 1;  						while(readed > 0){  							byte[] data = new byte[10000];  							readed = socket.Receive(data);  							fileStream.Write(data'0'readed);							  						}  					}  			//	}  				  				socket.Shutdown(SocketShutdown.Both);  				socket.Close();    				this.Socket.WriteLine("226 Transfer Complete.");  			}  			catch{ // ToDo: report right errors here. eg. DataConnection read time out' ... .  				this.Socket.WriteLine("426 Connection closed; transfer aborted.");  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PORT,The following statement contains a magic number: if(parts.Length != 6){  				this.Socket.WriteLine("550 Invalid arguments.");  				return;  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PORT,The following statement contains a magic number: string ip   = parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3];
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PORT,The following statement contains a magic number: string ip   = parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3];
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PORT,The following statement contains a magic number: int    port = (Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5]);
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PORT,The following statement contains a magic number: int    port = (Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5]);
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PORT,The following statement contains a magic number: int    port = (Convert.ToInt32(parts[4]) << 8) | Convert.ToInt32(parts[5]);
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PASV,The following statement contains a magic number: if(m_pServer.PassivePublicIP != null){                  this.Socket.WriteLine("227 Entering Passive Mode (" + m_pServer.PassivePublicIP.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }              else{                  this.Socket.WriteLine("227 Entering Passive Mode (" + ((IPEndPoint)this.Socket.LocalEndPoint).Address.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PASV,The following statement contains a magic number: if(m_pServer.PassivePublicIP != null){                  this.Socket.WriteLine("227 Entering Passive Mode (" + m_pServer.PassivePublicIP.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }              else{                  this.Socket.WriteLine("227 Entering Passive Mode (" + ((IPEndPoint)this.Socket.LocalEndPoint).Address.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PASV,The following statement contains a magic number: if(m_pServer.PassivePublicIP != null){                  this.Socket.WriteLine("227 Entering Passive Mode (" + m_pServer.PassivePublicIP.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }              else{                  this.Socket.WriteLine("227 Entering Passive Mode (" + ((IPEndPoint)this.Socket.LocalEndPoint).Address.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,PASV,The following statement contains a magic number: if(m_pServer.PassivePublicIP != null){                  this.Socket.WriteLine("227 Entering Passive Mode (" + m_pServer.PassivePublicIP.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }              else{                  this.Socket.WriteLine("227 Entering Passive Mode (" + ((IPEndPoint)this.Socket.LocalEndPoint).Address.ToString() + "'" + (port >> 8) + "'" + (port & 255)  + ").");              }
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,GetDataConnection,The following statement contains a magic number: try{  				if(m_PassiveMode){  					//--- Wait ftp client connection ---------------------------//			  					long startTime = DateTime.Now.Ticks;  					// Wait ftp server to connect  					while(!m_pPassiveListener.Pending()){  						System.Threading.Thread.Sleep(50);    						// Time out after 30 seconds  						if((DateTime.Now.Ticks - startTime) / 10000 > 20000){  							throw new Exception("Ftp server didn't respond !");  						}  					}  					//-----------------------------------------------------------//    					socket = m_pPassiveListener.AcceptSocket();    					this.Socket.WriteLine("125 Data connection open' Transfer starting.");  				}  				else{  					this.Socket.WriteLine("150 Opening data connection.");    					socket = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);  					socket.Connect(m_pDataConEndPoint);  				}  			}  			catch{  				this.Socket.WriteLine("425 Can't open data connection.");  				return null;  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,GetDataConnection,The following statement contains a magic number: try{  				if(m_PassiveMode){  					//--- Wait ftp client connection ---------------------------//			  					long startTime = DateTime.Now.Ticks;  					// Wait ftp server to connect  					while(!m_pPassiveListener.Pending()){  						System.Threading.Thread.Sleep(50);    						// Time out after 30 seconds  						if((DateTime.Now.Ticks - startTime) / 10000 > 20000){  							throw new Exception("Ftp server didn't respond !");  						}  					}  					//-----------------------------------------------------------//    					socket = m_pPassiveListener.AcceptSocket();    					this.Socket.WriteLine("125 Data connection open' Transfer starting.");  				}  				else{  					this.Socket.WriteLine("150 Opening data connection.");    					socket = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);  					socket.Connect(m_pDataConEndPoint);  				}  			}  			catch{  				this.Socket.WriteLine("425 Can't open data connection.");  				return null;  			}
Magic Number,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,GetDataConnection,The following statement contains a magic number: try{  				if(m_PassiveMode){  					//--- Wait ftp client connection ---------------------------//			  					long startTime = DateTime.Now.Ticks;  					// Wait ftp server to connect  					while(!m_pPassiveListener.Pending()){  						System.Threading.Thread.Sleep(50);    						// Time out after 30 seconds  						if((DateTime.Now.Ticks - startTime) / 10000 > 20000){  							throw new Exception("Ftp server didn't respond !");  						}  					}  					//-----------------------------------------------------------//    					socket = m_pPassiveListener.AcceptSocket();    					this.Socket.WriteLine("125 Data connection open' Transfer starting.");  				}  				else{  					this.Socket.WriteLine("150 Opening data connection.");    					socket = new Socket(AddressFamily.InterNetwork'SocketType.Stream'ProtocolType.Tcp);  					socket.Connect(m_pDataConEndPoint);  				}  			}  			catch{  				this.Socket.WriteLine("425 Can't open data connection.");  				return null;  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: return Trace(System.Net.IPAddress.Parse(destIP)'2000);
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: IPEndPoint ipdest = new IPEndPoint(ip'80);
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: EndPoint endpoint = (EndPoint)(new IPEndPoint(System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName()).AddressList[0]'80));
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: for(int ittl=1;ittl<=30; ittl++){  				byte[] buffer = new byte[1024];  				  				try{  					//Socket options to set TTL and Timeouts   					s.SetSocketOption(SocketOptionLevel.IP'SocketOptionName.IpTimeToLive      'ittl);  					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.SendTimeout   'timeout);   					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.ReceiveTimeout'timeout);     					//Get current time  					DateTime startTime = DateTime.Now;    					//Send Request  					s.SendTo(sendPacket'sendPacket.Length'SocketFlags.None'ipdest);  				  					//Receive				  					s.ReceiveFrom(buffer'buffer.Length'SocketFlags.None'ref endpoint);    					//Calculate time required  					TimeSpan ts = DateTime.Now - startTime;  					retVal.Add(new EchoMessage(((IPEndPoint)endpoint).Address'ittl'ts.Milliseconds));    					// Endpoint reached  					if(buffer[20] == (byte)ICMP_Type.EchoReply){  						break;  					}  					  					// Un wanted reply  					if(buffer[20] != (byte)ICMP_Type.TimeExceeded){  						throw new Exception("UnKnown error !");  					}    					continuesNoReply = 0;  				}  				catch{  					//ToDo: Handle recive/send timeouts  					continuesNoReply++;  				}    				// If there is 3 continues no reply' consider that destination host won't accept ping.  				if(continuesNoReply >= 3){  					break;  				}  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: for(int ittl=1;ittl<=30; ittl++){  				byte[] buffer = new byte[1024];  				  				try{  					//Socket options to set TTL and Timeouts   					s.SetSocketOption(SocketOptionLevel.IP'SocketOptionName.IpTimeToLive      'ittl);  					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.SendTimeout   'timeout);   					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.ReceiveTimeout'timeout);     					//Get current time  					DateTime startTime = DateTime.Now;    					//Send Request  					s.SendTo(sendPacket'sendPacket.Length'SocketFlags.None'ipdest);  				  					//Receive				  					s.ReceiveFrom(buffer'buffer.Length'SocketFlags.None'ref endpoint);    					//Calculate time required  					TimeSpan ts = DateTime.Now - startTime;  					retVal.Add(new EchoMessage(((IPEndPoint)endpoint).Address'ittl'ts.Milliseconds));    					// Endpoint reached  					if(buffer[20] == (byte)ICMP_Type.EchoReply){  						break;  					}  					  					// Un wanted reply  					if(buffer[20] != (byte)ICMP_Type.TimeExceeded){  						throw new Exception("UnKnown error !");  					}    					continuesNoReply = 0;  				}  				catch{  					//ToDo: Handle recive/send timeouts  					continuesNoReply++;  				}    				// If there is 3 continues no reply' consider that destination host won't accept ping.  				if(continuesNoReply >= 3){  					break;  				}  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: for(int ittl=1;ittl<=30; ittl++){  				byte[] buffer = new byte[1024];  				  				try{  					//Socket options to set TTL and Timeouts   					s.SetSocketOption(SocketOptionLevel.IP'SocketOptionName.IpTimeToLive      'ittl);  					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.SendTimeout   'timeout);   					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.ReceiveTimeout'timeout);     					//Get current time  					DateTime startTime = DateTime.Now;    					//Send Request  					s.SendTo(sendPacket'sendPacket.Length'SocketFlags.None'ipdest);  				  					//Receive				  					s.ReceiveFrom(buffer'buffer.Length'SocketFlags.None'ref endpoint);    					//Calculate time required  					TimeSpan ts = DateTime.Now - startTime;  					retVal.Add(new EchoMessage(((IPEndPoint)endpoint).Address'ittl'ts.Milliseconds));    					// Endpoint reached  					if(buffer[20] == (byte)ICMP_Type.EchoReply){  						break;  					}  					  					// Un wanted reply  					if(buffer[20] != (byte)ICMP_Type.TimeExceeded){  						throw new Exception("UnKnown error !");  					}    					continuesNoReply = 0;  				}  				catch{  					//ToDo: Handle recive/send timeouts  					continuesNoReply++;  				}    				// If there is 3 continues no reply' consider that destination host won't accept ping.  				if(continuesNoReply >= 3){  					break;  				}  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: for(int ittl=1;ittl<=30; ittl++){  				byte[] buffer = new byte[1024];  				  				try{  					//Socket options to set TTL and Timeouts   					s.SetSocketOption(SocketOptionLevel.IP'SocketOptionName.IpTimeToLive      'ittl);  					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.SendTimeout   'timeout);   					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.ReceiveTimeout'timeout);     					//Get current time  					DateTime startTime = DateTime.Now;    					//Send Request  					s.SendTo(sendPacket'sendPacket.Length'SocketFlags.None'ipdest);  				  					//Receive				  					s.ReceiveFrom(buffer'buffer.Length'SocketFlags.None'ref endpoint);    					//Calculate time required  					TimeSpan ts = DateTime.Now - startTime;  					retVal.Add(new EchoMessage(((IPEndPoint)endpoint).Address'ittl'ts.Milliseconds));    					// Endpoint reached  					if(buffer[20] == (byte)ICMP_Type.EchoReply){  						break;  					}  					  					// Un wanted reply  					if(buffer[20] != (byte)ICMP_Type.TimeExceeded){  						throw new Exception("UnKnown error !");  					}    					continuesNoReply = 0;  				}  				catch{  					//ToDo: Handle recive/send timeouts  					continuesNoReply++;  				}    				// If there is 3 continues no reply' consider that destination host won't accept ping.  				if(continuesNoReply >= 3){  					break;  				}  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Trace,The following statement contains a magic number: for(int ittl=1;ittl<=30; ittl++){  				byte[] buffer = new byte[1024];  				  				try{  					//Socket options to set TTL and Timeouts   					s.SetSocketOption(SocketOptionLevel.IP'SocketOptionName.IpTimeToLive      'ittl);  					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.SendTimeout   'timeout);   					s.SetSocketOption(SocketOptionLevel.Socket'SocketOptionName.ReceiveTimeout'timeout);     					//Get current time  					DateTime startTime = DateTime.Now;    					//Send Request  					s.SendTo(sendPacket'sendPacket.Length'SocketFlags.None'ipdest);  				  					//Receive				  					s.ReceiveFrom(buffer'buffer.Length'SocketFlags.None'ref endpoint);    					//Calculate time required  					TimeSpan ts = DateTime.Now - startTime;  					retVal.Add(new EchoMessage(((IPEndPoint)endpoint).Address'ittl'ts.Milliseconds));    					// Endpoint reached  					if(buffer[20] == (byte)ICMP_Type.EchoReply){  						break;  					}  					  					// Un wanted reply  					if(buffer[20] != (byte)ICMP_Type.TimeExceeded){  						throw new Exception("UnKnown error !");  					}    					continuesNoReply = 0;  				}  				catch{  					//ToDo: Handle recive/send timeouts  					continuesNoReply++;  				}    				// If there is 3 continues no reply' consider that destination host won't accept ping.  				if(continuesNoReply >= 3){  					break;  				}  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Ping,The following statement contains a magic number: IPEndPoint ipdest = new IPEndPoint(ip'80);
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Ping,The following statement contains a magic number: EndPoint endpoint = (EndPoint)(new IPEndPoint(System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName()).AddressList[0]'80));
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Ping,The following statement contains a magic number: s.SetSocketOption(SocketOptionLevel.IP'SocketOptionName.IpTimeToLive      '30);
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Ping,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Ping,The following statement contains a magic number: if(buffer[20] == (byte)ICMP_Type.EchoReply){				  			}					  			// Un wanted reply  			else if(buffer[20] != (byte)ICMP_Type.TimeExceeded){  				throw new Exception("UnKnown error !");  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,Ping,The following statement contains a magic number: if(buffer[20] == (byte)ICMP_Type.EchoReply){				  			}					  			// Un wanted reply  			else if(buffer[20] != (byte)ICMP_Type.TimeExceeded){  				throw new Exception("UnKnown error !");  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: byte[] packet = new byte[8 + 2];
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: byte[] packet = new byte[8 + 2];
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: packet[2] = 0;
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: packet[3] = 0;
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: packet[4] = 0;
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: packet[5] = 0;
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: packet[6] = 0;
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: packet[7] = 0;
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(id)' 0' packet' 4' 2);
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(id)' 0' packet' 4' 2);
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: for(int i=0;i<2;i++){  				packet[i + 8] = (byte)'x'; // Data  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: for(int i=0;i<2;i++){  				packet[i + 8] = (byte)'x'; // Data  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: for(int i= 0;i<packet.Length;i+= 2){   				checkSum += Convert.ToInt32(BitConverter.ToUInt16(packet'i));  			}
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes((ushort)~checkSum)'0'packet'2'2);
Magic Number,LumiSoft.Net.ICMP,Icmp,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\ICMP\Icmp.cs,CreatePacket,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes((ushort)~checkSum)'0'packet'2'2);
Magic Number,LumiSoft.Net.IMAP,IMAP_BODY,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_BODY.cs,ConstructParts,The following statement contains a magic number: if((entity.ContentType & MediaType_enum.Multipart) != 0){  				retVal.Append("(");    				// Construct child entities.  				foreach(MimeEntity childEntity in entity.ChildEntities){  					// Construct child entity. This can be multipart or non multipart.  					retVal.Append(ConstructParts(childEntity'bodystructure));  				}  			  				// Add contentTypeSubMediaType  				string contentType = entity.ContentTypeString.Split(';')[0];  				if(contentType.Split('/').Length == 2){  					retVal.Append(" \"" + contentType.Split('/')[1].Replace(";"'"") + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				retVal.Append(")");  			}  			// Single part message  			else{  				retVal.Append("(");    				// NOTE: all header fields and parameters must in ENCODED form !!!    				// Add contentTypeMainMediaType  				if(entity.ContentTypeString != null){  					string contentType = entity.ContentTypeString.Split(';')[0];  					if(contentType.Split('/').Length == 2){  						retVal.Append("\"" + entity.ContentTypeString.Split('/')[0] + "\"");   					}  					else{  						retVal.Append("NIL");  					}  				}  				else{  					retVal.Append("NIL");  				}    				// contentTypeSubMediaType  				if(entity.ContentTypeString != null){  					string contentType = entity.ContentTypeString.Split(';')[0];  					if(contentType.Split('/').Length == 2){  						retVal.Append(" \"" + contentType.Split('/')[1].Replace(";"'"") + "\"");   					}  					else{  						retVal.Append(" NIL");  					}  				}  				else{  					retVal.Append(" NIL");  				}    				// conentTypeParameters - Syntax: {("name" SP "value" *(SP "name" SP "value"))}  				if(entity.ContentTypeString != null){  					ParametizedHeaderField contentTypeParameters = new ParametizedHeaderField(entity.Header.GetFirst("Content-Type:"));  					if(contentTypeParameters.Parameters.Count > 0){  						retVal.Append(" (");    						bool first = true;  						foreach(HeaderFieldParameter param in contentTypeParameters.Parameters){  							// For first item' don't add SP  							if(!first){  								retVal.Append(" ");  							}  							else{  								// Clear first flag  								first = false;  							}  							  							retVal.Append("\"" + param.Name + "\" \"" + MimeUtils.EncodeHeaderField(param.Value) + "\"");						  						}    						retVal.Append(")");  					}  					else{  						retVal.Append(" NIL");  					}  				}  				else{  					retVal.Append(" NIL");  				}    				// contentID  				string contentID = entity.ContentID;  				if(contentID != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentID) + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				// contentDescription  				string contentDescription = entity.ContentDescription;  				if(contentDescription != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentDescription) + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				// contentEncoding  				HeaderField contentEncoding = entity.Header.GetFirst("Content-Transfer-Encoding:");  				if(contentEncoding != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentEncoding.Value) + "\"");   				}  				else{  					// If not specified' then must be 7bit.  					retVal.Append(" \"7bit\"");  				}    				// contentSize  				if(entity.DataEncoded != null){  					retVal.Append(" " + entity.DataEncoded.Length.ToString());  				}  				else{  					retVal.Append(" 0");  				}    				// envelope ---> FOR ContentType: message/rfc822 ONLY ###  				if((entity.ContentType & MediaType_enum.Message_rfc822) != 0){  					retVal.Append(" " + IMAP_Envelope.ConstructEnvelope(entity));                        // TODO: BODYSTRUCTURE'LINES  				}    				// contentLines ---> FOR ContentType: text/xxx ONLY ###  				if((entity.ContentType & MediaType_enum.Text) != 0){  					if(entity.DataEncoded != null){  						long lineCount = 0;  						StreamLineReader r = new StreamLineReader(new MemoryStream(entity.DataEncoded));  						byte[] line = r.ReadLine();  						while(line != null){  							lineCount++;    							line = r.ReadLine();  						}  						  						retVal.Append(" " + lineCount.ToString());  					}  					else{  						retVal.Append(" 0");  					}  				}    				retVal.Append(")");  			}
Magic Number,LumiSoft.Net.IMAP,IMAP_BODY,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_BODY.cs,ConstructParts,The following statement contains a magic number: if((entity.ContentType & MediaType_enum.Multipart) != 0){  				retVal.Append("(");    				// Construct child entities.  				foreach(MimeEntity childEntity in entity.ChildEntities){  					// Construct child entity. This can be multipart or non multipart.  					retVal.Append(ConstructParts(childEntity'bodystructure));  				}  			  				// Add contentTypeSubMediaType  				string contentType = entity.ContentTypeString.Split(';')[0];  				if(contentType.Split('/').Length == 2){  					retVal.Append(" \"" + contentType.Split('/')[1].Replace(";"'"") + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				retVal.Append(")");  			}  			// Single part message  			else{  				retVal.Append("(");    				// NOTE: all header fields and parameters must in ENCODED form !!!    				// Add contentTypeMainMediaType  				if(entity.ContentTypeString != null){  					string contentType = entity.ContentTypeString.Split(';')[0];  					if(contentType.Split('/').Length == 2){  						retVal.Append("\"" + entity.ContentTypeString.Split('/')[0] + "\"");   					}  					else{  						retVal.Append("NIL");  					}  				}  				else{  					retVal.Append("NIL");  				}    				// contentTypeSubMediaType  				if(entity.ContentTypeString != null){  					string contentType = entity.ContentTypeString.Split(';')[0];  					if(contentType.Split('/').Length == 2){  						retVal.Append(" \"" + contentType.Split('/')[1].Replace(";"'"") + "\"");   					}  					else{  						retVal.Append(" NIL");  					}  				}  				else{  					retVal.Append(" NIL");  				}    				// conentTypeParameters - Syntax: {("name" SP "value" *(SP "name" SP "value"))}  				if(entity.ContentTypeString != null){  					ParametizedHeaderField contentTypeParameters = new ParametizedHeaderField(entity.Header.GetFirst("Content-Type:"));  					if(contentTypeParameters.Parameters.Count > 0){  						retVal.Append(" (");    						bool first = true;  						foreach(HeaderFieldParameter param in contentTypeParameters.Parameters){  							// For first item' don't add SP  							if(!first){  								retVal.Append(" ");  							}  							else{  								// Clear first flag  								first = false;  							}  							  							retVal.Append("\"" + param.Name + "\" \"" + MimeUtils.EncodeHeaderField(param.Value) + "\"");						  						}    						retVal.Append(")");  					}  					else{  						retVal.Append(" NIL");  					}  				}  				else{  					retVal.Append(" NIL");  				}    				// contentID  				string contentID = entity.ContentID;  				if(contentID != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentID) + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				// contentDescription  				string contentDescription = entity.ContentDescription;  				if(contentDescription != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentDescription) + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				// contentEncoding  				HeaderField contentEncoding = entity.Header.GetFirst("Content-Transfer-Encoding:");  				if(contentEncoding != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentEncoding.Value) + "\"");   				}  				else{  					// If not specified' then must be 7bit.  					retVal.Append(" \"7bit\"");  				}    				// contentSize  				if(entity.DataEncoded != null){  					retVal.Append(" " + entity.DataEncoded.Length.ToString());  				}  				else{  					retVal.Append(" 0");  				}    				// envelope ---> FOR ContentType: message/rfc822 ONLY ###  				if((entity.ContentType & MediaType_enum.Message_rfc822) != 0){  					retVal.Append(" " + IMAP_Envelope.ConstructEnvelope(entity));                        // TODO: BODYSTRUCTURE'LINES  				}    				// contentLines ---> FOR ContentType: text/xxx ONLY ###  				if((entity.ContentType & MediaType_enum.Text) != 0){  					if(entity.DataEncoded != null){  						long lineCount = 0;  						StreamLineReader r = new StreamLineReader(new MemoryStream(entity.DataEncoded));  						byte[] line = r.ReadLine();  						while(line != null){  							lineCount++;    							line = r.ReadLine();  						}  						  						retVal.Append(" " + lineCount.ToString());  					}  					else{  						retVal.Append(" 0");  					}  				}    				retVal.Append(")");  			}
Magic Number,LumiSoft.Net.IMAP,IMAP_BODY,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_BODY.cs,ConstructParts,The following statement contains a magic number: if((entity.ContentType & MediaType_enum.Multipart) != 0){  				retVal.Append("(");    				// Construct child entities.  				foreach(MimeEntity childEntity in entity.ChildEntities){  					// Construct child entity. This can be multipart or non multipart.  					retVal.Append(ConstructParts(childEntity'bodystructure));  				}  			  				// Add contentTypeSubMediaType  				string contentType = entity.ContentTypeString.Split(';')[0];  				if(contentType.Split('/').Length == 2){  					retVal.Append(" \"" + contentType.Split('/')[1].Replace(";"'"") + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				retVal.Append(")");  			}  			// Single part message  			else{  				retVal.Append("(");    				// NOTE: all header fields and parameters must in ENCODED form !!!    				// Add contentTypeMainMediaType  				if(entity.ContentTypeString != null){  					string contentType = entity.ContentTypeString.Split(';')[0];  					if(contentType.Split('/').Length == 2){  						retVal.Append("\"" + entity.ContentTypeString.Split('/')[0] + "\"");   					}  					else{  						retVal.Append("NIL");  					}  				}  				else{  					retVal.Append("NIL");  				}    				// contentTypeSubMediaType  				if(entity.ContentTypeString != null){  					string contentType = entity.ContentTypeString.Split(';')[0];  					if(contentType.Split('/').Length == 2){  						retVal.Append(" \"" + contentType.Split('/')[1].Replace(";"'"") + "\"");   					}  					else{  						retVal.Append(" NIL");  					}  				}  				else{  					retVal.Append(" NIL");  				}    				// conentTypeParameters - Syntax: {("name" SP "value" *(SP "name" SP "value"))}  				if(entity.ContentTypeString != null){  					ParametizedHeaderField contentTypeParameters = new ParametizedHeaderField(entity.Header.GetFirst("Content-Type:"));  					if(contentTypeParameters.Parameters.Count > 0){  						retVal.Append(" (");    						bool first = true;  						foreach(HeaderFieldParameter param in contentTypeParameters.Parameters){  							// For first item' don't add SP  							if(!first){  								retVal.Append(" ");  							}  							else{  								// Clear first flag  								first = false;  							}  							  							retVal.Append("\"" + param.Name + "\" \"" + MimeUtils.EncodeHeaderField(param.Value) + "\"");						  						}    						retVal.Append(")");  					}  					else{  						retVal.Append(" NIL");  					}  				}  				else{  					retVal.Append(" NIL");  				}    				// contentID  				string contentID = entity.ContentID;  				if(contentID != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentID) + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				// contentDescription  				string contentDescription = entity.ContentDescription;  				if(contentDescription != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentDescription) + "\"");   				}  				else{  					retVal.Append(" NIL");  				}    				// contentEncoding  				HeaderField contentEncoding = entity.Header.GetFirst("Content-Transfer-Encoding:");  				if(contentEncoding != null){  					retVal.Append(" \"" + MimeUtils.EncodeHeaderField(contentEncoding.Value) + "\"");   				}  				else{  					// If not specified' then must be 7bit.  					retVal.Append(" \"7bit\"");  				}    				// contentSize  				if(entity.DataEncoded != null){  					retVal.Append(" " + entity.DataEncoded.Length.ToString());  				}  				else{  					retVal.Append(" 0");  				}    				// envelope ---> FOR ContentType: message/rfc822 ONLY ###  				if((entity.ContentType & MediaType_enum.Message_rfc822) != 0){  					retVal.Append(" " + IMAP_Envelope.ConstructEnvelope(entity));                        // TODO: BODYSTRUCTURE'LINES  				}    				// contentLines ---> FOR ContentType: text/xxx ONLY ###  				if((entity.ContentType & MediaType_enum.Text) != 0){  					if(entity.DataEncoded != null){  						long lineCount = 0;  						StreamLineReader r = new StreamLineReader(new MemoryStream(entity.DataEncoded));  						byte[] line = r.ReadLine();  						while(line != null){  							lineCount++;    							line = r.ReadLine();  						}  						  						retVal.Append(" " + lineCount.ToString());  					}  					else{  						retVal.Append(" 0");  					}  				}    				retVal.Append(")");  			}
Magic Number,LumiSoft.Net.IMAP,IMAP_SequenceSet,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\IMAP_SequenceSet.cs,Parse,The following statement contains a magic number: foreach(string sequenceSet in sequenceSets){  				// seq-range   				if(sequenceSet.IndexOf(":") > -1){  					string[] rangeParts = sequenceSet.Split(':');  					if(rangeParts.Length == 2){                          long start = Parse_Seq_Number(rangeParts[0]'seqMaxValue);                          long end   = Parse_Seq_Number(rangeParts[1]'seqMaxValue);                          if(start <= end){                              m_pSequenceParts.Add(new Range(start'end));                          }                          else{                              m_pSequenceParts.Add(new Range(end'start));                          }                        			  					}  					else{  						throw new Exception("Invalid <seq-range> '" + sequenceSet + "' value !");  					}  				}  				// seq-number  				else{  					m_pSequenceParts.Add(new Range(Parse_Seq_Number(sequenceSet'seqMaxValue)));  				}  			}
Magic Number,LumiSoft.Net.Mime,HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\HeaderFieldCollection.cs,Parse,The following statement contains a magic number: SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);
Magic Number,LumiSoft.Net.Mime,HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\HeaderFieldCollection.cs,Parse,The following statement contains a magic number: while(line != null){  				// End of header reached  				if(line == ""){  					break;  				}    				// Store current header line and read next. We need to read 1 header line to ahead'  				// because of multiline header fields.  				string headerField = line;   				stream.ReadLine(args'false);                  if(args.Error != null){                      throw args.Error;                  }                  line = args.LineUtf8;    				// See if header field is multiline. See comment above.				  				while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){  					headerField += line;  					stream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      line = args.LineUtf8;  				}    				string[] name_value = headerField.Split(new char[]{':'}'2);  				// There must be header field name and value' otherwise invalid header field  				if(name_value.Length == 2){  					Add(name_value[0] + ":"'name_value[1].Trim());  				}  			}
Magic Number,LumiSoft.Net.Mime,HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\HeaderFieldCollection.cs,Parse,The following statement contains a magic number: while(line != null){  				// End of header reached  				if(line == ""){  					break;  				}    				// Store current header line and read next. We need to read 1 header line to ahead'  				// because of multiline header fields.  				string headerField = line;   				stream.ReadLine(args'false);                  if(args.Error != null){                      throw args.Error;                  }                  line = args.LineUtf8;    				// See if header field is multiline. See comment above.				  				while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){  					headerField += line;  					stream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      line = args.LineUtf8;  				}    				string[] name_value = headerField.Split(new char[]{':'}'2);  				// There must be header field name and value' otherwise invalid header field  				if(name_value.Length == 2){  					Add(name_value[0] + ":"'name_value[1].Trim());  				}  			}
Magic Number,LumiSoft.Net.Mime,MailboxAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MailboxAddress.cs,Parse,The following statement contains a magic number: if(mailbox.IndexOf("<") > -1 && mailbox.IndexOf(">") > -1){  				name = MIME_Encoding_EncodedWord.DecodeS(TextUtils.UnQuoteString(mailbox.Substring(0'mailbox.LastIndexOf("<"))));                  emailAddress = mailbox.Substring(mailbox.LastIndexOf("<") + 1' mailbox.Length - mailbox.LastIndexOf("<") - 2).Trim();  			}  			else{  				// There is name included' parse it  				if(mailbox.StartsWith("\"")){  					int startIndex = mailbox.IndexOf("\"");  					if(startIndex > -1 && mailbox.LastIndexOf("\"") > startIndex){  						name = MIME_Encoding_EncodedWord.DecodeS(mailbox.Substring(startIndex + 1'mailbox.LastIndexOf("\"") - startIndex - 1).Trim());  					}    					emailAddress = mailbox.Substring(mailbox.LastIndexOf("\"") + 1).Trim();  				}    				// Right part must be email address  				emailAddress = emailAddress.Replace("<"'"").Replace(">"'"").Trim();  			}
Magic Number,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,Parse,The following statement contains a magic number: if((this.ContentType & MediaType_enum.Multipart) != 0){  				// There must be be boundary ID (rfc 1341 7.2.1  The Content-Type field for multipart entities requires one parameter'                  // "boundary"' which is used to specify the encapsulation boundary.)  				string boundaryID = this.ContentType_Boundary;  				if(boundaryID == null){  					// This is invalid message' just skip this mime entity  				}  				else{  					// There is one or more mime entities                        // Find first boundary start position                      SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);                      stream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      string lineString = args.LineUtf8;  				  					while(lineString != null){  						if(lineString.StartsWith("--" + boundaryID)){  							break;  						}  						                          stream.ReadLine(args'false);                          if(args.Error != null){                              throw args.Error;                          }                          lineString = args.LineUtf8;  					}  					// This is invalid entity' boundary start not found. Skip that entity.  					if(string.IsNullOrEmpty(lineString)){  						return false;  					}  					  					// Start parsing child entities of this entity  					while(true){					  						// Parse and add child entity  						MimeEntity childEntity = new MimeEntity();					  						this.ChildEntities.Add(childEntity);  				  						// This is last entity' stop parsing  						if(childEntity.Parse(stream'boundaryID) == false){  							break;  						}  						// else{  						// There are more entities' parse them  					}  					  					// This entity is child of mulipart entity.  					// All this entity child entities are parsed'  					// we need to move stream position to next entity start.  					if(!string.IsNullOrEmpty(toBoundary)){                          stream.ReadLine(args'false);                          if(args.Error != null){                              throw args.Error;                          }                          lineString = args.LineUtf8;    						while(lineString != null){  							if(lineString.StartsWith("--" + toBoundary)){  								break;  							}  							  							stream.ReadLine(args'false);                              if(args.Error != null){                                  throw args.Error;                              }                              lineString = args.LineUtf8;  						}  						  						// Invalid boundary end' there can't be more entities   						if(string.IsNullOrEmpty(lineString)){  							return false;  						}  					  						// See if last boundary or there is more. Last boundary ends with --  						if(lineString.EndsWith(toBoundary + "--")){  							return false;   						}  						// else{  						// There are more entities					  						return true;  					}  				}  			}  			// Singlepart entity.  			else{                  // Boundary is specified' read data to specified boundary.                  if(!string.IsNullOrEmpty(toBoundary)){                      MemoryStream entityData = new MemoryStream();                      SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);                        // Read entity data while get boundary end tag --boundaryID-- or EOS.                      while(true){                                                  stream.ReadLine(readLineOP'false);                          if(readLineOP.Error != null){                              throw readLineOP.Error;                          }                          // End of stream reached. Normally we should get boundary end tag --boundaryID--' but some x mailers won't add it' so                          // if we reach EOS' consider boundary closed.                          if(readLineOP.BytesInBuffer == 0){                              // Just return data what was readed.                              m_EncodedData = entityData.ToArray();                              return false;                          }                          // We readed a line.                          else{                              // We have boundary start/end tag or just "--" at the beginning of line.                              if(readLineOP.LineBytesInBuffer >= 2 && readLineOP.Buffer[0] == '-' && readLineOP.Buffer[1] == '-'){                                  string lineString = readLineOP.LineUtf8;                                  // We have boundary end tag' no more boundaries.                                  if(lineString == "--" + toBoundary + "--"){                                      m_EncodedData = entityData.ToArray();                                      return false;                                  }                                  // We have new boundary start.                                  else if(lineString == "--" + toBoundary){                                      m_EncodedData = entityData.ToArray();                                      return true;                                  }                                  else{                                      // Just skip                                  }                              }                                // Write readed line.                              entityData.Write(readLineOP.Buffer'0'readLineOP.BytesInBuffer);                                              }                      }                  }  				// Boundary isn't specified' read data to the stream end.   				else{                      MemoryStream ms = new MemoryStream();                      stream.ReadAll(ms);                      m_EncodedData = ms.ToArray();  				}  			}
Magic Number,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,Parse,The following statement contains a magic number: if((this.ContentType & MediaType_enum.Multipart) != 0){  				// There must be be boundary ID (rfc 1341 7.2.1  The Content-Type field for multipart entities requires one parameter'                  // "boundary"' which is used to specify the encapsulation boundary.)  				string boundaryID = this.ContentType_Boundary;  				if(boundaryID == null){  					// This is invalid message' just skip this mime entity  				}  				else{  					// There is one or more mime entities                        // Find first boundary start position                      SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);                      stream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      string lineString = args.LineUtf8;  				  					while(lineString != null){  						if(lineString.StartsWith("--" + boundaryID)){  							break;  						}  						                          stream.ReadLine(args'false);                          if(args.Error != null){                              throw args.Error;                          }                          lineString = args.LineUtf8;  					}  					// This is invalid entity' boundary start not found. Skip that entity.  					if(string.IsNullOrEmpty(lineString)){  						return false;  					}  					  					// Start parsing child entities of this entity  					while(true){					  						// Parse and add child entity  						MimeEntity childEntity = new MimeEntity();					  						this.ChildEntities.Add(childEntity);  				  						// This is last entity' stop parsing  						if(childEntity.Parse(stream'boundaryID) == false){  							break;  						}  						// else{  						// There are more entities' parse them  					}  					  					// This entity is child of mulipart entity.  					// All this entity child entities are parsed'  					// we need to move stream position to next entity start.  					if(!string.IsNullOrEmpty(toBoundary)){                          stream.ReadLine(args'false);                          if(args.Error != null){                              throw args.Error;                          }                          lineString = args.LineUtf8;    						while(lineString != null){  							if(lineString.StartsWith("--" + toBoundary)){  								break;  							}  							  							stream.ReadLine(args'false);                              if(args.Error != null){                                  throw args.Error;                              }                              lineString = args.LineUtf8;  						}  						  						// Invalid boundary end' there can't be more entities   						if(string.IsNullOrEmpty(lineString)){  							return false;  						}  					  						// See if last boundary or there is more. Last boundary ends with --  						if(lineString.EndsWith(toBoundary + "--")){  							return false;   						}  						// else{  						// There are more entities					  						return true;  					}  				}  			}  			// Singlepart entity.  			else{                  // Boundary is specified' read data to specified boundary.                  if(!string.IsNullOrEmpty(toBoundary)){                      MemoryStream entityData = new MemoryStream();                      SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);                        // Read entity data while get boundary end tag --boundaryID-- or EOS.                      while(true){                                                  stream.ReadLine(readLineOP'false);                          if(readLineOP.Error != null){                              throw readLineOP.Error;                          }                          // End of stream reached. Normally we should get boundary end tag --boundaryID--' but some x mailers won't add it' so                          // if we reach EOS' consider boundary closed.                          if(readLineOP.BytesInBuffer == 0){                              // Just return data what was readed.                              m_EncodedData = entityData.ToArray();                              return false;                          }                          // We readed a line.                          else{                              // We have boundary start/end tag or just "--" at the beginning of line.                              if(readLineOP.LineBytesInBuffer >= 2 && readLineOP.Buffer[0] == '-' && readLineOP.Buffer[1] == '-'){                                  string lineString = readLineOP.LineUtf8;                                  // We have boundary end tag' no more boundaries.                                  if(lineString == "--" + toBoundary + "--"){                                      m_EncodedData = entityData.ToArray();                                      return false;                                  }                                  // We have new boundary start.                                  else if(lineString == "--" + toBoundary){                                      m_EncodedData = entityData.ToArray();                                      return true;                                  }                                  else{                                      // Just skip                                  }                              }                                // Write readed line.                              entityData.Write(readLineOP.Buffer'0'readLineOP.BytesInBuffer);                                              }                      }                  }  				// Boundary isn't specified' read data to the stream end.   				else{                      MemoryStream ms = new MemoryStream();                      stream.ReadAll(ms);                      m_EncodedData = ms.ToArray();  				}  			}
Magic Number,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,Parse,The following statement contains a magic number: if((this.ContentType & MediaType_enum.Multipart) != 0){  				// There must be be boundary ID (rfc 1341 7.2.1  The Content-Type field for multipart entities requires one parameter'                  // "boundary"' which is used to specify the encapsulation boundary.)  				string boundaryID = this.ContentType_Boundary;  				if(boundaryID == null){  					// This is invalid message' just skip this mime entity  				}  				else{  					// There is one or more mime entities                        // Find first boundary start position                      SmartStream.ReadLineAsyncOP args = new SmartStream.ReadLineAsyncOP(new byte[8000]'SizeExceededAction.JunkAndThrowException);                      stream.ReadLine(args'false);                      if(args.Error != null){                          throw args.Error;                      }                      string lineString = args.LineUtf8;  				  					while(lineString != null){  						if(lineString.StartsWith("--" + boundaryID)){  							break;  						}  						                          stream.ReadLine(args'false);                          if(args.Error != null){                              throw args.Error;                          }                          lineString = args.LineUtf8;  					}  					// This is invalid entity' boundary start not found. Skip that entity.  					if(string.IsNullOrEmpty(lineString)){  						return false;  					}  					  					// Start parsing child entities of this entity  					while(true){					  						// Parse and add child entity  						MimeEntity childEntity = new MimeEntity();					  						this.ChildEntities.Add(childEntity);  				  						// This is last entity' stop parsing  						if(childEntity.Parse(stream'boundaryID) == false){  							break;  						}  						// else{  						// There are more entities' parse them  					}  					  					// This entity is child of mulipart entity.  					// All this entity child entities are parsed'  					// we need to move stream position to next entity start.  					if(!string.IsNullOrEmpty(toBoundary)){                          stream.ReadLine(args'false);                          if(args.Error != null){                              throw args.Error;                          }                          lineString = args.LineUtf8;    						while(lineString != null){  							if(lineString.StartsWith("--" + toBoundary)){  								break;  							}  							  							stream.ReadLine(args'false);                              if(args.Error != null){                                  throw args.Error;                              }                              lineString = args.LineUtf8;  						}  						  						// Invalid boundary end' there can't be more entities   						if(string.IsNullOrEmpty(lineString)){  							return false;  						}  					  						// See if last boundary or there is more. Last boundary ends with --  						if(lineString.EndsWith(toBoundary + "--")){  							return false;   						}  						// else{  						// There are more entities					  						return true;  					}  				}  			}  			// Singlepart entity.  			else{                  // Boundary is specified' read data to specified boundary.                  if(!string.IsNullOrEmpty(toBoundary)){                      MemoryStream entityData = new MemoryStream();                      SmartStream.ReadLineAsyncOP readLineOP = new SmartStream.ReadLineAsyncOP(new byte[32000]'SizeExceededAction.JunkAndThrowException);                        // Read entity data while get boundary end tag --boundaryID-- or EOS.                      while(true){                                                  stream.ReadLine(readLineOP'false);                          if(readLineOP.Error != null){                              throw readLineOP.Error;                          }                          // End of stream reached. Normally we should get boundary end tag --boundaryID--' but some x mailers won't add it' so                          // if we reach EOS' consider boundary closed.                          if(readLineOP.BytesInBuffer == 0){                              // Just return data what was readed.                              m_EncodedData = entityData.ToArray();                              return false;                          }                          // We readed a line.                          else{                              // We have boundary start/end tag or just "--" at the beginning of line.                              if(readLineOP.LineBytesInBuffer >= 2 && readLineOP.Buffer[0] == '-' && readLineOP.Buffer[1] == '-'){                                  string lineString = readLineOP.LineUtf8;                                  // We have boundary end tag' no more boundaries.                                  if(lineString == "--" + toBoundary + "--"){                                      m_EncodedData = entityData.ToArray();                                      return false;                                  }                                  // We have new boundary start.                                  else if(lineString == "--" + toBoundary){                                      m_EncodedData = entityData.ToArray();                                      return true;                                  }                                  else{                                      // Just skip                                  }                              }                                // Write readed line.                              entityData.Write(readLineOP.Buffer'0'readLineOP.BytesInBuffer);                                              }                      }                  }  				// Boundary isn't specified' read data to the stream end.   				else{                      MemoryStream ms = new MemoryStream();                      stream.ReadAll(ms);                      m_EncodedData = ms.ToArray();  				}  			}
Magic Number,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,ToStream,The following statement contains a magic number: if((this.ContentType & MediaType_enum.Multipart) != 0){  				string boundary = this.ContentType_Boundary;			  				foreach(MimeEntity entity in this.ChildEntities){  					// Write boundary start. Syntax: <CRLF>--BoundaryID<CRLF>  					data = System.Text.Encoding.Default.GetBytes("\r\n--" + boundary + "\r\n");  					storeStream.Write(data'0'data.Length);    					// Force child entity to store itself                      entity.ToStream(storeStream);  				}    				// Write boundaries end Syntax: <CRLF>--BoundaryID--<CRLF>  				data = System.Text.Encoding.Default.GetBytes("\r\n--" + boundary + "--\r\n");  				storeStream.Write(data'0'data.Length);  			}  			// If singlepart (text'image'audio'video'message' ...)' write entity data.  			else{				  				// Write blank line between headers and content  				storeStream.Write(new byte[]{(byte)'\r''(byte)'\n'}'0'2);    				if(this.DataEncoded != null){  					storeStream.Write(this.DataEncoded'0'this.DataEncoded.Length);  				}				  			}
Magic Number,LumiSoft.Net.Mime,MimeEntity,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeEntity.cs,FoldHeader,The following statement contains a magic number: if(retVal.Length > 1){  				return retVal.ToString(0'retVal.Length - 2);  			}  			else{  				return retVal.ToString();  			}
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The following statement contains a magic number: int year        = 1900;
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The following statement contains a magic number: if(s.Available > 0){                  try{                      hour = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'true));                                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid hour value !");                  }                    try{                      minute = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'false));                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid minute value !");                  }                    s.ReadToFirstChar();                  if(s.StartsWith(":")){                      s.ReadSpecifiedLength(1);                      try{                          string secondString = s.ReadWord(true'new char[]{' '}'true);                          // Milli seconds specified' remove them.                          if(secondString.IndexOf('.') > -1){                              secondString = secondString.Substring(0'secondString.IndexOf('.'));                          }                          second = Convert.ToInt32(secondString);                      }                      catch{                          throw new Exception("Invalid date value '" + date + "'' invalid second value !");                      }                  }                    s.ReadToFirstChar();                  if(s.Available > 3){                      string timezone = s.SourceString.Replace(":"'"");                      if(timezone.StartsWith("+") || timezone.StartsWith("-")){                          bool utc_add_time = timezone.StartsWith("+");                            // Remove +/- sign                          timezone = timezone.Substring(1);                                                    // padd time zone to 4 symbol. For example 200' will be 0200.                          while(timezone.Length < 4){                              timezone = "0" + timezone;                          }                            try{                              // time zone format hours|minutes                              int h = Convert.ToInt32(timezone.Substring(0'2));                              int m = Convert.ToInt32(timezone.Substring(2));                                if(utc_add_time){                                  zoneMinutes = 0 - ((h * 60) + m);                              }                              else{                                  zoneMinutes = (h * 60) + m;                              }                          }                          catch{ // Just skip time zone' if can't parse                          }                      }                  }              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The following statement contains a magic number: if(s.Available > 0){                  try{                      hour = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'true));                                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid hour value !");                  }                    try{                      minute = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'false));                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid minute value !");                  }                    s.ReadToFirstChar();                  if(s.StartsWith(":")){                      s.ReadSpecifiedLength(1);                      try{                          string secondString = s.ReadWord(true'new char[]{' '}'true);                          // Milli seconds specified' remove them.                          if(secondString.IndexOf('.') > -1){                              secondString = secondString.Substring(0'secondString.IndexOf('.'));                          }                          second = Convert.ToInt32(secondString);                      }                      catch{                          throw new Exception("Invalid date value '" + date + "'' invalid second value !");                      }                  }                    s.ReadToFirstChar();                  if(s.Available > 3){                      string timezone = s.SourceString.Replace(":"'"");                      if(timezone.StartsWith("+") || timezone.StartsWith("-")){                          bool utc_add_time = timezone.StartsWith("+");                            // Remove +/- sign                          timezone = timezone.Substring(1);                                                    // padd time zone to 4 symbol. For example 200' will be 0200.                          while(timezone.Length < 4){                              timezone = "0" + timezone;                          }                            try{                              // time zone format hours|minutes                              int h = Convert.ToInt32(timezone.Substring(0'2));                              int m = Convert.ToInt32(timezone.Substring(2));                                if(utc_add_time){                                  zoneMinutes = 0 - ((h * 60) + m);                              }                              else{                                  zoneMinutes = (h * 60) + m;                              }                          }                          catch{ // Just skip time zone' if can't parse                          }                      }                  }              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The following statement contains a magic number: if(s.Available > 0){                  try{                      hour = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'true));                                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid hour value !");                  }                    try{                      minute = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'false));                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid minute value !");                  }                    s.ReadToFirstChar();                  if(s.StartsWith(":")){                      s.ReadSpecifiedLength(1);                      try{                          string secondString = s.ReadWord(true'new char[]{' '}'true);                          // Milli seconds specified' remove them.                          if(secondString.IndexOf('.') > -1){                              secondString = secondString.Substring(0'secondString.IndexOf('.'));                          }                          second = Convert.ToInt32(secondString);                      }                      catch{                          throw new Exception("Invalid date value '" + date + "'' invalid second value !");                      }                  }                    s.ReadToFirstChar();                  if(s.Available > 3){                      string timezone = s.SourceString.Replace(":"'"");                      if(timezone.StartsWith("+") || timezone.StartsWith("-")){                          bool utc_add_time = timezone.StartsWith("+");                            // Remove +/- sign                          timezone = timezone.Substring(1);                                                    // padd time zone to 4 symbol. For example 200' will be 0200.                          while(timezone.Length < 4){                              timezone = "0" + timezone;                          }                            try{                              // time zone format hours|minutes                              int h = Convert.ToInt32(timezone.Substring(0'2));                              int m = Convert.ToInt32(timezone.Substring(2));                                if(utc_add_time){                                  zoneMinutes = 0 - ((h * 60) + m);                              }                              else{                                  zoneMinutes = (h * 60) + m;                              }                          }                          catch{ // Just skip time zone' if can't parse                          }                      }                  }              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The following statement contains a magic number: if(s.Available > 0){                  try{                      hour = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'true));                                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid hour value !");                  }                    try{                      minute = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'false));                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid minute value !");                  }                    s.ReadToFirstChar();                  if(s.StartsWith(":")){                      s.ReadSpecifiedLength(1);                      try{                          string secondString = s.ReadWord(true'new char[]{' '}'true);                          // Milli seconds specified' remove them.                          if(secondString.IndexOf('.') > -1){                              secondString = secondString.Substring(0'secondString.IndexOf('.'));                          }                          second = Convert.ToInt32(secondString);                      }                      catch{                          throw new Exception("Invalid date value '" + date + "'' invalid second value !");                      }                  }                    s.ReadToFirstChar();                  if(s.Available > 3){                      string timezone = s.SourceString.Replace(":"'"");                      if(timezone.StartsWith("+") || timezone.StartsWith("-")){                          bool utc_add_time = timezone.StartsWith("+");                            // Remove +/- sign                          timezone = timezone.Substring(1);                                                    // padd time zone to 4 symbol. For example 200' will be 0200.                          while(timezone.Length < 4){                              timezone = "0" + timezone;                          }                            try{                              // time zone format hours|minutes                              int h = Convert.ToInt32(timezone.Substring(0'2));                              int m = Convert.ToInt32(timezone.Substring(2));                                if(utc_add_time){                                  zoneMinutes = 0 - ((h * 60) + m);                              }                              else{                                  zoneMinutes = (h * 60) + m;                              }                          }                          catch{ // Just skip time zone' if can't parse                          }                      }                  }              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The following statement contains a magic number: if(s.Available > 0){                  try{                      hour = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'true));                                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid hour value !");                  }                    try{                      minute = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'false));                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid minute value !");                  }                    s.ReadToFirstChar();                  if(s.StartsWith(":")){                      s.ReadSpecifiedLength(1);                      try{                          string secondString = s.ReadWord(true'new char[]{' '}'true);                          // Milli seconds specified' remove them.                          if(secondString.IndexOf('.') > -1){                              secondString = secondString.Substring(0'secondString.IndexOf('.'));                          }                          second = Convert.ToInt32(secondString);                      }                      catch{                          throw new Exception("Invalid date value '" + date + "'' invalid second value !");                      }                  }                    s.ReadToFirstChar();                  if(s.Available > 3){                      string timezone = s.SourceString.Replace(":"'"");                      if(timezone.StartsWith("+") || timezone.StartsWith("-")){                          bool utc_add_time = timezone.StartsWith("+");                            // Remove +/- sign                          timezone = timezone.Substring(1);                                                    // padd time zone to 4 symbol. For example 200' will be 0200.                          while(timezone.Length < 4){                              timezone = "0" + timezone;                          }                            try{                              // time zone format hours|minutes                              int h = Convert.ToInt32(timezone.Substring(0'2));                              int m = Convert.ToInt32(timezone.Substring(2));                                if(utc_add_time){                                  zoneMinutes = 0 - ((h * 60) + m);                              }                              else{                                  zoneMinutes = (h * 60) + m;                              }                          }                          catch{ // Just skip time zone' if can't parse                          }                      }                  }              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,ParseDate,The following statement contains a magic number: if(s.Available > 0){                  try{                      hour = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'true));                                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid hour value !");                  }                    try{                      minute = Convert.ToInt32(s.ReadWord(true'new char[]{':'}'false));                  }                  catch{                      throw new Exception("Invalid date value '" + date + "'' invalid minute value !");                  }                    s.ReadToFirstChar();                  if(s.StartsWith(":")){                      s.ReadSpecifiedLength(1);                      try{                          string secondString = s.ReadWord(true'new char[]{' '}'true);                          // Milli seconds specified' remove them.                          if(secondString.IndexOf('.') > -1){                              secondString = secondString.Substring(0'secondString.IndexOf('.'));                          }                          second = Convert.ToInt32(secondString);                      }                      catch{                          throw new Exception("Invalid date value '" + date + "'' invalid second value !");                      }                  }                    s.ReadToFirstChar();                  if(s.Available > 3){                      string timezone = s.SourceString.Replace(":"'"");                      if(timezone.StartsWith("+") || timezone.StartsWith("-")){                          bool utc_add_time = timezone.StartsWith("+");                            // Remove +/- sign                          timezone = timezone.Substring(1);                                                    // padd time zone to 4 symbol. For example 200' will be 0200.                          while(timezone.Length < 4){                              timezone = "0" + timezone;                          }                            try{                              // time zone format hours|minutes                              int h = Convert.ToInt32(timezone.Substring(0'2));                              int m = Convert.ToInt32(timezone.Substring(2));                                if(utc_add_time){                                  zoneMinutes = 0 - ((h * 60) + m);                              }                              else{                                  zoneMinutes = (h * 60) + m;                              }                          }                          catch{ // Just skip time zone' if can't parse                          }                      }                  }              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,DecodeWords,The following statement contains a magic number: while(r.Available > 0){                  string whiteSpaces = r.ReadToFirstChar();                    // Probably is encoded-word' we try to parse it.                  if(r.StartsWith("=?") && r.SourceString.IndexOf("?=") > -1){                      StringBuilder encodedWord = new StringBuilder();                      string        decodedWord = null;                        try{                          // NOTE: We can't read encoded word and then split !!!' we need to read each part.                                                // Remove =?                          encodedWord.Append(r.ReadSpecifiedLength(2));                            // Read charset                          string charset = r.QuotedReadToDelimiter('?');                          encodedWord.Append(charset + "?");                            // Read encoding                          string encoding = r.QuotedReadToDelimiter('?');                          encodedWord.Append(encoding + "?");                            // Read text                          string encodedText = r.QuotedReadToDelimiter('?');                          encodedWord.Append(encodedText + "?");                            // We must have remaining '=' here                          if(r.StartsWith("=")){                              encodedWord.Append(r.ReadSpecifiedLength(1));                                Encoding c = Encoding.GetEncoding(charset);                              if(encoding.ToLower() == "q"){                                  decodedWord = Core.QDecode(c'encodedText);                              }                              else if(encoding.ToLower() == "b"){                                  decodedWord = c.GetString(Core.Base64Decode(Encoding.Default.GetBytes(encodedText)));                              }                          }                      }                      catch{                          // Not encoded-word or contains unknwon charset/encoding' so leave                          // encoded-word as is.                      }                        /* RFC 2047 6.2.                          When displaying a particular header field that contains multiple                          'encoded-word's' any 'linear-white-space' that separates a pair of                          adjacent 'encoded-word's is ignored.  (This is to allow the use of                          multiple 'encoded-word's to represent long strings of unencoded text'                          without having to separate 'encoded-word's where spaces occur in the                          unencoded text.)                      */                      if(!lastIsEncodedWord){                          retVal.Append(whiteSpaces);                      }                        // Decoding failed for that encoded-word' leave encoded-word as is.                      if(decodedWord == null){                          retVal.Append(encodedWord.ToString());                      }                      // We deocded encoded-word successfully.                      else{                          retVal.Append(decodedWord);                      }                        lastIsEncodedWord = true;                  }                  // Normal word.                  else if(r.StartsWithWord()){                      retVal.Append(whiteSpaces + r.ReadWord(false));                      lastIsEncodedWord = false;                  }                  // We have some separator or parenthesize.                  else{                     retVal.Append(whiteSpaces + r.ReadSpecifiedLength(1));                  }              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,FoldData,The following statement contains a magic number: if(data.Length > 76){                  int startPosition       = 0;                  int lastPossibleFoldPos = -1;                  StringBuilder retVal = new StringBuilder();                  for(int i=0;i<data.Length;i++){                      char c = data[i];                      // We have possible fold point                      if(c == ' ' || c == '\t'){                          lastPossibleFoldPos = i;                      }                        // End of data reached                      if(i == (data.Length - 1)){                          retVal.Append(data.Substring(startPosition));                      }                      // We need to fold                      else if((i - startPosition) >= 76){                          // There wasn't any good fold point(word is bigger than line)' just fold from current position.                          if(lastPossibleFoldPos == -1){                              lastPossibleFoldPos = i;                          }                                                retVal.Append(data.Substring(startPosition'lastPossibleFoldPos - startPosition) + "\r\n\t");                            i = lastPossibleFoldPos;                          lastPossibleFoldPos = -1;                          startPosition       = i;                      }                  }                    return retVal.ToString();              }              else{                  return data;              }
Magic Number,LumiSoft.Net.Mime,MimeUtils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\MimeUtils.cs,FoldData,The following statement contains a magic number: if(data.Length > 76){                  int startPosition       = 0;                  int lastPossibleFoldPos = -1;                  StringBuilder retVal = new StringBuilder();                  for(int i=0;i<data.Length;i++){                      char c = data[i];                      // We have possible fold point                      if(c == ' ' || c == '\t'){                          lastPossibleFoldPos = i;                      }                        // End of data reached                      if(i == (data.Length - 1)){                          retVal.Append(data.Substring(startPosition));                      }                      // We need to fold                      else if((i - startPosition) >= 76){                          // There wasn't any good fold point(word is bigger than line)' just fold from current position.                          if(lastPossibleFoldPos == -1){                              lastPossibleFoldPos = i;                          }                                                retVal.Append(data.Substring(startPosition'lastPossibleFoldPos - startPosition) + "\r\n\t");                            i = lastPossibleFoldPos;                          lastPossibleFoldPos = -1;                          startPosition       = i;                      }                  }                    return retVal.ToString();              }              else{                  return data;              }
Magic Number,LumiSoft.Net.Mime,ParametizedHeaderField,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\ParametizedHeaderField.cs,ParseParameters,The following statement contains a magic number: for(int i=1;i<paramNameValues.Length;i++){  				string[] paramNameValue = paramNameValues[i].Trim().Split(new char[]{'='}'2);					  				if(!retVal.ContainsKey(paramNameValue[0].ToLower())){  					if(paramNameValue.Length == 2){                          string value = paramNameValue[1];                            // Quotes-string' unqoute.                          if(value.StartsWith("\"")){                              value = TextUtils.UnQuoteString(paramNameValue[1]);                          }    						retVal.Add(paramNameValue[0].ToLower()'value);  					}  					else{  						retVal.Add(paramNameValue[0].ToLower()'"");  					}  				}  			}
Magic Number,LumiSoft.Net.Mime,ParametizedHeaderField,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\MIME\ParametizedHeaderField.cs,ParseParameters,The following statement contains a magic number: for(int i=1;i<paramNameValues.Length;i++){  				string[] paramNameValue = paramNameValues[i].Trim().Split(new char[]{'='}'2);					  				if(!retVal.ContainsKey(paramNameValue[0].ToLower())){  					if(paramNameValue.Length == 2){                          string value = paramNameValue[1];                            // Quotes-string' unqoute.                          if(value.StartsWith("\"")){                              value = TextUtils.UnQuoteString(paramNameValue[1]);                          }    						retVal.Add(paramNameValue[0].ToLower()'value);  					}  					else{  						retVal.Add(paramNameValue[0].ToLower()'"");  					}  				}  			}
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,DeliveryAddress,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 2){                  name.m_FirstName = items[1];              }
Magic Number,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 3){                  name.m_AdditionalNames = items[2];              }
Magic Number,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 3){                  name.m_AdditionalNames = items[2];              }
Magic Number,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 4){                  name.m_HonorificPrefix = items[3];              }
Magic Number,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 4){                  name.m_HonorificPrefix = items[3];              }
Magic Number,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 5){                  name.m_HonorificSuffix = items[4];              }
Magic Number,LumiSoft.Net.Mime.vCard,Name,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 5){                  name.m_HonorificSuffix = items[4];              }
Magic Number,LumiSoft.Net.Mime.vCard,vCard,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\vCard.cs,Parse,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = r.ReadLine();                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = r.ReadLine();                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,LumiSoft.Net.Mime.vCard,vCard,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\vCard.cs,Parse,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = r.ReadLine();                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = r.ReadLine();                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,LumiSoft.Net.Mime.vCard,vCard,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\vCard.cs,Parse,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = r.ReadLine();                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = r.ReadLine();                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,LumiSoft.Net.Mime.vCard,vCard,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\vCard\vCard.cs,Parse,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = r.ReadLine();                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = r.ReadLine();                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,LumiSoft.Net.POP3.Server,POP3_Server,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Server.cs,POP3_Server,The following statement contains a magic number: this.BindInfo = new IPBindInfo[]{new IPBindInfo(""'IPAddress.Any'110'SslMode.None'null)};
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,OnError,The following statement contains a magic number: try{                  // We must see InnerException too' SocketException may be as inner exception.                  SocketException socketException = null;                  if(x is SocketException){                      socketException = (SocketException)x;                  }                  else if(x.InnerException != null && x.InnerException is SocketException){                      socketException = (SocketException)x.InnerException;                  }    				if(socketException != null){  					// Client disconnected without shutting down  					if(socketException.ErrorCode == 10054 || socketException.ErrorCode == 10053){  						if(m_pServer.LogCommands){  							this.Socket.Logger.AddTextEntry("Client aborted/disconnected");  						}    						EndSession();    						// Exception handled' return  						return;  					}  				}                    m_pServer.OnSysError(""'x);                  			}  			catch(Exception ex){  				m_pServer.OnSysError(""'ex);  			}
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,OnError,The following statement contains a magic number: try{                  // We must see InnerException too' SocketException may be as inner exception.                  SocketException socketException = null;                  if(x is SocketException){                      socketException = (SocketException)x;                  }                  else if(x.InnerException != null && x.InnerException is SocketException){                      socketException = (SocketException)x.InnerException;                  }    				if(socketException != null){  					// Client disconnected without shutting down  					if(socketException.ErrorCode == 10054 || socketException.ErrorCode == 10053){  						if(m_pServer.LogCommands){  							this.Socket.Logger.AddTextEntry("Client aborted/disconnected");  						}    						EndSession();    						// Exception handled' return  						return;  					}  				}                    m_pServer.OnSysError(""'x);                  			}  			catch(Exception ex){  				m_pServer.OnSysError(""'ex);  			}
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,BeginRecieveCmd,The following statement contains a magic number: this.Socket.BeginReadLine(strm'1024'strm'new SocketCallBack(this.EndRecieveCmd));
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,TOP,The following statement contains a magic number: if(param.Length == 2){  				// Check if messageNr and nrLines is valid  				if(Core.IsNumber(param[0]) && Core.IsNumber(param[1])){  					int messageNr = Convert.ToInt32(param[0]);  					if(m_POP3_Messages.MessageExists(messageNr)){  						POP3_Message msg = m_POP3_Messages[messageNr - 1];    						byte[] lines = m_pServer.OnGetTopLines(this'msg'Convert.ToInt32(param[1]));  						if(lines != null){                              this.Socket.WriteLine("+OK " + lines.Length + " octets");    							// Send message asynchronously to client  							this.Socket.BeginWritePeriodTerminated(new MemoryStream(lines)'null'new SocketCallBack(this.EndSend));  						}  						else{  							this.Socket.BeginWriteLine("-ERR no such message"'new SocketCallBack(this.EndSend));  						}  					}  					else{  						this.Socket.BeginWriteLine("-ERR no such message"'new SocketCallBack(this.EndSend));  					}  				}  				else{  					this.Socket.BeginWriteLine("-ERR message-number or number of lines is invalid"'new SocketCallBack(this.EndSend));  				}  			}  			else{  				this.Socket.BeginWriteLine("-ERR Syntax error. Syntax:{TOP messageNr nrLines}"'new SocketCallBack(this.EndSend));  			}
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,APOP,The following statement contains a magic number: if(param.Length == 2){  				string userName   = param[0];  				string md5HexHash = param[1];    				// Check if user isn't logged in already  				if(m_pServer.IsUserLoggedIn(userName)){  					this.Socket.BeginWriteLine("-ERR User:'" + userName + "' already logged in"'new SocketCallBack(this.EndSend));  					return;  				}    				// Authenticate user  				AuthUser_EventArgs aArgs = m_pServer.OnAuthUser(this'userName'md5HexHash'm_MD5_prefix'AuthType.APOP);  				if(aArgs.Validated){                      this.SetUserName(userName);    					// Get user messages info.  					m_pServer.OnGetMessagesInfo(this'm_POP3_Messages);    					this.Socket.BeginWriteLine("+OK authentication was successful"'new SocketCallBack(this.EndSend));  				}  				else{  					this.Socket.BeginWriteLine("-ERR authentication failed"'new SocketCallBack(this.EndSend));  				}  			}  			else{  				this.Socket.BeginWriteLine("-ERR syntax error. Syntax:{APOP userName md5HexHash}"'new SocketCallBack(this.EndSend));  			}
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,AUTH,The following statement contains a magic number: switch(param[0].ToUpper())  			{  				case "PLAIN":  					this.Socket.BeginWriteLine("-ERR Unrecognized authentication type."'new SocketCallBack(this.EndSend));  					break;    				case "LOGIN":    					#region LOGIN authentication    				    //---- AUTH = LOGIN ------------------------------  					/* Login  					C: AUTH LOGIN-MD5  					S: + VXNlcm5hbWU6  					C: username_in_base64  					S: + UGFzc3dvcmQ6  					C: password_in_base64  					  					   VXNlcm5hbWU6 base64_decoded= USERNAME  					   UGFzc3dvcmQ6 base64_decoded= PASSWORD  					*/  					// Note: all strings are base64 strings eg. VXNlcm5hbWU6 = UserName.  			  					  					// Query UserName  					this.Socket.WriteLine("+ VXNlcm5hbWU6");    					string userNameLine = this.Socket.ReadLine();  					// Encode username from base64  					if(userNameLine.Length > 0){  						userName = System.Text.Encoding.Default.GetString(Convert.FromBase64String(userNameLine));  					}  						  					// Query Password  					this.Socket.WriteLine("+ UGFzc3dvcmQ6");    					string passwordLine = this.Socket.ReadLine();  					// Encode password from base64  					if(passwordLine.Length > 0){  						password = System.Text.Encoding.Default.GetString(Convert.FromBase64String(passwordLine));  					}  						  					aArgs = m_pServer.OnAuthUser(this'userName'password'""'AuthType.Plain);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                          return;                      }    					if(aArgs.Validated){  						this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));  						  						this.SetUserName(userName);    						// Get user messages info.  						m_pServer.OnGetMessagesInfo(this'm_POP3_Messages);  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				case "CRAM-MD5":  					  					#region CRAM-MD5 authentication    					/* Cram-M5  					C: AUTH CRAM-MD5  					S: + <md5_calculation_hash_in_base64>  					C: base64(decoded:username password_hash)  					*/  					  					string md5Hash = "<" + Guid.NewGuid().ToString().ToLower() + ">";  					this.Socket.WriteLine("+ " + Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(md5Hash)));    					string reply = this.Socket.ReadLine();    					reply = System.Text.Encoding.Default.GetString(Convert.FromBase64String(reply));  					string[] replyArgs = reply.Split(' ');  					userName = replyArgs[0];  					  					aArgs = m_pServer.OnAuthUser(this'userName'replyArgs[1]'md5Hash'AuthType.CRAM_MD5);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                          return;                      }    					if(aArgs.Validated){  						this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));  						                          this.SetUserName(userName);    						// Get user messages info.  						m_pServer.OnGetMessagesInfo(this'm_POP3_Messages);  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				case "DIGEST-MD5":    					#region DIGEST-MD5 authentication    					/* RFC 2831 AUTH DIGEST-MD5  					 *   					 * Example:  					 *   					 * C: AUTH DIGEST-MD5  					 * S: + base64(realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'qop="auth"'algorithm=md5-sess)  					 * C: base64(username="chris"'realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'  					 *    nc=00000001'cnonce="OA6MHXh6VqTrRk"'digest-uri="imap/elwood.innosoft.com"'                       *    response=d388dad90d4bbd760a152321f2143af7'qop=auth)  					 * S: + base64(rspauth=ea40f60335c427b5527b84dbabcdfffd)  					 * C:  					 * S: +OK Authentication successful.  					*/    					string realm = this.BindInfo.HostName;  					string nonce = AuthHelper.GenerateNonce();    					this.Socket.WriteLine("+ " + AuthHelper.Base64en(AuthHelper.Create_Digest_Md5_ServerResponse(realm'nonce)));    					string clientResponse = AuthHelper.Base64de(this.Socket.ReadLine());					  					// Check that realm and nonce in client response are same as we specified  					if(clientResponse.IndexOf("realm=\"" + realm + "\"") > - 1 && clientResponse.IndexOf("nonce=\"" + nonce + "\"") > - 1){  						// Parse user name and password compare value  				//		string userName  = "";  						string passwData = "";  						string cnonce = "";   						foreach(string clntRespParam in clientResponse.Split(''')){  							if(clntRespParam.StartsWith("username=")){  								userName = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  							else if(clntRespParam.StartsWith("response=")){  								passwData = clntRespParam.Split(new char[]{'='}'2)[1];  							}							  							else if(clntRespParam.StartsWith("cnonce=")){  								cnonce = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  						}    						aArgs = m_pServer.OnAuthUser(this'userName'passwData'clientResponse'AuthType.DIGEST_MD5);                            // There is custom error' return it                          if(aArgs.ErrorText != null){                              this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                              return;                          }    						if(aArgs.Validated){  							// Send server computed password hash  							this.Socket.WriteLine("+ " + AuthHelper.Base64en("rspauth=" + aArgs.ReturnData));  					  							// We must got empty line here  							clientResponse = this.Socket.ReadLine();  							if(clientResponse == ""){  								this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));                                    this.SetUserName(userName);  							}  							else{  								this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  							}  						}  						else{  							this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  						}  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				default:  					this.Socket.BeginWriteLine("-ERR Unrecognized authentication type."'new SocketCallBack(this.EndSend));  					break;  			}
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,AUTH,The following statement contains a magic number: switch(param[0].ToUpper())  			{  				case "PLAIN":  					this.Socket.BeginWriteLine("-ERR Unrecognized authentication type."'new SocketCallBack(this.EndSend));  					break;    				case "LOGIN":    					#region LOGIN authentication    				    //---- AUTH = LOGIN ------------------------------  					/* Login  					C: AUTH LOGIN-MD5  					S: + VXNlcm5hbWU6  					C: username_in_base64  					S: + UGFzc3dvcmQ6  					C: password_in_base64  					  					   VXNlcm5hbWU6 base64_decoded= USERNAME  					   UGFzc3dvcmQ6 base64_decoded= PASSWORD  					*/  					// Note: all strings are base64 strings eg. VXNlcm5hbWU6 = UserName.  			  					  					// Query UserName  					this.Socket.WriteLine("+ VXNlcm5hbWU6");    					string userNameLine = this.Socket.ReadLine();  					// Encode username from base64  					if(userNameLine.Length > 0){  						userName = System.Text.Encoding.Default.GetString(Convert.FromBase64String(userNameLine));  					}  						  					// Query Password  					this.Socket.WriteLine("+ UGFzc3dvcmQ6");    					string passwordLine = this.Socket.ReadLine();  					// Encode password from base64  					if(passwordLine.Length > 0){  						password = System.Text.Encoding.Default.GetString(Convert.FromBase64String(passwordLine));  					}  						  					aArgs = m_pServer.OnAuthUser(this'userName'password'""'AuthType.Plain);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                          return;                      }    					if(aArgs.Validated){  						this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));  						  						this.SetUserName(userName);    						// Get user messages info.  						m_pServer.OnGetMessagesInfo(this'm_POP3_Messages);  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				case "CRAM-MD5":  					  					#region CRAM-MD5 authentication    					/* Cram-M5  					C: AUTH CRAM-MD5  					S: + <md5_calculation_hash_in_base64>  					C: base64(decoded:username password_hash)  					*/  					  					string md5Hash = "<" + Guid.NewGuid().ToString().ToLower() + ">";  					this.Socket.WriteLine("+ " + Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(md5Hash)));    					string reply = this.Socket.ReadLine();    					reply = System.Text.Encoding.Default.GetString(Convert.FromBase64String(reply));  					string[] replyArgs = reply.Split(' ');  					userName = replyArgs[0];  					  					aArgs = m_pServer.OnAuthUser(this'userName'replyArgs[1]'md5Hash'AuthType.CRAM_MD5);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                          return;                      }    					if(aArgs.Validated){  						this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));  						                          this.SetUserName(userName);    						// Get user messages info.  						m_pServer.OnGetMessagesInfo(this'm_POP3_Messages);  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				case "DIGEST-MD5":    					#region DIGEST-MD5 authentication    					/* RFC 2831 AUTH DIGEST-MD5  					 *   					 * Example:  					 *   					 * C: AUTH DIGEST-MD5  					 * S: + base64(realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'qop="auth"'algorithm=md5-sess)  					 * C: base64(username="chris"'realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'  					 *    nc=00000001'cnonce="OA6MHXh6VqTrRk"'digest-uri="imap/elwood.innosoft.com"'                       *    response=d388dad90d4bbd760a152321f2143af7'qop=auth)  					 * S: + base64(rspauth=ea40f60335c427b5527b84dbabcdfffd)  					 * C:  					 * S: +OK Authentication successful.  					*/    					string realm = this.BindInfo.HostName;  					string nonce = AuthHelper.GenerateNonce();    					this.Socket.WriteLine("+ " + AuthHelper.Base64en(AuthHelper.Create_Digest_Md5_ServerResponse(realm'nonce)));    					string clientResponse = AuthHelper.Base64de(this.Socket.ReadLine());					  					// Check that realm and nonce in client response are same as we specified  					if(clientResponse.IndexOf("realm=\"" + realm + "\"") > - 1 && clientResponse.IndexOf("nonce=\"" + nonce + "\"") > - 1){  						// Parse user name and password compare value  				//		string userName  = "";  						string passwData = "";  						string cnonce = "";   						foreach(string clntRespParam in clientResponse.Split(''')){  							if(clntRespParam.StartsWith("username=")){  								userName = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  							else if(clntRespParam.StartsWith("response=")){  								passwData = clntRespParam.Split(new char[]{'='}'2)[1];  							}							  							else if(clntRespParam.StartsWith("cnonce=")){  								cnonce = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  						}    						aArgs = m_pServer.OnAuthUser(this'userName'passwData'clientResponse'AuthType.DIGEST_MD5);                            // There is custom error' return it                          if(aArgs.ErrorText != null){                              this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                              return;                          }    						if(aArgs.Validated){  							// Send server computed password hash  							this.Socket.WriteLine("+ " + AuthHelper.Base64en("rspauth=" + aArgs.ReturnData));  					  							// We must got empty line here  							clientResponse = this.Socket.ReadLine();  							if(clientResponse == ""){  								this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));                                    this.SetUserName(userName);  							}  							else{  								this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  							}  						}  						else{  							this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  						}  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				default:  					this.Socket.BeginWriteLine("-ERR Unrecognized authentication type."'new SocketCallBack(this.EndSend));  					break;  			}
Magic Number,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,AUTH,The following statement contains a magic number: switch(param[0].ToUpper())  			{  				case "PLAIN":  					this.Socket.BeginWriteLine("-ERR Unrecognized authentication type."'new SocketCallBack(this.EndSend));  					break;    				case "LOGIN":    					#region LOGIN authentication    				    //---- AUTH = LOGIN ------------------------------  					/* Login  					C: AUTH LOGIN-MD5  					S: + VXNlcm5hbWU6  					C: username_in_base64  					S: + UGFzc3dvcmQ6  					C: password_in_base64  					  					   VXNlcm5hbWU6 base64_decoded= USERNAME  					   UGFzc3dvcmQ6 base64_decoded= PASSWORD  					*/  					// Note: all strings are base64 strings eg. VXNlcm5hbWU6 = UserName.  			  					  					// Query UserName  					this.Socket.WriteLine("+ VXNlcm5hbWU6");    					string userNameLine = this.Socket.ReadLine();  					// Encode username from base64  					if(userNameLine.Length > 0){  						userName = System.Text.Encoding.Default.GetString(Convert.FromBase64String(userNameLine));  					}  						  					// Query Password  					this.Socket.WriteLine("+ UGFzc3dvcmQ6");    					string passwordLine = this.Socket.ReadLine();  					// Encode password from base64  					if(passwordLine.Length > 0){  						password = System.Text.Encoding.Default.GetString(Convert.FromBase64String(passwordLine));  					}  						  					aArgs = m_pServer.OnAuthUser(this'userName'password'""'AuthType.Plain);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                          return;                      }    					if(aArgs.Validated){  						this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));  						  						this.SetUserName(userName);    						// Get user messages info.  						m_pServer.OnGetMessagesInfo(this'm_POP3_Messages);  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				case "CRAM-MD5":  					  					#region CRAM-MD5 authentication    					/* Cram-M5  					C: AUTH CRAM-MD5  					S: + <md5_calculation_hash_in_base64>  					C: base64(decoded:username password_hash)  					*/  					  					string md5Hash = "<" + Guid.NewGuid().ToString().ToLower() + ">";  					this.Socket.WriteLine("+ " + Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(md5Hash)));    					string reply = this.Socket.ReadLine();    					reply = System.Text.Encoding.Default.GetString(Convert.FromBase64String(reply));  					string[] replyArgs = reply.Split(' ');  					userName = replyArgs[0];  					  					aArgs = m_pServer.OnAuthUser(this'userName'replyArgs[1]'md5Hash'AuthType.CRAM_MD5);                        // There is custom error' return it                      if(aArgs.ErrorText != null){                          this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                          return;                      }    					if(aArgs.Validated){  						this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));  						                          this.SetUserName(userName);    						// Get user messages info.  						m_pServer.OnGetMessagesInfo(this'm_POP3_Messages);  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				case "DIGEST-MD5":    					#region DIGEST-MD5 authentication    					/* RFC 2831 AUTH DIGEST-MD5  					 *   					 * Example:  					 *   					 * C: AUTH DIGEST-MD5  					 * S: + base64(realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'qop="auth"'algorithm=md5-sess)  					 * C: base64(username="chris"'realm="elwood.innosoft.com"'nonce="OA6MG9tEQGm2hh"'  					 *    nc=00000001'cnonce="OA6MHXh6VqTrRk"'digest-uri="imap/elwood.innosoft.com"'                       *    response=d388dad90d4bbd760a152321f2143af7'qop=auth)  					 * S: + base64(rspauth=ea40f60335c427b5527b84dbabcdfffd)  					 * C:  					 * S: +OK Authentication successful.  					*/    					string realm = this.BindInfo.HostName;  					string nonce = AuthHelper.GenerateNonce();    					this.Socket.WriteLine("+ " + AuthHelper.Base64en(AuthHelper.Create_Digest_Md5_ServerResponse(realm'nonce)));    					string clientResponse = AuthHelper.Base64de(this.Socket.ReadLine());					  					// Check that realm and nonce in client response are same as we specified  					if(clientResponse.IndexOf("realm=\"" + realm + "\"") > - 1 && clientResponse.IndexOf("nonce=\"" + nonce + "\"") > - 1){  						// Parse user name and password compare value  				//		string userName  = "";  						string passwData = "";  						string cnonce = "";   						foreach(string clntRespParam in clientResponse.Split(''')){  							if(clntRespParam.StartsWith("username=")){  								userName = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  							else if(clntRespParam.StartsWith("response=")){  								passwData = clntRespParam.Split(new char[]{'='}'2)[1];  							}							  							else if(clntRespParam.StartsWith("cnonce=")){  								cnonce = clntRespParam.Split(new char[]{'='}'2)[1].Replace("\""'"");  							}  						}    						aArgs = m_pServer.OnAuthUser(this'userName'passwData'clientResponse'AuthType.DIGEST_MD5);                            // There is custom error' return it                          if(aArgs.ErrorText != null){                              this.Socket.BeginWriteLine("-ERR " + aArgs.ErrorText'new SocketCallBack(this.EndSend));                              return;                          }    						if(aArgs.Validated){  							// Send server computed password hash  							this.Socket.WriteLine("+ " + AuthHelper.Base64en("rspauth=" + aArgs.ReturnData));  					  							// We must got empty line here  							clientResponse = this.Socket.ReadLine();  							if(clientResponse == ""){  								this.Socket.BeginWriteLine("+OK Authentication successful."'new SocketCallBack(this.EndSend));                                    this.SetUserName(userName);  							}  							else{  								this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  							}  						}  						else{  							this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  						}  					}  					else{  						this.Socket.BeginWriteLine("-ERR Authentication failed"'new SocketCallBack(this.EndSend));  					}    					#endregion    					break;    				default:  					this.Socket.BeginWriteLine("-ERR Unrecognized authentication type."'new SocketCallBack(this.EndSend));  					break;  			}
Magic Number,LumiSoft.Net.SIP.Message,SIP_t_RValue,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_RValue.cs,Parse,The following statement contains a magic number: if(namespace_priority.Length != 2){                  throw new SIP_ParseException("Invalid r-value !");              }
Magic Number,LumiSoft.Net.SIP.Message,SIP_t_SessionExpires,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_SessionExpires.cs,SIP_t_SessionExpires,The following statement contains a magic number: if(m_Expires < 90){                  throw new ArgumentException("Argument 'expires' value must be >= 90 !");              }
Magic Number,LumiSoft.Net.SIP.Message,SIP_t_AcceptRange,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_AcceptRange.cs,Parse,The following statement contains a magic number: while(reader.Available > 0){                  reader.ReadToFirstChar();                    // We have 'next' value' so we are done here.                  if(reader.SourceString.StartsWith("'")){                      break;                  }                  // We have parameter                  else if(reader.SourceString.StartsWith(";")){                      reader.ReadSpecifiedLength(1);                      string paramString = reader.QuotedReadToDelimiter(new char[]{';'''''}'false);                      if(paramString != ""){                          string[] name_value = paramString.Split(new char[]{'='}'2);                          string name  = name_value[0].Trim();                          string value = "";                          if(name_value.Length == 2){                              value = name_value[1];                          }                            // If q' then accept parameters begin                          if(name.ToLower() == "q"){                              media_accept = false;                          }                            if(media_accept){                              this.MediaParameters.Add(name'value);                          }                          else{                              this.Parameters.Add(name'value);                          }                      }                  }                  // Unknown data                  else{                      throw new SIP_ParseException("SIP_t_AcceptRange unexpected prarameter value !");                  }              }
Magic Number,LumiSoft.Net.SIP.Message,SIP_t_AcceptRange,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_AcceptRange.cs,Parse,The following statement contains a magic number: while(reader.Available > 0){                  reader.ReadToFirstChar();                    // We have 'next' value' so we are done here.                  if(reader.SourceString.StartsWith("'")){                      break;                  }                  // We have parameter                  else if(reader.SourceString.StartsWith(";")){                      reader.ReadSpecifiedLength(1);                      string paramString = reader.QuotedReadToDelimiter(new char[]{';'''''}'false);                      if(paramString != ""){                          string[] name_value = paramString.Split(new char[]{'='}'2);                          string name  = name_value[0].Trim();                          string value = "";                          if(name_value.Length == 2){                              value = name_value[1];                          }                            // If q' then accept parameters begin                          if(name.ToLower() == "q"){                              media_accept = false;                          }                            if(media_accept){                              this.MediaParameters.Add(name'value);                          }                          else{                              this.Parameters.Add(name'value);                          }                      }                  }                  // Unknown data                  else{                      throw new SIP_ParseException("SIP_t_AcceptRange unexpected prarameter value !");                  }              }
Magic Number,LumiSoft.Net.SIP.Message,SIP_t_AuthenticationInfo,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_AuthenticationInfo.cs,Parse,The following statement contains a magic number: while(reader.Available > 0){                  string word = reader.QuotedReadToDelimiter(''');                  if(word != null && word.Length > 0){                      string[] name_value = word.Split(new char[]{'='}'2);                      if(name_value[0].ToLower() == "nextnonce"){                          this.NextNonce = name_value[1];                      }                      else if(name_value[0].ToLower() == "qop"){                          this.Qop = name_value[1];                      }                      else if(name_value[0].ToLower() == "rspauth"){                          this.ResponseAuth = name_value[1];                      }                      else if(name_value[0].ToLower() == "cnonce"){                          this.CNonce = name_value[1];                      }                      else if(name_value[0].ToLower() == "nc"){                          this.NonceCount = Convert.ToInt32(name_value[1]);                      }                      else{                          throw new SIP_ParseException("Invalid Authentication-Info value !");                      }                  }              }
Magic Number,LumiSoft.Net.SIP.Message,SIP_t_ValueWithParams,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_ValueWithParams.cs,ParseParameters,The following statement contains a magic number: while(reader.Available > 0){                  reader.ReadToFirstChar();                    // We have parameter                  if(reader.SourceString.StartsWith(";")){                      reader.ReadSpecifiedLength(1);                      string paramString = reader.QuotedReadToDelimiter(new char[]{';'''''}'false);                      if(paramString != ""){                          string[] name_value = paramString.Split(new char[]{'='}'2);                          if(name_value.Length == 2){                             this.Parameters.Add(name_value[0]'name_value[1]);                          }                          else{                              this.Parameters.Add(name_value[0]'null);                          }                      }                  }                  // Next value                  else if(reader.SourceString.StartsWith("'")){                      break;                  }                  // Unknown data                  else{                      throw new SIP_ParseException("Unexpected value '" + reader.SourceString + "' !");                  }              }
Magic Number,LumiSoft.Net.SIP.Message,SIP_t_ValueWithParams,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_t_ValueWithParams.cs,ParseParameters,The following statement contains a magic number: while(reader.Available > 0){                  reader.ReadToFirstChar();                    // We have parameter                  if(reader.SourceString.StartsWith(";")){                      reader.ReadSpecifiedLength(1);                      string paramString = reader.QuotedReadToDelimiter(new char[]{';'''''}'false);                      if(paramString != ""){                          string[] name_value = paramString.Split(new char[]{'='}'2);                          if(name_value.Length == 2){                             this.Parameters.Add(name_value[0]'name_value[1]);                          }                          else{                              this.Parameters.Add(name_value[0]'null);                          }                      }                  }                  // Next value                  else if(reader.SourceString.StartsWith("'")){                      break;                  }                  // Unknown data                  else{                      throw new SIP_ParseException("Unexpected value '" + reader.SourceString + "' !");                  }              }
Magic Number,LumiSoft.Net.SIP.Message,SIP_HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_HeaderFieldCollection.cs,Parse,The following statement contains a magic number: while(line != null){  				// End of header reached  				if(line == ""){  					break;  				}    				// Store current header line and read next. We need to read 1 header line to ahead'  				// because of multiline header fields.  				string headerField = line;   				line = r.ReadLineString();    				// See if header field is multiline. See comment above.				  				while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){  					headerField += line;  					line = r.ReadLineString();  				}    				string[] name_value = headerField.Split(new char[]{':'}'2);  				// There must be header field name and value' otherwise invalid header field  				if(name_value.Length == 2){  			        Add(name_value[0] + ":"'name_value[1].Trim());                  }  			}
Magic Number,LumiSoft.Net.SIP.Message,SIP_HeaderFieldCollection,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Message\SIP_HeaderFieldCollection.cs,Parse,The following statement contains a magic number: while(line != null){  				// End of header reached  				if(line == ""){  					break;  				}    				// Store current header line and read next. We need to read 1 header line to ahead'  				// because of multiline header fields.  				string headerField = line;   				line = r.ReadLineString();    				// See if header field is multiline. See comment above.				  				while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){  					headerField += line;  					line = r.ReadLineString();  				}    				string[] name_value = headerField.Split(new char[]{':'}'2);  				// There must be header field name and value' otherwise invalid header field  				if(name_value.Length == 2){  			        Add(name_value[0] + ":"'name_value[1].Trim());                  }  			}
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Client\STUN_Client.cs,Query,The following statement contains a magic number: socket.ReceiveTimeout = 3000;
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Client\STUN_Client.cs,Query,The following statement contains a magic number: socket.SendTimeout = 3000;
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Client\STUN_Client.cs,DoTransaction,The following statement contains a magic number: while(startTime.AddSeconds(2) > DateTime.Now){                  try{                      socket.SendTo(requestBytes'remoteEndPoint);                        // We got response.                      if(socket.Poll(100'SelectMode.SelectRead)){                          byte[] receiveBuffer = new byte[512];                          socket.Receive(receiveBuffer);                            // Parse message                          STUN_Message response = new STUN_Message();                          response.Parse(receiveBuffer);                            // Check that transaction ID matches or not response what we want.                          if(request.TransactionID.Equals(response.TransactionID)){                              return response;                          }                      }                  }                  catch{                  }              }
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Client\STUN_Client.cs,DoTransaction,The following statement contains a magic number: while(startTime.AddSeconds(2) > DateTime.Now){                  try{                      socket.SendTo(requestBytes'remoteEndPoint);                        // We got response.                      if(socket.Poll(100'SelectMode.SelectRead)){                          byte[] receiveBuffer = new byte[512];                          socket.Receive(receiveBuffer);                            // Parse message                          STUN_Message response = new STUN_Message();                          response.Parse(receiveBuffer);                            // Check that transaction ID matches or not response what we want.                          if(request.TransactionID.Equals(response.TransactionID)){                              return response;                          }                      }                  }                  catch{                  }              }
Magic Number,LumiSoft.Net.STUN.Client,STUN_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Client\STUN_Client.cs,DoTransaction,The following statement contains a magic number: while(startTime.AddSeconds(2) > DateTime.Now){                  try{                      socket.SendTo(requestBytes'remoteEndPoint);                        // We got response.                      if(socket.Poll(100'SelectMode.SelectRead)){                          byte[] receiveBuffer = new byte[512];                          socket.Receive(receiveBuffer);                            // Parse message                          STUN_Message response = new STUN_Message();                          response.Parse(receiveBuffer);                            // Check that transaction ID matches or not response what we want.                          if(request.TransactionID.Equals(response.TransactionID)){                              return response;                          }                      }                  }                  catch{                  }              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: if(data.Length < 20){                  throw new ArgumentException("Invalid STUN message value !");              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: int messageType = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: int messageLength = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: byte[] guid = new byte[16];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: Array.Copy(data'offset'guid'0'16);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: offset += 16;
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,Parse,The following statement contains a magic number: while((offset - 20) < messageLength){                  ParseAttribute(data'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: byte[] msg = new byte[512];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[offset++] = (byte)((int)this.Type >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: Array.Copy(m_pTransactionID.ToByteArray()'0'msg'offset'16);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: offset += 16;
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: if(this.MappedAddress != null){                  StoreEndPoint(AttributeType.MappedAddress'this.MappedAddress'msg'ref offset);              }              else if(this.ResponseAddress != null){                  StoreEndPoint(AttributeType.ResponseAddress'this.ResponseAddress'msg'ref offset);              }              else if(this.ChangeRequest != null){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                                   // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                  msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                  msg[offset++] = 0;                  msg[offset++] = 4;                    msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = 0;                  msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);                             }              else if(this.SourceAddress != null){                  StoreEndPoint(AttributeType.SourceAddress'this.SourceAddress'msg'ref offset);              }              else if(this.ChangedAddress != null){                  StoreEndPoint(AttributeType.ChangedAddress'this.ChangedAddress'msg'ref offset);              }              else if(this.UserName != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Username >> 8;                  msg[offset++] = (int)AttributeType.Username & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.Password != null){                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    // Attribute header                  msg[offset++] = (int)AttributeType.Password >> 8;                  msg[offset++] = (int)AttributeType.Password & 0xFF;                  msg[offset++] = (byte)(userBytes.Length >> 8);                  msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes'0'msg'offset'userBytes.Length);                  offset += userBytes.Length;              }              else if(this.ErrorCode != null){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                  msg[offset++] = (int)AttributeType.ErrorCode;                  msg[offset++] = 0;                  msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                  msg[offset++] = 0;                  // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                  // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                  // ReasonPhrase                  Array.Copy(reasonBytes'msg'reasonBytes.Length);                  offset += reasonBytes.Length;              }              else if(this.ReflectedFrom != null){                  StoreEndPoint(AttributeType.ReflectedFrom'this.ReflectedFrom'msg'ref offset);              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: AttributeType type = (AttributeType)(data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: int length = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseAttribute,The following statement contains a magic number: if(type == AttributeType.MappedAddress){                  m_pMappedAddress = ParseEndPoint(data'ref offset);              }              // RESPONSE-ADDRESS              else if(type == AttributeType.ResponseAddress){                  m_pResponseAddress = ParseEndPoint(data'ref offset);              }              // CHANGE-REQUEST              else if(type == AttributeType.ChangeRequest){                  /*                      The CHANGE-REQUEST attribute is used by the client to request that                      the server use a different address and/or port when sending the                      response.  The attribute is 32 bits long' although only two bits (A                      and B) are used:                         0                   1                   2                   3                       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                        The meaning of the flags is:                        A: This is the "change IP" flag.  If true' it requests the server                         to send the Binding Response with a different IP address than the                         one the Binding Request was received on.                        B: This is the "change port" flag.  If true' it requests the                         server to send the Binding Response with a different port than the                         one the Binding Request was received on.                  */                    // Skip 3 bytes                  offset += 3;                                                    m_pChangeRequest = new STUN_t_ChangeRequest((data[offset] & 4) != 0'(data[offset] & 2) != 0);                  offset++;              }              // SOURCE-ADDRESS              else if(type == AttributeType.SourceAddress){                  m_pSourceAddress = ParseEndPoint(data'ref offset);              }              // CHANGED-ADDRESS              else if(type == AttributeType.ChangedAddress){                  m_pChangedAddress = ParseEndPoint(data'ref offset);              }              // USERNAME              else if(type == AttributeType.Username){                  m_UserName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // PASSWORD              else if(type == AttributeType.Password){                  m_Password = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // MESSAGE-INTEGRITY              else if(type == AttributeType.MessageIntegrity){                  offset += length;              }              // ERROR-CODE              else if(type == AttributeType.ErrorCode){                  /* 3489 11.2.9.                      0                   1                   2                   3                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |                   0                     |Class|     Number    |                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                      |      Reason Phrase (variable)                                ..                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                  */                    int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    m_pErrorCode = new STUN_t_ErrorCode(errorCode'Encoding.Default.GetString(data'offset + 4'length - 4));                  offset += length;              }              // UNKNOWN-ATTRIBUTES              else if(type == AttributeType.UnknownAttribute){                  offset += length;              }              // REFLECTED-FROM              else if(type == AttributeType.ReflectedFrom){                  m_pReflectedFrom = ParseEndPoint(data'ref offset);              }              // XorMappedAddress              // XorOnly              // ServerName              else if(type == AttributeType.ServerName){                  m_ServerName = Encoding.Default.GetString(data'offset'length);                  offset += length;              }              // Unknown              else{                  offset += length;              }
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: int port = (data[offset++] << 8 | data[offset++]);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: byte[] ip = new byte[4];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: ip[2] = data[offset++];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,ParseEndPoint,The following statement contains a magic number: ip[3] = data[offset++];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)((int)type >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = 8;
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)(endPoint.Port >> 8);
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = ipBytes[2];
Magic Number,LumiSoft.Net.STUN.Message,STUN_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\STUN\Message\STUN_Message.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = ipBytes[3];
Magic Number,LumiSoft.Net.SDP,SDP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SDP\SDP_Message.cs,Parse,The following statement contains a magic number: while(line != null){                  line = line.Trim();                    // We reached to media descriptions                  if(line.ToLower().StartsWith("m")){                      /*                          m=  (media name and transport address)                          i=* (media title)                          c=* (connection information -- optional if included at session level)                          b=* (zero or more bandwidth information lines)                          k=* (encryption key)                          a=* (zero or more media attribute lines)                      */                        SDP_Media media = new SDP_Media();                      media.MediaDescription = SDP_MediaDescription.Parse(line);                      sdp.Media.Add(media);                      line = r.ReadLine();                      // Pasrse media fields and attributes                      while(line != null){                          line = line.Trim();                            // Next media descrition' just stop active media description parsing'                           // fall through main while' allow next while loop to process it.                          if(line.ToLower().StartsWith("m")){                              break;                          }                          // i media title                          else if(line.ToLower().StartsWith("i")){                              media.Title = line.Split(new char[]{'='}'2)[1].Trim();                          }                          // c connection information                          else if(line.ToLower().StartsWith("c")){                              media.ConnectionData = SDP_ConnectionData.Parse(line);                          }                          // a Attributes                          else if(line.ToLower().StartsWith("a")){                              media.Attributes.Add(SDP_Attribute.Parse(line));                          }                            line = r.ReadLine();                      }                      break;                  }                  // v Protocol Version                  else if(line.ToLower().StartsWith("v")){                      sdp.Version = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // o Origin                  else if(line.ToLower().StartsWith("o")){                      sdp.Originator = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // s Session Name                  else if(line.ToLower().StartsWith("s")){                      sdp.SessionName = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // i Session Information                  else if(line.ToLower().StartsWith("i")){                      sdp.SessionDescription = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // u URI                  else if(line.ToLower().StartsWith("u")){                      sdp.Uri = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // c Connection Data                  else if(line.ToLower().StartsWith("c")){                      sdp.ConnectionData = SDP_ConnectionData.Parse(line);                  }                  // t Timing                  else if(line.ToLower().StartsWith("t")){                      sdp.Times.Add(SDP_Time.Parse(line));                  }                  // a Attributes                  else if(line.ToLower().StartsWith("a")){                      sdp.Attributes.Add(SDP_Attribute.Parse(line));                  }                    line = r.ReadLine().Trim();              }
Magic Number,LumiSoft.Net.SDP,SDP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SDP\SDP_Message.cs,Parse,The following statement contains a magic number: while(line != null){                  line = line.Trim();                    // We reached to media descriptions                  if(line.ToLower().StartsWith("m")){                      /*                          m=  (media name and transport address)                          i=* (media title)                          c=* (connection information -- optional if included at session level)                          b=* (zero or more bandwidth information lines)                          k=* (encryption key)                          a=* (zero or more media attribute lines)                      */                        SDP_Media media = new SDP_Media();                      media.MediaDescription = SDP_MediaDescription.Parse(line);                      sdp.Media.Add(media);                      line = r.ReadLine();                      // Pasrse media fields and attributes                      while(line != null){                          line = line.Trim();                            // Next media descrition' just stop active media description parsing'                           // fall through main while' allow next while loop to process it.                          if(line.ToLower().StartsWith("m")){                              break;                          }                          // i media title                          else if(line.ToLower().StartsWith("i")){                              media.Title = line.Split(new char[]{'='}'2)[1].Trim();                          }                          // c connection information                          else if(line.ToLower().StartsWith("c")){                              media.ConnectionData = SDP_ConnectionData.Parse(line);                          }                          // a Attributes                          else if(line.ToLower().StartsWith("a")){                              media.Attributes.Add(SDP_Attribute.Parse(line));                          }                            line = r.ReadLine();                      }                      break;                  }                  // v Protocol Version                  else if(line.ToLower().StartsWith("v")){                      sdp.Version = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // o Origin                  else if(line.ToLower().StartsWith("o")){                      sdp.Originator = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // s Session Name                  else if(line.ToLower().StartsWith("s")){                      sdp.SessionName = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // i Session Information                  else if(line.ToLower().StartsWith("i")){                      sdp.SessionDescription = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // u URI                  else if(line.ToLower().StartsWith("u")){                      sdp.Uri = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // c Connection Data                  else if(line.ToLower().StartsWith("c")){                      sdp.ConnectionData = SDP_ConnectionData.Parse(line);                  }                  // t Timing                  else if(line.ToLower().StartsWith("t")){                      sdp.Times.Add(SDP_Time.Parse(line));                  }                  // a Attributes                  else if(line.ToLower().StartsWith("a")){                      sdp.Attributes.Add(SDP_Attribute.Parse(line));                  }                    line = r.ReadLine().Trim();              }
Magic Number,LumiSoft.Net.SDP,SDP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SDP\SDP_Message.cs,Parse,The following statement contains a magic number: while(line != null){                  line = line.Trim();                    // We reached to media descriptions                  if(line.ToLower().StartsWith("m")){                      /*                          m=  (media name and transport address)                          i=* (media title)                          c=* (connection information -- optional if included at session level)                          b=* (zero or more bandwidth information lines)                          k=* (encryption key)                          a=* (zero or more media attribute lines)                      */                        SDP_Media media = new SDP_Media();                      media.MediaDescription = SDP_MediaDescription.Parse(line);                      sdp.Media.Add(media);                      line = r.ReadLine();                      // Pasrse media fields and attributes                      while(line != null){                          line = line.Trim();                            // Next media descrition' just stop active media description parsing'                           // fall through main while' allow next while loop to process it.                          if(line.ToLower().StartsWith("m")){                              break;                          }                          // i media title                          else if(line.ToLower().StartsWith("i")){                              media.Title = line.Split(new char[]{'='}'2)[1].Trim();                          }                          // c connection information                          else if(line.ToLower().StartsWith("c")){                              media.ConnectionData = SDP_ConnectionData.Parse(line);                          }                          // a Attributes                          else if(line.ToLower().StartsWith("a")){                              media.Attributes.Add(SDP_Attribute.Parse(line));                          }                            line = r.ReadLine();                      }                      break;                  }                  // v Protocol Version                  else if(line.ToLower().StartsWith("v")){                      sdp.Version = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // o Origin                  else if(line.ToLower().StartsWith("o")){                      sdp.Originator = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // s Session Name                  else if(line.ToLower().StartsWith("s")){                      sdp.SessionName = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // i Session Information                  else if(line.ToLower().StartsWith("i")){                      sdp.SessionDescription = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // u URI                  else if(line.ToLower().StartsWith("u")){                      sdp.Uri = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // c Connection Data                  else if(line.ToLower().StartsWith("c")){                      sdp.ConnectionData = SDP_ConnectionData.Parse(line);                  }                  // t Timing                  else if(line.ToLower().StartsWith("t")){                      sdp.Times.Add(SDP_Time.Parse(line));                  }                  // a Attributes                  else if(line.ToLower().StartsWith("a")){                      sdp.Attributes.Add(SDP_Attribute.Parse(line));                  }                    line = r.ReadLine().Trim();              }
Magic Number,LumiSoft.Net.SDP,SDP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SDP\SDP_Message.cs,Parse,The following statement contains a magic number: while(line != null){                  line = line.Trim();                    // We reached to media descriptions                  if(line.ToLower().StartsWith("m")){                      /*                          m=  (media name and transport address)                          i=* (media title)                          c=* (connection information -- optional if included at session level)                          b=* (zero or more bandwidth information lines)                          k=* (encryption key)                          a=* (zero or more media attribute lines)                      */                        SDP_Media media = new SDP_Media();                      media.MediaDescription = SDP_MediaDescription.Parse(line);                      sdp.Media.Add(media);                      line = r.ReadLine();                      // Pasrse media fields and attributes                      while(line != null){                          line = line.Trim();                            // Next media descrition' just stop active media description parsing'                           // fall through main while' allow next while loop to process it.                          if(line.ToLower().StartsWith("m")){                              break;                          }                          // i media title                          else if(line.ToLower().StartsWith("i")){                              media.Title = line.Split(new char[]{'='}'2)[1].Trim();                          }                          // c connection information                          else if(line.ToLower().StartsWith("c")){                              media.ConnectionData = SDP_ConnectionData.Parse(line);                          }                          // a Attributes                          else if(line.ToLower().StartsWith("a")){                              media.Attributes.Add(SDP_Attribute.Parse(line));                          }                            line = r.ReadLine();                      }                      break;                  }                  // v Protocol Version                  else if(line.ToLower().StartsWith("v")){                      sdp.Version = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // o Origin                  else if(line.ToLower().StartsWith("o")){                      sdp.Originator = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // s Session Name                  else if(line.ToLower().StartsWith("s")){                      sdp.SessionName = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // i Session Information                  else if(line.ToLower().StartsWith("i")){                      sdp.SessionDescription = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // u URI                  else if(line.ToLower().StartsWith("u")){                      sdp.Uri = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // c Connection Data                  else if(line.ToLower().StartsWith("c")){                      sdp.ConnectionData = SDP_ConnectionData.Parse(line);                  }                  // t Timing                  else if(line.ToLower().StartsWith("t")){                      sdp.Times.Add(SDP_Time.Parse(line));                  }                  // a Attributes                  else if(line.ToLower().StartsWith("a")){                      sdp.Attributes.Add(SDP_Attribute.Parse(line));                  }                    line = r.ReadLine().Trim();              }
Magic Number,LumiSoft.Net.SDP,SDP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SDP\SDP_Message.cs,Parse,The following statement contains a magic number: while(line != null){                  line = line.Trim();                    // We reached to media descriptions                  if(line.ToLower().StartsWith("m")){                      /*                          m=  (media name and transport address)                          i=* (media title)                          c=* (connection information -- optional if included at session level)                          b=* (zero or more bandwidth information lines)                          k=* (encryption key)                          a=* (zero or more media attribute lines)                      */                        SDP_Media media = new SDP_Media();                      media.MediaDescription = SDP_MediaDescription.Parse(line);                      sdp.Media.Add(media);                      line = r.ReadLine();                      // Pasrse media fields and attributes                      while(line != null){                          line = line.Trim();                            // Next media descrition' just stop active media description parsing'                           // fall through main while' allow next while loop to process it.                          if(line.ToLower().StartsWith("m")){                              break;                          }                          // i media title                          else if(line.ToLower().StartsWith("i")){                              media.Title = line.Split(new char[]{'='}'2)[1].Trim();                          }                          // c connection information                          else if(line.ToLower().StartsWith("c")){                              media.ConnectionData = SDP_ConnectionData.Parse(line);                          }                          // a Attributes                          else if(line.ToLower().StartsWith("a")){                              media.Attributes.Add(SDP_Attribute.Parse(line));                          }                            line = r.ReadLine();                      }                      break;                  }                  // v Protocol Version                  else if(line.ToLower().StartsWith("v")){                      sdp.Version = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // o Origin                  else if(line.ToLower().StartsWith("o")){                      sdp.Originator = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // s Session Name                  else if(line.ToLower().StartsWith("s")){                      sdp.SessionName = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // i Session Information                  else if(line.ToLower().StartsWith("i")){                      sdp.SessionDescription = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // u URI                  else if(line.ToLower().StartsWith("u")){                      sdp.Uri = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // c Connection Data                  else if(line.ToLower().StartsWith("c")){                      sdp.ConnectionData = SDP_ConnectionData.Parse(line);                  }                  // t Timing                  else if(line.ToLower().StartsWith("t")){                      sdp.Times.Add(SDP_Time.Parse(line));                  }                  // a Attributes                  else if(line.ToLower().StartsWith("a")){                      sdp.Attributes.Add(SDP_Attribute.Parse(line));                  }                    line = r.ReadLine().Trim();              }
Magic Number,LumiSoft.Net.SDP,SDP_Message,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SDP\SDP_Message.cs,Parse,The following statement contains a magic number: while(line != null){                  line = line.Trim();                    // We reached to media descriptions                  if(line.ToLower().StartsWith("m")){                      /*                          m=  (media name and transport address)                          i=* (media title)                          c=* (connection information -- optional if included at session level)                          b=* (zero or more bandwidth information lines)                          k=* (encryption key)                          a=* (zero or more media attribute lines)                      */                        SDP_Media media = new SDP_Media();                      media.MediaDescription = SDP_MediaDescription.Parse(line);                      sdp.Media.Add(media);                      line = r.ReadLine();                      // Pasrse media fields and attributes                      while(line != null){                          line = line.Trim();                            // Next media descrition' just stop active media description parsing'                           // fall through main while' allow next while loop to process it.                          if(line.ToLower().StartsWith("m")){                              break;                          }                          // i media title                          else if(line.ToLower().StartsWith("i")){                              media.Title = line.Split(new char[]{'='}'2)[1].Trim();                          }                          // c connection information                          else if(line.ToLower().StartsWith("c")){                              media.ConnectionData = SDP_ConnectionData.Parse(line);                          }                          // a Attributes                          else if(line.ToLower().StartsWith("a")){                              media.Attributes.Add(SDP_Attribute.Parse(line));                          }                            line = r.ReadLine();                      }                      break;                  }                  // v Protocol Version                  else if(line.ToLower().StartsWith("v")){                      sdp.Version = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // o Origin                  else if(line.ToLower().StartsWith("o")){                      sdp.Originator = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // s Session Name                  else if(line.ToLower().StartsWith("s")){                      sdp.SessionName = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // i Session Information                  else if(line.ToLower().StartsWith("i")){                      sdp.SessionDescription = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // u URI                  else if(line.ToLower().StartsWith("u")){                      sdp.Uri = line.Split(new char[]{'='}'2)[1].Trim();                  }                  // c Connection Data                  else if(line.ToLower().StartsWith("c")){                      sdp.ConnectionData = SDP_ConnectionData.Parse(line);                  }                  // t Timing                  else if(line.ToLower().StartsWith("t")){                      sdp.Times.Add(SDP_Time.Parse(line));                  }                  // a Attributes                  else if(line.ToLower().StartsWith("a")){                      sdp.Attributes.Add(SDP_Attribute.Parse(line));                  }                    line = r.ReadLine().Trim();              }
Magic Number,LumiSoft.Net.SIP,SIP_Utils,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\SIP_Utils.cs,CreateTag,The following statement contains a magic number: return Guid.NewGuid().ToString().Replace("-"'"").Substring(8);
Duplicate Code,LumiSoft.Net.IO,StreamHelper,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\StreamHelper.cs,ReadLineInternal,The method contains a code clone-set at the following line numbers (starting from the method definition): ((30' 53)' (65' 88))
Duplicate Code,LumiSoft.Net.IMAP.Client,IMAP_Client,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Client\IMAP_Client.cs,DeleteMessages,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 53)' (57' 78))
Duplicate Code,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The method contains a code clone-set at the following line numbers (starting from the method definition): ((115' 143)' (153' 181))
Duplicate Code,LumiSoft.Net.SIP.Stack,SIP_ClientTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ClientTransaction.cs,ProcessResponse,The method contains a code clone-set at the following line numbers (starting from the method definition): ((271' 292)' (314' 335))
Duplicate Code,LumiSoft.Net.SIP.Stack,SIP_ServerTransaction,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_ServerTransaction.cs,SendResponse,The method contains a code clone-set at the following line numbers (starting from the method definition): ((193' 217)' (227' 251))
Duplicate Code,LumiSoft.Net.SIP.Stack,SIP_RequestSender,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\SIP\Stack\SIP_RequestSender.cs,Authorize,The method contains a code clone-set at the following line numbers (starting from the method definition): ((17' 36)' (46' 65))
Duplicate Code,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,AUTH,The method contains a code clone-set at the following line numbers (starting from the method definition): ((143' 165)' (186' 208))
Missing Default,LumiSoft.Net.SMTP.Client,SmtpClientEx,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\_Obsolete\SmtpClientEx.cs,Connect,The following switch statement is missing a default case: switch(dnsResponse.ResponseCode)  				{  					case RCODE.NO_ERROR:  						DNS_rr_MX[] mxRecords = dnsResponse.GetMXRecords();    						// Try all available hosts by MX preference order' if can't connect specified host.  						foreach(DNS_rr_MX mx in mxRecords){  							try{  								if(m_pLogger != null){  									m_pLogger.AddTextEntry("Connecting with mx record to: " + mx.Host);  								}  								m_pSocket.Connect(mx.Host'port'ssl);                                                                  connected = true;  								break;  							}  							catch(Exception x){ // Just skip and let for to try next host.									  								if(m_pLogger != null){  									m_pLogger.AddTextEntry("Failed connect to: " + mx.Host + " error:" + x.Message);  								}  							}  						}    						// None of MX didn't connect  						if(mxRecords.Length > 0 && !connected){  							throw new Exception("Destination email server is down");  						}    						/* Rfc 2821 5  						 If no MX records are found' but an A RR is found' the A RR is treated as  						 if it was associated with an implicit MX RR' with a preference of 0'  						 pointing to that host.  						*/  						if(!connected){  							// Try to connect with A record  							IPAddress[] ipEntry = null;  							try{  								if(m_pLogger != null){  									m_pLogger.AddTextEntry("No mx record' trying to get A record for: " + domain);  								}  								ipEntry = Dns_Client.Resolve(domain);								  							}  							catch{  								if(m_pLogger != null){  									m_pLogger.AddTextEntry("Invalid domain'no MX or A record: " + domain);  								}  								throw new Exception("Invalid domain'no MX or A record: " + domain);  							}    							try{  								if(m_pLogger != null){  									m_pLogger.AddTextEntry("Connecting with A record to:" + domain);  								}  								m_pSocket.Connect(domain'port'ssl);  							}  							catch{  								if(m_pLogger != null){  									m_pLogger.AddTextEntry("Failed connect to:" + domain);  								}  								throw new Exception("Destination email server is down");  							}  						}  						break;    					case RCODE.NAME_ERROR:  						if(m_pLogger != null){  							m_pLogger.AddTextEntry("Invalid domain'no MX or A record: " + domain);  						}  						throw new Exception("Invalid domain'no MX or A record: " + domain);    					case RCODE.SERVER_FAILURE:  						if(m_pLogger != null){  							m_pLogger.AddTextEntry("Dns server unvailable.");  						}  						throw new Exception("Dns server unvailable.");  					}
Missing Default,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,EndRecieveCmd,The following switch statement is missing a default case: switch(result)  				{  					case SocketCallBackResult.Ok:  						MemoryStream strm = (MemoryStream)tag;    						string cmdLine = System.Text.Encoding.Default.GetString(strm.ToArray());    						// Exceute command  						if(SwitchCommand(cmdLine)){  							// Session end' close session  							EndSession();  						}  						break;    					case SocketCallBackResult.LengthExceeded:  						this.Socket.WriteLine("* BAD Line too long.");    						BeginRecieveCmd();  						break;    					case SocketCallBackResult.SocketClosed:  						EndSession();  						break;    					case SocketCallBackResult.Exception:  						OnError(exception);  						break;  				}
Missing Default,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,EndAppendCmd,The following switch statement is missing a default case: switch(result)  				{  					case SocketCallBackResult.Ok:  						Hashtable         param   = (Hashtable)tag;  						string            cmdTag  = (string)param["cmdTag"];  						string            mailbox = (string)param["mailbox"];  						IMAP_MessageFlags mFlags  = (IMAP_MessageFlags)param["mFlags"];  						DateTime          date    = (DateTime)param["date"];  						MemoryStream      strm    = (MemoryStream)param["strm"];  						  						IMAP_Message msg = new IMAP_Message(null'""'0'date'0'mFlags);  						string errotText = m_pServer.OnStoreMessage(this'mailbox'msg'strm.ToArray());  						if(errotText == null){  							this.Socket.WriteLine(cmdTag + " OK APPEND completed' recieved " + strm.Length + " bytes");  						}  						else{  							this.Socket.WriteLine(cmdTag + " NO " + errotText);  						}												  						break;    					case SocketCallBackResult.LengthExceeded:  					//	SendData("552 Requested mail action aborted: exceeded storage allocation\r\n");    					//	BeginRecieveCmd();  						break;    					case SocketCallBackResult.SocketClosed:  						EndSession();  						return;    					case SocketCallBackResult.Exception:  						OnError(exception);  						return;  				}
Missing Default,LumiSoft.Net.IMAP.Server,IMAP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\IMAP\Server\IMAP_Session.cs,Store,The following switch statement is missing a default case: switch(flagsAction)  					{  						case "REPLACE":  							msg.SetFlags(mFlags);  							break;    						case "ADD":  							msg.SetFlags(msg.Flags | mFlags);  							break;    						case "REMOVE":  							msg.SetFlags(msg.Flags & ~mFlags);  							break;  					}
Missing Default,LumiSoft.Net.FTP.Server,FTP_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\FTP\Server\FTP_Session.cs,EndRecieveCmd,The following switch statement is missing a default case: switch(result)  				{  					case SocketCallBackResult.Ok:  						MemoryStream strm = (MemoryStream)tag;    						string cmdLine = System.Text.Encoding.Default.GetString(strm.ToArray());    					//	if(m_pServer.LogCommands){  					//		m_pLogWriter.AddEntry(cmdLine + "<CRLF>"'this.SessionID'this.RemoteEndPoint.Address.ToString()'"C");  					//	}    						// Exceute command  						if(SwitchCommand(cmdLine)){  							// Session end' close session  							EndSession();  						}  						break;    					case SocketCallBackResult.LengthExceeded:  						this.Socket.WriteLine("500 Line too long.");    						BeginRecieveCmd();  						break;    					case SocketCallBackResult.SocketClosed:  						EndSession();  						break;    					case SocketCallBackResult.Exception:  						OnError(exception);  						break;  				}
Missing Default,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,EndRecieveCmd,The following switch statement is missing a default case: switch(result)  				{  					case SocketCallBackResult.Ok:  						MemoryStream strm = (MemoryStream)tag;    						string cmdLine = System.Text.Encoding.Default.GetString(strm.ToArray());    						// Exceute command  						if(SwitchCommand(cmdLine)){  							// Session end' close session  							EndSession();  						}  						break;    					case SocketCallBackResult.LengthExceeded:  						this.Socket.WriteLine("-ERR Line too long.");    						BeginRecieveCmd();  						break;    					case SocketCallBackResult.SocketClosed:  						EndSession();  						break;    					case SocketCallBackResult.Exception:  						OnError(exception);  						break;  				}
Missing Default,LumiSoft.Net.POP3.Server,POP3_Session,C:\repos\waseems_inbox2_desktop\ThirdParty\Src\Lumisoft.Net\POP3\Server\POP3_Session.cs,EndSend,The following switch statement is missing a default case: switch(result)  				{  					case SocketCallBackResult.Ok:  						BeginRecieveCmd();  						break;    					case SocketCallBackResult.SocketClosed:  						EndSession();  						break;    					case SocketCallBackResult.Exception:  						OnError(exception);  						break;  				}
