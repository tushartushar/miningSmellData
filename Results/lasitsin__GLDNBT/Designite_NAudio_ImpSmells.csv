Implementation smell,Namespace,Class,File,Method,Description
Long Method,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The method has 132 lines of code.
Long Method,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The method has 128 lines of code.
Long Method,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The method has 149 lines of code.
Complex Method,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,Cyclomatic complexity of the method is 12
Complex Method,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,Cyclomatic complexity of the method is 35
Complex Method,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,Cyclomatic complexity of the method is 16
Complex Method,NAudio.Dmo,DmoMediaType,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dmo\DmoMediaType.cs,SetWaveFormat,Cyclomatic complexity of the method is 13
Complex Method,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,FFT,Cyclomatic complexity of the method is 12
Complex Method,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,Cyclomatic complexity of the method is 11
Complex Method,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,Cyclomatic complexity of the method is 10
Complex Method,NAudio.Wave,WaveWindowNative,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveWindow.cs,WndProc,Cyclomatic complexity of the method is 16
Complex Method,NAudio.Wave,WaveWindow,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveWindow.cs,WndProc,Cyclomatic complexity of the method is 16
Complex Method,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,MarshalFromPtr,Cyclomatic complexity of the method is 16
Complex Method,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,Cyclomatic complexity of the method is 11
Complex Method,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,Cyclomatic complexity of the method is 8
Complex Method,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,Cyclomatic complexity of the method is 8
Complex Method,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,Cyclomatic complexity of the method is 12
Complex Method,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,Cyclomatic complexity of the method is 9
Complex Method,NAudio.Wave,WaveOutThreadSafe,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutThreadSafe.cs,ThreadProc,Cyclomatic complexity of the method is 27
Complex Method,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,Cyclomatic complexity of the method is 10
Complex Method,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,Cyclomatic complexity of the method is 10
Complex Method,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,ReadWaveHeader,Cyclomatic complexity of the method is 10
Complex Method,NAudio.Wave,WaveFormatConversionStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFormatConversionStream.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,Cyclomatic complexity of the method is 15
Complex Method,NAudio.SoundFont,InfoChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\InfoChunk.cs,InfoChunk,Cyclomatic complexity of the method is 43
Complex Method,NAudio.SoundFont,PresetsChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\PresetsChunk.cs,PresetsChunk,Cyclomatic complexity of the method is 40
Complex Method,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,Cyclomatic complexity of the method is 142
Complex Method,NAudio.Midi,MetaEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MetaEvent.cs,ReadMetaEvent,Cyclomatic complexity of the method is 38
Complex Method,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,FromRawMessage,Cyclomatic complexity of the method is 30
Complex Method,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,ReadNextEvent,Cyclomatic complexity of the method is 35
Complex Method,NAudio.Midi,MidiEventCollection,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEventCollection.cs,AddEvent,Cyclomatic complexity of the method is 16
Complex Method,NAudio.Midi,MidiEventCollection,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEventCollection.cs,PrepareForExport,Cyclomatic complexity of the method is 8
Complex Method,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,MidiFile,Cyclomatic complexity of the method is 20
Complex Method,NAudio.Midi,MidiIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiIn.cs,Callback,Cyclomatic complexity of the method is 18
Complex Method,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,GetControlDetails,Cyclomatic complexity of the method is 11
Complex Method,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,IsControlBoolean,Cyclomatic complexity of the method is 13
Complex Method,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,IsControlSigned,Cyclomatic complexity of the method is 8
Complex Method,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,IsControlUnsigned,Cyclomatic complexity of the method is 11
Complex Method,NAudio.Wave.Asio,ASIODriverExt,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriverExt.cs,AsioMessageCallBack,Cyclomatic complexity of the method is 11
Complex Method,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,Cyclomatic complexity of the method is 14
Long Parameter List,NAudio.CoreAudioApi,AudioClient,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\AudioClient.cs,Initialize,The method has 6 parameters.
Long Parameter List,NAudio.CoreAudioApi.Interfaces,IAudioCaptureClient,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\Interfaces\IAudioCaptureClient.cs,GetBuffer,The method has 5 parameters.
Long Parameter List,NAudio.CoreAudioApi.Interfaces,IAudioClient,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\Interfaces\IAudioClient.cs,Initialize,The method has 6 parameters.
Long Parameter List,NAudio.Dmo,DmoInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dmo\DmoInterop.cs,DMOEnum,The method has 7 parameters.
Long Parameter List,NAudio.Dmo,MediaObject,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dmo\MediaObject.cs,ProcessInput,The method has 5 parameters.
Long Parameter List,NAudio.Dmo,IMediaObject,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dmo\IMediaObject.cs,ProcessInput,The method has 5 parameters.
Long Parameter List,NAudio.Wave,WaveIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveIn.cs,Callback,The method has 5 parameters.
Long Parameter List,NAudio.Wave,WaveInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveInterop.cs,waveOutOpen,The method has 6 parameters.
Long Parameter List,NAudio.Wave,WaveInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveInterop.cs,waveOutOpenWindow,The method has 6 parameters.
Long Parameter List,NAudio.Wave,WaveInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveInterop.cs,waveInOpen,The method has 6 parameters.
Long Parameter List,NAudio.Wave,WaveInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveInterop.cs,waveInOpenWindow,The method has 6 parameters.
Long Parameter List,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,CreateCustomFormat,The method has 6 parameters.
Long Parameter List,NAudio.Wave,WaveOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOut.cs,Callback,The method has 5 parameters.
Long Parameter List,NAudio.Wave,WaveOutThreadSafe,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutThreadSafe.cs,Callback,The method has 5 parameters.
Long Parameter List,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The method has 5 parameters.
Long Parameter List,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,ReadWaveHeader,The method has 5 parameters.
Long Parameter List,NAudio.Midi,MidiIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiIn.cs,Callback,The method has 5 parameters.
Long Parameter List,NAudio.Midi,MidiInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiInterop.cs,midiInOpen,The method has 5 parameters.
Long Parameter List,NAudio.Midi,MidiInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiInterop.cs,midiInOpenWindow,The method has 5 parameters.
Long Parameter List,NAudio.Midi,MidiInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiInterop.cs,midiOutOpen,The method has 5 parameters.
Long Parameter List,NAudio.Midi,MidiInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiInterop.cs,midiStreamOpen,The method has 6 parameters.
Long Parameter List,NAudio.Midi,MidiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiOut.cs,Callback,The method has 5 parameters.
Long Parameter List,NAudio.Midi,NoteEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\NoteEvent.cs,NoteEvent,The method has 5 parameters.
Long Parameter List,NAudio.Midi,NoteOnEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\NoteOnEvent.cs,NoteOnEvent,The method has 5 parameters.
Long Parameter List,NAudio.Midi,TimeSignatureEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TimeSignatureEvent.cs,TimeSignatureEvent,The method has 5 parameters.
Long Parameter List,NAudio.Midi,TimeSignatureEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TimeSignatureEvent.cs,TimeSignatureEvent,The method has 5 parameters.
Long Parameter List,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,GetMixerControl,The method has 5 parameters.
Long Parameter List,NAudio.Mixer,MixerInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerInterop.cs,mixerOpen,The method has 5 parameters.
Long Parameter List,NAudio.Utils,ByteEncoding,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Utils\ByteEncoding.cs,GetBytes,The method has 5 parameters.
Long Parameter List,NAudio.Utils,ByteEncoding,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Utils\ByteEncoding.cs,GetChars,The method has 5 parameters.
Long Parameter List,NAudio.Wave.Asio,ASIODriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriver.cs,CoCreateInstance,The method has 5 parameters.
Long Parameter List,NAudio.Wave.Compression,AcmDriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmDriver.cs,ShowFormatChooseDialog,The method has 7 parameters.
Long Parameter List,NAudio.Wave.Compression,AcmInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmInterop.cs,acmFormatEnum,The method has 5 parameters.
Long Parameter List,NAudio.Wave.Compression,AcmInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmInterop.cs,acmFormatSuggest,The method has 5 parameters.
Long Parameter List,NAudio.Wave.Compression,AcmInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmInterop.cs,acmFormatSuggest2,The method has 5 parameters.
Long Parameter List,NAudio.Wave.Compression,AcmInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmInterop.cs,acmFormatTagEnum,The method has 5 parameters.
Long Parameter List,NAudio.Wave.Compression,AcmInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmInterop.cs,acmStreamOpen,The method has 8 parameters.
Long Parameter List,NAudio.Wave.Compression,AcmInterop,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmInterop.cs,acmStreamOpen2,The method has 8 parameters.
Long Statement,NAudio.CoreAudioApi,AudioCaptureClient,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\AudioCaptureClient.cs,GetBuffer,The length of the statement  "	Marshal.ThrowExceptionForHR (audioCaptureClientInterface.GetBuffer (out bufferPointer' out numFramesToRead' out bufferFlags' out devicePosition' out qpcPosition)); " is 163.
Long Statement,NAudio.CoreAudioApi,AudioCaptureClient,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\AudioCaptureClient.cs,GetBuffer,The length of the statement  "	Marshal.ThrowExceptionForHR (audioCaptureClientInterface.GetBuffer (out bufferPointer' out numFramesToRead' out bufferFlags' out devicePosition' out qpcPosition)); " is 163.
Long Statement,NAudio.CoreAudioApi,AudioClient,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\AudioClient.cs,Initialize,The length of the statement  "	int hresult = audioClientInterface.Initialize (shareMode' streamFlags' bufferDuration' periodicity' waveFormat' ref audioSessionGuid); " is 134.
Long Statement,NAudio.CoreAudioApi,AudioEndpointVolumeCallback,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\AudioEndpointVolumeCallback.cs,OnNotify,The length of the statement  "	AudioVolumeNotificationDataStruct data = (AudioVolumeNotificationDataStruct)Marshal.PtrToStructure (NotifyData' typeof(AudioVolumeNotificationDataStruct)); " is 155.
Long Statement,NAudio.CoreAudioApi,AudioEndpointVolumeCallback,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\AudioEndpointVolumeCallback.cs,OnNotify,The length of the statement  "	AudioVolumeNotificationData NotificationData = new AudioVolumeNotificationData (data.guidEventContext' data.bMuted' data.fMasterVolume' voldata); " is 145.
Long Statement,NAudio.CoreAudioApi,WasapiCapture,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\WasapiCapture.cs,InitializeCaptureDevice,The length of the statement  "	audioClient.Initialize (AudioClientShareMode.Shared' AudioClientStreamFlags.None' requestedDuration' 0' WaveFormat' Guid.Empty); " is 128.
Long Statement,NAudio.CoreAudioApi,MMDevice,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\MMDevice.cs,GetAudioMeterInformation,The length of the statement  "	Marshal.ThrowExceptionForHR (deviceInterface.Activate (ref IID_IAudioMeterInformation' ClsCtx.ALL' IntPtr.Zero' out result)); " is 125.
Long Statement,NAudio.CoreAudioApi,MMDevice,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\MMDevice.cs,GetAudioEndpointVolume,The length of the statement  "	Marshal.ThrowExceptionForHR (deviceInterface.Activate (ref IID_IAudioEndpointVolume' ClsCtx.ALL' IntPtr.Zero' out result)); " is 123.
Long Statement,NAudio.CoreAudioApi,MMDeviceEnumerator,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\MMDeviceEnumerator.cs,GetDefaultAudioEndpoint,The length of the statement  "	Marshal.ThrowExceptionForHR (((IMMDeviceEnumerator)_realEnumerator).GetDefaultAudioEndpoint (dataFlow' role' out _Device)); " is 123.
Long Statement,NAudio.Dmo,MediaObject,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dmo\MediaObject.cs,GetInputSizeInfo,The length of the statement  "	Marshal.ThrowExceptionForHR (mediaObject.GetInputSizeInfo (inputStreamIndex' out size' out maxLookahead' out alignment)); " is 121.
Long Statement,NAudio.Dmo,MediaObject,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dmo\MediaObject.cs,IsAcceptingData,The length of the statement  "	return (flags & DmoInputStatusFlags.DMO_INPUT_STATUSF_ACCEPT_DATA) == DmoInputStatusFlags.DMO_INPUT_STATUSF_ACCEPT_DATA; " is 120.
Long Statement,NAudio.Dmo,DmoMediaType,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dmo\DmoMediaType.cs,SetWaveFormat,The length of the statement  "	this.bFixedSizeSamples = (this.SubType == AudioMediaSubtypes.MEDIASUBTYPE_PCM || this.SubType == AudioMediaSubtypes.MEDIASUBTYPE_IEEE_FLOAT); " is 141.
Long Statement,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,Transform,The length of the statement  "		y [n] = (float)((b0 / a0) * x [n] + (b1 / a0) * x [n - 1] + (b2 / a0) * x [n - 2] - (a1 / a0) * y [n - 1] - (a2 / a0) * y [n - 2]); " is 131.
Long Statement,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The length of the statement  "	return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))); " is 198.
Long Statement,NAudio.FileFormats.Map,CakewalkDrumMapping,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Map\CakewalkDrumMapping.cs,ToString,The length of the statement  "	return String.Format ("{0} In:{1} Out:{2} Ch:{3} Port:{4} Vel+:{5} Vel:{6}%"' noteName' inNote' outNote' channel' outPort' velocityAdjust' VelocityScale * 100); " is 160.
Long Statement,NAudio.Wave,AcmMp3FrameDecompressor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3FrameDecompressor.cs,DecompressFrame,The length of the statement  "		throw new InvalidOperationException (String.Format ("Couldn't convert the whole MP3 frame (converted {0}/{1})"' sourceBytesConverted' frame.FrameLength)); " is 154.
Long Statement,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The length of the statement  "	if ((frame.RawData [offset + 0] == 'X') && (frame.RawData [offset + 1] == 'i') && (frame.RawData [offset + 2] == 'n') && (frame.RawData [offset + 3] == 'g')) { " is 159.
Long Statement,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,Equals,The length of the statement  "		return waveFormatTag == other.waveFormatTag && channels == other.channels && sampleRate == other.sampleRate && averageBytesPerSecond == other.averageBytesPerSecond && blockAlign == other.blockAlign && bitsPerSample == other.bitsPerSample; " is 238.
Long Statement,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,ToString,The length of the statement  "	return String.Format ("Microsoft ADPCM {0} Hz {1} channels {2} bits per sample {3} samples per block"' this.SampleRate' this.channels' this.bitsPerSample' this.samplesPerBlock); " is 177.
Long Statement,NAudio.Wave,WaveFormatExtensible,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormatExtensible.cs,ToString,The length of the statement  "	return String.Format ("{0} wBitsPerSample:{1} dwChannelMask:{2} subFormat:{3} extraSize:{4}"' base.ToString ()' wValidBitsPerSample' dwChannelMask' subFormat' extraSize); " is 170.
Long Statement,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The length of the statement  "			bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS; " is 254.
Long Statement,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The length of the statement  "			System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize"); " is 125.
Long Statement,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The length of the statement  "			audioClient.Initialize (shareMode' AudioClientStreamFlags.EventCallback' latencyRefTimes' latencyRefTimes' outputFormat' Guid.Empty); " is 133.
Long Statement,NAudio.Wave,WaveBuffer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveBuffer.cs,CheckValidityCount,The length of the statement  "		throw new ArgumentOutOfRangeException (argName' String.Format ("{0} cannot set a count ({1}) that is not 4 bytes aligned "' argName' newNumberOfBytes)); " is 152.
Long Statement,NAudio.Wave,WaveBuffer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveBuffer.cs,CheckValidityCount,The length of the statement  "		throw new ArgumentOutOfRangeException (argName' String.Format ("{0} cannot set a count that exceed max count {1}"' argName' byteBuffer.Length / sizeOfValue)); " is 158.
Long Statement,NAudio.Wave,WaveCallbackInfo,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveCallbackInfo.cs,WaveOutOpen,The length of the statement  "		result = WaveInterop.waveOutOpen (out waveOutHandle' (IntPtr)deviceNumber' waveFormat' callback' IntPtr.Zero' WaveInterop.WaveInOutOpenFlags.CallbackFunction); " is 159.
Long Statement,NAudio.Wave,WaveCallbackInfo,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveCallbackInfo.cs,WaveOutOpen,The length of the statement  "		result = WaveInterop.waveOutOpenWindow (out waveOutHandle' (IntPtr)deviceNumber' waveFormat' this.Handle' IntPtr.Zero' WaveInterop.WaveInOutOpenFlags.CallbackWindow); " is 166.
Long Statement,NAudio.Wave,WaveCallbackInfo,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveCallbackInfo.cs,WaveInOpen,The length of the statement  "		result = WaveInterop.waveInOpen (out waveInHandle' (IntPtr)deviceNumber' waveFormat' callback' IntPtr.Zero' WaveInterop.WaveInOutOpenFlags.CallbackFunction); " is 157.
Long Statement,NAudio.Wave,WaveCallbackInfo,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveCallbackInfo.cs,WaveInOpen,The length of the statement  "		result = WaveInterop.waveInOpenWindow (out waveInHandle' (IntPtr)deviceNumber' waveFormat' this.Handle' IntPtr.Zero' WaveInterop.WaveInOutOpenFlags.CallbackWindow); " is 164.
Long Statement,NAudio.Wave,WaveOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOut.cs,Init,The length of the statement  "	int bufferSize = waveProvider.WaveFormat.ConvertLatencyToByteSize ((DesiredLatency + NumberOfBuffers - 1) / NumberOfBuffers); " is 125.
Long Statement,NAudio.Wave,WaveOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOut.cs,GetPosition,The length of the statement  "			throw new Exception (string.Format ("waveOutGetPosition: wType -> Expected {0}' Received {1}"' MmTime.TIME_BYTES' mmTime.wType)); " is 129.
Long Statement,NAudio.Wave,WaveOutEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutEvent.cs,Init,The length of the statement  "	int bufferSize = waveProvider.WaveFormat.ConvertLatencyToByteSize ((DesiredLatency + NumberOfBuffers - 1) / NumberOfBuffers); " is 125.
Long Statement,NAudio.Wave,WaveOutEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutEvent.cs,Init,The length of the statement  "		result = WaveInterop.waveOutOpenWindow (out hWaveOut' (IntPtr)DeviceNumber' waveStream.WaveFormat' callbackEvent.SafeWaitHandle.DangerousGetHandle ()' IntPtr.Zero' WaveInterop.WaveInOutOpenFlags.CallbackEvent); " is 210.
Long Statement,NAudio.Wave,WaveOutEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutEvent.cs,PlaybackThread,The length of the statement  "	TimeSpan waitTime = TimeSpan.FromSeconds ((double)this.buffers [0].BufferSize / (this.waveStream.WaveFormat.AverageBytesPerSecond * 2)); " is 136.
Long Statement,NAudio.Wave,WaveOutThreadSafe,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutThreadSafe.cs,Init,The length of the statement  "	MmException.Try (WaveInterop.waveOutOpen (out hWaveOut' (IntPtr)devNumber' waveProvider.WaveFormat' callback' IntPtr.Zero' WaveInterop.WaveInOutOpenFlags.CallbackFunction)' "waveOutOpen"); " is 188.
Long Statement,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The length of the statement  "		throw new ApplicationException (String.Format ("Must read complete blocks: requested {0}' block align is {1}"' count' this.WaveFormat.BlockAlign)); " is 147.
Long Statement,NAudio.Wave,AudioFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AudioFileReader.cs,CreateReaderStream,The length of the statement  "		if (readerStream.WaveFormat.Encoding != WaveFormatEncoding.Pcm && readerStream.WaveFormat.Encoding != WaveFormatEncoding.IeeeFloat) { " is 133.
Long Statement,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,ReadWaveHeader,The length of the statement  "				Debug.Assert (false' String.Format ("Invalid chunk length {0}' pos: {1}. length: {2}"' chunkLength' stream.Position' stream.Length)); " is 133.
Long Statement,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,Read,The length of the statement  "		throw new ArgumentException (String.Format ("Must read complete blocks: requested {0}' block align is {1}"' count' this.WaveFormat.BlockAlign)); " is 144.
Long Statement,NAudio.Wave,WaveInBuffer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveInBuffer.cs,Reuse,The length of the statement  "	MmException.Try (WaveInterop.waveInUnprepareHeader (waveInHandle' header' Marshal.SizeOf (header))' "waveUnprepareHeader"); " is 123.
Long Statement,NAudio.Wave,WaveInBuffer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveInBuffer.cs,Reuse,The length of the statement  "	MmException.Try (WaveInterop.waveInPrepareHeader (waveInHandle' header' Marshal.SizeOf (header))' "waveInPrepareHeader"); " is 121.
Long Statement,NAudio.Wave,WaveOffsetStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveOffsetStream.cs,Read,The length of the statement  "		int sourceBytesRequired = (int)Math.Min (numBytes - bytesWritten' sourceLengthBytes + sourceOffsetBytes - sourceStream.Position); " is 129.
Long Statement,NAudio.SoundFont,InfoChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\InfoChunk.cs,ToString,The length of the statement  "	return String.Format ("Bank Name: {0}\r\nAuthor: {1}\r\nCopyright: {2}\r\nCreation Date: {3}\r\nTools: {4}\r\nComments: {5}\r\nSound Engine: {6}\r\nSoundFont Version: {7}\r\nTarget Product: {8}\r\nData ROM: {9}\r\nROM Version: {10}"' BankName' Author' Copyright' CreationDate' Tools' "TODO-fix comments"' //Comments' " is 316.
Long Statement,NAudio.SoundFont,Modulator,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\Modulator.cs,ToString,The length of the statement  "	return String.Format ("Modulator {0} {1} {2} {3} {4}"' sourceModulationData' destinationGenerator' amount' sourceModulationAmount' sourceTransform); " is 148.
Long Statement,NAudio.SoundFont,RiffChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\RiffChunk.cs,GetNextSubChunk,The length of the statement  "	//Console.WriteLine("DEBUG Failed to GetNextSubChunk because Position is {0}' dataOffset{1}' chunkSize {2}"'riffFile.BaseStream.Position'dataOffset'chunkSize); " is 159.
Long Statement,NAudio.SoundFont,RiffChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\RiffChunk.cs,GetData,The length of the statement  "		throw new ApplicationException (String.Format ("Couldn't read chunk's data Chunk: {0}' read {1} bytes"' this' data.Length)); " is 124.
Long Statement,NAudio.SoundFont,RiffChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\RiffChunk.cs,GetDataAsStructure,The length of the statement  "		throw new ApplicationException (String.Format ("Chunk size is: {0} so can't read structure of: {1}"' chunkSize' s.Length)); " is 123.
Long Statement,NAudio.SoundFont,RiffChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\RiffChunk.cs,GetDataAsStructureArray,The length of the statement  "		throw new ApplicationException (String.Format ("Chunk size is: {0} not a multiple of structure size: {1}"' chunkSize' s.Length)); " is 129.
Long Statement,NAudio.SoundFont,Zone,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\Zone.cs,ToString,The length of the statement  "	return String.Format ("Zone {0} Gens:{1} {2} Mods:{3}"' generatorCount' generatorIndex' modulatorCount' modulatorIndex); " is 120.
Long Statement,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,DrawSlider,The length of the statement  "	g.DrawLine (centreLine' sliderRectangle.Left' sliderRectangle.Top + sliderRectangle.Height / 2' sliderRectangle.Right' sliderRectangle.Top + sliderRectangle.Height / 2); " is 169.
Long Statement,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The length of the statement  "	g.FillRectangle (new SolidBrush (OffColor)' 1 + col * 6 * pixelSize' 1 + row * 8 * pixelSize' 5 * pixelSize' 7 * pixelSize); " is 124.
Long Statement,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The length of the statement  "				g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize); " is 130.
Long Statement,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The length of the statement  "		pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2); " is 137.
Long Statement,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The length of the statement  "			e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight)); " is 125.
Long Statement,NAudio.Midi,MetaEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MetaEvent.cs,ReadMetaEvent,The length of the statement  "		//System.Windows.Forms.MessageBox.Show(String.Format("Unsupported MetaEvent {0} length {1} pos {2}"'metaEvent'length'br.BaseStream.Position)); " is 142.
Long Statement,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,ToString,The length of the statement  "	sb.AppendFormat ("Format {0}' Tracks {1}' Delta Ticks Per Quarter Note {2}\r\n"' fileFormat' Tracks' deltaTicksPerQuarterNote); " is 127.
Long Statement,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,Export,The length of the statement  "				System.Diagnostics.Debug.Assert (MidiEvent.IsEndTrack (eventList [eventList.Count - 1])' "Exporting a track with a missing end track"); " is 135.
Long Statement,NAudio.Midi,MidiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiOut.cs,DeviceInfo,The length of the statement  "	MmException.Try (MidiInterop.midiOutGetDevCaps ((IntPtr)midiOutDeviceNumber' out caps' structSize)' "midiOutGetDevCaps"); " is 121.
Long Statement,NAudio.Midi,TempoEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TempoEvent.cs,ToString,The length of the statement  "	return String.Format ("{0} {2}bpm ({1})"' base.ToString ()' microsecondsPerQuarterNote' (60000000 / microsecondsPerQuarterNote)); " is 129.
Long Statement,NAudio.Midi,TimeSignatureEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TimeSignatureEvent.cs,ToString,The length of the statement  "	return String.Format ("{0} {1} TicksInClick:{2} 32ndsInQuarterNote:{3}"' base.ToString ()' TimeSignature' ticksInMetronomeClick' no32ndNotesInQuarterNote); " is 155.
Long Statement,NAudio.Mixer,BooleanMixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\BooleanMixerControl.cs,GetDetails,The length of the statement  "	boolDetails = (MixerInterop.MIXERCONTROLDETAILS_BOOLEAN)Marshal.PtrToStructure (pDetails' typeof(MixerInterop.MIXERCONTROLDETAILS_BOOLEAN)); " is 140.
Long Statement,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,GetMixerControls,The length of the statement  "			MixerInterop.MIXERCONTROL mc = (MixerInterop.MIXERCONTROL)Marshal.PtrToStructure ((IntPtr)address' typeof(MixerInterop.MIXERCONTROL)); " is 134.
Long Statement,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,GetMixerControls,The length of the statement  "			MixerControl mixerControl = MixerControl.GetMixerControl (mixerHandle' mixerLine.LineId' mc.dwControlID' mixerLine.Channels' mixerHandleType); " is 142.
Long Statement,NAudio.Mixer,MixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\MixerControl.cs,GetControlDetails,The length of the statement  "	MmResult err = MixerInterop.mixerGetControlDetails (mixerHandle' ref mixerControlDetails' MixerFlags.Value | mixerHandleType); " is 126.
Long Statement,NAudio.Mixer,SignedMixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\SignedMixerControl.cs,GetDetails,The length of the statement  "	signedDetails = (MixerInterop.MIXERCONTROLDETAILS_SIGNED)Marshal.PtrToStructure (mixerControlDetails.paDetails' typeof(MixerInterop.MIXERCONTROLDETAILS_SIGNED)); " is 161.
Long Statement,NAudio.Mixer,UnsignedMixerControl,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Mixer\UnsignedMixerControl.cs,GetDetails,The length of the statement  "		unsignedDetails [channel] = (MixerInterop.MIXERCONTROLDETAILS_UNSIGNED)Marshal.PtrToStructure (mixerControlDetails.paDetails' typeof(MixerInterop.MIXERCONTROLDETAILS_UNSIGNED)); " is 177.
Long Statement,NAudio.Wave.Asio,ASIODriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriver.cs,getChannels,The length of the statement  "	handleException (asioDriverVTable.getChannels (pASIOComObject' out numInputChannels' out numOutputChannels)' "getChannels"); " is 124.
Long Statement,NAudio.Wave.Asio,ASIODriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriver.cs,getBufferSize,The length of the statement  "	handleException (asioDriverVTable.getBufferSize (pASIOComObject' out minSize' out maxSize' out preferredSize' out granularity)' "getBufferSize"); " is 145.
Long Statement,NAudio.Wave.Asio,ASIODriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriver.cs,getSamplePosition,The length of the statement  "	handleException (asioDriverVTable.getSamplePosition (pASIOComObject' out samplePos' ref timeStamp)' "getSamplePosition"); " is 121.
Long Statement,NAudio.Wave.Asio,ASIODriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriver.cs,createBuffers,The length of the statement  "	handleException (asioDriverVTable.createBuffers (pASIOComObject' bufferInfos' numChannels' bufferSize' pinnedcallbacks)' "createBuffers"); " is 138.
Long Statement,NAudio.Wave.Asio,ASIODriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriver.cs,handleException,The length of the statement  "		ASIOException asioException = new ASIOException (String.Format ("Error code [{0}] while calling ASIO method <{1}>' {2}"' ASIOException.getErrorName (error)' methodName' this.getErrorMessage ())); " is 195.
Long Statement,NAudio.Wave.Asio,ASIODriverExt,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriverExt.cs,CreateBuffers,The length of the statement  "		throw new ArgumentException (String.Format ("Invalid number of channels {0}' must be in the range [1'{1}]"' nbOutputChannelsArg' capability.NbOutputChannels)); " is 159.
Long Statement,NAudio.Wave.Asio,ASIODriverExt,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriverExt.cs,BuildCapabilities,The length of the statement  "	driver.getBufferSize (out capability.BufferMinSize' out capability.BufferMaxSize' out capability.BufferPreferredSize' out capability.BufferGranularity); " is 152.
Long Statement,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The length of the statement  "			convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric; " is 120.
Long Statement,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The length of the statement  "			convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric; " is 120.
Long Statement,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The length of the statement  "			convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric; " is 124.
Long Statement,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The length of the statement  "			convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric; " is 124.
Long Statement,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The length of the statement  "		throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType))); " is 140.
Long Statement,NAudio.Wave.Compression,AcmDriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmDriver.cs,EnumerateAcmDrivers,The length of the statement  "	MmException.Try (AcmInterop.acmDriverEnum (new AcmInterop.AcmDriverEnumCallback (DriverEnumCallback)' IntPtr.Zero' 0)' "acmDriverEnum"); " is 136.
Long Statement,NAudio.Wave.Compression,AcmDriver,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmDriver.cs,GetFormats,The length of the statement  "	MmResult result = AcmInterop.acmFormatEnum (driverHandle' ref formatDetails' AcmFormatEnumCallback' IntPtr.Zero' AcmFormatEnumFlags.None); " is 138.
Long Statement,NAudio.Wave.Compression,AcmStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStream.cs,SourceToDest,The length of the statement  "	MmException.Try (AcmInterop.acmStreamSize (streamHandle' source' out convertedBytes' AcmStreamSizeFlags.Source)' "acmStreamSize"); " is 130.
Long Statement,NAudio.Wave.Compression,AcmStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStream.cs,DestToSource,The length of the statement  "	MmException.Try (AcmInterop.acmStreamSize (streamHandle' dest' out convertedBytes' AcmStreamSizeFlags.Destination)' "acmStreamSize"); " is 133.
Long Statement,NAudio.Wave.Compression,AcmStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStream.cs,SuggestPcmFormat,The length of the statement  "	MmException.Try (AcmInterop.acmFormatSuggest (IntPtr.Zero' compressedFormat' suggestedFormat' Marshal.SizeOf (suggestedFormat)' AcmFormatSuggestFlags.FormatTag)' "acmFormatSuggest"); " is 182.
Long Statement,NAudio.Wave.Compression,AcmStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStream.cs,SuggestPcmFormat,The length of the statement  "            MmResult result = AcmInterop.acmFormatSuggest2(IntPtr.Zero' compressedFormatPointer' suggestedFormatPointer' Marshal.SizeOf(suggestedFormat)' AcmFormatSuggestFlags.FormatTag);" is 175.
Long Statement,NAudio.Wave.Compression,AcmStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStream.cs,Convert,The length of the statement  "		System.Diagnostics.Debug.WriteLine (String.Format ("Not a whole number of blocks: {0} ({1})"' bytesToConvert' sourceFormat.BlockAlign)); " is 136.
Long Statement,NAudio.Wave.Compression,AcmStreamHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStreamHeader.cs,Convert,The length of the statement  "		AcmStreamConvertFlags flags = firstTime ? (AcmStreamConvertFlags.Start | AcmStreamConvertFlags.BlockAlign) : AcmStreamConvertFlags.BlockAlign; " is 142.
Long Statement,NAudio.Wave.Compression,AcmStreamHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStreamHeader.cs,Convert,The length of the statement  "		System.Diagnostics.Debug.Assert (streamHeader.destBufferLength == destBuffer.Length' "Codecs should not change dest buffer length"); " is 132.
Long Statement,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The length of the statement  "		sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f; " is 126.
Long Statement,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The length of the statement  "		sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f; " is 126.
Long Statement,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The length of the statement  "		sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f; " is 127.
Long Statement,NAudio.Wave.SampleProviders,MixingSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\MixingSampleProvider.cs,AddMixerInput,The length of the statement  "		if (this.WaveFormat.SampleRate != mixerInput.WaveFormat.SampleRate || this.WaveFormat.Channels != mixerInput.WaveFormat.Channels) { " is 131.
Long Statement,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The length of the statement  "		buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f; " is 120.
Complex Conditional,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The conditional expression  "(frame.RawData [offset + 0] == 'X') && (frame.RawData [offset + 1] == 'i') && (frame.RawData [offset + 2] == 'n') && (frame.RawData [offset + 3] == 'g')"  is complex.
Virtual Method Call from Constructor,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WaveFileWriter,The constructor "WaveFileWriter" calls a virtual method "Serialize".
Empty Catch Block,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,CreateTableOfContents,The method has an empty catch block.
Empty Catch Block,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,ReadNextFrame,The method has an empty catch block.
Empty Catch Block,NAudio.Midi,MidiInMessageEventArgs,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiIn.cs,MidiInMessageEventArgs,The method has an empty catch block.
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: sign = ((~sample) >> 8) & 0x80;  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: if (sample >= 256) {  	exponent = (int)ALawCompressTable [(sample >> 8) & 0x7F];  	mantissa = (sample >> (exponent + 3)) & 0x0F;  	compressedByte = (byte)((exponent << 4) | mantissa);  }  else {  	compressedByte = (byte)(sample >> 4);  }  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: if (sample >= 256) {  	exponent = (int)ALawCompressTable [(sample >> 8) & 0x7F];  	mantissa = (sample >> (exponent + 3)) & 0x0F;  	compressedByte = (byte)((exponent << 4) | mantissa);  }  else {  	compressedByte = (byte)(sample >> 4);  }  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: if (sample >= 256) {  	exponent = (int)ALawCompressTable [(sample >> 8) & 0x7F];  	mantissa = (sample >> (exponent + 3)) & 0x0F;  	compressedByte = (byte)((exponent << 4) | mantissa);  }  else {  	compressedByte = (byte)(sample >> 4);  }  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: if (sample >= 256) {  	exponent = (int)ALawCompressTable [(sample >> 8) & 0x7F];  	mantissa = (sample >> (exponent + 3)) & 0x0F;  	compressedByte = (byte)((exponent << 4) | mantissa);  }  else {  	compressedByte = (byte)(sample >> 4);  }  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: if (sample >= 256) {  	exponent = (int)ALawCompressTable [(sample >> 8) & 0x7F];  	mantissa = (sample >> (exponent + 3)) & 0x0F;  	compressedByte = (byte)((exponent << 4) | mantissa);  }  else {  	compressedByte = (byte)(sample >> 4);  }  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: exponent = (int)ALawCompressTable [(sample >> 8) & 0x7F];  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: mantissa = (sample >> (exponent + 3)) & 0x0F;  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: compressedByte = (byte)((exponent << 4) | mantissa);  
Magic Number,NAudio.Codecs,ALawEncoder,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\ALawEncoder.cs,LinearToALawSample,The following statement contains a magic number: compressedByte = (byte)(sample >> 4);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 0; i < 3; i++)  	s.Band [band].sg [i] = s.Band [band].p [i] >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 0; i < 3; i++)  	s.Band [band].sg [i] = s.Band [band].p [i] >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: s.Band [band].sg [i] = s.Band [band].p [i] >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd1 = Saturate (s.Band [band].a [1] << 2);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd2 > 32767)  	wd2 = 32767;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd2 > 32767)  	wd2 = 32767;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd2 = 32767;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = (s.Band [band].sg [0] == s.Band [band].sg [2]) ? 128 : -128;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = (s.Band [band].sg [0] == s.Band [band].sg [2]) ? 128 : -128;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = (s.Band [band].sg [0] == s.Band [band].sg [2]) ? 128 : -128;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 += (wd2 >> 7);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 += (s.Band [band].a [2] * 32512) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 += (s.Band [band].a [2] * 32512) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 += (s.Band [band].a [2] * 32512) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd3 > 12288)  	wd3 = 12288;  else if (wd3 < -12288)  	wd3 = -12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd3 > 12288)  	wd3 = 12288;  else if (wd3 < -12288)  	wd3 = -12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd3 > 12288)  	wd3 = 12288;  else if (wd3 < -12288)  	wd3 = -12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd3 > 12288)  	wd3 = 12288;  else if (wd3 < -12288)  	wd3 = -12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = 12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd3 < -12288)  	wd3 = -12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: if (wd3 < -12288)  	wd3 = -12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = -12288;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: s.Band [band].ap [2] = wd3;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: s.Band [band].sg [0] = s.Band [band].p [0] >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: s.Band [band].sg [1] = s.Band [band].p [1] >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd1 = (s.Band [band].sg [0] == s.Band [band].sg [1]) ? 192 : -192;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd1 = (s.Band [band].sg [0] == s.Band [band].sg [1]) ? 192 : -192;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd2 = (s.Band [band].a [1] * 32640) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd2 = (s.Band [band].a [1] * 32640) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = Saturate (15360 - s.Band [band].ap [2]);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = Saturate (15360 - s.Band [band].ap [2]);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd1 = (d == 0) ? 0 : 128;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: s.Band [band].sg [0] = d >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 1; i < 7; i++) {  	s.Band [band].sg [i] = s.Band [band].d [i] >> 15;  	wd2 = (s.Band [band].sg [i] == s.Band [band].sg [0]) ? wd1 : -wd1;  	wd3 = (s.Band [band].b [i] * 32640) >> 15;  	s.Band [band].bp [i] = Saturate (wd2 + wd3);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 1; i < 7; i++) {  	s.Band [band].sg [i] = s.Band [band].d [i] >> 15;  	wd2 = (s.Band [band].sg [i] == s.Band [band].sg [0]) ? wd1 : -wd1;  	wd3 = (s.Band [band].b [i] * 32640) >> 15;  	s.Band [band].bp [i] = Saturate (wd2 + wd3);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 1; i < 7; i++) {  	s.Band [band].sg [i] = s.Band [band].d [i] >> 15;  	wd2 = (s.Band [band].sg [i] == s.Band [band].sg [0]) ? wd1 : -wd1;  	wd3 = (s.Band [band].b [i] * 32640) >> 15;  	s.Band [band].bp [i] = Saturate (wd2 + wd3);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 1; i < 7; i++) {  	s.Band [band].sg [i] = s.Band [band].d [i] >> 15;  	wd2 = (s.Band [band].sg [i] == s.Band [band].sg [0]) ? wd1 : -wd1;  	wd3 = (s.Band [band].b [i] * 32640) >> 15;  	s.Band [band].bp [i] = Saturate (wd2 + wd3);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: s.Band [band].sg [i] = s.Band [band].d [i] >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = (s.Band [band].b [i] * 32640) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd3 = (s.Band [band].b [i] * 32640) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 6; i > 0; i--) {  	s.Band [band].d [i] = s.Band [band].d [i - 1];  	s.Band [band].b [i] = s.Band [band].bp [i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: i = 6
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 2; i > 0; i--) {  	s.Band [band].r [i] = s.Band [band].r [i - 1];  	s.Band [band].p [i] = s.Band [band].p [i - 1];  	s.Band [band].a [i] = s.Band [band].ap [i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: i = 2
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd1 = (s.Band [band].a [1] * wd1) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd2 = Saturate (s.Band [band].r [2] + s.Band [band].r [2]);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd2 = Saturate (s.Band [band].r [2] + s.Band [band].r [2]);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd2 = (s.Band [band].a [2] * wd2) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: wd2 = (s.Band [band].a [2] * wd2) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 6; i > 0; i--) {  	wd1 = Saturate (s.Band [band].d [i] + s.Band [band].d [i]);  	s.Band [band].sz += (s.Band [band].b [i] * wd1) >> 15;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: for (i = 6; i > 0; i--) {  	wd1 = Saturate (s.Band [band].d [i] + s.Band [band].d [i]);  	s.Band [band].sz += (s.Band [band].b [i] * wd1) >> 15;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: i = 6
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Block4,The following statement contains a magic number: s.Band [band].sz += (s.Band [band].b [i] * wd1) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (j = 0; j < inputLength;) {  	if (state.Packed) {  		// Unpack the code bits  		if (state.InBits < state.BitsPerSample) {  			state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  			state.InBits += 8;  		}  		code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  		state.InBuffer >>= state.BitsPerSample;  		state.InBits -= state.BitsPerSample;  	}  	else {  		code = inputG722Data [j++];  	}  	switch (state.BitsPerSample) {  	default:  	case 8:  		wd1 = code & 0x3F;  		ihigh = (code >> 6) & 0x03;  		wd2 = qm6 [wd1];  		wd1 >>= 2;  		break;  	case 7:  		wd1 = code & 0x1F;  		ihigh = (code >> 5) & 0x03;  		wd2 = qm5 [wd1];  		wd1 >>= 1;  		break;  	case 6:  		wd1 = code & 0x0F;  		ihigh = (code >> 4) & 0x03;  		wd2 = qm4 [wd1];  		break;  	}  	// Block 5L' LOW BAND INVQBL  	wd2 = (state.Band [0].det * wd2) >> 15;  	// Block 5L' RECONS  	rlow = state.Band [0].s + wd2;  	// Block 6L' LIMIT  	if (rlow > 16383)  		rlow = 16383;  	else if (rlow < -16384)  		rlow = -16384;  	// Block 2L' INVQAL  	wd2 = qm4 [wd1];  	dlowt = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	wd2 = rl42 [wd1];  	wd1 = (state.Band [0].nb * 127) >> 7;  	wd1 += wl [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 18432)  		wd1 = 18432;  	state.Band [0].nb = wd1;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlowt);  	if (!state.EncodeFrom8000Hz) {  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 5H' RECONS  		rhigh = dhigh + state.Band [1].s;  		// Block 6H' LIMIT  		if (rhigh > 16383)  			rhigh = 16383;  		else if (rhigh < -16384)  			rhigh = -16384;  		// Block 2H' INVQAH  		wd2 = rh2 [ihigh];  		wd1 = (state.Band [1].nb * 127) >> 7;  		wd1 += wh [wd2];  		if (wd1 < 0)  			wd1 = 0;  		else if (wd1 > 22528)  			wd1 = 22528;  		state.Band [1].nb = wd1;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  	}  	if (state.ItuTestMode) {  		outputBuffer [outlen++] = (short)(rlow << 1);  		outputBuffer [outlen++] = (short)(rhigh << 1);  	}  	else {  		if (state.EncodeFrom8000Hz) {  			outputBuffer [outlen++] = (short)(rlow << 1);  		}  		else {  			// Apply the receive QMF  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = rlow + rhigh;  			state.QmfSignalHistory [23] = rlow - rhigh;  			xout1 = 0;  			xout2 = 0;  			for (i = 0; i < 12; i++) {  				xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			outputBuffer [outlen++] = (short)(xout1 >> 11);  			outputBuffer [outlen++] = (short)(xout2 >> 11);  		}  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.Packed) {  	// Unpack the code bits  	if (state.InBits < state.BitsPerSample) {  		state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  		state.InBits += 8;  	}  	code = (int)state.InBuffer & ((1 << state.BitsPerSample) - 1);  	state.InBuffer >>= state.BitsPerSample;  	state.InBits -= state.BitsPerSample;  }  else {  	code = inputG722Data [j++];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.InBits < state.BitsPerSample) {  	state.InBuffer |= (uint)(inputG722Data [j++] << state.InBits);  	state.InBits += 8;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: state.InBits += 8;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: switch (state.BitsPerSample) {  default:  case 8:  	wd1 = code & 0x3F;  	ihigh = (code >> 6) & 0x03;  	wd2 = qm6 [wd1];  	wd1 >>= 2;  	break;  case 7:  	wd1 = code & 0x1F;  	ihigh = (code >> 5) & 0x03;  	wd2 = qm5 [wd1];  	wd1 >>= 1;  	break;  case 6:  	wd1 = code & 0x0F;  	ihigh = (code >> 4) & 0x03;  	wd2 = qm4 [wd1];  	break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: switch (state.BitsPerSample) {  default:  case 8:  	wd1 = code & 0x3F;  	ihigh = (code >> 6) & 0x03;  	wd2 = qm6 [wd1];  	wd1 >>= 2;  	break;  case 7:  	wd1 = code & 0x1F;  	ihigh = (code >> 5) & 0x03;  	wd2 = qm5 [wd1];  	wd1 >>= 1;  	break;  case 6:  	wd1 = code & 0x0F;  	ihigh = (code >> 4) & 0x03;  	wd2 = qm4 [wd1];  	break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: switch (state.BitsPerSample) {  default:  case 8:  	wd1 = code & 0x3F;  	ihigh = (code >> 6) & 0x03;  	wd2 = qm6 [wd1];  	wd1 >>= 2;  	break;  case 7:  	wd1 = code & 0x1F;  	ihigh = (code >> 5) & 0x03;  	wd2 = qm5 [wd1];  	wd1 >>= 1;  	break;  case 6:  	wd1 = code & 0x0F;  	ihigh = (code >> 4) & 0x03;  	wd2 = qm4 [wd1];  	break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: switch (state.BitsPerSample) {  default:  case 8:  	wd1 = code & 0x3F;  	ihigh = (code >> 6) & 0x03;  	wd2 = qm6 [wd1];  	wd1 >>= 2;  	break;  case 7:  	wd1 = code & 0x1F;  	ihigh = (code >> 5) & 0x03;  	wd2 = qm5 [wd1];  	wd1 >>= 1;  	break;  case 6:  	wd1 = code & 0x0F;  	ihigh = (code >> 4) & 0x03;  	wd2 = qm4 [wd1];  	break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: switch (state.BitsPerSample) {  default:  case 8:  	wd1 = code & 0x3F;  	ihigh = (code >> 6) & 0x03;  	wd2 = qm6 [wd1];  	wd1 >>= 2;  	break;  case 7:  	wd1 = code & 0x1F;  	ihigh = (code >> 5) & 0x03;  	wd2 = qm5 [wd1];  	wd1 >>= 1;  	break;  case 6:  	wd1 = code & 0x0F;  	ihigh = (code >> 4) & 0x03;  	wd2 = qm4 [wd1];  	break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: switch (state.BitsPerSample) {  default:  case 8:  	wd1 = code & 0x3F;  	ihigh = (code >> 6) & 0x03;  	wd2 = qm6 [wd1];  	wd1 >>= 2;  	break;  case 7:  	wd1 = code & 0x1F;  	ihigh = (code >> 5) & 0x03;  	wd2 = qm5 [wd1];  	wd1 >>= 1;  	break;  case 6:  	wd1 = code & 0x0F;  	ihigh = (code >> 4) & 0x03;  	wd2 = qm4 [wd1];  	break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: switch (state.BitsPerSample) {  default:  case 8:  	wd1 = code & 0x3F;  	ihigh = (code >> 6) & 0x03;  	wd2 = qm6 [wd1];  	wd1 >>= 2;  	break;  case 7:  	wd1 = code & 0x1F;  	ihigh = (code >> 5) & 0x03;  	wd2 = qm5 [wd1];  	wd1 >>= 1;  	break;  case 6:  	wd1 = code & 0x0F;  	ihigh = (code >> 4) & 0x03;  	wd2 = qm4 [wd1];  	break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: ihigh = (code >> 6) & 0x03;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 >>= 2;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: ihigh = (code >> 5) & 0x03;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: ihigh = (code >> 4) & 0x03;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd2 = (state.Band [0].det * wd2) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rlow > 16383)  	rlow = 16383;  else if (rlow < -16384)  	rlow = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rlow > 16383)  	rlow = 16383;  else if (rlow < -16384)  	rlow = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rlow > 16383)  	rlow = 16383;  else if (rlow < -16384)  	rlow = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rlow > 16383)  	rlow = 16383;  else if (rlow < -16384)  	rlow = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: rlow = 16383;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rlow < -16384)  	rlow = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rlow < -16384)  	rlow = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: rlow = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: dlowt = (state.Band [0].det * wd2) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [0].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [0].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 < 0)  	wd1 = 0;  else if (wd1 > 18432)  	wd1 = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 < 0)  	wd1 = 0;  else if (wd1 > 18432)  	wd1 = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 > 18432)  	wd1 = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 > 18432)  	wd1 = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [0].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [0].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd2 = 8 - (state.Band [0].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd2 = 8 - (state.Band [0].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: state.Band [0].det = wd3 << 2;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (!state.EncodeFrom8000Hz) {  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 5H' RECONS  	rhigh = dhigh + state.Band [1].s;  	// Block 6H' LIMIT  	if (rhigh > 16383)  		rhigh = 16383;  	else if (rhigh < -16384)  		rhigh = -16384;  	// Block 2H' INVQAH  	wd2 = rh2 [ihigh];  	wd1 = (state.Band [1].nb * 127) >> 7;  	wd1 += wh [wd2];  	if (wd1 < 0)  		wd1 = 0;  	else if (wd1 > 22528)  		wd1 = 22528;  	state.Band [1].nb = wd1;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: dhigh = (state.Band [1].det * wd2) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rhigh > 16383)  	rhigh = 16383;  else if (rhigh < -16384)  	rhigh = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rhigh > 16383)  	rhigh = 16383;  else if (rhigh < -16384)  	rhigh = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rhigh > 16383)  	rhigh = 16383;  else if (rhigh < -16384)  	rhigh = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rhigh > 16383)  	rhigh = 16383;  else if (rhigh < -16384)  	rhigh = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: rhigh = 16383;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rhigh < -16384)  	rhigh = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (rhigh < -16384)  	rhigh = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: rhigh = -16384;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [1].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [1].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 < 0)  	wd1 = 0;  else if (wd1 > 22528)  	wd1 = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 < 0)  	wd1 = 0;  else if (wd1 > 22528)  	wd1 = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 > 22528)  	wd1 = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (wd1 > 22528)  	wd1 = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [1].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd1 = (state.Band [1].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd2 = 10 - (state.Band [1].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: wd2 = 10 - (state.Band [1].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: state.Band [1].det = wd3 << 2;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.ItuTestMode) {  	outputBuffer [outlen++] = (short)(rlow << 1);  	outputBuffer [outlen++] = (short)(rhigh << 1);  }  else {  	if (state.EncodeFrom8000Hz) {  		outputBuffer [outlen++] = (short)(rlow << 1);  	}  	else {  		// Apply the receive QMF  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = rlow + rhigh;  		state.QmfSignalHistory [23] = rlow - rhigh;  		xout1 = 0;  		xout2 = 0;  		for (i = 0; i < 12; i++) {  			xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		outputBuffer [outlen++] = (short)(xout1 >> 11);  		outputBuffer [outlen++] = (short)(xout2 >> 11);  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	outputBuffer [outlen++] = (short)(rlow << 1);  }  else {  	// Apply the receive QMF  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = rlow + rhigh;  	state.QmfSignalHistory [23] = rlow - rhigh;  	xout1 = 0;  	xout2 = 0;  	for (i = 0; i < 12; i++) {  		xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	outputBuffer [outlen++] = (short)(xout1 >> 11);  	outputBuffer [outlen++] = (short)(xout2 >> 11);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (i = 0; i < 22; i++)  	state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (i = 0; i < 22; i++)  	state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: state.QmfSignalHistory [22] = rlow + rhigh;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: state.QmfSignalHistory [23] = rlow - rhigh;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: xout2 += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: xout1 += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: outputBuffer [outlen++] = (short)(xout1 >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Decode,The following statement contains a magic number: outputBuffer [outlen++] = (short)(xout2 >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (j = 0; j < inputBufferCount;) {  	if (state.ItuTestMode) {  		xlow = xhigh = inputBuffer [j++] >> 1;  	}  	else {  		if (state.EncodeFrom8000Hz) {  			xlow = inputBuffer [j++] >> 1;  		}  		else {  			// Apply the transmit QMF  			// Shuffle the buffer down  			for (i = 0; i < 22; i++)  				state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  			state.QmfSignalHistory [22] = inputBuffer [j++];  			state.QmfSignalHistory [23] = inputBuffer [j++];  			// Discard every other QMF output  			sumeven = 0;  			sumodd = 0;  			for (i = 0; i < 12; i++) {  				sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  				sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  			}  			xlow = (sumeven + sumodd) >> 14;  			xhigh = (sumeven - sumodd) >> 14;  		}  	}  	// Block 1L' SUBTRA  	el = Saturate (xlow - state.Band [0].s);  	// Block 1L' QUANTL  	wd = (el >= 0) ? el : -(el + 1);  	for (i = 1; i < 30; i++) {  		wd1 = (q6 [i] * state.Band [0].det) >> 12;  		if (wd < wd1)  			break;  	}  	ilow = (el < 0) ? iln [i] : ilp [i];  	// Block 2L' INVQAL  	ril = ilow >> 2;  	wd2 = qm4 [ril];  	dlow = (state.Band [0].det * wd2) >> 15;  	// Block 3L' LOGSCL  	il4 = rl42 [ril];  	wd = (state.Band [0].nb * 127) >> 7;  	state.Band [0].nb = wd + wl [il4];  	if (state.Band [0].nb < 0)  		state.Band [0].nb = 0;  	else if (state.Band [0].nb > 18432)  		state.Band [0].nb = 18432;  	// Block 3L' SCALEL  	wd1 = (state.Band [0].nb >> 6) & 31;  	wd2 = 8 - (state.Band [0].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [0].det = wd3 << 2;  	Block4 (state' 0' dlow);  	if (state.EncodeFrom8000Hz) {  		// Just leave the high bits as zero  		code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  	}  	else {  		// Block 1H' SUBTRA  		eh = Saturate (xhigh - state.Band [1].s);  		// Block 1H' QUANTH  		wd = (eh >= 0) ? eh : -(eh + 1);  		wd1 = (564 * state.Band [1].det) >> 12;  		mih = (wd >= wd1) ? 2 : 1;  		ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  		// Block 2H' INVQAH  		wd2 = qm2 [ihigh];  		dhigh = (state.Band [1].det * wd2) >> 15;  		// Block 3H' LOGSCH  		ih2 = rh2 [ihigh];  		wd = (state.Band [1].nb * 127) >> 7;  		state.Band [1].nb = wd + wh [ih2];  		if (state.Band [1].nb < 0)  			state.Band [1].nb = 0;  		else if (state.Band [1].nb > 22528)  			state.Band [1].nb = 22528;  		// Block 3H' SCALEH  		wd1 = (state.Band [1].nb >> 6) & 31;  		wd2 = 10 - (state.Band [1].nb >> 11);  		wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  		state.Band [1].det = wd3 << 2;  		Block4 (state' 1' dhigh);  		code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  	}  	if (state.Packed) {  		// Pack the code bits  		state.OutBuffer |= (uint)(code << state.OutBits);  		state.OutBits += state.BitsPerSample;  		if (state.OutBits >= 8) {  			outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  			state.OutBits -= 8;  			state.OutBuffer >>= 8;  		}  	}  	else {  		outputBuffer [g722_bytes++] = (byte)code;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.ItuTestMode) {  	xlow = xhigh = inputBuffer [j++] >> 1;  }  else {  	if (state.EncodeFrom8000Hz) {  		xlow = inputBuffer [j++] >> 1;  	}  	else {  		// Apply the transmit QMF  		// Shuffle the buffer down  		for (i = 0; i < 22; i++)  			state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  		state.QmfSignalHistory [22] = inputBuffer [j++];  		state.QmfSignalHistory [23] = inputBuffer [j++];  		// Discard every other QMF output  		sumeven = 0;  		sumodd = 0;  		for (i = 0; i < 12; i++) {  			sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  			sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  		}  		xlow = (sumeven + sumodd) >> 14;  		xhigh = (sumeven - sumodd) >> 14;  	}  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	xlow = inputBuffer [j++] >> 1;  }  else {  	// Apply the transmit QMF  	// Shuffle the buffer down  	for (i = 0; i < 22; i++)  		state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  	state.QmfSignalHistory [22] = inputBuffer [j++];  	state.QmfSignalHistory [23] = inputBuffer [j++];  	// Discard every other QMF output  	sumeven = 0;  	sumodd = 0;  	for (i = 0; i < 12; i++) {  		sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  		sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  	}  	xlow = (sumeven + sumodd) >> 14;  	xhigh = (sumeven - sumodd) >> 14;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 0; i < 22; i++)  	state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 0; i < 22; i++)  	state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.QmfSignalHistory [i] = state.QmfSignalHistory [i + 2];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.QmfSignalHistory [22] = inputBuffer [j++];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.QmfSignalHistory [23] = inputBuffer [j++];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 0; i < 12; i++) {  	sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  	sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: sumodd += state.QmfSignalHistory [2 * i] * qmf_coeffs [i];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: sumeven += state.QmfSignalHistory [2 * i + 1] * qmf_coeffs [11 - i];  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: xlow = (sumeven + sumodd) >> 14;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: xhigh = (sumeven - sumodd) >> 14;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 1; i < 30; i++) {  	wd1 = (q6 [i] * state.Band [0].det) >> 12;  	if (wd < wd1)  		break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: for (i = 1; i < 30; i++) {  	wd1 = (q6 [i] * state.Band [0].det) >> 12;  	if (wd < wd1)  		break;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd1 = (q6 [i] * state.Band [0].det) >> 12;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: ril = ilow >> 2;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: dlow = (state.Band [0].det * wd2) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd = (state.Band [0].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd = (state.Band [0].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [0].nb < 0)  	state.Band [0].nb = 0;  else if (state.Band [0].nb > 18432)  	state.Band [0].nb = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [0].nb < 0)  	state.Band [0].nb = 0;  else if (state.Band [0].nb > 18432)  	state.Band [0].nb = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [0].nb > 18432)  	state.Band [0].nb = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [0].nb > 18432)  	state.Band [0].nb = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.Band [0].nb = 18432;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd1 = (state.Band [0].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd1 = (state.Band [0].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd2 = 8 - (state.Band [0].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd2 = 8 - (state.Band [0].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.Band [0].det = wd3 << 2;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.EncodeFrom8000Hz) {  	// Just leave the high bits as zero  	code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  }  else {  	// Block 1H' SUBTRA  	eh = Saturate (xhigh - state.Band [1].s);  	// Block 1H' QUANTH  	wd = (eh >= 0) ? eh : -(eh + 1);  	wd1 = (564 * state.Band [1].det) >> 12;  	mih = (wd >= wd1) ? 2 : 1;  	ihigh = (eh < 0) ? ihn [mih] : ihp [mih];  	// Block 2H' INVQAH  	wd2 = qm2 [ihigh];  	dhigh = (state.Band [1].det * wd2) >> 15;  	// Block 3H' LOGSCH  	ih2 = rh2 [ihigh];  	wd = (state.Band [1].nb * 127) >> 7;  	state.Band [1].nb = wd + wh [ih2];  	if (state.Band [1].nb < 0)  		state.Band [1].nb = 0;  	else if (state.Band [1].nb > 22528)  		state.Band [1].nb = 22528;  	// Block 3H' SCALEH  	wd1 = (state.Band [1].nb >> 6) & 31;  	wd2 = 10 - (state.Band [1].nb >> 11);  	wd3 = (wd2 < 0) ? (ilb [wd1] << -wd2) : (ilb [wd1] >> wd2);  	state.Band [1].det = wd3 << 2;  	Block4 (state' 1' dhigh);  	code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: code = (0xC0 | ilow) >> (8 - state.BitsPerSample);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd1 = (564 * state.Band [1].det) >> 12;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd1 = (564 * state.Band [1].det) >> 12;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: mih = (wd >= wd1) ? 2 : 1;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: dhigh = (state.Band [1].det * wd2) >> 15;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd = (state.Band [1].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd = (state.Band [1].nb * 127) >> 7;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [1].nb < 0)  	state.Band [1].nb = 0;  else if (state.Band [1].nb > 22528)  	state.Band [1].nb = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [1].nb < 0)  	state.Band [1].nb = 0;  else if (state.Band [1].nb > 22528)  	state.Band [1].nb = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [1].nb > 22528)  	state.Band [1].nb = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Band [1].nb > 22528)  	state.Band [1].nb = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.Band [1].nb = 22528;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd1 = (state.Band [1].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd1 = (state.Band [1].nb >> 6) & 31;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd2 = 10 - (state.Band [1].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: wd2 = 10 - (state.Band [1].nb >> 11);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.Band [1].det = wd3 << 2;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: code = ((ihigh << 6) | ilow) >> (8 - state.BitsPerSample);  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Packed) {  	// Pack the code bits  	state.OutBuffer |= (uint)(code << state.OutBits);  	state.OutBits += state.BitsPerSample;  	if (state.OutBits >= 8) {  		outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  		state.OutBits -= 8;  		state.OutBuffer >>= 8;  	}  }  else {  	outputBuffer [g722_bytes++] = (byte)code;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Packed) {  	// Pack the code bits  	state.OutBuffer |= (uint)(code << state.OutBits);  	state.OutBits += state.BitsPerSample;  	if (state.OutBits >= 8) {  		outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  		state.OutBits -= 8;  		state.OutBuffer >>= 8;  	}  }  else {  	outputBuffer [g722_bytes++] = (byte)code;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.Packed) {  	// Pack the code bits  	state.OutBuffer |= (uint)(code << state.OutBits);  	state.OutBits += state.BitsPerSample;  	if (state.OutBits >= 8) {  		outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  		state.OutBits -= 8;  		state.OutBuffer >>= 8;  	}  }  else {  	outputBuffer [g722_bytes++] = (byte)code;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.OutBits >= 8) {  	outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  	state.OutBits -= 8;  	state.OutBuffer >>= 8;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.OutBits >= 8) {  	outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  	state.OutBits -= 8;  	state.OutBuffer >>= 8;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: if (state.OutBits >= 8) {  	outputBuffer [g722_bytes++] = (byte)(state.OutBuffer & 0xFF);  	state.OutBits -= 8;  	state.OutBuffer >>= 8;  }  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.OutBits -= 8;  
Magic Number,NAudio.Codecs,G722Codec,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,Encode,The following statement contains a magic number: state.OutBuffer >>= 8;  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: this.Band = new Band[2] {  	new Band ()'  	new Band ()  };  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: this.QmfSignalHistory = new int[24];  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 48000)  	this.BitsPerSample = 6;  else if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 48000)  	this.BitsPerSample = 6;  else if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 48000)  	this.BitsPerSample = 6;  else if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 48000)  	this.BitsPerSample = 6;  else if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 48000)  	this.BitsPerSample = 6;  else if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 48000)  	this.BitsPerSample = 6;  else if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: this.BitsPerSample = 6;  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 56000)  	this.BitsPerSample = 7;  else if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: this.BitsPerSample = 7;  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (rate == 64000)  	this.BitsPerSample = 8;  else  	throw new ArgumentException ("Invalid rate' should be 48000' 56000 or 64000");  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: this.BitsPerSample = 8;  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: if (((options & G722Flags.Packed) == G722Flags.Packed) && this.BitsPerSample != 8)  	this.Packed = true;  else  	this.Packed = false;  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: this.Band [0].det = 32;  
Magic Number,NAudio.Codecs,G722CodecState,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Codecs\G722Codec.cs,G722CodecState,The following statement contains a magic number: this.Band [1].det = 8;  
Magic Number,NAudio.CoreAudioApi,WasapiCapture,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\WasapiCapture.cs,InitializeCaptureDevice,The following statement contains a magic number: bytesPerFrame = WaveFormat.Channels * WaveFormat.BitsPerSample / 8;  
Magic Number,NAudio.CoreAudioApi,MMDeviceEnumerator,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\CoreAudioApi\MMDeviceEnumerator.cs,MMDeviceEnumerator,The following statement contains a magic number: if (System.Environment.OSVersion.Version.Major < 6) {  	throw new NotSupportedException ("This functionality is only supported on Windows Vista or newer.");  }  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,Transform,The following statement contains a magic number: for (int n = 0; n < inBuffer.Length; n++) {  	y [n] = (float)((b0 / a0) * x [n] + (b1 / a0) * x [n - 1] + (b2 / a0) * x [n - 2] - (a1 / a0) * y [n - 1] - (a2 / a0) * y [n - 2]);  }  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,Transform,The following statement contains a magic number: for (int n = 0; n < inBuffer.Length; n++) {  	y [n] = (float)((b0 / a0) * x [n] + (b1 / a0) * x [n - 1] + (b2 / a0) * x [n - 2] - (a1 / a0) * y [n - 1] - (a2 / a0) * y [n - 2]);  }  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,Transform,The following statement contains a magic number: y [n] = (float)((b0 / a0) * x [n] + (b1 / a0) * x [n - 1] + (b2 / a0) * x [n - 2] - (a1 / a0) * y [n - 1] - (a2 / a0) * y [n - 2]);  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,Transform,The following statement contains a magic number: y [n] = (float)((b0 / a0) * x [n] + (b1 / a0) * x [n - 1] + (b2 / a0) * x [n - 2] - (a1 / a0) * y [n - 1] - (a2 / a0) * y [n - 2]);  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,LowPassFilter,The following statement contains a magic number: filter.b0 = (1 - cosw0) / 2;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,LowPassFilter,The following statement contains a magic number: filter.b2 = (1 - cosw0) / 2;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,LowPassFilter,The following statement contains a magic number: filter.a1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,HighPassFilter,The following statement contains a magic number: filter.b0 = (1 + Math.Cos (w0)) / 2;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,HighPassFilter,The following statement contains a magic number: filter.b2 = (1 + Math.Cos (w0)) / 2;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,HighPassFilter,The following statement contains a magic number: filter.a1 = -2 * Math.Cos (w0);  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,BandPassFilterConstantSkirtGain,The following statement contains a magic number: filter.b0 = sinw0 / 2;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,BandPassFilterConstantSkirtGain,The following statement contains a magic number: filter.b2 = -sinw0 / 2;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,BandPassFilterConstantSkirtGain,The following statement contains a magic number: filter.a1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,BandPassFilterConstantPeakGain,The following statement contains a magic number: filter.a1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,NotchFilter,The following statement contains a magic number: filter.b1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,NotchFilter,The following statement contains a magic number: filter.a1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,AllPassFilter,The following statement contains a magic number: filter.b1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,AllPassFilter,The following statement contains a magic number: filter.a1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,PeakingEQ,The following statement contains a magic number: filter.b1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,PeakingEQ,The following statement contains a magic number: filter.a1 = -2 * cosw0;  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,LowShelf,The following statement contains a magic number: filter.b1 = 2 * A * ((A - 1) - (A + 1) * cosw0);  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,LowShelf,The following statement contains a magic number: filter.a1 = -2 * ((A - 1) + (A + 1) * cosw0);  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,HighShelf,The following statement contains a magic number: filter.b1 = -2 * A * ((A - 1) + (A + 1) * cosw0);  
Magic Number,NAudio.Dsp,BiQuadFilter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\BiQuadFilter.cs,HighShelf,The following statement contains a magic number: filter.a1 = 2 * ((A - 1) - (A + 1) * cosw0);  
Magic Number,NAudio.Dsp,EnvelopeDetector,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\EnvelopeDetector.cs,setCoef,The following statement contains a magic number: coeff = Math.Exp (-1.0 / (0.001 * ms * sampleRate));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,FFT,The following statement contains a magic number: for (i = 0; i < m; i++)  	n *= 2;  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,FFT,The following statement contains a magic number: n *= 2;  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,HammingWindow,The following statement contains a magic number: return 0.54 - 0.46 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,HammingWindow,The following statement contains a magic number: return 0.54 - 0.46 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,HammingWindow,The following statement contains a magic number: return 0.54 - 0.46 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,HannWindow,The following statement contains a magic number: return 0.5 * (1 - Math.Cos ((2 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,HannWindow,The following statement contains a magic number: return 0.5 * (1 - Math.Cos ((2 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The following statement contains a magic number: return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The following statement contains a magic number: return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The following statement contains a magic number: return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The following statement contains a magic number: return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The following statement contains a magic number: return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The following statement contains a magic number: return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.Dsp,FastFourierTransform,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Dsp\FastFourierTransform.cs,BlackmannHarrisWindow,The following statement contains a magic number: return 0.35875 - (0.48829 * Math.Cos ((2 * Math.PI * n) / (frameSize - 1))) + (0.14128 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1))) - (0.01168 * Math.Cos ((4 * Math.PI * n) / (frameSize - 1)));  
Magic Number,NAudio.FileFormats.Map,CakewalkDrumMapping,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Map\CakewalkDrumMapping.cs,ToString,The following statement contains a magic number: return String.Format ("{0} In:{1} Out:{2} Ch:{3} Port:{4} Vel+:{5} Vel:{6}%"' noteName' inNote' outNote' channel' outPort' velocityAdjust' VelocityScale * 100);  
Magic Number,NAudio.FileFormats.Map,CakewalkMapFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Map\CakewalkMapFile.cs,ReadOutputsSection1,The following statement contains a magic number: for (int n = 0; n < outputs1Count; n++) {  	byte[] data = reader.ReadBytes (20);  }  
Magic Number,NAudio.FileFormats.Map,CakewalkMapFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Map\CakewalkMapFile.cs,ReadOutputsSection2,The following statement contains a magic number: for (int n = 0; n < outputs2Count; n++) {  	byte[] data = reader.ReadBytes (24);  }  
Magic Number,NAudio.FileFormats.Map,CakewalkMapFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Map\CakewalkMapFile.cs,ReadOutputsSection3,The following statement contains a magic number: if (outputs3Header.Length > 0) {  	outputs3Count = reader.ReadInt32 ();  	for (int n = 0; n < outputs3Count; n++) {  		byte[] data = reader.ReadBytes (36);  	}  }  
Magic Number,NAudio.FileFormats.Map,CakewalkMapFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Map\CakewalkMapFile.cs,ReadOutputsSection3,The following statement contains a magic number: for (int n = 0; n < outputs3Count; n++) {  	byte[] data = reader.ReadBytes (36);  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [0] == (byte)'I') && (headerBytes [1] == (byte)'D') && (headerBytes [2] == '3')) {  	// http://www.id3.org/develop.html  	// OK found an ID3 tag  	// bytes 3 & 4 are ID3v2 version  	if ((headerBytes [5] & 0x40) == 0x40) {  		// extended header present  		byte[] extendedHeader = reader.ReadBytes (4);  		int extendedHeaderLength = extendedHeader [0] * (1 << 21);  		extendedHeaderLength += extendedHeader [1] * (1 << 14);  		extendedHeaderLength += extendedHeader [2] * (1 << 7);  		extendedHeaderLength += extendedHeader [3];  	}  	// synchsafe  	int dataLength = headerBytes [6] * (1 << 21);  	dataLength += headerBytes [7] * (1 << 14);  	dataLength += headerBytes [8] * (1 << 7);  	dataLength += headerBytes [9];  	byte[] tagData = reader.ReadBytes (dataLength);  	if ((headerBytes [5] & 0x10) == 0x10) {  		// footer present  		byte[] footer = reader.ReadBytes (10);  	}  }  else {  	input.Position -= 10;  	throw new FormatException ("Not an ID3v2 tag");  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x40) == 0x40) {  	// extended header present  	byte[] extendedHeader = reader.ReadBytes (4);  	int extendedHeaderLength = extendedHeader [0] * (1 << 21);  	extendedHeaderLength += extendedHeader [1] * (1 << 14);  	extendedHeaderLength += extendedHeader [2] * (1 << 7);  	extendedHeaderLength += extendedHeader [3];  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x40) == 0x40) {  	// extended header present  	byte[] extendedHeader = reader.ReadBytes (4);  	int extendedHeaderLength = extendedHeader [0] * (1 << 21);  	extendedHeaderLength += extendedHeader [1] * (1 << 14);  	extendedHeaderLength += extendedHeader [2] * (1 << 7);  	extendedHeaderLength += extendedHeader [3];  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x40) == 0x40) {  	// extended header present  	byte[] extendedHeader = reader.ReadBytes (4);  	int extendedHeaderLength = extendedHeader [0] * (1 << 21);  	extendedHeaderLength += extendedHeader [1] * (1 << 14);  	extendedHeaderLength += extendedHeader [2] * (1 << 7);  	extendedHeaderLength += extendedHeader [3];  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x40) == 0x40) {  	// extended header present  	byte[] extendedHeader = reader.ReadBytes (4);  	int extendedHeaderLength = extendedHeader [0] * (1 << 21);  	extendedHeaderLength += extendedHeader [1] * (1 << 14);  	extendedHeaderLength += extendedHeader [2] * (1 << 7);  	extendedHeaderLength += extendedHeader [3];  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x40) == 0x40) {  	// extended header present  	byte[] extendedHeader = reader.ReadBytes (4);  	int extendedHeaderLength = extendedHeader [0] * (1 << 21);  	extendedHeaderLength += extendedHeader [1] * (1 << 14);  	extendedHeaderLength += extendedHeader [2] * (1 << 7);  	extendedHeaderLength += extendedHeader [3];  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x40) == 0x40) {  	// extended header present  	byte[] extendedHeader = reader.ReadBytes (4);  	int extendedHeaderLength = extendedHeader [0] * (1 << 21);  	extendedHeaderLength += extendedHeader [1] * (1 << 14);  	extendedHeaderLength += extendedHeader [2] * (1 << 7);  	extendedHeaderLength += extendedHeader [3];  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x40) == 0x40) {  	// extended header present  	byte[] extendedHeader = reader.ReadBytes (4);  	int extendedHeaderLength = extendedHeader [0] * (1 << 21);  	extendedHeaderLength += extendedHeader [1] * (1 << 14);  	extendedHeaderLength += extendedHeader [2] * (1 << 7);  	extendedHeaderLength += extendedHeader [3];  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: extendedHeaderLength += extendedHeader [1] * (1 << 14);  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: extendedHeaderLength += extendedHeader [2] * (1 << 7);  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: extendedHeaderLength += extendedHeader [2] * (1 << 7);  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: extendedHeaderLength += extendedHeader [3];  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: dataLength += headerBytes [7] * (1 << 14);  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: dataLength += headerBytes [7] * (1 << 14);  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: dataLength += headerBytes [8] * (1 << 7);  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: dataLength += headerBytes [8] * (1 << 7);  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: dataLength += headerBytes [9];  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x10) == 0x10) {  	// footer present  	byte[] footer = reader.ReadBytes (10);  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: if ((headerBytes [5] & 0x10) == 0x10) {  	// footer present  	byte[] footer = reader.ReadBytes (10);  }  
Magic Number,NAudio.Wave,Id3v2Tag,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Id3v2Tag.cs,Id3v2Tag,The following statement contains a magic number: input.Position -= 10;  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: while (!IsValidHeader (headerBytes' frame)) {  	// shift down by one and try again  	headerBytes [0] = headerBytes [1];  	headerBytes [1] = headerBytes [2];  	headerBytes [2] = headerBytes [3];  	bytesRead = input.Read (headerBytes' 3' 1);  	if (bytesRead < 1) {  		return null;  	}  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: while (!IsValidHeader (headerBytes' frame)) {  	// shift down by one and try again  	headerBytes [0] = headerBytes [1];  	headerBytes [1] = headerBytes [2];  	headerBytes [2] = headerBytes [3];  	bytesRead = input.Read (headerBytes' 3' 1);  	if (bytesRead < 1) {  		return null;  	}  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: while (!IsValidHeader (headerBytes' frame)) {  	// shift down by one and try again  	headerBytes [0] = headerBytes [1];  	headerBytes [1] = headerBytes [2];  	headerBytes [2] = headerBytes [3];  	bytesRead = input.Read (headerBytes' 3' 1);  	if (bytesRead < 1) {  		return null;  	}  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: while (!IsValidHeader (headerBytes' frame)) {  	// shift down by one and try again  	headerBytes [0] = headerBytes [1];  	headerBytes [1] = headerBytes [2];  	headerBytes [2] = headerBytes [3];  	bytesRead = input.Read (headerBytes' 3' 1);  	if (bytesRead < 1) {  		return null;  	}  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: headerBytes [1] = headerBytes [2];  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: headerBytes [2] = headerBytes [3];  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: headerBytes [2] = headerBytes [3];  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: bytesRead = input.Read (headerBytes' 3' 1);  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: if (readData) {  	frame.RawData = new byte[frame.FrameLength];  	Array.Copy (headerBytes' frame.RawData' 4);  	bytesRead = input.Read (frame.RawData' 4' bytesRequired);  	if (bytesRead < bytesRequired) {  		// TODO: could have an option to suppress this' although it does indicate a corrupt file  		// for now' caller should handle this exception  		throw new EndOfStreamException ("Unexpected end of stream before frame complete");  	}  }  else {  	// n.b. readData should not be false if input stream does not support seeking  	input.Position += bytesRequired;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: if (readData) {  	frame.RawData = new byte[frame.FrameLength];  	Array.Copy (headerBytes' frame.RawData' 4);  	bytesRead = input.Read (frame.RawData' 4' bytesRequired);  	if (bytesRead < bytesRequired) {  		// TODO: could have an option to suppress this' although it does indicate a corrupt file  		// for now' caller should handle this exception  		throw new EndOfStreamException ("Unexpected end of stream before frame complete");  	}  }  else {  	// n.b. readData should not be false if input stream does not support seeking  	input.Position += bytesRequired;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: Array.Copy (headerBytes' frame.RawData' 4);  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,LoadFromStream,The following statement contains a magic number: bytesRead = input.Read (frame.RawData' 4' bytesRequired);  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if ((headerBytes [0] == 0xFF) && ((headerBytes [1] & 0xE0) == 0xE0)) {  	// TODO: could do with a bitstream class here  	frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  	if (frame.MpegVersion == MpegVersion.Reserved) {  		//throw new FormatException("Unsupported MPEG Version");  		return false;  	}  	frame.MpegLayer = (MpegLayer)((headerBytes [1] & 0x06) >> 1);  	if (frame.MpegLayer == MpegLayer.Reserved) {  		return false;  	}  	int layerIndex = frame.MpegLayer == MpegLayer.Layer1 ? 0 : frame.MpegLayer == MpegLayer.Layer2 ? 1 : 2;  	frame.crcPresent = (headerBytes [1] & 0x01) == 0x00;  	int bitRateIndex = (headerBytes [2] & 0xF0) >> 4;  	if (bitRateIndex == 15) {  		// invalid index  		return false;  	}  	int versionIndex = frame.MpegVersion == Wave.MpegVersion.Version1 ? 0 : 1;  	frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  	if (frame.BitRate == 0) {  		return false;  	}  	int sampleFrequencyIndex = (headerBytes [2] & 0x0C) >> 2;  	if (sampleFrequencyIndex == 3) {  		return false;  	}  	if (frame.MpegVersion == MpegVersion.Version1) {  		frame.SampleRate = sampleRatesVersion1 [sampleFrequencyIndex];  	}  	else if (frame.MpegVersion == MpegVersion.Version2) {  		frame.SampleRate = sampleRatesVersion2 [sampleFrequencyIndex];  	}  	else {  		// mpegVersion == MpegVersion.Version25  		frame.SampleRate = sampleRatesVersion25 [sampleFrequencyIndex];  	}  	bool padding = (headerBytes [2] & 0x02) == 0x02;  	bool privateBit = (headerBytes [2] & 0x01) == 0x01;  	frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  	int channelExtension = (headerBytes [3] & 0x30) >> 4;  	bool copyright = (headerBytes [3] & 0x08) == 0x08;  	bool original = (headerBytes [3] & 0x04) == 0x04;  	int emphasis = (headerBytes [3] & 0x03);  	int nPadding = padding ? 1 : 0;  	frame.SampleCount = samplesPerFrame [versionIndex' layerIndex];  	int coefficient = frame.SampleCount / 8;  	if (frame.MpegLayer == MpegLayer.Layer1) {  		frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  	}  	else {  		frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  	}  	if (frame.FrameLength > MaxFrameLength) {  		return false;  	}  	return true;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: frame.MpegVersion = (MpegVersion)((headerBytes [1] & 0x18) >> 3);  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if (bitRateIndex == 15) {  	// invalid index  	return false;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: frame.BitRate = bitRates [versionIndex' layerIndex' bitRateIndex] * 1000;  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if (sampleFrequencyIndex == 3) {  	return false;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: frame.ChannelMode = (ChannelMode)((headerBytes [3] & 0xC0) >> 6);  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: if (frame.MpegLayer == MpegLayer.Layer1) {  	frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  }  else {  	frame.FrameLength = (coefficient * frame.BitRate) / frame.SampleRate + nPadding;  }  
Magic Number,NAudio.Wave,Mp3Frame,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\Mp3Frame.cs,IsValidHeader,The following statement contains a magic number: frame.FrameLength = (coefficient * frame.BitRate / frame.SampleRate + nPadding) * 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,ReadBigEndian,The following statement contains a magic number: x <<= 8;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,ReadBigEndian,The following statement contains a magic number: x <<= 8;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,ReadBigEndian,The following statement contains a magic number: x |= buffer [offset + 2];  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,ReadBigEndian,The following statement contains a magic number: x <<= 8;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,ReadBigEndian,The following statement contains a magic number: x |= buffer [offset + 3];  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,WriteBigEndian,The following statement contains a magic number: for (int n = 0; n < 4; n++) {  	buffer [offset + 4 - n] = littleEndian [n];  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,WriteBigEndian,The following statement contains a magic number: for (int n = 0; n < 4; n++) {  	buffer [offset + 4 - n] = littleEndian [n];  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,WriteBigEndian,The following statement contains a magic number: buffer [offset + 4 - n] = littleEndian [n];  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version1) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 32 + 4;  	else  		offset = 17 + 4;  }  else if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 32 + 4;  else  	offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 32 + 4;  else  	offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 32 + 4;  else  	offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 32 + 4;  else  	offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 32 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 32 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.MpegVersion == MpegVersion.Version2) {  	if (frame.ChannelMode != ChannelMode.Mono)  		offset = 17 + 4;  	else  		offset = 9 + 4;  }  else {  	return null;  	// throw new FormatException("Unsupported MPEG Version");  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 17 + 4;  else  	offset = 9 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 17 + 4;  else  	offset = 9 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 17 + 4;  else  	offset = 9 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if (frame.ChannelMode != ChannelMode.Mono)  	offset = 17 + 4;  else  	offset = 9 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 17 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 9 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset = 9 + 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if ((frame.RawData [offset + 0] == 'X') && (frame.RawData [offset + 1] == 'i') && (frame.RawData [offset + 2] == 'n') && (frame.RawData [offset + 3] == 'g')) {  	xingHeader.startOffset = offset;  	offset += 4;  }  else {  	return null;  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if ((frame.RawData [offset + 0] == 'X') && (frame.RawData [offset + 1] == 'i') && (frame.RawData [offset + 2] == 'n') && (frame.RawData [offset + 3] == 'g')) {  	xingHeader.startOffset = offset;  	offset += 4;  }  else {  	return null;  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if ((frame.RawData [offset + 0] == 'X') && (frame.RawData [offset + 1] == 'i') && (frame.RawData [offset + 2] == 'n') && (frame.RawData [offset + 3] == 'g')) {  	xingHeader.startOffset = offset;  	offset += 4;  }  else {  	return null;  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset += 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset += 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if ((flags & XingHeaderOptions.Frames) != 0) {  	xingHeader.framesOffset = offset;  	offset += 4;  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset += 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if ((flags & XingHeaderOptions.Bytes) != 0) {  	xingHeader.bytesOffset = offset;  	offset += 4;  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset += 4;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if ((flags & XingHeaderOptions.Toc) != 0) {  	xingHeader.tocOffset = offset;  	offset += 100;  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset += 100;  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: if ((flags & XingHeaderOptions.VbrScale) != 0) {  	xingHeader.vbrScale = ReadBigEndian (frame.RawData' offset);  	offset += 4;  }  
Magic Number,NAudio.Wave,XingHeader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Mp3\XingHeader.cs,LoadXingHeader,The following statement contains a magic number: offset += 4;  
Magic Number,NAudio.Wave,WaveIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveIn.cs,WaveIn,The following statement contains a magic number: this.WaveFormat = new WaveFormat (8000' 16' 1);  
Magic Number,NAudio.Wave,WaveIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveIn.cs,WaveIn,The following statement contains a magic number: this.WaveFormat = new WaveFormat (8000' 16' 1);  
Magic Number,NAudio.Wave,WaveIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveIn.cs,WaveIn,The following statement contains a magic number: this.BufferMilliseconds = 100;  
Magic Number,NAudio.Wave,WaveIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\MmeInterop\WaveIn.cs,WaveIn,The following statement contains a magic number: this.NumberOfBuffers = 3;  
Magic Number,NAudio.Wave,Gsm610WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\Gsm610WaveFormat.cs,Gsm610WaveFormat,The following statement contains a magic number: this.averageBytesPerSecond = 1625;  
Magic Number,NAudio.Wave,Gsm610WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\Gsm610WaveFormat.cs,Gsm610WaveFormat,The following statement contains a magic number: this.blockAlign = 65;  
Magic Number,NAudio.Wave,Gsm610WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\Gsm610WaveFormat.cs,Gsm610WaveFormat,The following statement contains a magic number: this.sampleRate = 8000;  
Magic Number,NAudio.Wave,Gsm610WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\Gsm610WaveFormat.cs,Gsm610WaveFormat,The following statement contains a magic number: this.extraSize = 2;  
Magic Number,NAudio.Wave,Gsm610WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\Gsm610WaveFormat.cs,Gsm610WaveFormat,The following statement contains a magic number: this.samplesPerBlock = 320;  
Magic Number,NAudio.Wave,ImaAdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\ImaAdpcmWaveFormat.cs,ImaAdpcmWaveFormat,The following statement contains a magic number: this.extraSize = 2;  
Magic Number,NAudio.Wave,Mp3WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\Mp3WaveFormat.cs,Mp3WaveFormat,The following statement contains a magic number: this.averageBytesPerSecond = bitRate / 8;  
Magic Number,NAudio.Wave,TrueSpeechWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\TrueSpeechWaveFormat.cs,TrueSpeechWaveFormat,The following statement contains a magic number: this.averageBytesPerSecond = 1067;  
Magic Number,NAudio.Wave,TrueSpeechWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\TrueSpeechWaveFormat.cs,TrueSpeechWaveFormat,The following statement contains a magic number: this.blockAlign = 32;  
Magic Number,NAudio.Wave,TrueSpeechWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\TrueSpeechWaveFormat.cs,TrueSpeechWaveFormat,The following statement contains a magic number: this.sampleRate = 8000;  
Magic Number,NAudio.Wave,TrueSpeechWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\TrueSpeechWaveFormat.cs,TrueSpeechWaveFormat,The following statement contains a magic number: this.extraSize = 32;  
Magic Number,NAudio.Wave,TrueSpeechWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\TrueSpeechWaveFormat.cs,TrueSpeechWaveFormat,The following statement contains a magic number: this.unknown = new short[16];  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,CreateALawFormat,The following statement contains a magic number: return CreateCustomFormat (WaveFormatEncoding.ALaw' sampleRate' channels' sampleRate * channels' 1' 8);  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,CreateMuLawFormat,The following statement contains a magic number: return CreateCustomFormat (WaveFormatEncoding.MuLaw' sampleRate' channels' sampleRate * channels' 1' 8);  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,WaveFormat,The following statement contains a magic number: this.blockAlign = (short)(channels * (bits / 8));  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,CreateIeeeFloatWaveFormat,The following statement contains a magic number: wf.bitsPerSample = 32;  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,CreateIeeeFloatWaveFormat,The following statement contains a magic number: wf.blockAlign = (short)(4 * channels);  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ReadWaveFormat,The following statement contains a magic number: if (formatChunkLength < 16)  	throw new ApplicationException ("Invalid WaveFormat Structure");  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ReadWaveFormat,The following statement contains a magic number: if (formatChunkLength > 16) {  	this.extraSize = br.ReadInt16 ();  	if (this.extraSize != formatChunkLength - 18) {  		Debug.WriteLine ("Format chunk mismatch");  		this.extraSize = (short)(formatChunkLength - 18);  	}  }  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ReadWaveFormat,The following statement contains a magic number: if (formatChunkLength > 16) {  	this.extraSize = br.ReadInt16 ();  	if (this.extraSize != formatChunkLength - 18) {  		Debug.WriteLine ("Format chunk mismatch");  		this.extraSize = (short)(formatChunkLength - 18);  	}  }  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ReadWaveFormat,The following statement contains a magic number: if (formatChunkLength > 16) {  	this.extraSize = br.ReadInt16 ();  	if (this.extraSize != formatChunkLength - 18) {  		Debug.WriteLine ("Format chunk mismatch");  		this.extraSize = (short)(formatChunkLength - 18);  	}  }  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ReadWaveFormat,The following statement contains a magic number: if (this.extraSize != formatChunkLength - 18) {  	Debug.WriteLine ("Format chunk mismatch");  	this.extraSize = (short)(formatChunkLength - 18);  }  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ReadWaveFormat,The following statement contains a magic number: if (this.extraSize != formatChunkLength - 18) {  	Debug.WriteLine ("Format chunk mismatch");  	this.extraSize = (short)(formatChunkLength - 18);  }  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ReadWaveFormat,The following statement contains a magic number: this.extraSize = (short)(formatChunkLength - 18);  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ToString,The following statement contains a magic number: switch (this.waveFormatTag) {  case WaveFormatEncoding.Pcm:  case WaveFormatEncoding.Extensible:  	// extensible just has some extra bits after the PCM header  	return String.Format ("{0} bit PCM: {1}kHz {2} channels"' bitsPerSample' sampleRate / 1000' channels);  default:  	return this.waveFormatTag.ToString ();  }  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,ToString,The following statement contains a magic number: return String.Format ("{0} bit PCM: {1}kHz {2} channels"' bitsPerSample' sampleRate / 1000' channels);  
Magic Number,NAudio.Wave,WaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormat.cs,Serialize,The following statement contains a magic number: writer.Write ((int)(18 + extraSize));  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: this.extraSize = 32;  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: switch (this.sampleRate) {  case 8000:  case 11025:  	blockAlign = 256;  	break;  case 22050:  	blockAlign = 512;  	break;  case 44100:  default:  	blockAlign = 1024;  	break;  }  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: switch (this.sampleRate) {  case 8000:  case 11025:  	blockAlign = 256;  	break;  case 22050:  	blockAlign = 512;  	break;  case 44100:  default:  	blockAlign = 1024;  	break;  }  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: switch (this.sampleRate) {  case 8000:  case 11025:  	blockAlign = 256;  	break;  case 22050:  	blockAlign = 512;  	break;  case 44100:  default:  	blockAlign = 1024;  	break;  }  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: switch (this.sampleRate) {  case 8000:  case 11025:  	blockAlign = 256;  	break;  case 22050:  	blockAlign = 512;  	break;  case 44100:  default:  	blockAlign = 1024;  	break;  }  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: switch (this.sampleRate) {  case 8000:  case 11025:  	blockAlign = 256;  	break;  case 22050:  	blockAlign = 512;  	break;  case 44100:  default:  	blockAlign = 1024;  	break;  }  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: switch (this.sampleRate) {  case 8000:  case 11025:  	blockAlign = 256;  	break;  case 22050:  	blockAlign = 512;  	break;  case 44100:  default:  	blockAlign = 1024;  	break;  }  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: switch (this.sampleRate) {  case 8000:  case 11025:  	blockAlign = 256;  	break;  case 22050:  	blockAlign = 512;  	break;  case 44100:  default:  	blockAlign = 1024;  	break;  }  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: blockAlign = 256;  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: blockAlign = 512;  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: blockAlign = 1024;  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: this.bitsPerSample = 4;  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: this.samplesPerBlock = (short)((((blockAlign - (7 * channels)) * 8) / (bitsPerSample * channels)) + 2);  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: this.samplesPerBlock = (short)((((blockAlign - (7 * channels)) * 8) / (bitsPerSample * channels)) + 2);  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: this.samplesPerBlock = (short)((((blockAlign - (7 * channels)) * 8) / (bitsPerSample * channels)) + 2);  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: numCoeff = 7;  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,AdpcmWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\AdpcmWaveFormat.cs,AdpcmWaveFormat,The following statement contains a magic number: coefficients = new short[14] {  	256'  	0'  	512'  	-256'  	0'  	0'  	192'  	64'  	240'  	0'  	460'  	-208'  	392'  	-232  };  
Magic Number,NAudio.Wave,WaveFormatExtensible,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormatExtensible.cs,WaveFormatExtensible,The following statement contains a magic number: extraSize = 22;  
Magic Number,NAudio.Wave,WaveFormatExtensible,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WaveFormatExtensible.cs,WaveFormatExtensible,The following statement contains a magic number: if (bits == 32) {  	// KSDATAFORMAT_SUBTYPE_IEEE_FLOAT  	subFormat = AudioMediaSubtypes.MEDIASUBTYPE_IEEE_FLOAT;  	// new Guid("00000003-0000-0010-8000-00aa00389b71");  }  else {  	// KSDATAFORMAT_SUBTYPE_PCM  	subFormat = AudioMediaSubtypes.MEDIASUBTYPE_PCM;  	// new Guid("00000001-0000-0010-8000-00aa00389b71");  }  
Magic Number,NAudio.Wave,AsioOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\AsioOut.cs,Init,The following statement contains a magic number: waveBuffer = new byte[nbSamples * waveFormat.Channels * waveFormat.BitsPerSample / 8];  
Magic Number,NAudio.Wave,CueWaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\CueWaveFileWriter.cs,WriteCues,The following statement contains a magic number: if (cues != null) {  	byte[] cueChunks = cues.GetRIFFChunks ();  	int cueChunksSize = cueChunks.Length;  	w.Seek (0' SeekOrigin.End);  	w.Write (cues.GetRIFFChunks ()' 0' cueChunksSize);  	w.Seek (4' SeekOrigin.Begin);  	w.Write ((int)(w.BaseStream.Length - 8));  }  
Magic Number,NAudio.Wave,CueWaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\CueWaveFileWriter.cs,WriteCues,The following statement contains a magic number: if (cues != null) {  	byte[] cueChunks = cues.GetRIFFChunks ();  	int cueChunksSize = cueChunks.Length;  	w.Seek (0' SeekOrigin.End);  	w.Write (cues.GetRIFFChunks ()' 0' cueChunksSize);  	w.Seek (4' SeekOrigin.Begin);  	w.Write ((int)(w.BaseStream.Length - 8));  }  
Magic Number,NAudio.Wave,CueWaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\CueWaveFileWriter.cs,WriteCues,The following statement contains a magic number: w.Seek (4' SeekOrigin.Begin);  
Magic Number,NAudio.Wave,CueWaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\CueWaveFileWriter.cs,WriteCues,The following statement contains a magic number: w.Write ((int)(w.BaseStream.Length - 8));  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,EnumCallback,The following statement contains a magic number: if (lpGuid == IntPtr.Zero) {  	device.Guid = Guid.Empty;  }  else {  	byte[] guidBytes = new byte[16];  	Marshal.Copy (lpGuid' guidBytes' 0' 16);  	device.Guid = new Guid (guidBytes);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,EnumCallback,The following statement contains a magic number: if (lpGuid == IntPtr.Zero) {  	device.Guid = Guid.Empty;  }  else {  	byte[] guidBytes = new byte[16];  	Marshal.Copy (lpGuid' guidBytes' 0' 16);  	device.Guid = new Guid (guidBytes);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,EnumCallback,The following statement contains a magic number: Marshal.Copy (lpGuid' guidBytes' 0' 16);  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,Stop,The following statement contains a magic number: if (Monitor.TryEnter (m_LockObject' 50)) {  	playbackState = PlaybackState.Stopped;  	Monitor.Exit (m_LockObject);  }  else {  	// No joy - abort the thread!  	if (notifyThread != null) {  		notifyThread.Abort ();  		notifyThread = null;  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: lock (this.m_LockObject) {  	directSound = null;  	DirectSoundCreate (ref device' out directSound' IntPtr.Zero);  	if (directSound != null) {  		// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  		directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  		// -------------------------------------------------------------------------------------  		// Create PrimaryBuffer  		// -------------------------------------------------------------------------------------  		// Fill BufferDescription for PrimaryBuffer  		BufferDescription bufferDesc = new BufferDescription ();  		bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  		bufferDesc.dwBufferBytes = 0;  		bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  		bufferDesc.dwReserved = 0;  		bufferDesc.lpwfxFormat = IntPtr.Zero;  		bufferDesc.guidAlgo = Guid.Empty;  		object soundBufferObj;  		// Create PrimaryBuffer  		directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  		primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  		// Play & Loop on the PrimarySound Buffer   		primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		// -------------------------------------------------------------------------------------  		// Create SecondaryBuffer  		// -------------------------------------------------------------------------------------  		// A frame of samples equals to Desired Latency  		samplesFrameSize = MsToBytes (desiredLatency);  		// Fill BufferDescription for SecondaryBuffer  		BufferDescription bufferDesc2 = new BufferDescription ();  		bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  		bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  		bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  		bufferDesc2.dwReserved = 0;  		GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  		// Ptr to waveFormat  		bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  		// set Ptr to waveFormat  		bufferDesc2.guidAlgo = Guid.Empty;  		// Create SecondaryBuffer  		directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  		secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  		handleOnWaveFormat.Free ();  		// Get effective SecondaryBuffer size  		BufferCaps dsbCaps = new BufferCaps ();  		dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  		secondaryBuffer.GetCaps (dsbCaps);  		nextSamplesWriteIndex = 0;  		samplesTotalSize = dsbCaps.dwBufferBytes;  		samples = new byte[samplesTotalSize];  		System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  		// -------------------------------------------------------------------------------------  		// Create double buffering notification.  		// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  		// -------------------------------------------------------------------------------------  		IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  		frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  		frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  		endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  		DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  		notifies [0] = new DirectSoundBufferPositionNotify ();  		notifies [0].dwOffset = 0;  		notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  		notifies [1] = new DirectSoundBufferPositionNotify ();  		notifies [1].dwOffset = (uint)samplesFrameSize;  		notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  		notifies [2] = new DirectSoundBufferPositionNotify ();  		notifies [2].dwOffset = 0xFFFFFFFF;  		notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  		notify.SetNotificationPositions (3' notifies);  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: lock (this.m_LockObject) {  	directSound = null;  	DirectSoundCreate (ref device' out directSound' IntPtr.Zero);  	if (directSound != null) {  		// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  		directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  		// -------------------------------------------------------------------------------------  		// Create PrimaryBuffer  		// -------------------------------------------------------------------------------------  		// Fill BufferDescription for PrimaryBuffer  		BufferDescription bufferDesc = new BufferDescription ();  		bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  		bufferDesc.dwBufferBytes = 0;  		bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  		bufferDesc.dwReserved = 0;  		bufferDesc.lpwfxFormat = IntPtr.Zero;  		bufferDesc.guidAlgo = Guid.Empty;  		object soundBufferObj;  		// Create PrimaryBuffer  		directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  		primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  		// Play & Loop on the PrimarySound Buffer   		primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		// -------------------------------------------------------------------------------------  		// Create SecondaryBuffer  		// -------------------------------------------------------------------------------------  		// A frame of samples equals to Desired Latency  		samplesFrameSize = MsToBytes (desiredLatency);  		// Fill BufferDescription for SecondaryBuffer  		BufferDescription bufferDesc2 = new BufferDescription ();  		bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  		bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  		bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  		bufferDesc2.dwReserved = 0;  		GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  		// Ptr to waveFormat  		bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  		// set Ptr to waveFormat  		bufferDesc2.guidAlgo = Guid.Empty;  		// Create SecondaryBuffer  		directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  		secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  		handleOnWaveFormat.Free ();  		// Get effective SecondaryBuffer size  		BufferCaps dsbCaps = new BufferCaps ();  		dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  		secondaryBuffer.GetCaps (dsbCaps);  		nextSamplesWriteIndex = 0;  		samplesTotalSize = dsbCaps.dwBufferBytes;  		samples = new byte[samplesTotalSize];  		System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  		// -------------------------------------------------------------------------------------  		// Create double buffering notification.  		// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  		// -------------------------------------------------------------------------------------  		IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  		frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  		frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  		endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  		DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  		notifies [0] = new DirectSoundBufferPositionNotify ();  		notifies [0].dwOffset = 0;  		notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  		notifies [1] = new DirectSoundBufferPositionNotify ();  		notifies [1].dwOffset = (uint)samplesFrameSize;  		notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  		notifies [2] = new DirectSoundBufferPositionNotify ();  		notifies [2].dwOffset = 0xFFFFFFFF;  		notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  		notify.SetNotificationPositions (3' notifies);  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: lock (this.m_LockObject) {  	directSound = null;  	DirectSoundCreate (ref device' out directSound' IntPtr.Zero);  	if (directSound != null) {  		// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  		directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  		// -------------------------------------------------------------------------------------  		// Create PrimaryBuffer  		// -------------------------------------------------------------------------------------  		// Fill BufferDescription for PrimaryBuffer  		BufferDescription bufferDesc = new BufferDescription ();  		bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  		bufferDesc.dwBufferBytes = 0;  		bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  		bufferDesc.dwReserved = 0;  		bufferDesc.lpwfxFormat = IntPtr.Zero;  		bufferDesc.guidAlgo = Guid.Empty;  		object soundBufferObj;  		// Create PrimaryBuffer  		directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  		primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  		// Play & Loop on the PrimarySound Buffer   		primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		// -------------------------------------------------------------------------------------  		// Create SecondaryBuffer  		// -------------------------------------------------------------------------------------  		// A frame of samples equals to Desired Latency  		samplesFrameSize = MsToBytes (desiredLatency);  		// Fill BufferDescription for SecondaryBuffer  		BufferDescription bufferDesc2 = new BufferDescription ();  		bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  		bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  		bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  		bufferDesc2.dwReserved = 0;  		GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  		// Ptr to waveFormat  		bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  		// set Ptr to waveFormat  		bufferDesc2.guidAlgo = Guid.Empty;  		// Create SecondaryBuffer  		directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  		secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  		handleOnWaveFormat.Free ();  		// Get effective SecondaryBuffer size  		BufferCaps dsbCaps = new BufferCaps ();  		dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  		secondaryBuffer.GetCaps (dsbCaps);  		nextSamplesWriteIndex = 0;  		samplesTotalSize = dsbCaps.dwBufferBytes;  		samples = new byte[samplesTotalSize];  		System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  		// -------------------------------------------------------------------------------------  		// Create double buffering notification.  		// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  		// -------------------------------------------------------------------------------------  		IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  		frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  		frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  		endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  		DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  		notifies [0] = new DirectSoundBufferPositionNotify ();  		notifies [0].dwOffset = 0;  		notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  		notifies [1] = new DirectSoundBufferPositionNotify ();  		notifies [1].dwOffset = (uint)samplesFrameSize;  		notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  		notifies [2] = new DirectSoundBufferPositionNotify ();  		notifies [2].dwOffset = 0xFFFFFFFF;  		notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  		notify.SetNotificationPositions (3' notifies);  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: lock (this.m_LockObject) {  	directSound = null;  	DirectSoundCreate (ref device' out directSound' IntPtr.Zero);  	if (directSound != null) {  		// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  		directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  		// -------------------------------------------------------------------------------------  		// Create PrimaryBuffer  		// -------------------------------------------------------------------------------------  		// Fill BufferDescription for PrimaryBuffer  		BufferDescription bufferDesc = new BufferDescription ();  		bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  		bufferDesc.dwBufferBytes = 0;  		bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  		bufferDesc.dwReserved = 0;  		bufferDesc.lpwfxFormat = IntPtr.Zero;  		bufferDesc.guidAlgo = Guid.Empty;  		object soundBufferObj;  		// Create PrimaryBuffer  		directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  		primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  		// Play & Loop on the PrimarySound Buffer   		primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		// -------------------------------------------------------------------------------------  		// Create SecondaryBuffer  		// -------------------------------------------------------------------------------------  		// A frame of samples equals to Desired Latency  		samplesFrameSize = MsToBytes (desiredLatency);  		// Fill BufferDescription for SecondaryBuffer  		BufferDescription bufferDesc2 = new BufferDescription ();  		bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  		bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  		bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  		bufferDesc2.dwReserved = 0;  		GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  		// Ptr to waveFormat  		bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  		// set Ptr to waveFormat  		bufferDesc2.guidAlgo = Guid.Empty;  		// Create SecondaryBuffer  		directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  		secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  		handleOnWaveFormat.Free ();  		// Get effective SecondaryBuffer size  		BufferCaps dsbCaps = new BufferCaps ();  		dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  		secondaryBuffer.GetCaps (dsbCaps);  		nextSamplesWriteIndex = 0;  		samplesTotalSize = dsbCaps.dwBufferBytes;  		samples = new byte[samplesTotalSize];  		System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  		// -------------------------------------------------------------------------------------  		// Create double buffering notification.  		// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  		// -------------------------------------------------------------------------------------  		IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  		frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  		frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  		endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  		DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  		notifies [0] = new DirectSoundBufferPositionNotify ();  		notifies [0].dwOffset = 0;  		notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  		notifies [1] = new DirectSoundBufferPositionNotify ();  		notifies [1].dwOffset = (uint)samplesFrameSize;  		notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  		notifies [2] = new DirectSoundBufferPositionNotify ();  		notifies [2].dwOffset = 0xFFFFFFFF;  		notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  		notify.SetNotificationPositions (3' notifies);  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: lock (this.m_LockObject) {  	directSound = null;  	DirectSoundCreate (ref device' out directSound' IntPtr.Zero);  	if (directSound != null) {  		// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  		directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  		// -------------------------------------------------------------------------------------  		// Create PrimaryBuffer  		// -------------------------------------------------------------------------------------  		// Fill BufferDescription for PrimaryBuffer  		BufferDescription bufferDesc = new BufferDescription ();  		bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  		bufferDesc.dwBufferBytes = 0;  		bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  		bufferDesc.dwReserved = 0;  		bufferDesc.lpwfxFormat = IntPtr.Zero;  		bufferDesc.guidAlgo = Guid.Empty;  		object soundBufferObj;  		// Create PrimaryBuffer  		directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  		primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  		// Play & Loop on the PrimarySound Buffer   		primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		// -------------------------------------------------------------------------------------  		// Create SecondaryBuffer  		// -------------------------------------------------------------------------------------  		// A frame of samples equals to Desired Latency  		samplesFrameSize = MsToBytes (desiredLatency);  		// Fill BufferDescription for SecondaryBuffer  		BufferDescription bufferDesc2 = new BufferDescription ();  		bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  		bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  		bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  		bufferDesc2.dwReserved = 0;  		GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  		// Ptr to waveFormat  		bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  		// set Ptr to waveFormat  		bufferDesc2.guidAlgo = Guid.Empty;  		// Create SecondaryBuffer  		directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  		secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  		handleOnWaveFormat.Free ();  		// Get effective SecondaryBuffer size  		BufferCaps dsbCaps = new BufferCaps ();  		dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  		secondaryBuffer.GetCaps (dsbCaps);  		nextSamplesWriteIndex = 0;  		samplesTotalSize = dsbCaps.dwBufferBytes;  		samples = new byte[samplesTotalSize];  		System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  		// -------------------------------------------------------------------------------------  		// Create double buffering notification.  		// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  		// -------------------------------------------------------------------------------------  		IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  		frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  		frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  		endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  		DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  		notifies [0] = new DirectSoundBufferPositionNotify ();  		notifies [0].dwOffset = 0;  		notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  		notifies [1] = new DirectSoundBufferPositionNotify ();  		notifies [1].dwOffset = (uint)samplesFrameSize;  		notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  		notifies [2] = new DirectSoundBufferPositionNotify ();  		notifies [2].dwOffset = 0xFFFFFFFF;  		notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  		notify.SetNotificationPositions (3' notifies);  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: lock (this.m_LockObject) {  	directSound = null;  	DirectSoundCreate (ref device' out directSound' IntPtr.Zero);  	if (directSound != null) {  		// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  		directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  		// -------------------------------------------------------------------------------------  		// Create PrimaryBuffer  		// -------------------------------------------------------------------------------------  		// Fill BufferDescription for PrimaryBuffer  		BufferDescription bufferDesc = new BufferDescription ();  		bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  		bufferDesc.dwBufferBytes = 0;  		bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  		bufferDesc.dwReserved = 0;  		bufferDesc.lpwfxFormat = IntPtr.Zero;  		bufferDesc.guidAlgo = Guid.Empty;  		object soundBufferObj;  		// Create PrimaryBuffer  		directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  		primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  		// Play & Loop on the PrimarySound Buffer   		primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		// -------------------------------------------------------------------------------------  		// Create SecondaryBuffer  		// -------------------------------------------------------------------------------------  		// A frame of samples equals to Desired Latency  		samplesFrameSize = MsToBytes (desiredLatency);  		// Fill BufferDescription for SecondaryBuffer  		BufferDescription bufferDesc2 = new BufferDescription ();  		bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  		bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  		bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  		bufferDesc2.dwReserved = 0;  		GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  		// Ptr to waveFormat  		bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  		// set Ptr to waveFormat  		bufferDesc2.guidAlgo = Guid.Empty;  		// Create SecondaryBuffer  		directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  		secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  		handleOnWaveFormat.Free ();  		// Get effective SecondaryBuffer size  		BufferCaps dsbCaps = new BufferCaps ();  		dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  		secondaryBuffer.GetCaps (dsbCaps);  		nextSamplesWriteIndex = 0;  		samplesTotalSize = dsbCaps.dwBufferBytes;  		samples = new byte[samplesTotalSize];  		System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  		// -------------------------------------------------------------------------------------  		// Create double buffering notification.  		// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  		// -------------------------------------------------------------------------------------  		IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  		frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  		frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  		endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  		DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  		notifies [0] = new DirectSoundBufferPositionNotify ();  		notifies [0].dwOffset = 0;  		notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  		notifies [1] = new DirectSoundBufferPositionNotify ();  		notifies [1].dwOffset = (uint)samplesFrameSize;  		notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  		notifies [2] = new DirectSoundBufferPositionNotify ();  		notifies [2].dwOffset = 0xFFFFFFFF;  		notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  		notify.SetNotificationPositions (3' notifies);  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: lock (this.m_LockObject) {  	directSound = null;  	DirectSoundCreate (ref device' out directSound' IntPtr.Zero);  	if (directSound != null) {  		// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  		directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  		// -------------------------------------------------------------------------------------  		// Create PrimaryBuffer  		// -------------------------------------------------------------------------------------  		// Fill BufferDescription for PrimaryBuffer  		BufferDescription bufferDesc = new BufferDescription ();  		bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  		bufferDesc.dwBufferBytes = 0;  		bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  		bufferDesc.dwReserved = 0;  		bufferDesc.lpwfxFormat = IntPtr.Zero;  		bufferDesc.guidAlgo = Guid.Empty;  		object soundBufferObj;  		// Create PrimaryBuffer  		directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  		primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  		// Play & Loop on the PrimarySound Buffer   		primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		// -------------------------------------------------------------------------------------  		// Create SecondaryBuffer  		// -------------------------------------------------------------------------------------  		// A frame of samples equals to Desired Latency  		samplesFrameSize = MsToBytes (desiredLatency);  		// Fill BufferDescription for SecondaryBuffer  		BufferDescription bufferDesc2 = new BufferDescription ();  		bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  		bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  		bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  		bufferDesc2.dwReserved = 0;  		GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  		// Ptr to waveFormat  		bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  		// set Ptr to waveFormat  		bufferDesc2.guidAlgo = Guid.Empty;  		// Create SecondaryBuffer  		directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  		secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  		handleOnWaveFormat.Free ();  		// Get effective SecondaryBuffer size  		BufferCaps dsbCaps = new BufferCaps ();  		dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  		secondaryBuffer.GetCaps (dsbCaps);  		nextSamplesWriteIndex = 0;  		samplesTotalSize = dsbCaps.dwBufferBytes;  		samples = new byte[samplesTotalSize];  		System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  		// -------------------------------------------------------------------------------------  		// Create double buffering notification.  		// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  		// -------------------------------------------------------------------------------------  		IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  		frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  		frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  		endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  		DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  		notifies [0] = new DirectSoundBufferPositionNotify ();  		notifies [0].dwOffset = 0;  		notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  		notifies [1] = new DirectSoundBufferPositionNotify ();  		notifies [1].dwOffset = (uint)samplesFrameSize;  		notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  		notifies [2] = new DirectSoundBufferPositionNotify ();  		notifies [2].dwOffset = 0xFFFFFFFF;  		notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  		notify.SetNotificationPositions (3' notifies);  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: if (directSound != null) {  	// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  	directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  	// -------------------------------------------------------------------------------------  	// Create PrimaryBuffer  	// -------------------------------------------------------------------------------------  	// Fill BufferDescription for PrimaryBuffer  	BufferDescription bufferDesc = new BufferDescription ();  	bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  	bufferDesc.dwBufferBytes = 0;  	bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  	bufferDesc.dwReserved = 0;  	bufferDesc.lpwfxFormat = IntPtr.Zero;  	bufferDesc.guidAlgo = Guid.Empty;  	object soundBufferObj;  	// Create PrimaryBuffer  	directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  	primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  	// Play & Loop on the PrimarySound Buffer   	primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	// -------------------------------------------------------------------------------------  	// Create SecondaryBuffer  	// -------------------------------------------------------------------------------------  	// A frame of samples equals to Desired Latency  	samplesFrameSize = MsToBytes (desiredLatency);  	// Fill BufferDescription for SecondaryBuffer  	BufferDescription bufferDesc2 = new BufferDescription ();  	bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  	bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  	bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  	bufferDesc2.dwReserved = 0;  	GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  	// Ptr to waveFormat  	bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  	// set Ptr to waveFormat  	bufferDesc2.guidAlgo = Guid.Empty;  	// Create SecondaryBuffer  	directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  	secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  	handleOnWaveFormat.Free ();  	// Get effective SecondaryBuffer size  	BufferCaps dsbCaps = new BufferCaps ();  	dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  	secondaryBuffer.GetCaps (dsbCaps);  	nextSamplesWriteIndex = 0;  	samplesTotalSize = dsbCaps.dwBufferBytes;  	samples = new byte[samplesTotalSize];  	System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  	// -------------------------------------------------------------------------------------  	// Create double buffering notification.  	// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  	// -------------------------------------------------------------------------------------  	IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  	frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  	frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  	endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  	notifies [0] = new DirectSoundBufferPositionNotify ();  	notifies [0].dwOffset = 0;  	notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  	notifies [1] = new DirectSoundBufferPositionNotify ();  	notifies [1].dwOffset = (uint)samplesFrameSize;  	notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  	notifies [2] = new DirectSoundBufferPositionNotify ();  	notifies [2].dwOffset = 0xFFFFFFFF;  	notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  	notify.SetNotificationPositions (3' notifies);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: if (directSound != null) {  	// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  	directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  	// -------------------------------------------------------------------------------------  	// Create PrimaryBuffer  	// -------------------------------------------------------------------------------------  	// Fill BufferDescription for PrimaryBuffer  	BufferDescription bufferDesc = new BufferDescription ();  	bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  	bufferDesc.dwBufferBytes = 0;  	bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  	bufferDesc.dwReserved = 0;  	bufferDesc.lpwfxFormat = IntPtr.Zero;  	bufferDesc.guidAlgo = Guid.Empty;  	object soundBufferObj;  	// Create PrimaryBuffer  	directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  	primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  	// Play & Loop on the PrimarySound Buffer   	primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	// -------------------------------------------------------------------------------------  	// Create SecondaryBuffer  	// -------------------------------------------------------------------------------------  	// A frame of samples equals to Desired Latency  	samplesFrameSize = MsToBytes (desiredLatency);  	// Fill BufferDescription for SecondaryBuffer  	BufferDescription bufferDesc2 = new BufferDescription ();  	bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  	bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  	bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  	bufferDesc2.dwReserved = 0;  	GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  	// Ptr to waveFormat  	bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  	// set Ptr to waveFormat  	bufferDesc2.guidAlgo = Guid.Empty;  	// Create SecondaryBuffer  	directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  	secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  	handleOnWaveFormat.Free ();  	// Get effective SecondaryBuffer size  	BufferCaps dsbCaps = new BufferCaps ();  	dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  	secondaryBuffer.GetCaps (dsbCaps);  	nextSamplesWriteIndex = 0;  	samplesTotalSize = dsbCaps.dwBufferBytes;  	samples = new byte[samplesTotalSize];  	System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  	// -------------------------------------------------------------------------------------  	// Create double buffering notification.  	// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  	// -------------------------------------------------------------------------------------  	IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  	frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  	frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  	endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  	notifies [0] = new DirectSoundBufferPositionNotify ();  	notifies [0].dwOffset = 0;  	notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  	notifies [1] = new DirectSoundBufferPositionNotify ();  	notifies [1].dwOffset = (uint)samplesFrameSize;  	notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  	notifies [2] = new DirectSoundBufferPositionNotify ();  	notifies [2].dwOffset = 0xFFFFFFFF;  	notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  	notify.SetNotificationPositions (3' notifies);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: if (directSound != null) {  	// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  	directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  	// -------------------------------------------------------------------------------------  	// Create PrimaryBuffer  	// -------------------------------------------------------------------------------------  	// Fill BufferDescription for PrimaryBuffer  	BufferDescription bufferDesc = new BufferDescription ();  	bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  	bufferDesc.dwBufferBytes = 0;  	bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  	bufferDesc.dwReserved = 0;  	bufferDesc.lpwfxFormat = IntPtr.Zero;  	bufferDesc.guidAlgo = Guid.Empty;  	object soundBufferObj;  	// Create PrimaryBuffer  	directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  	primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  	// Play & Loop on the PrimarySound Buffer   	primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	// -------------------------------------------------------------------------------------  	// Create SecondaryBuffer  	// -------------------------------------------------------------------------------------  	// A frame of samples equals to Desired Latency  	samplesFrameSize = MsToBytes (desiredLatency);  	// Fill BufferDescription for SecondaryBuffer  	BufferDescription bufferDesc2 = new BufferDescription ();  	bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  	bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  	bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  	bufferDesc2.dwReserved = 0;  	GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  	// Ptr to waveFormat  	bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  	// set Ptr to waveFormat  	bufferDesc2.guidAlgo = Guid.Empty;  	// Create SecondaryBuffer  	directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  	secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  	handleOnWaveFormat.Free ();  	// Get effective SecondaryBuffer size  	BufferCaps dsbCaps = new BufferCaps ();  	dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  	secondaryBuffer.GetCaps (dsbCaps);  	nextSamplesWriteIndex = 0;  	samplesTotalSize = dsbCaps.dwBufferBytes;  	samples = new byte[samplesTotalSize];  	System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  	// -------------------------------------------------------------------------------------  	// Create double buffering notification.  	// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  	// -------------------------------------------------------------------------------------  	IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  	frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  	frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  	endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  	notifies [0] = new DirectSoundBufferPositionNotify ();  	notifies [0].dwOffset = 0;  	notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  	notifies [1] = new DirectSoundBufferPositionNotify ();  	notifies [1].dwOffset = (uint)samplesFrameSize;  	notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  	notifies [2] = new DirectSoundBufferPositionNotify ();  	notifies [2].dwOffset = 0xFFFFFFFF;  	notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  	notify.SetNotificationPositions (3' notifies);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: if (directSound != null) {  	// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  	directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  	// -------------------------------------------------------------------------------------  	// Create PrimaryBuffer  	// -------------------------------------------------------------------------------------  	// Fill BufferDescription for PrimaryBuffer  	BufferDescription bufferDesc = new BufferDescription ();  	bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  	bufferDesc.dwBufferBytes = 0;  	bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  	bufferDesc.dwReserved = 0;  	bufferDesc.lpwfxFormat = IntPtr.Zero;  	bufferDesc.guidAlgo = Guid.Empty;  	object soundBufferObj;  	// Create PrimaryBuffer  	directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  	primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  	// Play & Loop on the PrimarySound Buffer   	primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	// -------------------------------------------------------------------------------------  	// Create SecondaryBuffer  	// -------------------------------------------------------------------------------------  	// A frame of samples equals to Desired Latency  	samplesFrameSize = MsToBytes (desiredLatency);  	// Fill BufferDescription for SecondaryBuffer  	BufferDescription bufferDesc2 = new BufferDescription ();  	bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  	bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  	bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  	bufferDesc2.dwReserved = 0;  	GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  	// Ptr to waveFormat  	bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  	// set Ptr to waveFormat  	bufferDesc2.guidAlgo = Guid.Empty;  	// Create SecondaryBuffer  	directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  	secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  	handleOnWaveFormat.Free ();  	// Get effective SecondaryBuffer size  	BufferCaps dsbCaps = new BufferCaps ();  	dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  	secondaryBuffer.GetCaps (dsbCaps);  	nextSamplesWriteIndex = 0;  	samplesTotalSize = dsbCaps.dwBufferBytes;  	samples = new byte[samplesTotalSize];  	System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  	// -------------------------------------------------------------------------------------  	// Create double buffering notification.  	// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  	// -------------------------------------------------------------------------------------  	IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  	frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  	frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  	endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  	notifies [0] = new DirectSoundBufferPositionNotify ();  	notifies [0].dwOffset = 0;  	notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  	notifies [1] = new DirectSoundBufferPositionNotify ();  	notifies [1].dwOffset = (uint)samplesFrameSize;  	notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  	notifies [2] = new DirectSoundBufferPositionNotify ();  	notifies [2].dwOffset = 0xFFFFFFFF;  	notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  	notify.SetNotificationPositions (3' notifies);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: if (directSound != null) {  	// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  	directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  	// -------------------------------------------------------------------------------------  	// Create PrimaryBuffer  	// -------------------------------------------------------------------------------------  	// Fill BufferDescription for PrimaryBuffer  	BufferDescription bufferDesc = new BufferDescription ();  	bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  	bufferDesc.dwBufferBytes = 0;  	bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  	bufferDesc.dwReserved = 0;  	bufferDesc.lpwfxFormat = IntPtr.Zero;  	bufferDesc.guidAlgo = Guid.Empty;  	object soundBufferObj;  	// Create PrimaryBuffer  	directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  	primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  	// Play & Loop on the PrimarySound Buffer   	primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	// -------------------------------------------------------------------------------------  	// Create SecondaryBuffer  	// -------------------------------------------------------------------------------------  	// A frame of samples equals to Desired Latency  	samplesFrameSize = MsToBytes (desiredLatency);  	// Fill BufferDescription for SecondaryBuffer  	BufferDescription bufferDesc2 = new BufferDescription ();  	bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  	bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  	bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  	bufferDesc2.dwReserved = 0;  	GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  	// Ptr to waveFormat  	bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  	// set Ptr to waveFormat  	bufferDesc2.guidAlgo = Guid.Empty;  	// Create SecondaryBuffer  	directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  	secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  	handleOnWaveFormat.Free ();  	// Get effective SecondaryBuffer size  	BufferCaps dsbCaps = new BufferCaps ();  	dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  	secondaryBuffer.GetCaps (dsbCaps);  	nextSamplesWriteIndex = 0;  	samplesTotalSize = dsbCaps.dwBufferBytes;  	samples = new byte[samplesTotalSize];  	System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  	// -------------------------------------------------------------------------------------  	// Create double buffering notification.  	// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  	// -------------------------------------------------------------------------------------  	IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  	frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  	frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  	endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  	notifies [0] = new DirectSoundBufferPositionNotify ();  	notifies [0].dwOffset = 0;  	notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  	notifies [1] = new DirectSoundBufferPositionNotify ();  	notifies [1].dwOffset = (uint)samplesFrameSize;  	notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  	notifies [2] = new DirectSoundBufferPositionNotify ();  	notifies [2].dwOffset = 0xFFFFFFFF;  	notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  	notify.SetNotificationPositions (3' notifies);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: if (directSound != null) {  	// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  	directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  	// -------------------------------------------------------------------------------------  	// Create PrimaryBuffer  	// -------------------------------------------------------------------------------------  	// Fill BufferDescription for PrimaryBuffer  	BufferDescription bufferDesc = new BufferDescription ();  	bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  	bufferDesc.dwBufferBytes = 0;  	bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  	bufferDesc.dwReserved = 0;  	bufferDesc.lpwfxFormat = IntPtr.Zero;  	bufferDesc.guidAlgo = Guid.Empty;  	object soundBufferObj;  	// Create PrimaryBuffer  	directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  	primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  	// Play & Loop on the PrimarySound Buffer   	primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	// -------------------------------------------------------------------------------------  	// Create SecondaryBuffer  	// -------------------------------------------------------------------------------------  	// A frame of samples equals to Desired Latency  	samplesFrameSize = MsToBytes (desiredLatency);  	// Fill BufferDescription for SecondaryBuffer  	BufferDescription bufferDesc2 = new BufferDescription ();  	bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  	bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  	bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  	bufferDesc2.dwReserved = 0;  	GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  	// Ptr to waveFormat  	bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  	// set Ptr to waveFormat  	bufferDesc2.guidAlgo = Guid.Empty;  	// Create SecondaryBuffer  	directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  	secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  	handleOnWaveFormat.Free ();  	// Get effective SecondaryBuffer size  	BufferCaps dsbCaps = new BufferCaps ();  	dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  	secondaryBuffer.GetCaps (dsbCaps);  	nextSamplesWriteIndex = 0;  	samplesTotalSize = dsbCaps.dwBufferBytes;  	samples = new byte[samplesTotalSize];  	System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  	// -------------------------------------------------------------------------------------  	// Create double buffering notification.  	// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  	// -------------------------------------------------------------------------------------  	IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  	frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  	frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  	endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  	notifies [0] = new DirectSoundBufferPositionNotify ();  	notifies [0].dwOffset = 0;  	notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  	notifies [1] = new DirectSoundBufferPositionNotify ();  	notifies [1].dwOffset = (uint)samplesFrameSize;  	notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  	notifies [2] = new DirectSoundBufferPositionNotify ();  	notifies [2].dwOffset = 0xFFFFFFFF;  	notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  	notify.SetNotificationPositions (3' notifies);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: if (directSound != null) {  	// Set Cooperative Level to PRIORITY (priority level can call the SetFormat and Compact methods)  	directSound.SetCooperativeLevel (GetDesktopWindow ()' DirectSoundCooperativeLevel.DSSCL_PRIORITY);  	// -------------------------------------------------------------------------------------  	// Create PrimaryBuffer  	// -------------------------------------------------------------------------------------  	// Fill BufferDescription for PrimaryBuffer  	BufferDescription bufferDesc = new BufferDescription ();  	bufferDesc.dwSize = Marshal.SizeOf (bufferDesc);  	bufferDesc.dwBufferBytes = 0;  	bufferDesc.dwFlags = DirectSoundBufferCaps.DSBCAPS_PRIMARYBUFFER;  	bufferDesc.dwReserved = 0;  	bufferDesc.lpwfxFormat = IntPtr.Zero;  	bufferDesc.guidAlgo = Guid.Empty;  	object soundBufferObj;  	// Create PrimaryBuffer  	directSound.CreateSoundBuffer (bufferDesc' out soundBufferObj' IntPtr.Zero);  	primarySoundBuffer = (IDirectSoundBuffer)soundBufferObj;  	// Play & Loop on the PrimarySound Buffer   	primarySoundBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	// -------------------------------------------------------------------------------------  	// Create SecondaryBuffer  	// -------------------------------------------------------------------------------------  	// A frame of samples equals to Desired Latency  	samplesFrameSize = MsToBytes (desiredLatency);  	// Fill BufferDescription for SecondaryBuffer  	BufferDescription bufferDesc2 = new BufferDescription ();  	bufferDesc2.dwSize = Marshal.SizeOf (bufferDesc2);  	bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  	bufferDesc2.dwFlags = DirectSoundBufferCaps.DSBCAPS_GETCURRENTPOSITION2 | DirectSoundBufferCaps.DSBCAPS_CTRLPOSITIONNOTIFY | DirectSoundBufferCaps.DSBCAPS_GLOBALFOCUS | DirectSoundBufferCaps.DSBCAPS_CTRLVOLUME | DirectSoundBufferCaps.DSBCAPS_STICKYFOCUS;  	bufferDesc2.dwReserved = 0;  	GCHandle handleOnWaveFormat = GCHandle.Alloc (waveFormat' GCHandleType.Pinned);  	// Ptr to waveFormat  	bufferDesc2.lpwfxFormat = handleOnWaveFormat.AddrOfPinnedObject ();  	// set Ptr to waveFormat  	bufferDesc2.guidAlgo = Guid.Empty;  	// Create SecondaryBuffer  	directSound.CreateSoundBuffer (bufferDesc2' out soundBufferObj' IntPtr.Zero);  	secondaryBuffer = (IDirectSoundBuffer)soundBufferObj;  	handleOnWaveFormat.Free ();  	// Get effective SecondaryBuffer size  	BufferCaps dsbCaps = new BufferCaps ();  	dsbCaps.dwSize = Marshal.SizeOf (dsbCaps);  	secondaryBuffer.GetCaps (dsbCaps);  	nextSamplesWriteIndex = 0;  	samplesTotalSize = dsbCaps.dwBufferBytes;  	samples = new byte[samplesTotalSize];  	System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  	// -------------------------------------------------------------------------------------  	// Create double buffering notification.  	// Use DirectSoundNotify at Position [0' 1/2] and Stop Position (0xFFFFFFFF)  	// -------------------------------------------------------------------------------------  	IDirectSoundNotify notify = (IDirectSoundNotify)soundBufferObj;  	frameEventWaitHandle1 = new EventWaitHandle (false' EventResetMode.AutoReset);  	frameEventWaitHandle2 = new EventWaitHandle (false' EventResetMode.AutoReset);  	endEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	DirectSoundBufferPositionNotify[] notifies = new DirectSoundBufferPositionNotify[3];  	notifies [0] = new DirectSoundBufferPositionNotify ();  	notifies [0].dwOffset = 0;  	notifies [0].hEventNotify = frameEventWaitHandle1.SafeWaitHandle.DangerousGetHandle ();  	notifies [1] = new DirectSoundBufferPositionNotify ();  	notifies [1].dwOffset = (uint)samplesFrameSize;  	notifies [1].hEventNotify = frameEventWaitHandle2.SafeWaitHandle.DangerousGetHandle ();  	notifies [2] = new DirectSoundBufferPositionNotify ();  	notifies [2].dwOffset = 0xFFFFFFFF;  	notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  	notify.SetNotificationPositions (3' notifies);  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: bufferDesc2.dwBufferBytes = (uint)(samplesFrameSize * 2);  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: System.Diagnostics.Debug.Assert (samplesTotalSize == (2 * samplesFrameSize)' "Invalid SamplesTotalSize vs SamplesFrameSize");  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: notifies [2] = new DirectSoundBufferPositionNotify ();  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: notifies [2].dwOffset = 0xFFFFFFFF;  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: notifies [2].hEventNotify = endEventWaitHandle.SafeWaitHandle.DangerousGetHandle ();  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,InitializeDirectSound,The following statement contains a magic number: notify.SetNotificationPositions (3' notifies);  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: try {  	int lResult = 1;  	if (PlaybackState == PlaybackState.Stopped) {  		secondaryBuffer.SetCurrentPosition (0);  		nextSamplesWriteIndex = 0;  		lResult = Feed (samplesTotalSize);  	}  	// Incase the previous Feed method returns 0  	if (lResult > 0) {  		lock (m_LockObject) {  			playbackState = PlaybackState.Playing;  		}  		secondaryBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		WaitHandle[] waitHandles = new WaitHandle[] {  			frameEventWaitHandle1'  			frameEventWaitHandle2'  			endEventWaitHandle  		};  		bool lContinuePlayback = true;  		while (PlaybackState != PlaybackState.Stopped && lContinuePlayback) {  			// Wait for signals on frameEventWaitHandle1 (Position 0)' frameEventWaitHandle2 (Position 1/2)  			int indexHandle = WaitHandle.WaitAny (waitHandles' 3 * desiredLatency' false);  			// TimeOut is ok  			if (indexHandle != WaitHandle.WaitTimeout) {  				// Buffer is Stopped  				if (indexHandle == 2) {  					// (Gee) - Not sure whether to stop playback in this case or not!  					StopPlayback ();  					lPlaybackHalted = true;  					lContinuePlayback = false;  				}  				else {  					indexHandle = (indexHandle == 0) ? 1 : 0;  					nextSamplesWriteIndex = indexHandle * samplesFrameSize;  					// Only carry on playing if we can!  					if (Feed (samplesFrameSize) == 0) {  						StopPlayback ();  						lPlaybackHalted = true;  						lContinuePlayback = false;  					}  				}  			}  			else {  				// Timed out!  				StopPlayback ();  				lPlaybackHalted = true;  				lContinuePlayback = false;  			}  		}  	}  }  catch (Exception e) {  	// Do nothing (except report error)  	Debug.WriteLine (e.ToString ());  }  finally {  	if (!lPlaybackHalted) {  		StopPlayback ();  	}  	lock (m_LockObject) {  		playbackState = PlaybackState.Stopped;  	}  	// Fire playback stopped event  	EventHandler handler = PlaybackStopped;  	if (handler != null) {  		if (this.syncContext == null) {  			handler (this' EventArgs.Empty);  		}  		else {  			syncContext.Post (state => handler (this' EventArgs.Empty)' null);  		}  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: try {  	int lResult = 1;  	if (PlaybackState == PlaybackState.Stopped) {  		secondaryBuffer.SetCurrentPosition (0);  		nextSamplesWriteIndex = 0;  		lResult = Feed (samplesTotalSize);  	}  	// Incase the previous Feed method returns 0  	if (lResult > 0) {  		lock (m_LockObject) {  			playbackState = PlaybackState.Playing;  		}  		secondaryBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  		WaitHandle[] waitHandles = new WaitHandle[] {  			frameEventWaitHandle1'  			frameEventWaitHandle2'  			endEventWaitHandle  		};  		bool lContinuePlayback = true;  		while (PlaybackState != PlaybackState.Stopped && lContinuePlayback) {  			// Wait for signals on frameEventWaitHandle1 (Position 0)' frameEventWaitHandle2 (Position 1/2)  			int indexHandle = WaitHandle.WaitAny (waitHandles' 3 * desiredLatency' false);  			// TimeOut is ok  			if (indexHandle != WaitHandle.WaitTimeout) {  				// Buffer is Stopped  				if (indexHandle == 2) {  					// (Gee) - Not sure whether to stop playback in this case or not!  					StopPlayback ();  					lPlaybackHalted = true;  					lContinuePlayback = false;  				}  				else {  					indexHandle = (indexHandle == 0) ? 1 : 0;  					nextSamplesWriteIndex = indexHandle * samplesFrameSize;  					// Only carry on playing if we can!  					if (Feed (samplesFrameSize) == 0) {  						StopPlayback ();  						lPlaybackHalted = true;  						lContinuePlayback = false;  					}  				}  			}  			else {  				// Timed out!  				StopPlayback ();  				lPlaybackHalted = true;  				lContinuePlayback = false;  			}  		}  	}  }  catch (Exception e) {  	// Do nothing (except report error)  	Debug.WriteLine (e.ToString ());  }  finally {  	if (!lPlaybackHalted) {  		StopPlayback ();  	}  	lock (m_LockObject) {  		playbackState = PlaybackState.Stopped;  	}  	// Fire playback stopped event  	EventHandler handler = PlaybackStopped;  	if (handler != null) {  		if (this.syncContext == null) {  			handler (this' EventArgs.Empty);  		}  		else {  			syncContext.Post (state => handler (this' EventArgs.Empty)' null);  		}  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: if (lResult > 0) {  	lock (m_LockObject) {  		playbackState = PlaybackState.Playing;  	}  	secondaryBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	WaitHandle[] waitHandles = new WaitHandle[] {  		frameEventWaitHandle1'  		frameEventWaitHandle2'  		endEventWaitHandle  	};  	bool lContinuePlayback = true;  	while (PlaybackState != PlaybackState.Stopped && lContinuePlayback) {  		// Wait for signals on frameEventWaitHandle1 (Position 0)' frameEventWaitHandle2 (Position 1/2)  		int indexHandle = WaitHandle.WaitAny (waitHandles' 3 * desiredLatency' false);  		// TimeOut is ok  		if (indexHandle != WaitHandle.WaitTimeout) {  			// Buffer is Stopped  			if (indexHandle == 2) {  				// (Gee) - Not sure whether to stop playback in this case or not!  				StopPlayback ();  				lPlaybackHalted = true;  				lContinuePlayback = false;  			}  			else {  				indexHandle = (indexHandle == 0) ? 1 : 0;  				nextSamplesWriteIndex = indexHandle * samplesFrameSize;  				// Only carry on playing if we can!  				if (Feed (samplesFrameSize) == 0) {  					StopPlayback ();  					lPlaybackHalted = true;  					lContinuePlayback = false;  				}  			}  		}  		else {  			// Timed out!  			StopPlayback ();  			lPlaybackHalted = true;  			lContinuePlayback = false;  		}  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: if (lResult > 0) {  	lock (m_LockObject) {  		playbackState = PlaybackState.Playing;  	}  	secondaryBuffer.Play (0' 0' DirectSoundPlayFlags.DSBPLAY_LOOPING);  	WaitHandle[] waitHandles = new WaitHandle[] {  		frameEventWaitHandle1'  		frameEventWaitHandle2'  		endEventWaitHandle  	};  	bool lContinuePlayback = true;  	while (PlaybackState != PlaybackState.Stopped && lContinuePlayback) {  		// Wait for signals on frameEventWaitHandle1 (Position 0)' frameEventWaitHandle2 (Position 1/2)  		int indexHandle = WaitHandle.WaitAny (waitHandles' 3 * desiredLatency' false);  		// TimeOut is ok  		if (indexHandle != WaitHandle.WaitTimeout) {  			// Buffer is Stopped  			if (indexHandle == 2) {  				// (Gee) - Not sure whether to stop playback in this case or not!  				StopPlayback ();  				lPlaybackHalted = true;  				lContinuePlayback = false;  			}  			else {  				indexHandle = (indexHandle == 0) ? 1 : 0;  				nextSamplesWriteIndex = indexHandle * samplesFrameSize;  				// Only carry on playing if we can!  				if (Feed (samplesFrameSize) == 0) {  					StopPlayback ();  					lPlaybackHalted = true;  					lContinuePlayback = false;  				}  			}  		}  		else {  			// Timed out!  			StopPlayback ();  			lPlaybackHalted = true;  			lContinuePlayback = false;  		}  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: while (PlaybackState != PlaybackState.Stopped && lContinuePlayback) {  	// Wait for signals on frameEventWaitHandle1 (Position 0)' frameEventWaitHandle2 (Position 1/2)  	int indexHandle = WaitHandle.WaitAny (waitHandles' 3 * desiredLatency' false);  	// TimeOut is ok  	if (indexHandle != WaitHandle.WaitTimeout) {  		// Buffer is Stopped  		if (indexHandle == 2) {  			// (Gee) - Not sure whether to stop playback in this case or not!  			StopPlayback ();  			lPlaybackHalted = true;  			lContinuePlayback = false;  		}  		else {  			indexHandle = (indexHandle == 0) ? 1 : 0;  			nextSamplesWriteIndex = indexHandle * samplesFrameSize;  			// Only carry on playing if we can!  			if (Feed (samplesFrameSize) == 0) {  				StopPlayback ();  				lPlaybackHalted = true;  				lContinuePlayback = false;  			}  		}  	}  	else {  		// Timed out!  		StopPlayback ();  		lPlaybackHalted = true;  		lContinuePlayback = false;  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: while (PlaybackState != PlaybackState.Stopped && lContinuePlayback) {  	// Wait for signals on frameEventWaitHandle1 (Position 0)' frameEventWaitHandle2 (Position 1/2)  	int indexHandle = WaitHandle.WaitAny (waitHandles' 3 * desiredLatency' false);  	// TimeOut is ok  	if (indexHandle != WaitHandle.WaitTimeout) {  		// Buffer is Stopped  		if (indexHandle == 2) {  			// (Gee) - Not sure whether to stop playback in this case or not!  			StopPlayback ();  			lPlaybackHalted = true;  			lContinuePlayback = false;  		}  		else {  			indexHandle = (indexHandle == 0) ? 1 : 0;  			nextSamplesWriteIndex = indexHandle * samplesFrameSize;  			// Only carry on playing if we can!  			if (Feed (samplesFrameSize) == 0) {  				StopPlayback ();  				lPlaybackHalted = true;  				lContinuePlayback = false;  			}  		}  	}  	else {  		// Timed out!  		StopPlayback ();  		lPlaybackHalted = true;  		lContinuePlayback = false;  	}  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: if (indexHandle != WaitHandle.WaitTimeout) {  	// Buffer is Stopped  	if (indexHandle == 2) {  		// (Gee) - Not sure whether to stop playback in this case or not!  		StopPlayback ();  		lPlaybackHalted = true;  		lContinuePlayback = false;  	}  	else {  		indexHandle = (indexHandle == 0) ? 1 : 0;  		nextSamplesWriteIndex = indexHandle * samplesFrameSize;  		// Only carry on playing if we can!  		if (Feed (samplesFrameSize) == 0) {  			StopPlayback ();  			lPlaybackHalted = true;  			lContinuePlayback = false;  		}  	}  }  else {  	// Timed out!  	StopPlayback ();  	lPlaybackHalted = true;  	lContinuePlayback = false;  }  
Magic Number,NAudio.Wave,DirectSoundOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\DirectSoundOut.cs,PlaybackThreadFunc,The following statement contains a magic number: if (indexHandle == 2) {  	// (Gee) - Not sure whether to stop playback in this case or not!  	StopPlayback ();  	lPlaybackHalted = true;  	lContinuePlayback = false;  }  else {  	indexHandle = (indexHandle == 0) ? 1 : 0;  	nextSamplesWriteIndex = indexHandle * samplesFrameSize;  	// Only carry on playing if we can!  	if (Feed (samplesFrameSize) == 0) {  		StopPlayback ();  		lPlaybackHalted = true;  		lContinuePlayback = false;  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,GetDefaultAudioEndpoint,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6) {  	throw new NotSupportedException ("WASAPI supported only on Windows Vista and above");  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: try {  	if (this.dmoResamplerNeeded) {  		resamplerDmoStream = new ResamplerDmoStream (sourceProvider' outputFormat);  		playbackProvider = resamplerDmoStream;  	}  	// fill a whole buffer  	bufferFrameCount = audioClient.BufferSize;  	bytesPerFrame = outputFormat.Channels * outputFormat.BitsPerSample / 8;  	readBuffer = new byte[bufferFrameCount * bytesPerFrame];  	FillBuffer (playbackProvider' bufferFrameCount);  	// Create WaitHandle for sync  	WaitHandle[] waitHandles = new WaitHandle[] {  		frameEventWaitHandle  	};  	audioClient.Start ();  	while (playbackState != PlaybackState.Stopped) {  		// If using Event Sync' Wait for notification from AudioClient or Sleep half latency  		int indexHandle = 0;  		if (isUsingEventSync) {  			indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  		}  		else {  			Thread.Sleep (latencyMilliseconds / 2);  		}  		// If still playing and notification is ok  		if (playbackState == PlaybackState.Playing && indexHandle != WaitHandle.WaitTimeout) {  			// See how much buffer space is available.  			int numFramesPadding = 0;  			if (isUsingEventSync) {  				// In exclusive mode' always ask the max = bufferFrameCount = audioClient.BufferSize  				numFramesPadding = (shareMode == AudioClientShareMode.Shared) ? audioClient.CurrentPadding : 0;  			}  			else {  				numFramesPadding = audioClient.CurrentPadding;  			}  			int numFramesAvailable = bufferFrameCount - numFramesPadding;  			if (numFramesAvailable > 0) {  				FillBuffer (playbackProvider' numFramesAvailable);  			}  		}  	}  	Thread.Sleep (latencyMilliseconds / 2);  	audioClient.Stop ();  	if (playbackState == PlaybackState.Stopped) {  		audioClient.Reset ();  	}  }  finally {  	if (resamplerDmoStream != null) {  		resamplerDmoStream.Dispose ();  	}  	RaisePlaybackStopped ();  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: try {  	if (this.dmoResamplerNeeded) {  		resamplerDmoStream = new ResamplerDmoStream (sourceProvider' outputFormat);  		playbackProvider = resamplerDmoStream;  	}  	// fill a whole buffer  	bufferFrameCount = audioClient.BufferSize;  	bytesPerFrame = outputFormat.Channels * outputFormat.BitsPerSample / 8;  	readBuffer = new byte[bufferFrameCount * bytesPerFrame];  	FillBuffer (playbackProvider' bufferFrameCount);  	// Create WaitHandle for sync  	WaitHandle[] waitHandles = new WaitHandle[] {  		frameEventWaitHandle  	};  	audioClient.Start ();  	while (playbackState != PlaybackState.Stopped) {  		// If using Event Sync' Wait for notification from AudioClient or Sleep half latency  		int indexHandle = 0;  		if (isUsingEventSync) {  			indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  		}  		else {  			Thread.Sleep (latencyMilliseconds / 2);  		}  		// If still playing and notification is ok  		if (playbackState == PlaybackState.Playing && indexHandle != WaitHandle.WaitTimeout) {  			// See how much buffer space is available.  			int numFramesPadding = 0;  			if (isUsingEventSync) {  				// In exclusive mode' always ask the max = bufferFrameCount = audioClient.BufferSize  				numFramesPadding = (shareMode == AudioClientShareMode.Shared) ? audioClient.CurrentPadding : 0;  			}  			else {  				numFramesPadding = audioClient.CurrentPadding;  			}  			int numFramesAvailable = bufferFrameCount - numFramesPadding;  			if (numFramesAvailable > 0) {  				FillBuffer (playbackProvider' numFramesAvailable);  			}  		}  	}  	Thread.Sleep (latencyMilliseconds / 2);  	audioClient.Stop ();  	if (playbackState == PlaybackState.Stopped) {  		audioClient.Reset ();  	}  }  finally {  	if (resamplerDmoStream != null) {  		resamplerDmoStream.Dispose ();  	}  	RaisePlaybackStopped ();  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: try {  	if (this.dmoResamplerNeeded) {  		resamplerDmoStream = new ResamplerDmoStream (sourceProvider' outputFormat);  		playbackProvider = resamplerDmoStream;  	}  	// fill a whole buffer  	bufferFrameCount = audioClient.BufferSize;  	bytesPerFrame = outputFormat.Channels * outputFormat.BitsPerSample / 8;  	readBuffer = new byte[bufferFrameCount * bytesPerFrame];  	FillBuffer (playbackProvider' bufferFrameCount);  	// Create WaitHandle for sync  	WaitHandle[] waitHandles = new WaitHandle[] {  		frameEventWaitHandle  	};  	audioClient.Start ();  	while (playbackState != PlaybackState.Stopped) {  		// If using Event Sync' Wait for notification from AudioClient or Sleep half latency  		int indexHandle = 0;  		if (isUsingEventSync) {  			indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  		}  		else {  			Thread.Sleep (latencyMilliseconds / 2);  		}  		// If still playing and notification is ok  		if (playbackState == PlaybackState.Playing && indexHandle != WaitHandle.WaitTimeout) {  			// See how much buffer space is available.  			int numFramesPadding = 0;  			if (isUsingEventSync) {  				// In exclusive mode' always ask the max = bufferFrameCount = audioClient.BufferSize  				numFramesPadding = (shareMode == AudioClientShareMode.Shared) ? audioClient.CurrentPadding : 0;  			}  			else {  				numFramesPadding = audioClient.CurrentPadding;  			}  			int numFramesAvailable = bufferFrameCount - numFramesPadding;  			if (numFramesAvailable > 0) {  				FillBuffer (playbackProvider' numFramesAvailable);  			}  		}  	}  	Thread.Sleep (latencyMilliseconds / 2);  	audioClient.Stop ();  	if (playbackState == PlaybackState.Stopped) {  		audioClient.Reset ();  	}  }  finally {  	if (resamplerDmoStream != null) {  		resamplerDmoStream.Dispose ();  	}  	RaisePlaybackStopped ();  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: try {  	if (this.dmoResamplerNeeded) {  		resamplerDmoStream = new ResamplerDmoStream (sourceProvider' outputFormat);  		playbackProvider = resamplerDmoStream;  	}  	// fill a whole buffer  	bufferFrameCount = audioClient.BufferSize;  	bytesPerFrame = outputFormat.Channels * outputFormat.BitsPerSample / 8;  	readBuffer = new byte[bufferFrameCount * bytesPerFrame];  	FillBuffer (playbackProvider' bufferFrameCount);  	// Create WaitHandle for sync  	WaitHandle[] waitHandles = new WaitHandle[] {  		frameEventWaitHandle  	};  	audioClient.Start ();  	while (playbackState != PlaybackState.Stopped) {  		// If using Event Sync' Wait for notification from AudioClient or Sleep half latency  		int indexHandle = 0;  		if (isUsingEventSync) {  			indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  		}  		else {  			Thread.Sleep (latencyMilliseconds / 2);  		}  		// If still playing and notification is ok  		if (playbackState == PlaybackState.Playing && indexHandle != WaitHandle.WaitTimeout) {  			// See how much buffer space is available.  			int numFramesPadding = 0;  			if (isUsingEventSync) {  				// In exclusive mode' always ask the max = bufferFrameCount = audioClient.BufferSize  				numFramesPadding = (shareMode == AudioClientShareMode.Shared) ? audioClient.CurrentPadding : 0;  			}  			else {  				numFramesPadding = audioClient.CurrentPadding;  			}  			int numFramesAvailable = bufferFrameCount - numFramesPadding;  			if (numFramesAvailable > 0) {  				FillBuffer (playbackProvider' numFramesAvailable);  			}  		}  	}  	Thread.Sleep (latencyMilliseconds / 2);  	audioClient.Stop ();  	if (playbackState == PlaybackState.Stopped) {  		audioClient.Reset ();  	}  }  finally {  	if (resamplerDmoStream != null) {  		resamplerDmoStream.Dispose ();  	}  	RaisePlaybackStopped ();  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: bytesPerFrame = outputFormat.Channels * outputFormat.BitsPerSample / 8;  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: while (playbackState != PlaybackState.Stopped) {  	// If using Event Sync' Wait for notification from AudioClient or Sleep half latency  	int indexHandle = 0;  	if (isUsingEventSync) {  		indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  	}  	else {  		Thread.Sleep (latencyMilliseconds / 2);  	}  	// If still playing and notification is ok  	if (playbackState == PlaybackState.Playing && indexHandle != WaitHandle.WaitTimeout) {  		// See how much buffer space is available.  		int numFramesPadding = 0;  		if (isUsingEventSync) {  			// In exclusive mode' always ask the max = bufferFrameCount = audioClient.BufferSize  			numFramesPadding = (shareMode == AudioClientShareMode.Shared) ? audioClient.CurrentPadding : 0;  		}  		else {  			numFramesPadding = audioClient.CurrentPadding;  		}  		int numFramesAvailable = bufferFrameCount - numFramesPadding;  		if (numFramesAvailable > 0) {  			FillBuffer (playbackProvider' numFramesAvailable);  		}  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: while (playbackState != PlaybackState.Stopped) {  	// If using Event Sync' Wait for notification from AudioClient or Sleep half latency  	int indexHandle = 0;  	if (isUsingEventSync) {  		indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  	}  	else {  		Thread.Sleep (latencyMilliseconds / 2);  	}  	// If still playing and notification is ok  	if (playbackState == PlaybackState.Playing && indexHandle != WaitHandle.WaitTimeout) {  		// See how much buffer space is available.  		int numFramesPadding = 0;  		if (isUsingEventSync) {  			// In exclusive mode' always ask the max = bufferFrameCount = audioClient.BufferSize  			numFramesPadding = (shareMode == AudioClientShareMode.Shared) ? audioClient.CurrentPadding : 0;  		}  		else {  			numFramesPadding = audioClient.CurrentPadding;  		}  		int numFramesAvailable = bufferFrameCount - numFramesPadding;  		if (numFramesAvailable > 0) {  			FillBuffer (playbackProvider' numFramesAvailable);  		}  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: if (isUsingEventSync) {  	indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  }  else {  	Thread.Sleep (latencyMilliseconds / 2);  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: if (isUsingEventSync) {  	indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  }  else {  	Thread.Sleep (latencyMilliseconds / 2);  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: indexHandle = WaitHandle.WaitAny (waitHandles' 3 * latencyMilliseconds' false);  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: Thread.Sleep (latencyMilliseconds / 2);  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,PlayThread,The following statement contains a magic number: Thread.Sleep (latencyMilliseconds / 2);  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' outputFormat' out closestSampleRateFormat)) {  	// Use closesSampleRateFormat (in sharedMode' it equals usualy to the audioClient.MixFormat)  	// See documentation : http://msdn.microsoft.com/en-us/library/ms678737(VS.85).aspx   	// They say : "In shared mode' the audio engine always supports the mix format"  	// The MixFormat is more likely to be a WaveFormatExtensible.  	if (closestSampleRateFormat == null) {  		WaveFormat correctSampleRateFormat = audioClient.MixFormat;  		/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			// Iterate from Worst to Best Format  			WaveFormatExtensible[] bestToWorstFormats =  {  				new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  			};  			// Check from best Format to worst format ( Float32' Int24' Int16 )  			for (int i = 0; i < bestToWorstFormats.Length; i++) {  				correctSampleRateFormat = bestToWorstFormats [i];  				if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					break;  				}  				correctSampleRateFormat = null;  			}  			// If still null' then test on the PCM16' 2 channels  			if (correctSampleRateFormat == null) {  				// Last Last Last Chance (Thanks WASAPI)  				correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  				if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					throw new NotSupportedException ("Can't find a supported format to use");  				}  			}  		}  		outputFormat = correctSampleRateFormat;  	}  	else {  		outputFormat = closestSampleRateFormat;  	}  	// just check that we can make it.  	using (new ResamplerDmoStream (waveProvider' outputFormat)) {  	}  	this.dmoResamplerNeeded = true;  }  else {  	dmoResamplerNeeded = false;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' outputFormat' out closestSampleRateFormat)) {  	// Use closesSampleRateFormat (in sharedMode' it equals usualy to the audioClient.MixFormat)  	// See documentation : http://msdn.microsoft.com/en-us/library/ms678737(VS.85).aspx   	// They say : "In shared mode' the audio engine always supports the mix format"  	// The MixFormat is more likely to be a WaveFormatExtensible.  	if (closestSampleRateFormat == null) {  		WaveFormat correctSampleRateFormat = audioClient.MixFormat;  		/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			// Iterate from Worst to Best Format  			WaveFormatExtensible[] bestToWorstFormats =  {  				new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  			};  			// Check from best Format to worst format ( Float32' Int24' Int16 )  			for (int i = 0; i < bestToWorstFormats.Length; i++) {  				correctSampleRateFormat = bestToWorstFormats [i];  				if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					break;  				}  				correctSampleRateFormat = null;  			}  			// If still null' then test on the PCM16' 2 channels  			if (correctSampleRateFormat == null) {  				// Last Last Last Chance (Thanks WASAPI)  				correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  				if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					throw new NotSupportedException ("Can't find a supported format to use");  				}  			}  		}  		outputFormat = correctSampleRateFormat;  	}  	else {  		outputFormat = closestSampleRateFormat;  	}  	// just check that we can make it.  	using (new ResamplerDmoStream (waveProvider' outputFormat)) {  	}  	this.dmoResamplerNeeded = true;  }  else {  	dmoResamplerNeeded = false;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' outputFormat' out closestSampleRateFormat)) {  	// Use closesSampleRateFormat (in sharedMode' it equals usualy to the audioClient.MixFormat)  	// See documentation : http://msdn.microsoft.com/en-us/library/ms678737(VS.85).aspx   	// They say : "In shared mode' the audio engine always supports the mix format"  	// The MixFormat is more likely to be a WaveFormatExtensible.  	if (closestSampleRateFormat == null) {  		WaveFormat correctSampleRateFormat = audioClient.MixFormat;  		/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			// Iterate from Worst to Best Format  			WaveFormatExtensible[] bestToWorstFormats =  {  				new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  			};  			// Check from best Format to worst format ( Float32' Int24' Int16 )  			for (int i = 0; i < bestToWorstFormats.Length; i++) {  				correctSampleRateFormat = bestToWorstFormats [i];  				if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					break;  				}  				correctSampleRateFormat = null;  			}  			// If still null' then test on the PCM16' 2 channels  			if (correctSampleRateFormat == null) {  				// Last Last Last Chance (Thanks WASAPI)  				correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  				if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					throw new NotSupportedException ("Can't find a supported format to use");  				}  			}  		}  		outputFormat = correctSampleRateFormat;  	}  	else {  		outputFormat = closestSampleRateFormat;  	}  	// just check that we can make it.  	using (new ResamplerDmoStream (waveProvider' outputFormat)) {  	}  	this.dmoResamplerNeeded = true;  }  else {  	dmoResamplerNeeded = false;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' outputFormat' out closestSampleRateFormat)) {  	// Use closesSampleRateFormat (in sharedMode' it equals usualy to the audioClient.MixFormat)  	// See documentation : http://msdn.microsoft.com/en-us/library/ms678737(VS.85).aspx   	// They say : "In shared mode' the audio engine always supports the mix format"  	// The MixFormat is more likely to be a WaveFormatExtensible.  	if (closestSampleRateFormat == null) {  		WaveFormat correctSampleRateFormat = audioClient.MixFormat;  		/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			// Iterate from Worst to Best Format  			WaveFormatExtensible[] bestToWorstFormats =  {  				new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  			};  			// Check from best Format to worst format ( Float32' Int24' Int16 )  			for (int i = 0; i < bestToWorstFormats.Length; i++) {  				correctSampleRateFormat = bestToWorstFormats [i];  				if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					break;  				}  				correctSampleRateFormat = null;  			}  			// If still null' then test on the PCM16' 2 channels  			if (correctSampleRateFormat == null) {  				// Last Last Last Chance (Thanks WASAPI)  				correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  				if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					throw new NotSupportedException ("Can't find a supported format to use");  				}  			}  		}  		outputFormat = correctSampleRateFormat;  	}  	else {  		outputFormat = closestSampleRateFormat;  	}  	// just check that we can make it.  	using (new ResamplerDmoStream (waveProvider' outputFormat)) {  	}  	this.dmoResamplerNeeded = true;  }  else {  	dmoResamplerNeeded = false;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' outputFormat' out closestSampleRateFormat)) {  	// Use closesSampleRateFormat (in sharedMode' it equals usualy to the audioClient.MixFormat)  	// See documentation : http://msdn.microsoft.com/en-us/library/ms678737(VS.85).aspx   	// They say : "In shared mode' the audio engine always supports the mix format"  	// The MixFormat is more likely to be a WaveFormatExtensible.  	if (closestSampleRateFormat == null) {  		WaveFormat correctSampleRateFormat = audioClient.MixFormat;  		/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			// Iterate from Worst to Best Format  			WaveFormatExtensible[] bestToWorstFormats =  {  				new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  				new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  			};  			// Check from best Format to worst format ( Float32' Int24' Int16 )  			for (int i = 0; i < bestToWorstFormats.Length; i++) {  				correctSampleRateFormat = bestToWorstFormats [i];  				if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					break;  				}  				correctSampleRateFormat = null;  			}  			// If still null' then test on the PCM16' 2 channels  			if (correctSampleRateFormat == null) {  				// Last Last Last Chance (Thanks WASAPI)  				correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  				if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  					throw new NotSupportedException ("Can't find a supported format to use");  				}  			}  		}  		outputFormat = correctSampleRateFormat;  	}  	else {  		outputFormat = closestSampleRateFormat;  	}  	// just check that we can make it.  	using (new ResamplerDmoStream (waveProvider' outputFormat)) {  	}  	this.dmoResamplerNeeded = true;  }  else {  	dmoResamplerNeeded = false;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (closestSampleRateFormat == null) {  	WaveFormat correctSampleRateFormat = audioClient.MixFormat;  	/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  		// Iterate from Worst to Best Format  		WaveFormatExtensible[] bestToWorstFormats =  {  			new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  		};  		// Check from best Format to worst format ( Float32' Int24' Int16 )  		for (int i = 0; i < bestToWorstFormats.Length; i++) {  			correctSampleRateFormat = bestToWorstFormats [i];  			if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				break;  			}  			correctSampleRateFormat = null;  		}  		// If still null' then test on the PCM16' 2 channels  		if (correctSampleRateFormat == null) {  			// Last Last Last Chance (Thanks WASAPI)  			correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  			if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				throw new NotSupportedException ("Can't find a supported format to use");  			}  		}  	}  	outputFormat = correctSampleRateFormat;  }  else {  	outputFormat = closestSampleRateFormat;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (closestSampleRateFormat == null) {  	WaveFormat correctSampleRateFormat = audioClient.MixFormat;  	/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  		// Iterate from Worst to Best Format  		WaveFormatExtensible[] bestToWorstFormats =  {  			new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  		};  		// Check from best Format to worst format ( Float32' Int24' Int16 )  		for (int i = 0; i < bestToWorstFormats.Length; i++) {  			correctSampleRateFormat = bestToWorstFormats [i];  			if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				break;  			}  			correctSampleRateFormat = null;  		}  		// If still null' then test on the PCM16' 2 channels  		if (correctSampleRateFormat == null) {  			// Last Last Last Chance (Thanks WASAPI)  			correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  			if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				throw new NotSupportedException ("Can't find a supported format to use");  			}  		}  	}  	outputFormat = correctSampleRateFormat;  }  else {  	outputFormat = closestSampleRateFormat;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (closestSampleRateFormat == null) {  	WaveFormat correctSampleRateFormat = audioClient.MixFormat;  	/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  		// Iterate from Worst to Best Format  		WaveFormatExtensible[] bestToWorstFormats =  {  			new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  		};  		// Check from best Format to worst format ( Float32' Int24' Int16 )  		for (int i = 0; i < bestToWorstFormats.Length; i++) {  			correctSampleRateFormat = bestToWorstFormats [i];  			if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				break;  			}  			correctSampleRateFormat = null;  		}  		// If still null' then test on the PCM16' 2 channels  		if (correctSampleRateFormat == null) {  			// Last Last Last Chance (Thanks WASAPI)  			correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  			if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				throw new NotSupportedException ("Can't find a supported format to use");  			}  		}  	}  	outputFormat = correctSampleRateFormat;  }  else {  	outputFormat = closestSampleRateFormat;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (closestSampleRateFormat == null) {  	WaveFormat correctSampleRateFormat = audioClient.MixFormat;  	/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  		// Iterate from Worst to Best Format  		WaveFormatExtensible[] bestToWorstFormats =  {  			new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  		};  		// Check from best Format to worst format ( Float32' Int24' Int16 )  		for (int i = 0; i < bestToWorstFormats.Length; i++) {  			correctSampleRateFormat = bestToWorstFormats [i];  			if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				break;  			}  			correctSampleRateFormat = null;  		}  		// If still null' then test on the PCM16' 2 channels  		if (correctSampleRateFormat == null) {  			// Last Last Last Chance (Thanks WASAPI)  			correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  			if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				throw new NotSupportedException ("Can't find a supported format to use");  			}  		}  	}  	outputFormat = correctSampleRateFormat;  }  else {  	outputFormat = closestSampleRateFormat;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (closestSampleRateFormat == null) {  	WaveFormat correctSampleRateFormat = audioClient.MixFormat;  	/*WaveFormat.CreateIeeeFloatWaveFormat(                         audioClient.MixFormat.SampleRate'                         audioClient.MixFormat.Channels);*/if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  		// Iterate from Worst to Best Format  		WaveFormatExtensible[] bestToWorstFormats =  {  			new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  			new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  		};  		// Check from best Format to worst format ( Float32' Int24' Int16 )  		for (int i = 0; i < bestToWorstFormats.Length; i++) {  			correctSampleRateFormat = bestToWorstFormats [i];  			if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				break;  			}  			correctSampleRateFormat = null;  		}  		// If still null' then test on the PCM16' 2 channels  		if (correctSampleRateFormat == null) {  			// Last Last Last Chance (Thanks WASAPI)  			correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  			if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  				throw new NotSupportedException ("Can't find a supported format to use");  			}  		}  	}  	outputFormat = correctSampleRateFormat;  }  else {  	outputFormat = closestSampleRateFormat;  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  	// Iterate from Worst to Best Format  	WaveFormatExtensible[] bestToWorstFormats =  {  		new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  	};  	// Check from best Format to worst format ( Float32' Int24' Int16 )  	for (int i = 0; i < bestToWorstFormats.Length; i++) {  		correctSampleRateFormat = bestToWorstFormats [i];  		if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			break;  		}  		correctSampleRateFormat = null;  	}  	// If still null' then test on the PCM16' 2 channels  	if (correctSampleRateFormat == null) {  		// Last Last Last Chance (Thanks WASAPI)  		correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  		if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			throw new NotSupportedException ("Can't find a supported format to use");  		}  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  	// Iterate from Worst to Best Format  	WaveFormatExtensible[] bestToWorstFormats =  {  		new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  	};  	// Check from best Format to worst format ( Float32' Int24' Int16 )  	for (int i = 0; i < bestToWorstFormats.Length; i++) {  		correctSampleRateFormat = bestToWorstFormats [i];  		if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			break;  		}  		correctSampleRateFormat = null;  	}  	// If still null' then test on the PCM16' 2 channels  	if (correctSampleRateFormat == null) {  		// Last Last Last Chance (Thanks WASAPI)  		correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  		if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			throw new NotSupportedException ("Can't find a supported format to use");  		}  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  	// Iterate from Worst to Best Format  	WaveFormatExtensible[] bestToWorstFormats =  {  		new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  	};  	// Check from best Format to worst format ( Float32' Int24' Int16 )  	for (int i = 0; i < bestToWorstFormats.Length; i++) {  		correctSampleRateFormat = bestToWorstFormats [i];  		if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			break;  		}  		correctSampleRateFormat = null;  	}  	// If still null' then test on the PCM16' 2 channels  	if (correctSampleRateFormat == null) {  		// Last Last Last Chance (Thanks WASAPI)  		correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  		if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			throw new NotSupportedException ("Can't find a supported format to use");  		}  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  	// Iterate from Worst to Best Format  	WaveFormatExtensible[] bestToWorstFormats =  {  		new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  	};  	// Check from best Format to worst format ( Float32' Int24' Int16 )  	for (int i = 0; i < bestToWorstFormats.Length; i++) {  		correctSampleRateFormat = bestToWorstFormats [i];  		if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			break;  		}  		correctSampleRateFormat = null;  	}  	// If still null' then test on the PCM16' 2 channels  	if (correctSampleRateFormat == null) {  		// Last Last Last Chance (Thanks WASAPI)  		correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  		if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			throw new NotSupportedException ("Can't find a supported format to use");  		}  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  	// Iterate from Worst to Best Format  	WaveFormatExtensible[] bestToWorstFormats =  {  		new WaveFormatExtensible (outputFormat.SampleRate' 32' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 24' outputFormat.Channels)'  		new WaveFormatExtensible (outputFormat.SampleRate' 16' outputFormat.Channels)'  	};  	// Check from best Format to worst format ( Float32' Int24' Int16 )  	for (int i = 0; i < bestToWorstFormats.Length; i++) {  		correctSampleRateFormat = bestToWorstFormats [i];  		if (audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			break;  		}  		correctSampleRateFormat = null;  	}  	// If still null' then test on the PCM16' 2 channels  	if (correctSampleRateFormat == null) {  		// Last Last Last Chance (Thanks WASAPI)  		correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  		if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  			throw new NotSupportedException ("Can't find a supported format to use");  		}  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (correctSampleRateFormat == null) {  	// Last Last Last Chance (Thanks WASAPI)  	correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  	if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  		throw new NotSupportedException ("Can't find a supported format to use");  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (correctSampleRateFormat == null) {  	// Last Last Last Chance (Thanks WASAPI)  	correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  	if (!audioClient.IsFormatSupported (shareMode' correctSampleRateFormat)) {  		throw new NotSupportedException ("Can't find a supported format to use");  	}  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: correctSampleRateFormat = new WaveFormatExtensible (outputFormat.SampleRate' 16' 2);  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (isUsingEventSync) {  	// Init Shared or Exclusive  	if (shareMode == AudioClientShareMode.Shared) {  		// With EventCallBack and Shared' both latencies must be set to 0  		audioClient.Initialize (shareMode' AudioClientStreamFlags.EventCallback' 0' 0' outputFormat' Guid.Empty);  		// Get back the effective latency from AudioClient  		latencyMilliseconds = (int)(audioClient.StreamLatency / 10000);  	}  	else {  		// With EventCallBack and Exclusive' both latencies must equals  		audioClient.Initialize (shareMode' AudioClientStreamFlags.EventCallback' latencyRefTimes' latencyRefTimes' outputFormat' Guid.Empty);  	}  	// Create the Wait Event Handle  	frameEventWaitHandle = new EventWaitHandle (false' EventResetMode.AutoReset);  	audioClient.SetEventHandle (frameEventWaitHandle);  }  else {  	// Normal setup for both sharedMode  	audioClient.Initialize (shareMode' AudioClientStreamFlags.None' latencyRefTimes' 0' outputFormat' Guid.Empty);  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: if (shareMode == AudioClientShareMode.Shared) {  	// With EventCallBack and Shared' both latencies must be set to 0  	audioClient.Initialize (shareMode' AudioClientStreamFlags.EventCallback' 0' 0' outputFormat' Guid.Empty);  	// Get back the effective latency from AudioClient  	latencyMilliseconds = (int)(audioClient.StreamLatency / 10000);  }  else {  	// With EventCallBack and Exclusive' both latencies must equals  	audioClient.Initialize (shareMode' AudioClientStreamFlags.EventCallback' latencyRefTimes' latencyRefTimes' outputFormat' Guid.Empty);  }  
Magic Number,NAudio.Wave,WasapiOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WasapiOut.cs,Init,The following statement contains a magic number: latencyMilliseconds = (int)(audioClient.StreamLatency / 10000);  
Magic Number,NAudio.Wave,WaveBuffer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveBuffer.cs,WaveBuffer,The following statement contains a magic number: sizeToAllocateInBytes = (aligned4Bytes == 0) ? sizeToAllocateInBytes : sizeToAllocateInBytes + 4 - aligned4Bytes;  
Magic Number,NAudio.Wave,WaveBuffer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveBuffer.cs,CheckValidityCount,The following statement contains a magic number: if ((newNumberOfBytes % 4) != 0) {  	throw new ArgumentOutOfRangeException (argName' String.Format ("{0} cannot set a count ({1}) that is not 4 bytes aligned "' argName' newNumberOfBytes));  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,CreateWaveFile,The following statement contains a magic number: using (WaveFileWriter writer = new WaveFileWriter (filename' sourceProvider.WaveFormat)) {  	byte[] buffer = new byte[sourceProvider.WaveFormat.AverageBytesPerSecond * 4];  	while (true) {  		int bytesRead = sourceProvider.Read (buffer' 0' buffer.Length);  		if (bytesRead == 0)  			break;  		writer.Write (buffer' 0' bytesRead);  	}  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,CreateFactChunk,The following statement contains a magic number: if (HasFactChunk ()) {  	this.writer.Write (System.Text.Encoding.ASCII.GetBytes ("fact"));  	this.writer.Write ((int)4);  	factSampleCountPos = this.outStream.Position;  	this.writer.Write ((int)0);  	// number of samples  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,CreateFactChunk,The following statement contains a magic number: this.writer.Write ((int)4);  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	writer.Write ((Int16)(Int16.MaxValue * sample));  	dataChunkSize += 2;  }  else if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: dataChunkSize += 2;  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	var value = BitConverter.GetBytes ((Int32)(Int32.MaxValue * sample));  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  	dataChunkSize += 3;  }  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: value24 [1] = value [2];  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: value24 [2] = value [3];  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: value24 [2] = value [3];  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: dataChunkSize += 3;  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	writer.Write (UInt16.MaxValue * (Int32)sample);  	dataChunkSize += 4;  }  else if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: dataChunkSize += 4;  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: if (WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	writer.Write (sample);  	dataChunkSize += 4;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSample,The following statement contains a magic number: dataChunkSize += 4;  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (samples [sample + offset]);  	}  	dataChunkSize += (count * 2);  }  // 24 bit PCM data  else if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: dataChunkSize += (count * 2);  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	byte[] value;  	for (int sample = 0; sample < count; sample++) {  		value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  		value24 [0] = value [1];  		value24 [1] = value [2];  		value24 [2] = value [3];  		writer.Write (value24);  	}  	dataChunkSize += (count * 3);  }  // 32 bit PCM data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: for (int sample = 0; sample < count; sample++) {  	value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: for (int sample = 0; sample < count; sample++) {  	value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: for (int sample = 0; sample < count; sample++) {  	value = BitConverter.GetBytes (UInt16.MaxValue * (Int32)samples [sample + offset]);  	value24 [0] = value [1];  	value24 [1] = value [2];  	value24 [2] = value [3];  	writer.Write (value24);  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: value24 [1] = value [2];  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: value24 [2] = value [3];  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: value24 [2] = value [3];  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: dataChunkSize += (count * 3);  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.Extensible) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write (UInt16.MaxValue * (Int32)samples [sample + offset]);  	}  	dataChunkSize += (count * 4);  }  // IEEE float data  else if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: dataChunkSize += (count * 4);  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32 && WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	for (int sample = 0; sample < count; sample++) {  		writer.Write ((float)samples [sample + offset] / (float)(Int16.MaxValue + 1));  	}  	dataChunkSize += (count * 4);  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,WriteSamples,The following statement contains a magic number: dataChunkSize += (count * 4);  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,UpdateRiffChunk,The following statement contains a magic number: writer.Seek (4' SeekOrigin.Begin);  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,UpdateRiffChunk,The following statement contains a magic number: writer.Write ((int)(outStream.Length - 8));  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,UpdateFactChunk,The following statement contains a magic number: if (HasFactChunk ()) {  	int bitsPerSample = (format.BitsPerSample * format.Channels);  	if (bitsPerSample != 0) {  		writer.Seek ((int)factSampleCountPos' SeekOrigin.Begin);  		writer.Write ((int)((dataChunkSize * 8) / bitsPerSample));  	}  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,UpdateFactChunk,The following statement contains a magic number: if (bitsPerSample != 0) {  	writer.Seek ((int)factSampleCountPos' SeekOrigin.Begin);  	writer.Write ((int)((dataChunkSize * 8) / bitsPerSample));  }  
Magic Number,NAudio.Wave,WaveFileWriter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveFileWriter.cs,UpdateFactChunk,The following statement contains a magic number: writer.Write ((int)((dataChunkSize * 8) / bitsPerSample));  
Magic Number,NAudio.Wave,WaveOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOut.cs,WaveOut,The following statement contains a magic number: this.DesiredLatency = 300;  
Magic Number,NAudio.Wave,WaveOut,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOut.cs,WaveOut,The following statement contains a magic number: this.NumberOfBuffers = 2;  
Magic Number,NAudio.Wave,WaveOutEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutEvent.cs,WaveOutEvent,The following statement contains a magic number: this.DesiredLatency = 300;  
Magic Number,NAudio.Wave,WaveOutEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutEvent.cs,WaveOutEvent,The following statement contains a magic number: this.NumberOfBuffers = 2;  
Magic Number,NAudio.Wave,WaveOutThreadSafe,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutThreadSafe.cs,Init,The following statement contains a magic number: this.numBuffers = 3;  
Magic Number,NAudio.Wave,BufferedWaveProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\BufferedWaveProvider.cs,BufferedWaveProvider,The following statement contains a magic number: this.BufferLength = waveFormat.AverageBytesPerSecond * 5;  
Magic Number,NAudio.Wave,StereoToMonoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\StereoToMonoProvider16.cs,StereoToMonoProvider16,The following statement contains a magic number: if (sourceProvider.WaveFormat.Channels != 2) {  	throw new ArgumentException ("Source must be stereo");  }  
Magic Number,NAudio.Wave,StereoToMonoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\StereoToMonoProvider16.cs,StereoToMonoProvider16,The following statement contains a magic number: if (sourceProvider.WaveFormat.BitsPerSample != 16) {  	throw new ArgumentException ("Source must be 16 bit");  }  
Magic Number,NAudio.Wave,StereoToMonoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\StereoToMonoProvider16.cs,Read,The following statement contains a magic number: for (int sample = 0; sample < samplesRead; sample += 2) {  	short left = sourceWaveBuffer.ShortBuffer [sample];  	short right = sourceWaveBuffer.ShortBuffer [sample + 1];  	float outSample = (left * LeftVolume) + (right * RightVolume);  	// hard limiting  	if (outSample > Int16.MaxValue)  		outSample = Int16.MaxValue;  	if (outSample < Int16.MinValue)  		outSample = Int16.MinValue;  	destWaveBuffer.ShortBuffer [destOffset++] = (short)outSample;  }  
Magic Number,NAudio.Wave,StereoToMonoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\StereoToMonoProvider16.cs,Read,The following statement contains a magic number: sample += 2
Magic Number,NAudio.Wave,StereoToMonoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\StereoToMonoProvider16.cs,Read,The following statement contains a magic number: return sourceBytesRead / 2;  
Magic Number,NAudio.Wave,MonoToStereoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\MonoToStereoProvider16.cs,MonoToStereoProvider16,The following statement contains a magic number: if (sourceProvider.WaveFormat.BitsPerSample != 16) {  	throw new ArgumentException ("Source must be 16 bit");  }  
Magic Number,NAudio.Wave,MonoToStereoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\MonoToStereoProvider16.cs,MonoToStereoProvider16,The following statement contains a magic number: this.outputFormat = new WaveFormat (sourceProvider.WaveFormat.SampleRate' 2);  
Magic Number,NAudio.Wave,MonoToStereoProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\MonoToStereoProvider16.cs,Read,The following statement contains a magic number: return samplesRead * 4;  
Magic Number,NAudio.Wave,WaveFloatTo16Provider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveFloatTo16Provider.cs,WaveFloatTo16Provider,The following statement contains a magic number: if (sourceProvider.WaveFormat.BitsPerSample != 32)  	throw new ApplicationException ("Only 32 bit audio supported");  
Magic Number,NAudio.Wave,WaveFloatTo16Provider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveFloatTo16Provider.cs,WaveFloatTo16Provider,The following statement contains a magic number: waveFormat = new WaveFormat (sourceProvider.WaveFormat.SampleRate' 16' sourceProvider.WaveFormat.Channels);  
Magic Number,NAudio.Wave,WaveFloatTo16Provider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveFloatTo16Provider.cs,Read,The following statement contains a magic number: for (int sample = 0; sample < sourceSamples; sample++) {  	// adjust volume  	float sample32 = sourceWaveBuffer.FloatBuffer [sample] * volume;  	// clip  	if (sample32 > 1.0f)  		sample32 = 1.0f;  	if (sample32 < -1.0f)  		sample32 = -1.0f;  	destWaveBuffer.ShortBuffer [destOffset++] = (short)(sample32 * 32767);  }  
Magic Number,NAudio.Wave,WaveFloatTo16Provider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveFloatTo16Provider.cs,Read,The following statement contains a magic number: destWaveBuffer.ShortBuffer [destOffset++] = (short)(sample32 * 32767);  
Magic Number,NAudio.Wave,WaveFloatTo16Provider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveFloatTo16Provider.cs,Read,The following statement contains a magic number: return sourceSamples * 2;  
Magic Number,NAudio.Wave,Wave16ToFloatProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\Wave16ToFloatProvider.cs,Wave16ToFloatProvider,The following statement contains a magic number: if (sourceProvider.WaveFormat.BitsPerSample != 16)  	throw new ApplicationException ("Only 16 bit audio supported");  
Magic Number,NAudio.Wave,Wave16ToFloatProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\Wave16ToFloatProvider.cs,Read,The following statement contains a magic number: return sourceSamples * 4;  
Magic Number,NAudio.Wave,WaveProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveProvider16.cs,SetWaveFormat,The following statement contains a magic number: this.waveFormat = new WaveFormat (sampleRate' 16' channels);  
Magic Number,NAudio.Wave,WaveProvider16,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveProvider16.cs,Read,The following statement contains a magic number: return samplesRead * 2;  
Magic Number,NAudio.Wave,WaveProvider32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveProviders\WaveProvider32.cs,Read,The following statement contains a magic number: return samplesRead * 4;  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertLong,The following statement contains a magic number: if (buffer.Length != 4)  	throw new ArgumentException ("Incorrect length");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertLong,The following statement contains a magic number: return (uint)((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | buffer [3]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertLong,The following statement contains a magic number: return (uint)((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | buffer [3]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertLong,The following statement contains a magic number: return (uint)((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | buffer [3]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertLong,The following statement contains a magic number: return (uint)((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | buffer [3]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertLong,The following statement contains a magic number: return (uint)((buffer [0] << 24) | (buffer [1] << 16) | (buffer [2] << 8) | buffer [3]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertShort,The following statement contains a magic number: if (buffer.Length != 2)  	throw new ArgumentException ("Incorrect length or short.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertShort,The following statement contains a magic number: return (short)((buffer [0] << 8) | buffer [1]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,UnsignedToFloat,The following statement contains a magic number: return (((double)((long)(u - 2147483647L - 1))) + 2147483648.0);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ldexp,The following statement contains a magic number: return x * Math.Pow (2' exp);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: if (bytes.Length != 10)  	throw new ArgumentException ("Incorrect length or short.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: expon = ((bytes [0] & 0x7F) << 8) | bytes [1];  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: hiMant = (uint)((bytes [2] << 24) | (bytes [3] << 16) | (bytes [4] << 8) | bytes [5]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: hiMant = (uint)((bytes [2] << 24) | (bytes [3] << 16) | (bytes [4] << 8) | bytes [5]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: hiMant = (uint)((bytes [2] << 24) | (bytes [3] << 16) | (bytes [4] << 8) | bytes [5]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: hiMant = (uint)((bytes [2] << 24) | (bytes [3] << 16) | (bytes [4] << 8) | bytes [5]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: hiMant = (uint)((bytes [2] << 24) | (bytes [3] << 16) | (bytes [4] << 8) | bytes [5]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: hiMant = (uint)((bytes [2] << 24) | (bytes [3] << 16) | (bytes [4] << 8) | bytes [5]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: hiMant = (uint)((bytes [2] << 24) | (bytes [3] << 16) | (bytes [4] << 8) | bytes [5]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: loMant = (uint)((bytes [6] << 24) | (bytes [7] << 16) | (bytes [8] << 8) | bytes [9]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: loMant = (uint)((bytes [6] << 24) | (bytes [7] << 16) | (bytes [8] << 8) | bytes [9]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: loMant = (uint)((bytes [6] << 24) | (bytes [7] << 16) | (bytes [8] << 8) | bytes [9]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: loMant = (uint)((bytes [6] << 24) | (bytes [7] << 16) | (bytes [8] << 8) | bytes [9]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: loMant = (uint)((bytes [6] << 24) | (bytes [7] << 16) | (bytes [8] << 8) | bytes [9]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: loMant = (uint)((bytes [6] << 24) | (bytes [7] << 16) | (bytes [8] << 8) | bytes [9]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: loMant = (uint)((bytes [6] << 24) | (bytes [7] << 16) | (bytes [8] << 8) | bytes [9]);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: if (expon == 0 && hiMant == 0 && loMant == 0) {  	f = 0;  }  else {  	if (expon == 0x7FFF)/* Infinity or NaN */ {  		f = double.NaN;  	}  	else {  		expon -= 16383;  		f = ldexp (UnsignedToFloat (hiMant)' expon -= 31);  		f += ldexp (UnsignedToFloat (loMant)' expon -= 32);  	}  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: if (expon == 0 && hiMant == 0 && loMant == 0) {  	f = 0;  }  else {  	if (expon == 0x7FFF)/* Infinity or NaN */ {  		f = double.NaN;  	}  	else {  		expon -= 16383;  		f = ldexp (UnsignedToFloat (hiMant)' expon -= 31);  		f += ldexp (UnsignedToFloat (loMant)' expon -= 32);  	}  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: if (expon == 0 && hiMant == 0 && loMant == 0) {  	f = 0;  }  else {  	if (expon == 0x7FFF)/* Infinity or NaN */ {  		f = double.NaN;  	}  	else {  		expon -= 16383;  		f = ldexp (UnsignedToFloat (hiMant)' expon -= 31);  		f += ldexp (UnsignedToFloat (loMant)' expon -= 32);  	}  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: if (expon == 0x7FFF)/* Infinity or NaN */ {  	f = double.NaN;  }  else {  	expon -= 16383;  	f = ldexp (UnsignedToFloat (hiMant)' expon -= 31);  	f += ldexp (UnsignedToFloat (loMant)' expon -= 32);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: if (expon == 0x7FFF)/* Infinity or NaN */ {  	f = double.NaN;  }  else {  	expon -= 16383;  	f = ldexp (UnsignedToFloat (hiMant)' expon -= 31);  	f += ldexp (UnsignedToFloat (loMant)' expon -= 32);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: if (expon == 0x7FFF)/* Infinity or NaN */ {  	f = double.NaN;  }  else {  	expon -= 16383;  	f = ldexp (UnsignedToFloat (hiMant)' expon -= 31);  	f += ldexp (UnsignedToFloat (loMant)' expon -= 32);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: expon -= 16383;  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: f = ldexp (UnsignedToFloat (hiMant)' expon -= 31);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ConvertExtended,The following statement contains a magic number: f += ldexp (UnsignedToFloat (loMant)' expon -= 32);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadChunkName,The following statement contains a magic number: return new string (br.ReadChars (4));  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length) {  	AiffChunk nextChunk = ReadChunkHeader (br);  	if (nextChunk.chunkName == "COMM") {  		short numChannels = ConvertShort (br.ReadBytes (2));  		uint numSampleFrames = ConvertLong (br.ReadBytes (4));  		short sampleSize = ConvertShort (br.ReadBytes (2));  		double sampleRate = ConvertExtended (br.ReadBytes (10));  		format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  		br.ReadBytes ((int)nextChunk.chunkLength - 18);  	}  	else if (nextChunk.chunkName == "SSND") {  		uint offset = ConvertLong (br.ReadBytes (4));  		uint blockSize = ConvertLong (br.ReadBytes (4));  		dataChunkPosition = nextChunk.chunkStart + 16 + offset;  		dataChunkLength = (int)nextChunk.chunkLength - 8;  		br.ReadBytes ((int)nextChunk.chunkLength - 8);  	}  	else {  		if (chunks != null) {  			chunks.Add (nextChunk);  		}  		br.ReadBytes ((int)nextChunk.chunkLength);  	}  	if (nextChunk.chunkName == "\0\0\0\0")  		break;  	//Console.WriteLine("Read chunk {0} with length {1}"' nextChunk.chunkName' nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "COMM") {  	short numChannels = ConvertShort (br.ReadBytes (2));  	uint numSampleFrames = ConvertLong (br.ReadBytes (4));  	short sampleSize = ConvertShort (br.ReadBytes (2));  	double sampleRate = ConvertExtended (br.ReadBytes (10));  	format = new NAudio.Wave.WaveFormat ((int)sampleRate' (int)sampleSize' (int)numChannels);  	br.ReadBytes ((int)nextChunk.chunkLength - 18);  }  else if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: br.ReadBytes ((int)nextChunk.chunkLength - 18);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: if (nextChunk.chunkName == "SSND") {  	uint offset = ConvertLong (br.ReadBytes (4));  	uint blockSize = ConvertLong (br.ReadBytes (4));  	dataChunkPosition = nextChunk.chunkStart + 16 + offset;  	dataChunkLength = (int)nextChunk.chunkLength - 8;  	br.ReadBytes ((int)nextChunk.chunkLength - 8);  }  else {  	if (chunks != null) {  		chunks.Add (nextChunk);  	}  	br.ReadBytes ((int)nextChunk.chunkLength);  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: dataChunkPosition = nextChunk.chunkStart + 16 + offset;  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: dataChunkLength = (int)nextChunk.chunkLength - 8;  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,ReadAiffHeader,The following statement contains a magic number: br.ReadBytes ((int)nextChunk.chunkLength - 8);  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < length; i += bytesPerSample) {  	if (WaveFormat.BitsPerSample == 16) {  		array [i + 0] = buffer [i + 1];  		array [i + 1] = buffer [i];  	}  	else if (WaveFormat.BitsPerSample == 24) {  		array [i + 0] = buffer [i + 2];  		array [i + 1] = buffer [i + 1];  		array [i + 2] = buffer [i + 0];  	}  	else if (WaveFormat.BitsPerSample == 32) {  		array [i + 0] = buffer [i + 3];  		array [i + 1] = buffer [i + 2];  		array [i + 2] = buffer [i + 1];  		array [i + 3] = buffer [i + 0];  	}  	else  		throw new Exception ("Unsupported PCM format.");  }  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 16) {  	array [i + 0] = buffer [i + 1];  	array [i + 1] = buffer [i];  }  else if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 24) {  	array [i + 0] = buffer [i + 2];  	array [i + 1] = buffer [i + 1];  	array [i + 2] = buffer [i + 0];  }  else if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: array [i + 0] = buffer [i + 2];  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: array [i + 2] = buffer [i + 0];  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: if (WaveFormat.BitsPerSample == 32) {  	array [i + 0] = buffer [i + 3];  	array [i + 1] = buffer [i + 2];  	array [i + 2] = buffer [i + 1];  	array [i + 3] = buffer [i + 0];  }  else  	throw new Exception ("Unsupported PCM format.");  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: array [i + 0] = buffer [i + 3];  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: array [i + 1] = buffer [i + 2];  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: array [i + 2] = buffer [i + 1];  
Magic Number,NAudio.Wave,AiffFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AiffFileReader.cs,Read,The following statement contains a magic number: array [i + 3] = buffer [i + 0];  
Magic Number,NAudio.Wave,AudioFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AudioFileReader.cs,AudioFileReader,The following statement contains a magic number: this.sourceBytesPerSample = (readerStream.WaveFormat.BitsPerSample / 8) * readerStream.WaveFormat.Channels;  
Magic Number,NAudio.Wave,AudioFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AudioFileReader.cs,AudioFileReader,The following statement contains a magic number: this.destBytesPerSample = 8;  
Magic Number,NAudio.Wave,AudioFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\AudioFileReader.cs,Read,The following statement contains a magic number: return samplesRead * 4;  
Magic Number,NAudio.Wave,BlockAlignReductionStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\BlockAlignReductionStream.cs,BlockAlignReductionStream,The following statement contains a magic number: circularBuffer = new CircularBuffer (sourceStream.WaveFormat.AverageBytesPerSecond * 4);  
Magic Number,NAudio.Wave,BlockAlignReductionStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\BlockAlignReductionStream.cs,GetSourceBuffer,The following statement contains a magic number: if (sourceBuffer == null || sourceBuffer.Length < size) {  	// let's give ourselves some leeway  	sourceBuffer = new byte[size * 2];  }  
Magic Number,NAudio.Wave,BlockAlignReductionStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\BlockAlignReductionStream.cs,GetSourceBuffer,The following statement contains a magic number: sourceBuffer = new byte[size * 2];  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; cueChunkData.Length - p >= 24; p += 24' cue++) {  	cueIndex [BitConverter.ToInt32 (cueChunkData' p)] = cue;  	positions [cue] = BitConverter.ToInt32 (cueChunkData' p + 20);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; cueChunkData.Length - p >= 24; p += 24' cue++) {  	cueIndex [BitConverter.ToInt32 (cueChunkData' p)] = cue;  	positions [cue] = BitConverter.ToInt32 (cueChunkData' p + 20);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; cueChunkData.Length - p >= 24; p += 24' cue++) {  	cueIndex [BitConverter.ToInt32 (cueChunkData' p)] = cue;  	positions [cue] = BitConverter.ToInt32 (cueChunkData' p + 20);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; cueChunkData.Length - p >= 24; p += 24' cue++) {  	cueIndex [BitConverter.ToInt32 (cueChunkData' p)] = cue;  	positions [cue] = BitConverter.ToInt32 (cueChunkData' p + 20);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: p += 24
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: positions [cue] = BitConverter.ToInt32 (cueChunkData' p + 20);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: for (int p = 4; listChunkData.Length - p >= 16; p += labelLength + labelLength % 2 + 12) {  	if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  		labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  		cueID = BitConverter.ToInt32 (listChunkData' p + 8);  		cue = cueIndex [cueID];  		labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: p += labelLength + labelLength % 2 + 12
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: p += labelLength + labelLength % 2 + 12
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  	labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  	cueID = BitConverter.ToInt32 (listChunkData' p + 8);  	cue = cueIndex [cueID];  	labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  	labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  	cueID = BitConverter.ToInt32 (listChunkData' p + 8);  	cue = cueIndex [cueID];  	labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  	labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  	cueID = BitConverter.ToInt32 (listChunkData' p + 8);  	cue = cueIndex [cueID];  	labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: if (BitConverter.ToInt32 (listChunkData' p) == labelChunkID) {  	labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  	cueID = BitConverter.ToInt32 (listChunkData' p + 8);  	cue = cueIndex [cueID];  	labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: labelLength = BitConverter.ToInt32 (listChunkData' p + 4) - 4;  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: cueID = BitConverter.ToInt32 (listChunkData' p + 8);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,CueList,The following statement contains a magic number: labels [cue] = Encoding.Default.GetString (listChunkData' p + 12' labelLength - 1);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this.Count == 0) {  	return null;  }  else {  	int cueChunkLength = 12 + 24 * this.Count;  	int listChunkLength = 12;  	int labelChunkLength = 0;  	for (int i = 0; i < this.Count; i++) {  		labelChunkLength = this [i].Label.Length + 1;  		listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  	}  	byte[] chunks = new byte[cueChunkLength + listChunkLength];  	Int32 cueChunkID = WaveInterop.mmioStringToFOURCC ("cue "' 0);  	Int32 dataChunkID = WaveInterop.mmioStringToFOURCC ("data"' 0);  	Int32 listChunkID = WaveInterop.mmioStringToFOURCC ("LIST"' 0);  	Int32 adtlTypeID = WaveInterop.mmioStringToFOURCC ("adtl"' 0);  	Int32 labelChunkID = WaveInterop.mmioStringToFOURCC ("labl"' 0);  	using (MemoryStream stream = new MemoryStream (chunks)) {  		using (BinaryWriter writer = new BinaryWriter (stream)) {  			writer.Write (cueChunkID);  			writer.Write (cueChunkLength - 8);  			writer.Write (this.Count);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (cue);  				writer.Seek (4' SeekOrigin.Current);  				writer.Write (dataChunkID);  				writer.Seek (8' SeekOrigin.Current);  				writer.Write (this [cue].Position);  			}  			writer.Write (listChunkID);  			writer.Write (listChunkLength - 8);  			writer.Write (adtlTypeID);  			for (int cue = 0; cue < this.Count; cue++) {  				writer.Write (labelChunkID);  				writer.Write (this [cue].Label.Length + 1 + 4);  				writer.Write (cue);  				writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  				if (this [cue].Label.Length % 2 == 0) {  					writer.Seek (2' SeekOrigin.Current);  				}  				else {  					writer.Seek (1' SeekOrigin.Current);  				}  			}  		}  	}  	return chunks;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: for (int i = 0; i < this.Count; i++) {  	labelChunkLength = this [i].Label.Length + 1;  	listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: for (int i = 0; i < this.Count; i++) {  	labelChunkLength = this [i].Label.Length + 1;  	listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: listChunkLength += labelChunkLength + labelChunkLength % 2 + 12;  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream (chunks)) {  	using (BinaryWriter writer = new BinaryWriter (stream)) {  		writer.Write (cueChunkID);  		writer.Write (cueChunkLength - 8);  		writer.Write (this.Count);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (cue);  			writer.Seek (4' SeekOrigin.Current);  			writer.Write (dataChunkID);  			writer.Seek (8' SeekOrigin.Current);  			writer.Write (this [cue].Position);  		}  		writer.Write (listChunkID);  		writer.Write (listChunkLength - 8);  		writer.Write (adtlTypeID);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (labelChunkID);  			writer.Write (this [cue].Label.Length + 1 + 4);  			writer.Write (cue);  			writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  			if (this [cue].Label.Length % 2 == 0) {  				writer.Seek (2' SeekOrigin.Current);  			}  			else {  				writer.Seek (1' SeekOrigin.Current);  			}  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream (chunks)) {  	using (BinaryWriter writer = new BinaryWriter (stream)) {  		writer.Write (cueChunkID);  		writer.Write (cueChunkLength - 8);  		writer.Write (this.Count);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (cue);  			writer.Seek (4' SeekOrigin.Current);  			writer.Write (dataChunkID);  			writer.Seek (8' SeekOrigin.Current);  			writer.Write (this [cue].Position);  		}  		writer.Write (listChunkID);  		writer.Write (listChunkLength - 8);  		writer.Write (adtlTypeID);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (labelChunkID);  			writer.Write (this [cue].Label.Length + 1 + 4);  			writer.Write (cue);  			writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  			if (this [cue].Label.Length % 2 == 0) {  				writer.Seek (2' SeekOrigin.Current);  			}  			else {  				writer.Seek (1' SeekOrigin.Current);  			}  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream (chunks)) {  	using (BinaryWriter writer = new BinaryWriter (stream)) {  		writer.Write (cueChunkID);  		writer.Write (cueChunkLength - 8);  		writer.Write (this.Count);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (cue);  			writer.Seek (4' SeekOrigin.Current);  			writer.Write (dataChunkID);  			writer.Seek (8' SeekOrigin.Current);  			writer.Write (this [cue].Position);  		}  		writer.Write (listChunkID);  		writer.Write (listChunkLength - 8);  		writer.Write (adtlTypeID);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (labelChunkID);  			writer.Write (this [cue].Label.Length + 1 + 4);  			writer.Write (cue);  			writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  			if (this [cue].Label.Length % 2 == 0) {  				writer.Seek (2' SeekOrigin.Current);  			}  			else {  				writer.Seek (1' SeekOrigin.Current);  			}  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream (chunks)) {  	using (BinaryWriter writer = new BinaryWriter (stream)) {  		writer.Write (cueChunkID);  		writer.Write (cueChunkLength - 8);  		writer.Write (this.Count);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (cue);  			writer.Seek (4' SeekOrigin.Current);  			writer.Write (dataChunkID);  			writer.Seek (8' SeekOrigin.Current);  			writer.Write (this [cue].Position);  		}  		writer.Write (listChunkID);  		writer.Write (listChunkLength - 8);  		writer.Write (adtlTypeID);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (labelChunkID);  			writer.Write (this [cue].Label.Length + 1 + 4);  			writer.Write (cue);  			writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  			if (this [cue].Label.Length % 2 == 0) {  				writer.Seek (2' SeekOrigin.Current);  			}  			else {  				writer.Seek (1' SeekOrigin.Current);  			}  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream (chunks)) {  	using (BinaryWriter writer = new BinaryWriter (stream)) {  		writer.Write (cueChunkID);  		writer.Write (cueChunkLength - 8);  		writer.Write (this.Count);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (cue);  			writer.Seek (4' SeekOrigin.Current);  			writer.Write (dataChunkID);  			writer.Seek (8' SeekOrigin.Current);  			writer.Write (this [cue].Position);  		}  		writer.Write (listChunkID);  		writer.Write (listChunkLength - 8);  		writer.Write (adtlTypeID);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (labelChunkID);  			writer.Write (this [cue].Label.Length + 1 + 4);  			writer.Write (cue);  			writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  			if (this [cue].Label.Length % 2 == 0) {  				writer.Seek (2' SeekOrigin.Current);  			}  			else {  				writer.Seek (1' SeekOrigin.Current);  			}  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream (chunks)) {  	using (BinaryWriter writer = new BinaryWriter (stream)) {  		writer.Write (cueChunkID);  		writer.Write (cueChunkLength - 8);  		writer.Write (this.Count);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (cue);  			writer.Seek (4' SeekOrigin.Current);  			writer.Write (dataChunkID);  			writer.Seek (8' SeekOrigin.Current);  			writer.Write (this [cue].Position);  		}  		writer.Write (listChunkID);  		writer.Write (listChunkLength - 8);  		writer.Write (adtlTypeID);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (labelChunkID);  			writer.Write (this [cue].Label.Length + 1 + 4);  			writer.Write (cue);  			writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  			if (this [cue].Label.Length % 2 == 0) {  				writer.Seek (2' SeekOrigin.Current);  			}  			else {  				writer.Seek (1' SeekOrigin.Current);  			}  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream (chunks)) {  	using (BinaryWriter writer = new BinaryWriter (stream)) {  		writer.Write (cueChunkID);  		writer.Write (cueChunkLength - 8);  		writer.Write (this.Count);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (cue);  			writer.Seek (4' SeekOrigin.Current);  			writer.Write (dataChunkID);  			writer.Seek (8' SeekOrigin.Current);  			writer.Write (this [cue].Position);  		}  		writer.Write (listChunkID);  		writer.Write (listChunkLength - 8);  		writer.Write (adtlTypeID);  		for (int cue = 0; cue < this.Count; cue++) {  			writer.Write (labelChunkID);  			writer.Write (this [cue].Label.Length + 1 + 4);  			writer.Write (cue);  			writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  			if (this [cue].Label.Length % 2 == 0) {  				writer.Seek (2' SeekOrigin.Current);  			}  			else {  				writer.Seek (1' SeekOrigin.Current);  			}  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (cueChunkID);  	writer.Write (cueChunkLength - 8);  	writer.Write (this.Count);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (cue);  		writer.Seek (4' SeekOrigin.Current);  		writer.Write (dataChunkID);  		writer.Seek (8' SeekOrigin.Current);  		writer.Write (this [cue].Position);  	}  	writer.Write (listChunkID);  	writer.Write (listChunkLength - 8);  	writer.Write (adtlTypeID);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (labelChunkID);  		writer.Write (this [cue].Label.Length + 1 + 4);  		writer.Write (cue);  		writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  		if (this [cue].Label.Length % 2 == 0) {  			writer.Seek (2' SeekOrigin.Current);  		}  		else {  			writer.Seek (1' SeekOrigin.Current);  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (cueChunkID);  	writer.Write (cueChunkLength - 8);  	writer.Write (this.Count);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (cue);  		writer.Seek (4' SeekOrigin.Current);  		writer.Write (dataChunkID);  		writer.Seek (8' SeekOrigin.Current);  		writer.Write (this [cue].Position);  	}  	writer.Write (listChunkID);  	writer.Write (listChunkLength - 8);  	writer.Write (adtlTypeID);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (labelChunkID);  		writer.Write (this [cue].Label.Length + 1 + 4);  		writer.Write (cue);  		writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  		if (this [cue].Label.Length % 2 == 0) {  			writer.Seek (2' SeekOrigin.Current);  		}  		else {  			writer.Seek (1' SeekOrigin.Current);  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (cueChunkID);  	writer.Write (cueChunkLength - 8);  	writer.Write (this.Count);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (cue);  		writer.Seek (4' SeekOrigin.Current);  		writer.Write (dataChunkID);  		writer.Seek (8' SeekOrigin.Current);  		writer.Write (this [cue].Position);  	}  	writer.Write (listChunkID);  	writer.Write (listChunkLength - 8);  	writer.Write (adtlTypeID);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (labelChunkID);  		writer.Write (this [cue].Label.Length + 1 + 4);  		writer.Write (cue);  		writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  		if (this [cue].Label.Length % 2 == 0) {  			writer.Seek (2' SeekOrigin.Current);  		}  		else {  			writer.Seek (1' SeekOrigin.Current);  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (cueChunkID);  	writer.Write (cueChunkLength - 8);  	writer.Write (this.Count);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (cue);  		writer.Seek (4' SeekOrigin.Current);  		writer.Write (dataChunkID);  		writer.Seek (8' SeekOrigin.Current);  		writer.Write (this [cue].Position);  	}  	writer.Write (listChunkID);  	writer.Write (listChunkLength - 8);  	writer.Write (adtlTypeID);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (labelChunkID);  		writer.Write (this [cue].Label.Length + 1 + 4);  		writer.Write (cue);  		writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  		if (this [cue].Label.Length % 2 == 0) {  			writer.Seek (2' SeekOrigin.Current);  		}  		else {  			writer.Seek (1' SeekOrigin.Current);  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (cueChunkID);  	writer.Write (cueChunkLength - 8);  	writer.Write (this.Count);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (cue);  		writer.Seek (4' SeekOrigin.Current);  		writer.Write (dataChunkID);  		writer.Seek (8' SeekOrigin.Current);  		writer.Write (this [cue].Position);  	}  	writer.Write (listChunkID);  	writer.Write (listChunkLength - 8);  	writer.Write (adtlTypeID);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (labelChunkID);  		writer.Write (this [cue].Label.Length + 1 + 4);  		writer.Write (cue);  		writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  		if (this [cue].Label.Length % 2 == 0) {  			writer.Seek (2' SeekOrigin.Current);  		}  		else {  			writer.Seek (1' SeekOrigin.Current);  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (cueChunkID);  	writer.Write (cueChunkLength - 8);  	writer.Write (this.Count);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (cue);  		writer.Seek (4' SeekOrigin.Current);  		writer.Write (dataChunkID);  		writer.Seek (8' SeekOrigin.Current);  		writer.Write (this [cue].Position);  	}  	writer.Write (listChunkID);  	writer.Write (listChunkLength - 8);  	writer.Write (adtlTypeID);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (labelChunkID);  		writer.Write (this [cue].Label.Length + 1 + 4);  		writer.Write (cue);  		writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  		if (this [cue].Label.Length % 2 == 0) {  			writer.Seek (2' SeekOrigin.Current);  		}  		else {  			writer.Seek (1' SeekOrigin.Current);  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (cueChunkID);  	writer.Write (cueChunkLength - 8);  	writer.Write (this.Count);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (cue);  		writer.Seek (4' SeekOrigin.Current);  		writer.Write (dataChunkID);  		writer.Seek (8' SeekOrigin.Current);  		writer.Write (this [cue].Position);  	}  	writer.Write (listChunkID);  	writer.Write (listChunkLength - 8);  	writer.Write (adtlTypeID);  	for (int cue = 0; cue < this.Count; cue++) {  		writer.Write (labelChunkID);  		writer.Write (this [cue].Label.Length + 1 + 4);  		writer.Write (cue);  		writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  		if (this [cue].Label.Length % 2 == 0) {  			writer.Seek (2' SeekOrigin.Current);  		}  		else {  			writer.Seek (1' SeekOrigin.Current);  		}  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: writer.Write (cueChunkLength - 8);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: for (int cue = 0; cue < this.Count; cue++) {  	writer.Write (cue);  	writer.Seek (4' SeekOrigin.Current);  	writer.Write (dataChunkID);  	writer.Seek (8' SeekOrigin.Current);  	writer.Write (this [cue].Position);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: for (int cue = 0; cue < this.Count; cue++) {  	writer.Write (cue);  	writer.Seek (4' SeekOrigin.Current);  	writer.Write (dataChunkID);  	writer.Seek (8' SeekOrigin.Current);  	writer.Write (this [cue].Position);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: writer.Seek (4' SeekOrigin.Current);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: writer.Seek (8' SeekOrigin.Current);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: writer.Write (listChunkLength - 8);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: for (int cue = 0; cue < this.Count; cue++) {  	writer.Write (labelChunkID);  	writer.Write (this [cue].Label.Length + 1 + 4);  	writer.Write (cue);  	writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  	if (this [cue].Label.Length % 2 == 0) {  		writer.Seek (2' SeekOrigin.Current);  	}  	else {  		writer.Seek (1' SeekOrigin.Current);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: for (int cue = 0; cue < this.Count; cue++) {  	writer.Write (labelChunkID);  	writer.Write (this [cue].Label.Length + 1 + 4);  	writer.Write (cue);  	writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  	if (this [cue].Label.Length % 2 == 0) {  		writer.Seek (2' SeekOrigin.Current);  	}  	else {  		writer.Seek (1' SeekOrigin.Current);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: for (int cue = 0; cue < this.Count; cue++) {  	writer.Write (labelChunkID);  	writer.Write (this [cue].Label.Length + 1 + 4);  	writer.Write (cue);  	writer.Write (Encoding.Default.GetBytes (this [cue].Label.ToCharArray ()));  	if (this [cue].Label.Length % 2 == 0) {  		writer.Seek (2' SeekOrigin.Current);  	}  	else {  		writer.Seek (1' SeekOrigin.Current);  	}  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: writer.Write (this [cue].Label.Length + 1 + 4);  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this [cue].Label.Length % 2 == 0) {  	writer.Seek (2' SeekOrigin.Current);  }  else {  	writer.Seek (1' SeekOrigin.Current);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: if (this [cue].Label.Length % 2 == 0) {  	writer.Seek (2' SeekOrigin.Current);  }  else {  	writer.Seek (1' SeekOrigin.Current);  }  
Magic Number,NAudio.Wave,CueList,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\CueList.cs,GetRIFFChunks,The following statement contains a magic number: writer.Seek (2' SeekOrigin.Current);  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: mp3Stream.Position = mp3Stream.Length - 128;  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: mp3Stream.Read (tag' 0' 3);  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: if (tag [0] == 'T' && tag [1] == 'A' && tag [2] == 'G') {  	id3v1Tag = tag;  	this.mp3DataLength -= 128;  }  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: if (tag [0] == 'T' && tag [1] == 'A' && tag [2] == 'G') {  	id3v1Tag = tag;  	this.mp3DataLength -= 128;  }  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: this.mp3DataLength -= 128;  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: bitRate = (mp3DataLength * 8.0 / TotalSeconds ());  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: this.Mp3WaveFormat = new Mp3WaveFormat (sampleRate' mp3Frame.ChannelMode == ChannelMode.Mono ? 1 : 2' frameLengthInBytes' (int)bitRate);  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: this.bytesPerSample = (decompressor.OutputFormat.BitsPerSample) / 8 * decompressor.OutputFormat.Channels;  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: this.decompressBuffer = new byte[1152 * bytesPerSample * 2];  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,Mp3FileReader,The following statement contains a magic number: this.decompressBuffer = new byte[1152 * bytesPerSample * 2];  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,CreateTableOfContents,The following statement contains a magic number: try {  	// Just a guess at how many entries we'll need so the internal array need not resize very much  	// 400 bytes per frame is probably a good enough approximation.  	tableOfContents = new List<Mp3Index> ((int)(mp3DataLength / 400));  	Mp3Frame frame = null;  	this.totalSamples = 0;  	do {  		Mp3Index index = new Mp3Index ();  		index.FilePosition = mp3Stream.Position;  		index.SamplePosition = totalSamples;  		frame = ReadNextFrame (false);  		if (frame != null) {  			totalSamples += frame.SampleCount;  			index.SampleCount = frame.SampleCount;  			index.ByteCount = (int)(mp3Stream.Position - index.FilePosition);  			tableOfContents.Add (index);  		}  	}  	while (frame != null);  }  catch (EndOfStreamException) {  	// not necessarily a problem  }  
Magic Number,NAudio.Wave,Mp3FileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Mp3FileReader.cs,CreateTableOfContents,The following statement contains a magic number: tableOfContents = new List<Mp3Index> ((int)(mp3DataLength / 400));  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,SimpleCompressorStream,The following statement contains a magic number: this.bytesPerSample = sourceStream.WaveFormat.BitsPerSample / 8;  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,SimpleCompressorStream,The following statement contains a magic number: simpleCompressor = new SimpleCompressor (5.0' 10.0' sourceStream.WaveFormat.SampleRate);  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,SimpleCompressorStream,The following statement contains a magic number: simpleCompressor = new SimpleCompressor (5.0' 10.0' sourceStream.WaveFormat.SampleRate);  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,SimpleCompressorStream,The following statement contains a magic number: simpleCompressor.Threshold = 16;  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,SimpleCompressorStream,The following statement contains a magic number: simpleCompressor.Ratio = 6;  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,SimpleCompressorStream,The following statement contains a magic number: simpleCompressor.MakeUpGain = 16;  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	left = BitConverter.ToSingle (buffer' start);  	if (channels > 1) {  		right = BitConverter.ToSingle (buffer' start + bytesPerSample);  	}  	else {  		right = left;  	}  }  else if (bytesPerSample == 2) {  	left = BitConverter.ToInt16 (buffer' start) / 32768.0;  	if (channels > 1) {  		right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  	}  	else {  		right = left;  	}  }  else {  	throw new InvalidOperationException (String.Format ("Unsupported bytes per sample: {0}"' bytesPerSample));  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	left = BitConverter.ToSingle (buffer' start);  	if (channels > 1) {  		right = BitConverter.ToSingle (buffer' start + bytesPerSample);  	}  	else {  		right = left;  	}  }  else if (bytesPerSample == 2) {  	left = BitConverter.ToInt16 (buffer' start) / 32768.0;  	if (channels > 1) {  		right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  	}  	else {  		right = left;  	}  }  else {  	throw new InvalidOperationException (String.Format ("Unsupported bytes per sample: {0}"' bytesPerSample));  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	left = BitConverter.ToSingle (buffer' start);  	if (channels > 1) {  		right = BitConverter.ToSingle (buffer' start + bytesPerSample);  	}  	else {  		right = left;  	}  }  else if (bytesPerSample == 2) {  	left = BitConverter.ToInt16 (buffer' start) / 32768.0;  	if (channels > 1) {  		right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  	}  	else {  		right = left;  	}  }  else {  	throw new InvalidOperationException (String.Format ("Unsupported bytes per sample: {0}"' bytesPerSample));  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	left = BitConverter.ToSingle (buffer' start);  	if (channels > 1) {  		right = BitConverter.ToSingle (buffer' start + bytesPerSample);  	}  	else {  		right = left;  	}  }  else if (bytesPerSample == 2) {  	left = BitConverter.ToInt16 (buffer' start) / 32768.0;  	if (channels > 1) {  		right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  	}  	else {  		right = left;  	}  }  else {  	throw new InvalidOperationException (String.Format ("Unsupported bytes per sample: {0}"' bytesPerSample));  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (bytesPerSample == 2) {  	left = BitConverter.ToInt16 (buffer' start) / 32768.0;  	if (channels > 1) {  		right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  	}  	else {  		right = left;  	}  }  else {  	throw new InvalidOperationException (String.Format ("Unsupported bytes per sample: {0}"' bytesPerSample));  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (bytesPerSample == 2) {  	left = BitConverter.ToInt16 (buffer' start) / 32768.0;  	if (channels > 1) {  		right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  	}  	else {  		right = left;  	}  }  else {  	throw new InvalidOperationException (String.Format ("Unsupported bytes per sample: {0}"' bytesPerSample));  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (bytesPerSample == 2) {  	left = BitConverter.ToInt16 (buffer' start) / 32768.0;  	if (channels > 1) {  		right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  	}  	else {  		right = left;  	}  }  else {  	throw new InvalidOperationException (String.Format ("Unsupported bytes per sample: {0}"' bytesPerSample));  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: left = BitConverter.ToInt16 (buffer' start) / 32768.0;  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: if (channels > 1) {  	right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  }  else {  	right = left;  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,ReadSamples,The following statement contains a magic number: right = BitConverter.ToInt16 (buffer' start + bytesPerSample) / 32768.0;  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	Array.Copy (BitConverter.GetBytes ((float)left)' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((float)right)' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  else if (bytesPerSample == 2) {  	Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	Array.Copy (BitConverter.GetBytes ((float)left)' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((float)right)' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  else if (bytesPerSample == 2) {  	Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	Array.Copy (BitConverter.GetBytes ((float)left)' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((float)right)' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  else if (bytesPerSample == 2) {  	Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (bytesPerSample == 4) {  	Array.Copy (BitConverter.GetBytes ((float)left)' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((float)right)' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  else if (bytesPerSample == 2) {  	Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (bytesPerSample == 2) {  	Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (bytesPerSample == 2) {  	Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (bytesPerSample == 2) {  	Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  	if (channels > 1) {  		Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  	}  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes ((short)(left * 32768.0))' 0' buffer' start' bytesPerSample);  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: if (channels > 1) {  	Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  }  
Magic Number,NAudio.Wave,SimpleCompressorStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\SimpleCompressorStream.cs,WriteSamples,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes ((short)(right * 32768.0))' 0' buffer' start + bytesPerSample' bytesPerSample);  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Wave32To16Stream,The following statement contains a magic number: if (sourceStream.WaveFormat.BitsPerSample != 32)  	throw new ApplicationException ("Only 32 bit Floating point supported");  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Wave32To16Stream,The following statement contains a magic number: waveFormat = new WaveFormat (sourceStream.WaveFormat.SampleRate' 16' sourceStream.WaveFormat.Channels);  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Wave32To16Stream,The following statement contains a magic number: length = sourceStream.Length / 2;  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Wave32To16Stream,The following statement contains a magic number: position = sourceStream.Position / 2;  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Read,The following statement contains a magic number: position += (bytesRead / 2);  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Read,The following statement contains a magic number: return bytesRead / 2;  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Convert32To16,The following statement contains a magic number: fixed (byte* pDestBuffer = &destBuffer [offset]' pSourceBuffer = &sourceBuffer [0]) {  	short* psDestBuffer = (short*)pDestBuffer;  	float* pfSourceBuffer = (float*)pSourceBuffer;  	int samplesRead = bytesRead / 4;  	for (int n = 0; n < samplesRead; n++) {  		float sampleVal = pfSourceBuffer [n] * volume;  		if (sampleVal > 1.0f) {  			psDestBuffer [n] = short.MaxValue;  			clip = true;  		}  		else if (sampleVal < -1.0f) {  			psDestBuffer [n] = short.MinValue;  			clip = true;  		}  		else {  			psDestBuffer [n] = (short)(sampleVal * 32767);  		}  	}  }  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Convert32To16,The following statement contains a magic number: fixed (byte* pDestBuffer = &destBuffer [offset]' pSourceBuffer = &sourceBuffer [0]) {  	short* psDestBuffer = (short*)pDestBuffer;  	float* pfSourceBuffer = (float*)pSourceBuffer;  	int samplesRead = bytesRead / 4;  	for (int n = 0; n < samplesRead; n++) {  		float sampleVal = pfSourceBuffer [n] * volume;  		if (sampleVal > 1.0f) {  			psDestBuffer [n] = short.MaxValue;  			clip = true;  		}  		else if (sampleVal < -1.0f) {  			psDestBuffer [n] = short.MinValue;  			clip = true;  		}  		else {  			psDestBuffer [n] = (short)(sampleVal * 32767);  		}  	}  }  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Convert32To16,The following statement contains a magic number: for (int n = 0; n < samplesRead; n++) {  	float sampleVal = pfSourceBuffer [n] * volume;  	if (sampleVal > 1.0f) {  		psDestBuffer [n] = short.MaxValue;  		clip = true;  	}  	else if (sampleVal < -1.0f) {  		psDestBuffer [n] = short.MinValue;  		clip = true;  	}  	else {  		psDestBuffer [n] = (short)(sampleVal * 32767);  	}  }  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Convert32To16,The following statement contains a magic number: if (sampleVal > 1.0f) {  	psDestBuffer [n] = short.MaxValue;  	clip = true;  }  else if (sampleVal < -1.0f) {  	psDestBuffer [n] = short.MinValue;  	clip = true;  }  else {  	psDestBuffer [n] = (short)(sampleVal * 32767);  }  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Convert32To16,The following statement contains a magic number: if (sampleVal < -1.0f) {  	psDestBuffer [n] = short.MinValue;  	clip = true;  }  else {  	psDestBuffer [n] = (short)(sampleVal * 32767);  }  
Magic Number,NAudio.Wave,Wave32To16Stream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\Wave32To16Stream.cs,Convert32To16,The following statement contains a magic number: psDestBuffer [n] = (short)(sampleVal * 32767);  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,WaveChannel32,The following statement contains a magic number: waveFormat = WaveFormat.CreateIeeeFloatWaveFormat (sourceStream.WaveFormat.SampleRate' 2);  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,WaveChannel32,The following statement contains a magic number: destBytesPerSample = 8;  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,WaveChannel32,The following statement contains a magic number: sourceBytesPerSample = sourceStream.WaveFormat.Channels * sourceStream.WaveFormat.BitsPerSample / 8;  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,The following statement contains a magic number: if (bytesWritten < numBytes) {  	this.sampleProvider.LoadNextChunk (sourceStream' (numBytes - bytesWritten) / 8);  	float left' right;  	int outIndex = (offset / 4) + bytesWritten / 4;  	while (this.sampleProvider.GetNextSample (out left' out right) && bytesWritten < numBytes) {  		// implement better panning laws.   		left = (pan <= 0) ? left : (left * (1 - pan) / 2.0f);  		right = (pan >= 0) ? right : (right * (pan + 1) / 2.0f);  		left *= volume;  		right *= volume;  		destWaveBuffer.FloatBuffer [outIndex++] = left;  		destWaveBuffer.FloatBuffer [outIndex++] = right;  		bytesWritten += 8;  		if (Sample != null)  			RaiseSample (left' right);  	}  }  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,The following statement contains a magic number: if (bytesWritten < numBytes) {  	this.sampleProvider.LoadNextChunk (sourceStream' (numBytes - bytesWritten) / 8);  	float left' right;  	int outIndex = (offset / 4) + bytesWritten / 4;  	while (this.sampleProvider.GetNextSample (out left' out right) && bytesWritten < numBytes) {  		// implement better panning laws.   		left = (pan <= 0) ? left : (left * (1 - pan) / 2.0f);  		right = (pan >= 0) ? right : (right * (pan + 1) / 2.0f);  		left *= volume;  		right *= volume;  		destWaveBuffer.FloatBuffer [outIndex++] = left;  		destWaveBuffer.FloatBuffer [outIndex++] = right;  		bytesWritten += 8;  		if (Sample != null)  			RaiseSample (left' right);  	}  }  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,The following statement contains a magic number: if (bytesWritten < numBytes) {  	this.sampleProvider.LoadNextChunk (sourceStream' (numBytes - bytesWritten) / 8);  	float left' right;  	int outIndex = (offset / 4) + bytesWritten / 4;  	while (this.sampleProvider.GetNextSample (out left' out right) && bytesWritten < numBytes) {  		// implement better panning laws.   		left = (pan <= 0) ? left : (left * (1 - pan) / 2.0f);  		right = (pan >= 0) ? right : (right * (pan + 1) / 2.0f);  		left *= volume;  		right *= volume;  		destWaveBuffer.FloatBuffer [outIndex++] = left;  		destWaveBuffer.FloatBuffer [outIndex++] = right;  		bytesWritten += 8;  		if (Sample != null)  			RaiseSample (left' right);  	}  }  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,The following statement contains a magic number: if (bytesWritten < numBytes) {  	this.sampleProvider.LoadNextChunk (sourceStream' (numBytes - bytesWritten) / 8);  	float left' right;  	int outIndex = (offset / 4) + bytesWritten / 4;  	while (this.sampleProvider.GetNextSample (out left' out right) && bytesWritten < numBytes) {  		// implement better panning laws.   		left = (pan <= 0) ? left : (left * (1 - pan) / 2.0f);  		right = (pan >= 0) ? right : (right * (pan + 1) / 2.0f);  		left *= volume;  		right *= volume;  		destWaveBuffer.FloatBuffer [outIndex++] = left;  		destWaveBuffer.FloatBuffer [outIndex++] = right;  		bytesWritten += 8;  		if (Sample != null)  			RaiseSample (left' right);  	}  }  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,The following statement contains a magic number: this.sampleProvider.LoadNextChunk (sourceStream' (numBytes - bytesWritten) / 8);  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,The following statement contains a magic number: while (this.sampleProvider.GetNextSample (out left' out right) && bytesWritten < numBytes) {  	// implement better panning laws.   	left = (pan <= 0) ? left : (left * (1 - pan) / 2.0f);  	right = (pan >= 0) ? right : (right * (pan + 1) / 2.0f);  	left *= volume;  	right *= volume;  	destWaveBuffer.FloatBuffer [outIndex++] = left;  	destWaveBuffer.FloatBuffer [outIndex++] = right;  	bytesWritten += 8;  	if (Sample != null)  		RaiseSample (left' right);  }  
Magic Number,NAudio.Wave,WaveChannel32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveChannel32.cs,Read,The following statement contains a magic number: bytesWritten += 8;  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,ReadWaveHeader,The following statement contains a magic number: while (stream.Position <= stopPosition - 8) {  	Int32 chunkIdentifier = br.ReadInt32 ();  	Int32 chunkLength = br.ReadInt32 ();  	if (chunkIdentifier == dataChunkID) {  		dataChunkPosition = stream.Position;  		dataChunkLength = chunkLength;  		stream.Position += chunkLength;  	}  	else if (chunkIdentifier == formatChunkId) {  		format = WaveFormat.FromFormatChunk (br' chunkLength);  	}  	else {  		// check for invalid chunk length  		if (chunkLength < 0 || chunkLength > stream.Length - stream.Position) {  			Debug.Assert (false' String.Format ("Invalid chunk length {0}' pos: {1}. length: {2}"' chunkLength' stream.Position' stream.Length));  			// an exception will be thrown further down if we haven't got a format and data chunk yet'  			// otherwise we will tolerate this file despite it having corrupt data at the end  			break;  		}  		if (chunks != null) {  			chunks.Add (new RiffChunk (chunkIdentifier' chunkLength' stream.Position));  		}  		stream.Position += chunkLength;  	}  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 16) {  	byte[] value = new byte[2];  	int read = Read (value' 0' 2);  	if (read < 2)  		return false;  	sampleValue = (float)BitConverter.ToInt16 (value' 0) / 32768f;  	return true;  }  // 24 bit PCM data  else if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (read < 2)  	return false;  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 24) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 3);  	if (read < 3)  		return false;  	if (value [2] > 0x7f) {  		value [3] = 0xff;  	}  	else {  		value [3] = 0x00;  	}  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / (float)(0x800000);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (read < 3)  	return false;  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (value [2] > 0x7f) {  	value [3] = 0xff;  }  else {  	value [3] = 0x00;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (value [2] > 0x7f) {  	value [3] = 0xff;  }  else {  	value [3] = 0x00;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (value [2] > 0x7f) {  	value [3] = 0xff;  }  else {  	value [3] = 0x00;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: value [3] = 0xff;  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: value [3] = 0x00;  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.Extensible) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / ((float)(Int32.MaxValue) + 1f);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.Extensible) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / ((float)(Int32.MaxValue) + 1f);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.Extensible) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / ((float)(Int32.MaxValue) + 1f);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.Extensible) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = (float)BitConverter.ToInt32 (value' 0) / ((float)(Int32.MaxValue) + 1f);  	return true;  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (read < 4)  	return false;  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = BitConverter.ToSingle (value' 0);  	return true;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = BitConverter.ToSingle (value' 0);  	return true;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = BitConverter.ToSingle (value' 0);  	return true;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (waveFormat.BitsPerSample == 32 && waveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	byte[] value = new byte[4];  	int read = Read (value' 0' 4);  	if (read < 4)  		return false;  	sampleValue = BitConverter.ToSingle (value' 0);  	return true;  }  else {  	throw new ApplicationException ("Only 16' 24 or 32 bit PCM or IEEE float audio data supported");  }  
Magic Number,NAudio.Wave,WaveFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveFileReader.cs,TryReadFloat,The following statement contains a magic number: if (read < 4)  	return false;  
Magic Number,NAudio.Wave,WaveMixerStream32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveMixerStream32.cs,WaveMixerStream32,The following statement contains a magic number: this.waveFormat = WaveFormat.CreateIeeeFloatWaveFormat (44100' 2);  
Magic Number,NAudio.Wave,WaveMixerStream32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveMixerStream32.cs,WaveMixerStream32,The following statement contains a magic number: this.waveFormat = WaveFormat.CreateIeeeFloatWaveFormat (44100' 2);  
Magic Number,NAudio.Wave,WaveMixerStream32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveMixerStream32.cs,WaveMixerStream32,The following statement contains a magic number: this.bytesPerSample = 4;  
Magic Number,NAudio.Wave,WaveMixerStream32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveMixerStream32.cs,AddInputStream,The following statement contains a magic number: if (waveStream.WaveFormat.BitsPerSample != 32)  	throw new ArgumentException ("Only 32 bit audio currently supported"' "waveStream.WaveFormat");  
Magic Number,NAudio.Wave,WaveMixerStream32,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveMixerStream32.cs,Sum32BitAudio,The following statement contains a magic number: fixed (byte* pDestBuffer = &destBuffer [offset]' pSourceBuffer = &sourceBuffer [0]) {  	float* pfDestBuffer = (float*)pDestBuffer;  	float* pfReadBuffer = (float*)pSourceBuffer;  	int samplesRead = bytesRead / 4;  	for (int n = 0; n < samplesRead; n++) {  		pfDestBuffer [n] += pfReadBuffer [n];  	}  }  
Magic Number,NAudio.Wave,WaveOffsetStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveStreams\WaveOffsetStream.cs,WaveOffsetStream,The following statement contains a magic number: bytesPerSample = (sourceStream.WaveFormat.BitsPerSample / 8) * sourceStream.WaveFormat.Channels;  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: using (StreamReader reader = new StreamReader (fileName)) {  	//SfzParseState parseState = SfzParseState.Initial;  	string line;  	List<Region> regions = new List<Region> ();  	Group currentGroup = null;  	Region currentRegion = null;  	StringBuilder currentOpcode = new StringBuilder ();  	StringBuilder currentValue = new StringBuilder ();  	int lastSpace;  	int lineNumber = 0;  	while ((line = reader.ReadLine ()) != null) {  		lineNumber++;  		// 1. Strip comments  		int commentIndex = line.IndexOf ('/');  		if (commentIndex != -1)  			line = line.Substring (commentIndex);  		for (int n = 0; n < line.Length; n++) {  			char c = line [n];  			if (Char.IsWhiteSpace (c)) {  				if (currentOpcode.Length == 0) {  					continue;  				}  				else if (currentValue.Length == 0) {  					throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  				}  				else {  					lastSpace = n;  					currentValue.Append (c);  				}  			}  			else if (c == '=') {  			}  			else if (c == '<') {  				if (line.Substring (n).StartsWith ("<region>")) {  					if (currentRegion != null)  						regions.Add (currentRegion);  					currentRegion = new Region ();  					//currentGroup);  					currentOpcode.Length = 0;  					currentValue.Length = 0;  					n += 7;  				}  				else if (line.Substring (n).StartsWith ("<group>")) {  					if (currentRegion != null)  						regions.Add (currentRegion);  					currentOpcode.Length = 0;  					currentValue.Length = 0;  					currentRegion = null;  					currentGroup = new Group ();  					n += 6;  				}  				else {  					throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  				}  			}  			else {  				//if(current.Length   			}  		}  	}  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: using (StreamReader reader = new StreamReader (fileName)) {  	//SfzParseState parseState = SfzParseState.Initial;  	string line;  	List<Region> regions = new List<Region> ();  	Group currentGroup = null;  	Region currentRegion = null;  	StringBuilder currentOpcode = new StringBuilder ();  	StringBuilder currentValue = new StringBuilder ();  	int lastSpace;  	int lineNumber = 0;  	while ((line = reader.ReadLine ()) != null) {  		lineNumber++;  		// 1. Strip comments  		int commentIndex = line.IndexOf ('/');  		if (commentIndex != -1)  			line = line.Substring (commentIndex);  		for (int n = 0; n < line.Length; n++) {  			char c = line [n];  			if (Char.IsWhiteSpace (c)) {  				if (currentOpcode.Length == 0) {  					continue;  				}  				else if (currentValue.Length == 0) {  					throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  				}  				else {  					lastSpace = n;  					currentValue.Append (c);  				}  			}  			else if (c == '=') {  			}  			else if (c == '<') {  				if (line.Substring (n).StartsWith ("<region>")) {  					if (currentRegion != null)  						regions.Add (currentRegion);  					currentRegion = new Region ();  					//currentGroup);  					currentOpcode.Length = 0;  					currentValue.Length = 0;  					n += 7;  				}  				else if (line.Substring (n).StartsWith ("<group>")) {  					if (currentRegion != null)  						regions.Add (currentRegion);  					currentOpcode.Length = 0;  					currentValue.Length = 0;  					currentRegion = null;  					currentGroup = new Group ();  					n += 6;  				}  				else {  					throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  				}  			}  			else {  				//if(current.Length   			}  		}  	}  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	lineNumber++;  	// 1. Strip comments  	int commentIndex = line.IndexOf ('/');  	if (commentIndex != -1)  		line = line.Substring (commentIndex);  	for (int n = 0; n < line.Length; n++) {  		char c = line [n];  		if (Char.IsWhiteSpace (c)) {  			if (currentOpcode.Length == 0) {  				continue;  			}  			else if (currentValue.Length == 0) {  				throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  			}  			else {  				lastSpace = n;  				currentValue.Append (c);  			}  		}  		else if (c == '=') {  		}  		else if (c == '<') {  			if (line.Substring (n).StartsWith ("<region>")) {  				if (currentRegion != null)  					regions.Add (currentRegion);  				currentRegion = new Region ();  				//currentGroup);  				currentOpcode.Length = 0;  				currentValue.Length = 0;  				n += 7;  			}  			else if (line.Substring (n).StartsWith ("<group>")) {  				if (currentRegion != null)  					regions.Add (currentRegion);  				currentOpcode.Length = 0;  				currentValue.Length = 0;  				currentRegion = null;  				currentGroup = new Group ();  				n += 6;  			}  			else {  				throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  			}  		}  		else {  			//if(current.Length   		}  	}  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	lineNumber++;  	// 1. Strip comments  	int commentIndex = line.IndexOf ('/');  	if (commentIndex != -1)  		line = line.Substring (commentIndex);  	for (int n = 0; n < line.Length; n++) {  		char c = line [n];  		if (Char.IsWhiteSpace (c)) {  			if (currentOpcode.Length == 0) {  				continue;  			}  			else if (currentValue.Length == 0) {  				throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  			}  			else {  				lastSpace = n;  				currentValue.Append (c);  			}  		}  		else if (c == '=') {  		}  		else if (c == '<') {  			if (line.Substring (n).StartsWith ("<region>")) {  				if (currentRegion != null)  					regions.Add (currentRegion);  				currentRegion = new Region ();  				//currentGroup);  				currentOpcode.Length = 0;  				currentValue.Length = 0;  				n += 7;  			}  			else if (line.Substring (n).StartsWith ("<group>")) {  				if (currentRegion != null)  					regions.Add (currentRegion);  				currentOpcode.Length = 0;  				currentValue.Length = 0;  				currentRegion = null;  				currentGroup = new Group ();  				n += 6;  			}  			else {  				throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  			}  		}  		else {  			//if(current.Length   		}  	}  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: for (int n = 0; n < line.Length; n++) {  	char c = line [n];  	if (Char.IsWhiteSpace (c)) {  		if (currentOpcode.Length == 0) {  			continue;  		}  		else if (currentValue.Length == 0) {  			throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  		}  		else {  			lastSpace = n;  			currentValue.Append (c);  		}  	}  	else if (c == '=') {  	}  	else if (c == '<') {  		if (line.Substring (n).StartsWith ("<region>")) {  			if (currentRegion != null)  				regions.Add (currentRegion);  			currentRegion = new Region ();  			//currentGroup);  			currentOpcode.Length = 0;  			currentValue.Length = 0;  			n += 7;  		}  		else if (line.Substring (n).StartsWith ("<group>")) {  			if (currentRegion != null)  				regions.Add (currentRegion);  			currentOpcode.Length = 0;  			currentValue.Length = 0;  			currentRegion = null;  			currentGroup = new Group ();  			n += 6;  		}  		else {  			throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  		}  	}  	else {  		//if(current.Length   	}  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: for (int n = 0; n < line.Length; n++) {  	char c = line [n];  	if (Char.IsWhiteSpace (c)) {  		if (currentOpcode.Length == 0) {  			continue;  		}  		else if (currentValue.Length == 0) {  			throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  		}  		else {  			lastSpace = n;  			currentValue.Append (c);  		}  	}  	else if (c == '=') {  	}  	else if (c == '<') {  		if (line.Substring (n).StartsWith ("<region>")) {  			if (currentRegion != null)  				regions.Add (currentRegion);  			currentRegion = new Region ();  			//currentGroup);  			currentOpcode.Length = 0;  			currentValue.Length = 0;  			n += 7;  		}  		else if (line.Substring (n).StartsWith ("<group>")) {  			if (currentRegion != null)  				regions.Add (currentRegion);  			currentOpcode.Length = 0;  			currentValue.Length = 0;  			currentRegion = null;  			currentGroup = new Group ();  			n += 6;  		}  		else {  			throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  		}  	}  	else {  		//if(current.Length   	}  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (Char.IsWhiteSpace (c)) {  	if (currentOpcode.Length == 0) {  		continue;  	}  	else if (currentValue.Length == 0) {  		throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  	}  	else {  		lastSpace = n;  		currentValue.Append (c);  	}  }  else if (c == '=') {  }  else if (c == '<') {  	if (line.Substring (n).StartsWith ("<region>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentRegion = new Region ();  		//currentGroup);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		n += 7;  	}  	else if (line.Substring (n).StartsWith ("<group>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		currentRegion = null;  		currentGroup = new Group ();  		n += 6;  	}  	else {  		throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  	}  }  else {  	//if(current.Length   }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (Char.IsWhiteSpace (c)) {  	if (currentOpcode.Length == 0) {  		continue;  	}  	else if (currentValue.Length == 0) {  		throw new FormatException (String.Format ("Invalid Whitespace Line {0}' Char {1}"' lineNumber' n));  	}  	else {  		lastSpace = n;  		currentValue.Append (c);  	}  }  else if (c == '=') {  }  else if (c == '<') {  	if (line.Substring (n).StartsWith ("<region>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentRegion = new Region ();  		//currentGroup);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		n += 7;  	}  	else if (line.Substring (n).StartsWith ("<group>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		currentRegion = null;  		currentGroup = new Group ();  		n += 6;  	}  	else {  		throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  	}  }  else {  	//if(current.Length   }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (c == '=') {  }  else if (c == '<') {  	if (line.Substring (n).StartsWith ("<region>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentRegion = new Region ();  		//currentGroup);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		n += 7;  	}  	else if (line.Substring (n).StartsWith ("<group>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		currentRegion = null;  		currentGroup = new Group ();  		n += 6;  	}  	else {  		throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  	}  }  else {  	//if(current.Length   }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (c == '=') {  }  else if (c == '<') {  	if (line.Substring (n).StartsWith ("<region>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentRegion = new Region ();  		//currentGroup);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		n += 7;  	}  	else if (line.Substring (n).StartsWith ("<group>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		currentRegion = null;  		currentGroup = new Group ();  		n += 6;  	}  	else {  		throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  	}  }  else {  	//if(current.Length   }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (c == '<') {  	if (line.Substring (n).StartsWith ("<region>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentRegion = new Region ();  		//currentGroup);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		n += 7;  	}  	else if (line.Substring (n).StartsWith ("<group>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		currentRegion = null;  		currentGroup = new Group ();  		n += 6;  	}  	else {  		throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  	}  }  else {  	//if(current.Length   }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (c == '<') {  	if (line.Substring (n).StartsWith ("<region>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentRegion = new Region ();  		//currentGroup);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		n += 7;  	}  	else if (line.Substring (n).StartsWith ("<group>")) {  		if (currentRegion != null)  			regions.Add (currentRegion);  		currentOpcode.Length = 0;  		currentValue.Length = 0;  		currentRegion = null;  		currentGroup = new Group ();  		n += 6;  	}  	else {  		throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  	}  }  else {  	//if(current.Length   }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (line.Substring (n).StartsWith ("<region>")) {  	if (currentRegion != null)  		regions.Add (currentRegion);  	currentRegion = new Region ();  	//currentGroup);  	currentOpcode.Length = 0;  	currentValue.Length = 0;  	n += 7;  }  else if (line.Substring (n).StartsWith ("<group>")) {  	if (currentRegion != null)  		regions.Add (currentRegion);  	currentOpcode.Length = 0;  	currentValue.Length = 0;  	currentRegion = null;  	currentGroup = new Group ();  	n += 6;  }  else {  	throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (line.Substring (n).StartsWith ("<region>")) {  	if (currentRegion != null)  		regions.Add (currentRegion);  	currentRegion = new Region ();  	//currentGroup);  	currentOpcode.Length = 0;  	currentValue.Length = 0;  	n += 7;  }  else if (line.Substring (n).StartsWith ("<group>")) {  	if (currentRegion != null)  		regions.Add (currentRegion);  	currentOpcode.Length = 0;  	currentValue.Length = 0;  	currentRegion = null;  	currentGroup = new Group ();  	n += 6;  }  else {  	throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: n += 7;  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: if (line.Substring (n).StartsWith ("<group>")) {  	if (currentRegion != null)  		regions.Add (currentRegion);  	currentOpcode.Length = 0;  	currentValue.Length = 0;  	currentRegion = null;  	currentGroup = new Group ();  	n += 6;  }  else {  	throw new FormatException (String.Format ("Unrecognised section Line {0}' Char {1}"' lineNumber' n));  }  
Magic Number,NAudio.Sfz,SfzFileReader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\Sfz\SfzFileReader.cs,SfzFileReader,The following statement contains a magic number: n += 6;  
Magic Number,NAudio.SoundFont,ModulatorType,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\ModulatorType.cs,ModulatorType,The following statement contains a magic number: sourceType = (SourceTypeEnum)((raw & (0xFC00)) >> 10);  
Magic Number,NAudio.SoundFont,RiffChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\RiffChunk.cs,ReadChunkID,The following statement contains a magic number: if (cid.Length != 4) {  	throw new ApplicationException ("Couldn't read Chunk ID");  }  
Magic Number,NAudio.SoundFont,RiffChunk,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\FileFormats\SoundFont\RiffChunk.cs,GetNextSubChunk,The following statement contains a magic number: if (riffFile.BaseStream.Position + 8 < dataOffset + chunkSize) {  	RiffChunk chunk = new RiffChunk (riffFile);  	chunk.ReadChunk ();  	return chunk;  }  
Magic Number,NAudio.Gui,Arranger,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Arranger.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (472' 376);  
Magic Number,NAudio.Gui,Arranger,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Arranger.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (472' 376);  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,DrawSlider,The following statement contains a magic number: sliderRectangle.X = (this.Width - SliderWidth) / 2;  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,DrawSlider,The following statement contains a magic number: g.DrawLine (centreLine' sliderRectangle.Left' sliderRectangle.Top + sliderRectangle.Height / 2' sliderRectangle.Right' sliderRectangle.Top + sliderRectangle.Height / 2);  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,DrawSlider,The following statement contains a magic number: g.DrawLine (centreLine' sliderRectangle.Left' sliderRectangle.Top + sliderRectangle.Height / 2' sliderRectangle.Right' sliderRectangle.Top + sliderRectangle.Height / 2);  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,OnPaint,The following statement contains a magic number: if (this.Orientation == Orientation.Vertical) {  	Brush groove = new SolidBrush (Color.Black);  	g.FillRectangle (groove' this.Width / 2' SliderHeight / 2' 2' this.Height - SliderHeight);  	groove.Dispose ();  	DrawSlider (g);  }  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,OnPaint,The following statement contains a magic number: if (this.Orientation == Orientation.Vertical) {  	Brush groove = new SolidBrush (Color.Black);  	g.FillRectangle (groove' this.Width / 2' SliderHeight / 2' 2' this.Height - SliderHeight);  	groove.Dispose ();  	DrawSlider (g);  }  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,OnPaint,The following statement contains a magic number: if (this.Orientation == Orientation.Vertical) {  	Brush groove = new SolidBrush (Color.Black);  	g.FillRectangle (groove' this.Width / 2' SliderHeight / 2' 2' this.Height - SliderHeight);  	groove.Dispose ();  	DrawSlider (g);  }  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (groove' this.Width / 2' SliderHeight / 2' 2' this.Height - SliderHeight);  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (groove' this.Width / 2' SliderHeight / 2' 2' this.Height - SliderHeight);  
Magic Number,NAudio.Gui,Fader,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Fader.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (groove' this.Width / 2' SliderHeight / 2' 2' this.Height - SliderHeight);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: g.FillRectangle (new SolidBrush (OffColor)' 1 + col * 6 * pixelSize' 1 + row * 8 * pixelSize' 5 * pixelSize' 7 * pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: g.FillRectangle (new SolidBrush (OffColor)' 1 + col * 6 * pixelSize' 1 + row * 8 * pixelSize' 5 * pixelSize' 7 * pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: g.FillRectangle (new SolidBrush (OffColor)' 1 + col * 6 * pixelSize' 1 + row * 8 * pixelSize' 5 * pixelSize' 7 * pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: g.FillRectangle (new SolidBrush (OffColor)' 1 + col * 6 * pixelSize' 1 + row * 8 * pixelSize' 5 * pixelSize' 7 * pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [21] = b [22] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [21] = b [22] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [21] = b [22] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [21] = b [22] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [21] = b [22] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [8] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [8] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [28] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [28] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [7] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [12] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [17] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [22] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [27] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [6] = b [8] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [6] = b [8] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [6] = b [8] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [6] = b [8] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [12] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [12] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [12] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [17] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [17] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [17] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [11] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [11] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [11] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [17] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [17] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [17] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [23] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [22] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [22] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [28] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [28] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [34] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [16] = b [17] = b [18] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [30] = b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [1] = b [2] = b [3] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [7] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [12] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [17] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [22] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [27] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [32] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [0] = b [4] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [5] = b [9] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [10] = b [14] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [15] = b [19] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [20] = b [24] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [25] = b [29] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: b [31] = b [32] = b [33] = true;  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int x = 0; x < 5; x++)  	for (int y = 0; y < 7; y++)  		if (b [y * 5 + x])  			g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int x = 0; x < 5; x++)  	for (int y = 0; y < 7; y++)  		if (b [y * 5 + x])  			g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int x = 0; x < 5; x++)  	for (int y = 0; y < 7; y++)  		if (b [y * 5 + x])  			g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int x = 0; x < 5; x++)  	for (int y = 0; y < 7; y++)  		if (b [y * 5 + x])  			g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int x = 0; x < 5; x++)  	for (int y = 0; y < 7; y++)  		if (b [y * 5 + x])  			g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int y = 0; y < 7; y++)  	if (b [y * 5 + x])  		g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int y = 0; y < 7; y++)  	if (b [y * 5 + x])  		g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int y = 0; y < 7; y++)  	if (b [y * 5 + x])  		g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: for (int y = 0; y < 7; y++)  	if (b [y * 5 + x])  		g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: if (b [y * 5 + x])  	g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: if (b [y * 5 + x])  	g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: if (b [y * 5 + x])  	g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following statement contains a magic number: g.FillRectangle (onBrush' 1 + col * 6 * pixelSize + x * pixelSize' 1 + row * 8 * pixelSize + y * pixelSize' pixelSize' pixelSize);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (192' 56);  
Magic Number,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (192' 56);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (104' 16);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (104' 16);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan == 0.0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  	panValue = "C";  }  else if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2) - 1' 1' 3' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: if (pan > 0) {  	pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  	panValue = String.Format ("{0:F0}%R"' pan * 100);  }  else {  	pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  	panValue = String.Format ("{0:F0}%L"' pan * -100);  }  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (this.Width / 2)' 1' (int)((this.Width / 2) * pan)' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: panValue = String.Format ("{0:F0}%R"' pan * 100);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.Orange' (int)((this.Width / 2) * (pan + 1))' 1' (int)((this.Width / 2) * (0 - pan))' this.Height - 2);  
Magic Number,NAudio.Gui,PanSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\PanSlider.cs,OnPaint,The following statement contains a magic number: panValue = String.Format ("{0:F0}%L"' pan * -100);  
Magic Number,NAudio.Gui,Pot,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Pot.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform (this.Width / 2' this.Height / 2);  
Magic Number,NAudio.Gui,Pot,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Pot.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform (this.Width / 2' this.Height / 2);  
Magic Number,NAudio.Gui,Pot,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Pot.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawArc (potPen' new Rectangle (diameter / -2' diameter / -2' diameter' diameter)' 135' 270);  
Magic Number,NAudio.Gui,Pot,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Pot.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawArc (potPen' new Rectangle (diameter / -2' diameter / -2' diameter' diameter)' 135' 270);  
Magic Number,NAudio.Gui,Pot,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Pot.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawArc (potPen' new Rectangle (diameter / -2' diameter / -2' diameter' diameter)' 135' 270);  
Magic Number,NAudio.Gui,Pot,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Pot.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawArc (potPen' new Rectangle (diameter / -2' diameter / -2' diameter' diameter)' 135' 270);  
Magic Number,NAudio.Gui,Pot,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\Pot.cs,OnMouseMove,The following statement contains a magic number: if (dragging) {  	int yDifference = beginDragY - e.Y;  	// 100 is the number of pixels of vertical movement that represents the whole scale  	double delta = (maximum - minimum) * (yDifference / 150.0);  	double newValue = beginDragValue + delta;  	if (newValue < minimum)  		newValue = minimum;  	if (newValue > maximum)  		newValue = maximum;  	SetValue (newValue' true);  }  
Magic Number,NAudio.Gui,VolumeMeter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeMeter.cs,VolumeMeter,The following statement contains a magic number: MinDb = -60;  
Magic Number,NAudio.Gui,VolumeMeter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeMeter.cs,VolumeMeter,The following statement contains a magic number: MaxDb = 18;  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (96' 16);  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (96' 16);  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.LightGreen' 1' 1' (int)((this.Width - 2) * percent)' this.Height - 2);  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,OnPaint,The following statement contains a magic number: pe.Graphics.FillRectangle (Brushes.LightGreen' 1' 1' (int)((this.Width - 2) * percent)' this.Height - 2);  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,SetVolumeFromMouse,The following statement contains a magic number: if (x <= 0)  	Volume = 0;  else  	Volume = (float)Math.Pow (10' dbVolume / 20);  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,SetVolumeFromMouse,The following statement contains a magic number: if (x <= 0)  	Volume = 0;  else  	Volume = (float)Math.Pow (10' dbVolume / 20);  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,SetVolumeFromMouse,The following statement contains a magic number: Volume = (float)Math.Pow (10' dbVolume / 20);  
Magic Number,NAudio.Gui,VolumeSlider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\VolumeSlider.cs,SetVolumeFromMouse,The following statement contains a magic number: Volume = (float)Math.Pow (10' dbVolume / 20);  
Magic Number,NAudio.Gui,WaveformPainter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\WaveformPainter.cs,OnPaint,The following statement contains a magic number: for (int x = 0; x < this.Width; x++) {  	float lineHeight = this.Height * GetSample (x - this.Width + insertPos);  	float y1 = (this.Height - lineHeight) / 2;  	pe.Graphics.DrawLine (foregroundPen' x' y1' x' y1 + lineHeight);  }  
Magic Number,NAudio.Gui,WaveViewer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\WaveViewer.cs,OnPaint,The following statement contains a magic number: if (waveStream != null) {  	waveStream.Position = 0;  	int bytesRead;  	byte[] waveData = new byte[samplesPerPixel * bytesPerSample];  	waveStream.Position = startPosition + (e.ClipRectangle.Left * bytesPerSample * samplesPerPixel);  	for (float x = e.ClipRectangle.X; x < e.ClipRectangle.Right; x += 1) {  		short low = 0;  		short high = 0;  		bytesRead = waveStream.Read (waveData' 0' samplesPerPixel * bytesPerSample);  		if (bytesRead == 0)  			break;  		for (int n = 0; n < bytesRead; n += 2) {  			short sample = BitConverter.ToInt16 (waveData' n);  			if (sample < low)  				low = sample;  			if (sample > high)  				high = sample;  		}  		float lowPercent = ((((float)low) - short.MinValue) / ushort.MaxValue);  		float highPercent = ((((float)high) - short.MinValue) / ushort.MaxValue);  		e.Graphics.DrawLine (Pens.Black' x' this.Height * lowPercent' x' this.Height * highPercent);  	}  }  
Magic Number,NAudio.Gui,WaveViewer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\WaveViewer.cs,OnPaint,The following statement contains a magic number: for (float x = e.ClipRectangle.X; x < e.ClipRectangle.Right; x += 1) {  	short low = 0;  	short high = 0;  	bytesRead = waveStream.Read (waveData' 0' samplesPerPixel * bytesPerSample);  	if (bytesRead == 0)  		break;  	for (int n = 0; n < bytesRead; n += 2) {  		short sample = BitConverter.ToInt16 (waveData' n);  		if (sample < low)  			low = sample;  		if (sample > high)  			high = sample;  	}  	float lowPercent = ((((float)low) - short.MinValue) / ushort.MaxValue);  	float highPercent = ((((float)high) - short.MinValue) / ushort.MaxValue);  	e.Graphics.DrawLine (Pens.Black' x' this.Height * lowPercent' x' this.Height * highPercent);  }  
Magic Number,NAudio.Gui,WaveViewer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\WaveViewer.cs,OnPaint,The following statement contains a magic number: for (int n = 0; n < bytesRead; n += 2) {  	short sample = BitConverter.ToInt16 (waveData' n);  	if (sample < low)  		low = sample;  	if (sample > high)  		high = sample;  }  
Magic Number,NAudio.Gui,WaveViewer,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\WaveViewer.cs,OnPaint,The following statement contains a magic number: n += 2
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: for (int beat = 0; x < this.Width; beat++) {  	int height = (beat % 4 == 0) ? measureTickHeight : beatTickHeight;  	//x = beat * pixelsPerBeat;  	x = TimeToX (TimeSpan.FromSeconds ((beat * 60) / tempo));  	e.Graphics.DrawLine (foregroundPen' x' this.Height - height' x' this.Height);  	if (beat % 4 == 0) {  		int measure = beat / 4;  		e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  	}  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: for (int beat = 0; x < this.Width; beat++) {  	int height = (beat % 4 == 0) ? measureTickHeight : beatTickHeight;  	//x = beat * pixelsPerBeat;  	x = TimeToX (TimeSpan.FromSeconds ((beat * 60) / tempo));  	e.Graphics.DrawLine (foregroundPen' x' this.Height - height' x' this.Height);  	if (beat % 4 == 0) {  		int measure = beat / 4;  		e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  	}  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: for (int beat = 0; x < this.Width; beat++) {  	int height = (beat % 4 == 0) ? measureTickHeight : beatTickHeight;  	//x = beat * pixelsPerBeat;  	x = TimeToX (TimeSpan.FromSeconds ((beat * 60) / tempo));  	e.Graphics.DrawLine (foregroundPen' x' this.Height - height' x' this.Height);  	if (beat % 4 == 0) {  		int measure = beat / 4;  		e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  	}  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: for (int beat = 0; x < this.Width; beat++) {  	int height = (beat % 4 == 0) ? measureTickHeight : beatTickHeight;  	//x = beat * pixelsPerBeat;  	x = TimeToX (TimeSpan.FromSeconds ((beat * 60) / tempo));  	e.Graphics.DrawLine (foregroundPen' x' this.Height - height' x' this.Height);  	if (beat % 4 == 0) {  		int measure = beat / 4;  		e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  	}  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: for (int beat = 0; x < this.Width; beat++) {  	int height = (beat % 4 == 0) ? measureTickHeight : beatTickHeight;  	//x = beat * pixelsPerBeat;  	x = TimeToX (TimeSpan.FromSeconds ((beat * 60) / tempo));  	e.Graphics.DrawLine (foregroundPen' x' this.Height - height' x' this.Height);  	if (beat % 4 == 0) {  		int measure = beat / 4;  		e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  	}  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: x = TimeToX (TimeSpan.FromSeconds ((beat * 60) / tempo));  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: if (beat % 4 == 0) {  	int measure = beat / 4;  	e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: if (beat % 4 == 0) {  	int measure = beat / 4;  	e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: if (beat % 4 == 0) {  	int measure = beat / 4;  	e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  }  
Magic Number,NAudio.Gui.TrackView,TimeLine,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\TimeLine.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString (measure.ToString ()' this.Font' foregroundBrush' new PointF (x + 2' this.Height - measureTickHeight));  
Magic Number,NAudio.Gui.TrackView,Track,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\TrackView\Track.cs,Track,The following statement contains a magic number: this.height = 30;  
Magic Number,NAudio.Midi,ControlChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\ControlChangeEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + (c << 8) + (controllerValue << 16);  
Magic Number,NAudio.Midi,ControlChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\ControlChangeEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + (c << 8) + (controllerValue << 16);  
Magic Number,NAudio.Midi,KeySignatureEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\KeySignatureEvent.cs,KeySignatureEvent,The following statement contains a magic number: if (length != 2) {  	throw new FormatException ("Invalid key signature length");  }  
Magic Number,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,FromRawMessage,The following statement contains a magic number: switch (commandCode) {  case MidiCommandCode.NoteOn:  case MidiCommandCode.NoteOff:  case MidiCommandCode.KeyAfterTouch:  	if (data2 > 0 && commandCode == MidiCommandCode.NoteOn) {  		me = new NoteOnEvent (absoluteTime' channel' data1' data2' 0);  	}  	else {  		me = new NoteEvent (absoluteTime' channel' commandCode' data1' data2);  	}  	break;  case MidiCommandCode.ControlChange:  	me = new ControlChangeEvent (absoluteTime' channel' (MidiController)data1' data2);  	break;  case MidiCommandCode.PatchChange:  	me = new PatchChangeEvent (absoluteTime' channel' data1);  	break;  case MidiCommandCode.ChannelAfterTouch:  	me = new ChannelAfterTouchEvent (absoluteTime' channel' data1);  	break;  case MidiCommandCode.PitchWheelChange:  	me = new PitchWheelChangeEvent (absoluteTime' channel' data1 + (data2 << 7));  	break;  case MidiCommandCode.TimingClock:  case MidiCommandCode.StartSequence:  case MidiCommandCode.ContinueSequence:  case MidiCommandCode.StopSequence:  case MidiCommandCode.AutoSensing:  	me = new MidiEvent (absoluteTime' channel' commandCode);  	break;  case MidiCommandCode.MetaEvent:  case MidiCommandCode.Sysex:  default:  	throw new FormatException (String.Format ("Unsupported MIDI Command Code for Raw Message {0}"' commandCode));  }  
Magic Number,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,FromRawMessage,The following statement contains a magic number: me = new PitchWheelChangeEvent (absoluteTime' channel' data1 + (data2 << 7));  
Magic Number,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,ReadVarInt,The following statement contains a magic number: for (int n = 0; n < 4; n++) {  	b = br.ReadByte ();  	value <<= 7;  	value += (b & 0x7F);  	if ((b & 0x80) == 0) {  		return value;  	}  }  
Magic Number,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,ReadVarInt,The following statement contains a magic number: for (int n = 0; n < 4; n++) {  	b = br.ReadByte ();  	value <<= 7;  	value += (b & 0x7F);  	if ((b & 0x80) == 0) {  		return value;  	}  }  
Magic Number,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,ReadVarInt,The following statement contains a magic number: value <<= 7;  
Magic Number,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,WriteVarInt,The following statement contains a magic number: do {  	buffer [n++] = (byte)(value & 0x7F);  	value >>= 7;  }  while (value > 0);  
Magic Number,NAudio.Midi,MidiEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiEvent.cs,WriteVarInt,The following statement contains a magic number: value >>= 7;  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,MidiFile,The following statement contains a magic number: using (br) {  	string chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  	if (chunkHeader != "MThd") {  		throw new FormatException ("Not a MIDI file - header chunk missing");  	}  	uint chunkSize = SwapUInt32 (br.ReadUInt32 ());  	if (chunkSize != 6) {  		throw new FormatException ("Unexpected header chunk length");  	}  	// 0 = single track' 1 = multi-track synchronous' 2 = multi-track asynchronous  	fileFormat = SwapUInt16 (br.ReadUInt16 ());  	int tracks = SwapUInt16 (br.ReadUInt16 ());  	deltaTicksPerQuarterNote = SwapUInt16 (br.ReadUInt16 ());  	events = new MidiEventCollection ((fileFormat == 0) ? 0 : 1' deltaTicksPerQuarterNote);  	for (int n = 0; n < tracks; n++) {  		events.AddTrack ();  	}  	long absoluteTime = 0;  	for (int track = 0; track < tracks; track++) {  		if (fileFormat == 1) {  			absoluteTime = 0;  		}  		chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  		if (chunkHeader != "MTrk") {  			throw new FormatException ("Invalid chunk header");  		}  		chunkSize = SwapUInt32 (br.ReadUInt32 ());  		long startPos = br.BaseStream.Position;  		MidiEvent me = null;  		List<NoteOnEvent> outstandingNoteOns = new List<NoteOnEvent> ();  		while (br.BaseStream.Position < startPos + chunkSize) {  			me = MidiEvent.ReadNextEvent (br' me);  			absoluteTime += me.DeltaTime;  			me.AbsoluteTime = absoluteTime;  			events [track].Add (me);  			if (me.CommandCode == MidiCommandCode.NoteOn) {  				NoteEvent ne = (NoteEvent)me;  				if (ne.Velocity > 0) {  					outstandingNoteOns.Add ((NoteOnEvent)ne);  				}  				else {  					// don't remove the note offs' even though  					// they are annoying  					// events[track].Remove(me);  					FindNoteOn (ne' outstandingNoteOns);  				}  			}  			else if (me.CommandCode == MidiCommandCode.NoteOff) {  				FindNoteOn ((NoteEvent)me' outstandingNoteOns);  			}  			else if (me.CommandCode == MidiCommandCode.MetaEvent) {  				MetaEvent metaEvent = (MetaEvent)me;  				if (metaEvent.MetaEventType == MetaEventType.EndTrack) {  					//break;  					// some dodgy MIDI files have an event after end track  					if (strictChecking) {  						if (br.BaseStream.Position < startPos + chunkSize) {  							throw new FormatException (String.Format ("End Track event was not the last MIDI event on track {0}"' track));  						}  					}  				}  			}  		}  		if (outstandingNoteOns.Count > 0) {  			if (strictChecking) {  				throw new FormatException (String.Format ("Note ons without note offs {0} (file format {1})"' outstandingNoteOns.Count' fileFormat));  			}  		}  		if (br.BaseStream.Position != startPos + chunkSize) {  			throw new FormatException (String.Format ("Read too far {0}+{1}!={2}"' chunkSize' startPos' br.BaseStream.Position));  		}  	}  }  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,MidiFile,The following statement contains a magic number: using (br) {  	string chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  	if (chunkHeader != "MThd") {  		throw new FormatException ("Not a MIDI file - header chunk missing");  	}  	uint chunkSize = SwapUInt32 (br.ReadUInt32 ());  	if (chunkSize != 6) {  		throw new FormatException ("Unexpected header chunk length");  	}  	// 0 = single track' 1 = multi-track synchronous' 2 = multi-track asynchronous  	fileFormat = SwapUInt16 (br.ReadUInt16 ());  	int tracks = SwapUInt16 (br.ReadUInt16 ());  	deltaTicksPerQuarterNote = SwapUInt16 (br.ReadUInt16 ());  	events = new MidiEventCollection ((fileFormat == 0) ? 0 : 1' deltaTicksPerQuarterNote);  	for (int n = 0; n < tracks; n++) {  		events.AddTrack ();  	}  	long absoluteTime = 0;  	for (int track = 0; track < tracks; track++) {  		if (fileFormat == 1) {  			absoluteTime = 0;  		}  		chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  		if (chunkHeader != "MTrk") {  			throw new FormatException ("Invalid chunk header");  		}  		chunkSize = SwapUInt32 (br.ReadUInt32 ());  		long startPos = br.BaseStream.Position;  		MidiEvent me = null;  		List<NoteOnEvent> outstandingNoteOns = new List<NoteOnEvent> ();  		while (br.BaseStream.Position < startPos + chunkSize) {  			me = MidiEvent.ReadNextEvent (br' me);  			absoluteTime += me.DeltaTime;  			me.AbsoluteTime = absoluteTime;  			events [track].Add (me);  			if (me.CommandCode == MidiCommandCode.NoteOn) {  				NoteEvent ne = (NoteEvent)me;  				if (ne.Velocity > 0) {  					outstandingNoteOns.Add ((NoteOnEvent)ne);  				}  				else {  					// don't remove the note offs' even though  					// they are annoying  					// events[track].Remove(me);  					FindNoteOn (ne' outstandingNoteOns);  				}  			}  			else if (me.CommandCode == MidiCommandCode.NoteOff) {  				FindNoteOn ((NoteEvent)me' outstandingNoteOns);  			}  			else if (me.CommandCode == MidiCommandCode.MetaEvent) {  				MetaEvent metaEvent = (MetaEvent)me;  				if (metaEvent.MetaEventType == MetaEventType.EndTrack) {  					//break;  					// some dodgy MIDI files have an event after end track  					if (strictChecking) {  						if (br.BaseStream.Position < startPos + chunkSize) {  							throw new FormatException (String.Format ("End Track event was not the last MIDI event on track {0}"' track));  						}  					}  				}  			}  		}  		if (outstandingNoteOns.Count > 0) {  			if (strictChecking) {  				throw new FormatException (String.Format ("Note ons without note offs {0} (file format {1})"' outstandingNoteOns.Count' fileFormat));  			}  		}  		if (br.BaseStream.Position != startPos + chunkSize) {  			throw new FormatException (String.Format ("Read too far {0}+{1}!={2}"' chunkSize' startPos' br.BaseStream.Position));  		}  	}  }  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,MidiFile,The following statement contains a magic number: using (br) {  	string chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  	if (chunkHeader != "MThd") {  		throw new FormatException ("Not a MIDI file - header chunk missing");  	}  	uint chunkSize = SwapUInt32 (br.ReadUInt32 ());  	if (chunkSize != 6) {  		throw new FormatException ("Unexpected header chunk length");  	}  	// 0 = single track' 1 = multi-track synchronous' 2 = multi-track asynchronous  	fileFormat = SwapUInt16 (br.ReadUInt16 ());  	int tracks = SwapUInt16 (br.ReadUInt16 ());  	deltaTicksPerQuarterNote = SwapUInt16 (br.ReadUInt16 ());  	events = new MidiEventCollection ((fileFormat == 0) ? 0 : 1' deltaTicksPerQuarterNote);  	for (int n = 0; n < tracks; n++) {  		events.AddTrack ();  	}  	long absoluteTime = 0;  	for (int track = 0; track < tracks; track++) {  		if (fileFormat == 1) {  			absoluteTime = 0;  		}  		chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  		if (chunkHeader != "MTrk") {  			throw new FormatException ("Invalid chunk header");  		}  		chunkSize = SwapUInt32 (br.ReadUInt32 ());  		long startPos = br.BaseStream.Position;  		MidiEvent me = null;  		List<NoteOnEvent> outstandingNoteOns = new List<NoteOnEvent> ();  		while (br.BaseStream.Position < startPos + chunkSize) {  			me = MidiEvent.ReadNextEvent (br' me);  			absoluteTime += me.DeltaTime;  			me.AbsoluteTime = absoluteTime;  			events [track].Add (me);  			if (me.CommandCode == MidiCommandCode.NoteOn) {  				NoteEvent ne = (NoteEvent)me;  				if (ne.Velocity > 0) {  					outstandingNoteOns.Add ((NoteOnEvent)ne);  				}  				else {  					// don't remove the note offs' even though  					// they are annoying  					// events[track].Remove(me);  					FindNoteOn (ne' outstandingNoteOns);  				}  			}  			else if (me.CommandCode == MidiCommandCode.NoteOff) {  				FindNoteOn ((NoteEvent)me' outstandingNoteOns);  			}  			else if (me.CommandCode == MidiCommandCode.MetaEvent) {  				MetaEvent metaEvent = (MetaEvent)me;  				if (metaEvent.MetaEventType == MetaEventType.EndTrack) {  					//break;  					// some dodgy MIDI files have an event after end track  					if (strictChecking) {  						if (br.BaseStream.Position < startPos + chunkSize) {  							throw new FormatException (String.Format ("End Track event was not the last MIDI event on track {0}"' track));  						}  					}  				}  			}  		}  		if (outstandingNoteOns.Count > 0) {  			if (strictChecking) {  				throw new FormatException (String.Format ("Note ons without note offs {0} (file format {1})"' outstandingNoteOns.Count' fileFormat));  			}  		}  		if (br.BaseStream.Position != startPos + chunkSize) {  			throw new FormatException (String.Format ("Read too far {0}+{1}!={2}"' chunkSize' startPos' br.BaseStream.Position));  		}  	}  }  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,MidiFile,The following statement contains a magic number: if (chunkSize != 6) {  	throw new FormatException ("Unexpected header chunk length");  }  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,MidiFile,The following statement contains a magic number: for (int track = 0; track < tracks; track++) {  	if (fileFormat == 1) {  		absoluteTime = 0;  	}  	chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  	if (chunkHeader != "MTrk") {  		throw new FormatException ("Invalid chunk header");  	}  	chunkSize = SwapUInt32 (br.ReadUInt32 ());  	long startPos = br.BaseStream.Position;  	MidiEvent me = null;  	List<NoteOnEvent> outstandingNoteOns = new List<NoteOnEvent> ();  	while (br.BaseStream.Position < startPos + chunkSize) {  		me = MidiEvent.ReadNextEvent (br' me);  		absoluteTime += me.DeltaTime;  		me.AbsoluteTime = absoluteTime;  		events [track].Add (me);  		if (me.CommandCode == MidiCommandCode.NoteOn) {  			NoteEvent ne = (NoteEvent)me;  			if (ne.Velocity > 0) {  				outstandingNoteOns.Add ((NoteOnEvent)ne);  			}  			else {  				// don't remove the note offs' even though  				// they are annoying  				// events[track].Remove(me);  				FindNoteOn (ne' outstandingNoteOns);  			}  		}  		else if (me.CommandCode == MidiCommandCode.NoteOff) {  			FindNoteOn ((NoteEvent)me' outstandingNoteOns);  		}  		else if (me.CommandCode == MidiCommandCode.MetaEvent) {  			MetaEvent metaEvent = (MetaEvent)me;  			if (metaEvent.MetaEventType == MetaEventType.EndTrack) {  				//break;  				// some dodgy MIDI files have an event after end track  				if (strictChecking) {  					if (br.BaseStream.Position < startPos + chunkSize) {  						throw new FormatException (String.Format ("End Track event was not the last MIDI event on track {0}"' track));  					}  				}  			}  		}  	}  	if (outstandingNoteOns.Count > 0) {  		if (strictChecking) {  			throw new FormatException (String.Format ("Note ons without note offs {0} (file format {1})"' outstandingNoteOns.Count' fileFormat));  		}  	}  	if (br.BaseStream.Position != startPos + chunkSize) {  		throw new FormatException (String.Format ("Read too far {0}+{1}!={2}"' chunkSize' startPos' br.BaseStream.Position));  	}  }  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,MidiFile,The following statement contains a magic number: chunkHeader = Encoding.ASCII.GetString (br.ReadBytes (4));  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,SwapUInt32,The following statement contains a magic number: return ((i & 0xFF000000) >> 24) | ((i & 0x00FF0000) >> 8) | ((i & 0x0000FF00) << 8) | ((i & 0x000000FF) << 24);  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,SwapUInt32,The following statement contains a magic number: return ((i & 0xFF000000) >> 24) | ((i & 0x00FF0000) >> 8) | ((i & 0x0000FF00) << 8) | ((i & 0x000000FF) << 24);  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,SwapUInt32,The following statement contains a magic number: return ((i & 0xFF000000) >> 24) | ((i & 0x00FF0000) >> 8) | ((i & 0x0000FF00) << 8) | ((i & 0x000000FF) << 24);  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,SwapUInt32,The following statement contains a magic number: return ((i & 0xFF000000) >> 24) | ((i & 0x00FF0000) >> 8) | ((i & 0x0000FF00) << 8) | ((i & 0x000000FF) << 24);  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,SwapUInt16,The following statement contains a magic number: return (ushort)(((i & 0xFF00) >> 8) | ((i & 0x00FF) << 8));  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,SwapUInt16,The following statement contains a magic number: return (ushort)(((i & 0xFF00) >> 8) | ((i & 0x00FF) << 8));  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,Export,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (File.Create (filename))) {  	writer.Write (Encoding.ASCII.GetBytes ("MThd"));  	writer.Write (SwapUInt32 ((uint)6));  	// chunk size  	writer.Write (SwapUInt16 ((ushort)events.MidiFileType));  	writer.Write (SwapUInt16 ((ushort)events.Tracks));  	writer.Write (SwapUInt16 ((ushort)events.DeltaTicksPerQuarterNote));  	for (int track = 0; track < events.Tracks; track++) {  		IList<MidiEvent> eventList = events [track];  		writer.Write (Encoding.ASCII.GetBytes ("MTrk"));  		long trackSizePosition = writer.BaseStream.Position;  		writer.Write (SwapUInt32 ((uint)0));  		long absoluteTime = events.StartAbsoluteTime;  		// use a stable sort to preserve ordering of MIDI events whose   		// absolute times are the same  		//eventList.Sort(new MidiEventComparer());                      		MergeSort.Sort (eventList' new MidiEventComparer ());  		if (eventList.Count > 0) {  			System.Diagnostics.Debug.Assert (MidiEvent.IsEndTrack (eventList [eventList.Count - 1])' "Exporting a track with a missing end track");  		}  		foreach (MidiEvent midiEvent in eventList) {  			midiEvent.Export (ref absoluteTime' writer);  		}  		uint trackChunkLength = (uint)(writer.BaseStream.Position - trackSizePosition) - 4;  		writer.BaseStream.Position = trackSizePosition;  		writer.Write (SwapUInt32 (trackChunkLength));  		writer.BaseStream.Position += trackChunkLength;  	}  }  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,Export,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (File.Create (filename))) {  	writer.Write (Encoding.ASCII.GetBytes ("MThd"));  	writer.Write (SwapUInt32 ((uint)6));  	// chunk size  	writer.Write (SwapUInt16 ((ushort)events.MidiFileType));  	writer.Write (SwapUInt16 ((ushort)events.Tracks));  	writer.Write (SwapUInt16 ((ushort)events.DeltaTicksPerQuarterNote));  	for (int track = 0; track < events.Tracks; track++) {  		IList<MidiEvent> eventList = events [track];  		writer.Write (Encoding.ASCII.GetBytes ("MTrk"));  		long trackSizePosition = writer.BaseStream.Position;  		writer.Write (SwapUInt32 ((uint)0));  		long absoluteTime = events.StartAbsoluteTime;  		// use a stable sort to preserve ordering of MIDI events whose   		// absolute times are the same  		//eventList.Sort(new MidiEventComparer());                      		MergeSort.Sort (eventList' new MidiEventComparer ());  		if (eventList.Count > 0) {  			System.Diagnostics.Debug.Assert (MidiEvent.IsEndTrack (eventList [eventList.Count - 1])' "Exporting a track with a missing end track");  		}  		foreach (MidiEvent midiEvent in eventList) {  			midiEvent.Export (ref absoluteTime' writer);  		}  		uint trackChunkLength = (uint)(writer.BaseStream.Position - trackSizePosition) - 4;  		writer.BaseStream.Position = trackSizePosition;  		writer.Write (SwapUInt32 (trackChunkLength));  		writer.BaseStream.Position += trackChunkLength;  	}  }  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,Export,The following statement contains a magic number: writer.Write (SwapUInt32 ((uint)6));  
Magic Number,NAudio.Midi,MidiFile,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiFile.cs,Export,The following statement contains a magic number: for (int track = 0; track < events.Tracks; track++) {  	IList<MidiEvent> eventList = events [track];  	writer.Write (Encoding.ASCII.GetBytes ("MTrk"));  	long trackSizePosition = writer.BaseStream.Position;  	writer.Write (SwapUInt32 ((uint)0));  	long absoluteTime = events.StartAbsoluteTime;  	// use a stable sort to preserve ordering of MIDI events whose   	// absolute times are the same  	//eventList.Sort(new MidiEventComparer());                      	MergeSort.Sort (eventList' new MidiEventComparer ());  	if (eventList.Count > 0) {  		System.Diagnostics.Debug.Assert (MidiEvent.IsEndTrack (eventList [eventList.Count - 1])' "Exporting a track with a missing end track");  	}  	foreach (MidiEvent midiEvent in eventList) {  		midiEvent.Export (ref absoluteTime' writer);  	}  	uint trackChunkLength = (uint)(writer.BaseStream.Position - trackSizePosition) - 4;  	writer.BaseStream.Position = trackSizePosition;  	writer.Write (SwapUInt32 (trackChunkLength));  	writer.BaseStream.Position += trackChunkLength;  }  
Magic Number,NAudio.Midi,MidiMessage,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiMessage.cs,MidiMessage,The following statement contains a magic number: rawData = status + (data1 << 8) + (data2 << 16);  
Magic Number,NAudio.Midi,MidiMessage,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiMessage.cs,MidiMessage,The following statement contains a magic number: rawData = status + (data1 << 8) + (data2 << 16);  
Magic Number,NAudio.Midi,NoteEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\NoteEvent.cs,NoteEvent,The following statement contains a magic number: if (velocity > 127) {  	velocity = 127;  }  
Magic Number,NAudio.Midi,NoteEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\NoteEvent.cs,NoteEvent,The following statement contains a magic number: if (velocity > 127) {  	velocity = 127;  }  
Magic Number,NAudio.Midi,NoteEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\NoteEvent.cs,NoteEvent,The following statement contains a magic number: velocity = 127;  
Magic Number,NAudio.Midi,NoteEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\NoteEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + (noteNumber << 8) + (velocity << 16);  
Magic Number,NAudio.Midi,NoteEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\NoteEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + (noteNumber << 8) + (velocity << 16);  
Magic Number,NAudio.Midi,PatchChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\PatchChangeEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + (this.patch << 8);  
Magic Number,NAudio.Midi,PitchWheelChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\PitchWheelChangeEvent.cs,PitchWheelChangeEvent,The following statement contains a magic number: pitch = b1 + (b2 << 7);  
Magic Number,NAudio.Midi,PitchWheelChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\PitchWheelChangeEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + ((pitch & 0x7f) << 8) + (((pitch >> 7) & 0x7f) << 16);  
Magic Number,NAudio.Midi,PitchWheelChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\PitchWheelChangeEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + ((pitch & 0x7f) << 8) + (((pitch >> 7) & 0x7f) << 16);  
Magic Number,NAudio.Midi,PitchWheelChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\PitchWheelChangeEvent.cs,GetAsShortMessage,The following statement contains a magic number: return base.GetAsShortMessage () + ((pitch & 0x7f) << 8) + (((pitch >> 7) & 0x7f) << 16);  
Magic Number,NAudio.Midi,PitchWheelChangeEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\PitchWheelChangeEvent.cs,Export,The following statement contains a magic number: writer.Write ((byte)((pitch >> 7) & 0x7f));  
Magic Number,NAudio.Midi,SmpteOffsetEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\SmpteOffsetEvent.cs,SmpteOffsetEvent,The following statement contains a magic number: if (length != 5) {  	throw new FormatException (String.Format ("Invalid SMPTE Offset length: Got {0}' expected 5"' length));  }  
Magic Number,NAudio.Midi,TempoEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TempoEvent.cs,TempoEvent,The following statement contains a magic number: if (length != 3) {  	throw new FormatException ("Invalid tempo length");  }  
Magic Number,NAudio.Midi,TempoEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TempoEvent.cs,TempoEvent,The following statement contains a magic number: microsecondsPerQuarterNote = (br.ReadByte () << 16) + (br.ReadByte () << 8) + br.ReadByte ();  
Magic Number,NAudio.Midi,TempoEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TempoEvent.cs,TempoEvent,The following statement contains a magic number: microsecondsPerQuarterNote = (br.ReadByte () << 16) + (br.ReadByte () << 8) + br.ReadByte ();  
Magic Number,NAudio.Midi,TempoEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TempoEvent.cs,ToString,The following statement contains a magic number: return String.Format ("{0} {2}bpm ({1})"' base.ToString ()' microsecondsPerQuarterNote' (60000000 / microsecondsPerQuarterNote));  
Magic Number,NAudio.Midi,TempoEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TempoEvent.cs,Export,The following statement contains a magic number: writer.Write ((byte)((microsecondsPerQuarterNote >> 16) & 0xFF));  
Magic Number,NAudio.Midi,TempoEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TempoEvent.cs,Export,The following statement contains a magic number: writer.Write ((byte)((microsecondsPerQuarterNote >> 8) & 0xFF));  
Magic Number,NAudio.Midi,TimeSignatureEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TimeSignatureEvent.cs,TimeSignatureEvent,The following statement contains a magic number: if (length != 4) {  	throw new FormatException (String.Format ("Invalid time signature length: Got {0}' expected 4"' length));  }  
Magic Number,NAudio.Midi,TrackSequenceNumberEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TrackSequenceNumberEvent.cs,TrackSequenceNumberEvent,The following statement contains a magic number: if (length != 2) {  	throw new FormatException ("Invalid sequence number length");  }  
Magic Number,NAudio.Midi,TrackSequenceNumberEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TrackSequenceNumberEvent.cs,TrackSequenceNumberEvent,The following statement contains a magic number: sequenceNumber = (ushort)((br.ReadByte () << 8) + br.ReadByte ());  
Magic Number,NAudio.Midi,TrackSequenceNumberEvent,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\TrackSequenceNumberEvent.cs,Export,The following statement contains a magic number: writer.Write ((byte)((sequenceNumber >> 8) & 0xFF));  
Magic Number,NAudio.Utils,HResult,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Utils\HResult.cs,MAKE_HRESULT,The following statement contains a magic number: return (int)(((uint)sev) << 31 | ((uint)fac) << 16 | ((uint)code));  
Magic Number,NAudio.Utils,HResult,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Utils\HResult.cs,MAKE_HRESULT,The following statement contains a magic number: return (int)(((uint)sev) << 31 | ((uint)fac) << 16 | ((uint)code));  
Magic Number,NAudio.Wave.Asio,ASIODriverExt,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriverExt.cs,AsioMessageCallBack,The following statement contains a magic number: switch (selector) {  case ASIOMessageSelector.kAsioSelectorSupported:  	ASIOMessageSelector subValue = (ASIOMessageSelector)Enum.ToObject (typeof(ASIOMessageSelector)' value);  	switch (subValue) {  	case ASIOMessageSelector.kAsioEngineVersion:  		return 1;  	case ASIOMessageSelector.kAsioResetRequest:  		return 0;  	case ASIOMessageSelector.kAsioBufferSizeChange:  		return 0;  	case ASIOMessageSelector.kAsioResyncRequest:  		return 0;  	case ASIOMessageSelector.kAsioLatenciesChanged:  		return 0;  	case ASIOMessageSelector.kAsioSupportsTimeInfo:  		//                            return 1; DON'T SUPPORT FOR NOW. NEED MORE TESTING.  		return 0;  	case ASIOMessageSelector.kAsioSupportsTimeCode:  		//                            return 1; DON'T SUPPORT FOR NOW. NEED MORE TESTING.  		return 0;  	}  	break;  case ASIOMessageSelector.kAsioEngineVersion:  	return 2;  case ASIOMessageSelector.kAsioResetRequest:  	return 1;  case ASIOMessageSelector.kAsioBufferSizeChange:  	return 0;  case ASIOMessageSelector.kAsioResyncRequest:  	return 0;  case ASIOMessageSelector.kAsioLatenciesChanged:  	return 0;  case ASIOMessageSelector.kAsioSupportsTimeInfo:  	return 0;  case ASIOMessageSelector.kAsioSupportsTimeCode:  	return 0;  }  
Magic Number,NAudio.Wave.Asio,ASIODriverExt,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriverExt.cs,AsioMessageCallBack,The following statement contains a magic number: return 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (asioType) {  case ASIOSampleType.ASIOSTInt32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt16LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  		break;  	case 32:  		convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTInt24LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatTo24LSBGeneric;  		break;  	}  	break;  case ASIOSampleType.ASIOSTFloat32LSB:  	switch (waveFormat.BitsPerSample) {  	case 16:  		throw new ArgumentException ("Not a supported conversion");  	case 32:  		convertor = ConverterFloatToFloatGeneric;  		break;  	}  	break;  default:  	throw new ArgumentException (String.Format ("ASIO Buffer Type {0} is not yet supported."' Enum.GetName (typeof(ASIOSampleType)' asioType)));  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  	break;  case 32:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  	break;  case 32:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  	break;  case 32:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  	break;  case 32:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	throw new ArgumentException ("Not a supported conversion");  case 32:  	convertor = ConverterFloatTo24LSBGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	throw new ArgumentException ("Not a supported conversion");  case 32:  	convertor = ConverterFloatTo24LSBGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	throw new ArgumentException ("Not a supported conversion");  case 32:  	convertor = ConverterFloatToFloatGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following statement contains a magic number: switch (waveFormat.BitsPerSample) {  case 16:  	throw new ArgumentException ("Not a supported conversion");  case 32:  	convertor = ConverterFloatToFloatGeneric;  	break;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: unsafe {  	short* inputSamples = (short*)inputInterleavedBuffer;  	// Use a trick (short instead of int to avoid any convertion from 16Bit to 32Bit)  	short* leftSamples = (short*)asioOutputBuffers [0];  	short* rightSamples = (short*)asioOutputBuffers [1];  	// Point to upper 16 bits of the 32Bits.  	leftSamples++;  	rightSamples++;  	for (int i = 0; i < nbSamples; i++) {  		*leftSamples = inputSamples [0];  		*rightSamples = inputSamples [1];  		// Go to next sample  		inputSamples += 2;  		// Add 4 Bytes  		leftSamples += 2;  		rightSamples += 2;  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: unsafe {  	short* inputSamples = (short*)inputInterleavedBuffer;  	// Use a trick (short instead of int to avoid any convertion from 16Bit to 32Bit)  	short* leftSamples = (short*)asioOutputBuffers [0];  	short* rightSamples = (short*)asioOutputBuffers [1];  	// Point to upper 16 bits of the 32Bits.  	leftSamples++;  	rightSamples++;  	for (int i = 0; i < nbSamples; i++) {  		*leftSamples = inputSamples [0];  		*rightSamples = inputSamples [1];  		// Go to next sample  		inputSamples += 2;  		// Add 4 Bytes  		leftSamples += 2;  		rightSamples += 2;  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: unsafe {  	short* inputSamples = (short*)inputInterleavedBuffer;  	// Use a trick (short instead of int to avoid any convertion from 16Bit to 32Bit)  	short* leftSamples = (short*)asioOutputBuffers [0];  	short* rightSamples = (short*)asioOutputBuffers [1];  	// Point to upper 16 bits of the 32Bits.  	leftSamples++;  	rightSamples++;  	for (int i = 0; i < nbSamples; i++) {  		*leftSamples = inputSamples [0];  		*rightSamples = inputSamples [1];  		// Go to next sample  		inputSamples += 2;  		// Add 4 Bytes  		leftSamples += 2;  		rightSamples += 2;  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	*leftSamples = inputSamples [0];  	*rightSamples = inputSamples [1];  	// Go to next sample  	inputSamples += 2;  	// Add 4 Bytes  	leftSamples += 2;  	rightSamples += 2;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	*leftSamples = inputSamples [0];  	*rightSamples = inputSamples [1];  	// Go to next sample  	inputSamples += 2;  	// Add 4 Bytes  	leftSamples += 2;  	rightSamples += 2;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	*leftSamples = inputSamples [0];  	*rightSamples = inputSamples [1];  	// Go to next sample  	inputSamples += 2;  	// Add 4 Bytes  	leftSamples += 2;  	rightSamples += 2;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: inputSamples += 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: leftSamples += 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToInt2Channels,The following statement contains a magic number: rightSamples += 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToIntGeneric,The following statement contains a magic number: unsafe {  	short* inputSamples = (short*)inputInterleavedBuffer;  	// Use a trick (short instead of int to avoid any convertion from 16Bit to 32Bit)  	short*[] samples = new short*[nbChannels];  	for (int i = 0; i < nbChannels; i++) {  		samples [i] = (short*)asioOutputBuffers [i];  		// Point to upper 16 bits of the 32Bits.  		samples [i]++;  	}  	for (int i = 0; i < nbSamples; i++) {  		for (int j = 0; j < nbChannels; j++) {  			*samples [j] = *inputSamples++;  			samples [j] += 2;  		}  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToIntGeneric,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	for (int j = 0; j < nbChannels; j++) {  		*samples [j] = *inputSamples++;  		samples [j] += 2;  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToIntGeneric,The following statement contains a magic number: for (int j = 0; j < nbChannels; j++) {  	*samples [j] = *inputSamples++;  	samples [j] += 2;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToIntGeneric,The following statement contains a magic number: samples [j] += 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorFloatToInt2Channels,The following statement contains a magic number: unsafe {  	float* inputSamples = (float*)inputInterleavedBuffer;  	int* leftSamples = (int*)asioOutputBuffers [0];  	int* rightSamples = (int*)asioOutputBuffers [1];  	for (int i = 0; i < nbSamples; i++) {  		*leftSamples++ = clampToInt (inputSamples [0]);  		*rightSamples++ = clampToInt (inputSamples [1]);  		inputSamples += 2;  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorFloatToInt2Channels,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	*leftSamples++ = clampToInt (inputSamples [0]);  	*rightSamples++ = clampToInt (inputSamples [1]);  	inputSamples += 2;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorFloatToInt2Channels,The following statement contains a magic number: inputSamples += 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToShort2Channels,The following statement contains a magic number: unsafe {  	short* inputSamples = (short*)inputInterleavedBuffer;  	// Use a trick (short instead of int to avoid any convertion from 16Bit to 32Bit)  	short* leftSamples = (short*)asioOutputBuffers [0];  	short* rightSamples = (short*)asioOutputBuffers [1];  	// Point to upper 16 bits of the 32Bits.  	for (int i = 0; i < nbSamples; i++) {  		*leftSamples++ = inputSamples [0];  		*rightSamples++ = inputSamples [1];  		// Go to next sample  		inputSamples += 2;  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToShort2Channels,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	*leftSamples++ = inputSamples [0];  	*rightSamples++ = inputSamples [1];  	// Go to next sample  	inputSamples += 2;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorShortToShort2Channels,The following statement contains a magic number: inputSamples += 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorFloatToShort2Channels,The following statement contains a magic number: unsafe {  	float* inputSamples = (float*)inputInterleavedBuffer;  	// Use a trick (short instead of int to avoid any convertion from 16Bit to 32Bit)  	short* leftSamples = (short*)asioOutputBuffers [0];  	short* rightSamples = (short*)asioOutputBuffers [1];  	for (int i = 0; i < nbSamples; i++) {  		*leftSamples++ = clampToShort (inputSamples [0]);  		*rightSamples++ = clampToShort (inputSamples [1]);  		inputSamples += 2;  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorFloatToShort2Channels,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	*leftSamples++ = clampToShort (inputSamples [0]);  	*rightSamples++ = clampToShort (inputSamples [1]);  	inputSamples += 2;  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConvertorFloatToShort2Channels,The following statement contains a magic number: inputSamples += 2;  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: unsafe {  	float* inputSamples = (float*)inputInterleavedBuffer;  	byte*[] samples = new byte*[nbChannels];  	for (int i = 0; i < nbChannels; i++) {  		samples [i] = (byte*)asioOutputBuffers [i];  	}  	for (int i = 0; i < nbSamples; i++) {  		for (int j = 0; j < nbChannels; j++) {  			int sample24 = clampTo24Bit (*inputSamples++);  			*(samples [j]++) = (byte)(sample24);  			*(samples [j]++) = (byte)(sample24 >> 8);  			*(samples [j]++) = (byte)(sample24 >> 16);  		}  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: unsafe {  	float* inputSamples = (float*)inputInterleavedBuffer;  	byte*[] samples = new byte*[nbChannels];  	for (int i = 0; i < nbChannels; i++) {  		samples [i] = (byte*)asioOutputBuffers [i];  	}  	for (int i = 0; i < nbSamples; i++) {  		for (int j = 0; j < nbChannels; j++) {  			int sample24 = clampTo24Bit (*inputSamples++);  			*(samples [j]++) = (byte)(sample24);  			*(samples [j]++) = (byte)(sample24 >> 8);  			*(samples [j]++) = (byte)(sample24 >> 16);  		}  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	for (int j = 0; j < nbChannels; j++) {  		int sample24 = clampTo24Bit (*inputSamples++);  		*(samples [j]++) = (byte)(sample24);  		*(samples [j]++) = (byte)(sample24 >> 8);  		*(samples [j]++) = (byte)(sample24 >> 16);  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: for (int i = 0; i < nbSamples; i++) {  	for (int j = 0; j < nbChannels; j++) {  		int sample24 = clampTo24Bit (*inputSamples++);  		*(samples [j]++) = (byte)(sample24);  		*(samples [j]++) = (byte)(sample24 >> 8);  		*(samples [j]++) = (byte)(sample24 >> 16);  	}  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: for (int j = 0; j < nbChannels; j++) {  	int sample24 = clampTo24Bit (*inputSamples++);  	*(samples [j]++) = (byte)(sample24);  	*(samples [j]++) = (byte)(sample24 >> 8);  	*(samples [j]++) = (byte)(sample24 >> 16);  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: for (int j = 0; j < nbChannels; j++) {  	int sample24 = clampTo24Bit (*inputSamples++);  	*(samples [j]++) = (byte)(sample24);  	*(samples [j]++) = (byte)(sample24 >> 8);  	*(samples [j]++) = (byte)(sample24 >> 16);  }  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: *(samples [j]++) = (byte)(sample24 >> 8);  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,ConverterFloatTo24LSBGeneric,The following statement contains a magic number: *(samples [j]++) = (byte)(sample24 >> 16);  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,clampTo24Bit,The following statement contains a magic number: return (int)(sampleValue * 8388607.0);  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,clampToInt,The following statement contains a magic number: return (int)(sampleValue * 2147483647.0);  
Magic Number,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,clampToShort,The following statement contains a magic number: return (short)(sampleValue * 32767.0);  
Magic Number,NAudio.Wave.Compression,AcmStream,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Compression\AcmStream.cs,AcmStream,The following statement contains a magic number: try {  	streamHandle = IntPtr.Zero;  	this.sourceFormat = sourceFormat;  	int sourceBufferSize = Math.Max (65536' sourceFormat.AverageBytesPerSecond);  	sourceBufferSize -= (sourceBufferSize % sourceFormat.BlockAlign);  	MmException.Try (AcmInterop.acmStreamOpen (out streamHandle' IntPtr.Zero' sourceFormat' destFormat' null' IntPtr.Zero' IntPtr.Zero' AcmStreamOpenFlags.NonRealTime)' "acmStreamOpen");  	int destBufferSize = SourceToDest (sourceBufferSize);  	streamHeader = new AcmStreamHeader (streamHandle' sourceBufferSize' destBufferSize);  	driverHandle = IntPtr.Zero;  }  catch {  	// suppress the finalise and clean up resources  	Dispose ();  	throw;  }  
Magic Number,NAudio.Wave.SampleProviders,Mono16SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono16SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 16 && waveFormat.Channels == 1;  
Magic Number,NAudio.Wave.SampleProviders,Mono16SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono16SampleChunkConverter.cs,LoadNextChunk,The following statement contains a magic number: sourceSamples = source.Read (sourceBuffer' 0' sourceBytesRequired) / 2;  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 24 && waveFormat.Channels == 1;  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = sampleLeft;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = sampleLeft;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = sampleLeft;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = sampleLeft;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Mono24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: offset += 3;  
Magic Number,NAudio.Wave.SampleProviders,Mono8SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Mono8SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 8 && waveFormat.Channels == 1;  
Magic Number,NAudio.Wave.SampleProviders,MonoFloatSampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\MonoFloatSampleChunkConverter.cs,LoadNextChunk,The following statement contains a magic number: sourceSamples = source.Read (sourceBuffer' 0' sourceBytesRequired) / 4;  
Magic Number,NAudio.Wave.SampleProviders,Stereo16SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo16SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 16 && waveFormat.Channels == 2;  
Magic Number,NAudio.Wave.SampleProviders,Stereo16SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo16SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 16 && waveFormat.Channels == 2;  
Magic Number,NAudio.Wave.SampleProviders,Stereo16SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo16SampleChunkConverter.cs,LoadNextChunk,The following statement contains a magic number: sourceSamples = source.Read (sourceBuffer' 0' sourceBytesRequired) / 2;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 24 && waveFormat.Channels == 2;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 24 && waveFormat.Channels == 2;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: if (offset < sourceBytes) {  	sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  	offset += 3;  	return true;  }  else {  	sampleLeft = 0.0f;  	sampleRight = 0.0f;  	return false;  }  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleLeft = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: offset += 3;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: sampleRight = (((sbyte)sourceBuffer [offset + 2] << 16) | (sourceBuffer [offset + 1] << 8) | sourceBuffer [offset]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Stereo24SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo24SampleChunkConverter.cs,GetNextSample,The following statement contains a magic number: offset += 3;  
Magic Number,NAudio.Wave.SampleProviders,Stereo8SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo8SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 8 && waveFormat.Channels == 2;  
Magic Number,NAudio.Wave.SampleProviders,Stereo8SampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\Stereo8SampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.Pcm && waveFormat.BitsPerSample == 8 && waveFormat.Channels == 2;  
Magic Number,NAudio.Wave.SampleProviders,StereoFloatSampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\StereoFloatSampleChunkConverter.cs,Supports,The following statement contains a magic number: return waveFormat.Encoding == WaveFormatEncoding.IeeeFloat && waveFormat.Channels == 2;  
Magic Number,NAudio.Wave.SampleProviders,StereoFloatSampleChunkConverter,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleChunkConverters\StereoFloatSampleChunkConverter.cs,LoadNextChunk,The following statement contains a magic number: sourceSamples = source.Read (sourceBuffer' 0' sourceBytesRequired) / 4;  
Magic Number,NAudio.Wave.SampleProviders,PanningSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\PanningSampleProvider.cs,PanningSampleProvider,The following statement contains a magic number: this.waveFormat = WaveFormat.CreateIeeeFloatWaveFormat (source.WaveFormat.SampleRate' 2);  
Magic Number,NAudio.Wave.SampleProviders,PanningSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\PanningSampleProvider.cs,Read,The following statement contains a magic number: return sourceSamplesRead * 2;  
Magic Number,NAudio.Wave.SampleProviders,SampleToWaveProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleToWaveProvider.cs,Read,The following statement contains a magic number: return samplesRead * 4;  
Magic Number,NAudio.Wave.SampleProviders,MonoToStereoSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\MonoToStereoSampleProvider.cs,MonoToStereoSampleProvider,The following statement contains a magic number: this.waveFormat = WaveFormat.CreateIeeeFloatWaveFormat (source.WaveFormat.SampleRate' 2);  
Magic Number,NAudio.Wave.SampleProviders,MonoToStereoSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\MonoToStereoSampleProvider.cs,Read,The following statement contains a magic number: return sourceSamplesRead * 2;  
Magic Number,NAudio.Wave.SampleProviders,WaveToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\WaveToSampleProvider.cs,Read,The following statement contains a magic number: for (int n = 0; n < bytesRead; n += 4) {  	buffer [outputIndex++] = BitConverter.ToSingle (sourceBuffer' n);  }  
Magic Number,NAudio.Wave.SampleProviders,WaveToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\WaveToSampleProvider.cs,Read,The following statement contains a magic number: n += 4
Magic Number,NAudio.Wave.SampleProviders,Pcm16BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm16BitToSampleProvider.cs,Read,The following statement contains a magic number: for (int n = 0; n < bytesRead; n += 2) {  	buffer [outIndex++] = BitConverter.ToInt16 (sourceBuffer' n) / 32768f;  }  
Magic Number,NAudio.Wave.SampleProviders,Pcm16BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm16BitToSampleProvider.cs,Read,The following statement contains a magic number: n += 2
Magic Number,NAudio.Wave.SampleProviders,Pcm16BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm16BitToSampleProvider.cs,Read,The following statement contains a magic number: return bytesRead / 2;  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: for (int n = 0; n < bytesRead; n += 3) {  	buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f;  }  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: for (int n = 0; n < bytesRead; n += 3) {  	buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f;  }  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: for (int n = 0; n < bytesRead; n += 3) {  	buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f;  }  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: for (int n = 0; n < bytesRead; n += 3) {  	buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f;  }  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: n += 3
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: buffer [outIndex++] = (((sbyte)sourceBuffer [n + 2] << 16) | (sourceBuffer [n + 1] << 8) | sourceBuffer [n]) / 8388608f;  
Magic Number,NAudio.Wave.SampleProviders,Pcm24BitToSampleProvider,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\Pcm24BitToSampleProvider.cs,Read,The following statement contains a magic number: return bytesRead / 3;  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.Encoding == WaveFormatEncoding.Pcm) {  	// go to float  	if (waveProvider.WaveFormat.BitsPerSample == 8) {  		sampleProvider = new Pcm8BitToSampleProvider (waveProvider);  	}  	else if (waveProvider.WaveFormat.BitsPerSample == 16) {  		sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  	}  	else if (waveProvider.WaveFormat.BitsPerSample == 24) {  		sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  	}  	else {  		throw new InvalidOperationException ("Unsupported operation");  	}  }  else if (waveProvider.WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	sampleProvider = new WaveToSampleProvider (waveProvider);  }  else {  	throw new ArgumentException ("Unsupported source encoding");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.Encoding == WaveFormatEncoding.Pcm) {  	// go to float  	if (waveProvider.WaveFormat.BitsPerSample == 8) {  		sampleProvider = new Pcm8BitToSampleProvider (waveProvider);  	}  	else if (waveProvider.WaveFormat.BitsPerSample == 16) {  		sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  	}  	else if (waveProvider.WaveFormat.BitsPerSample == 24) {  		sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  	}  	else {  		throw new InvalidOperationException ("Unsupported operation");  	}  }  else if (waveProvider.WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	sampleProvider = new WaveToSampleProvider (waveProvider);  }  else {  	throw new ArgumentException ("Unsupported source encoding");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.Encoding == WaveFormatEncoding.Pcm) {  	// go to float  	if (waveProvider.WaveFormat.BitsPerSample == 8) {  		sampleProvider = new Pcm8BitToSampleProvider (waveProvider);  	}  	else if (waveProvider.WaveFormat.BitsPerSample == 16) {  		sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  	}  	else if (waveProvider.WaveFormat.BitsPerSample == 24) {  		sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  	}  	else {  		throw new InvalidOperationException ("Unsupported operation");  	}  }  else if (waveProvider.WaveFormat.Encoding == WaveFormatEncoding.IeeeFloat) {  	sampleProvider = new WaveToSampleProvider (waveProvider);  }  else {  	throw new ArgumentException ("Unsupported source encoding");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.BitsPerSample == 8) {  	sampleProvider = new Pcm8BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 16) {  	sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 24) {  	sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  }  else {  	throw new InvalidOperationException ("Unsupported operation");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.BitsPerSample == 8) {  	sampleProvider = new Pcm8BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 16) {  	sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 24) {  	sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  }  else {  	throw new InvalidOperationException ("Unsupported operation");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.BitsPerSample == 8) {  	sampleProvider = new Pcm8BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 16) {  	sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 24) {  	sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  }  else {  	throw new InvalidOperationException ("Unsupported operation");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.BitsPerSample == 16) {  	sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 24) {  	sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  }  else {  	throw new InvalidOperationException ("Unsupported operation");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.BitsPerSample == 16) {  	sampleProvider = new Pcm16BitToSampleProvider (waveProvider);  }  else if (waveProvider.WaveFormat.BitsPerSample == 24) {  	sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  }  else {  	throw new InvalidOperationException ("Unsupported operation");  }  
Magic Number,NAudio.Wave.SampleProviders,SampleChannel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\SampleProviders\SampleChannel.cs,SampleChannel,The following statement contains a magic number: if (waveProvider.WaveFormat.BitsPerSample == 24) {  	sampleProvider = new Pcm24BitToSampleProvider (waveProvider);  }  else {  	throw new InvalidOperationException ("Unsupported operation");  }  
Magic Number,NAudio.Wave.WaveFormats,WmaWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WmaWaveFormat.cs,WmaWaveFormat,The following statement contains a magic number: if (channels == 1)  	dwChannelMask = 1;  else if (channels == 2)  	dwChannelMask = 3;  
Magic Number,NAudio.Wave.WaveFormats,WmaWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WmaWaveFormat.cs,WmaWaveFormat,The following statement contains a magic number: if (channels == 1)  	dwChannelMask = 1;  else if (channels == 2)  	dwChannelMask = 3;  
Magic Number,NAudio.Wave.WaveFormats,WmaWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WmaWaveFormat.cs,WmaWaveFormat,The following statement contains a magic number: if (channels == 2)  	dwChannelMask = 3;  
Magic Number,NAudio.Wave.WaveFormats,WmaWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WmaWaveFormat.cs,WmaWaveFormat,The following statement contains a magic number: if (channels == 2)  	dwChannelMask = 3;  
Magic Number,NAudio.Wave.WaveFormats,WmaWaveFormat,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveFormats\WmaWaveFormat.cs,WmaWaveFormat,The following statement contains a magic number: dwChannelMask = 3;  
Missing Default,NAudio.Wave,WaveOutThreadSafe,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\WaveOutputs\WaveOutThreadSafe.cs,ThreadProc,The following switch statement is missing a default case: switch (waveOutAction.Function) {  case WaveOutFunction.Init:  	Init ((IWaveProvider)waveOutAction.Data);  	break;  case WaveOutFunction.Play:  	Play ();  	break;  case WaveOutFunction.Pause:  	Pause ();  	break;  case WaveOutFunction.Resume:  	Resume ();  	break;  case WaveOutFunction.Stop:  	Stop ();  	break;  case WaveOutFunction.BufferDone:  	OnBufferDone ((WaveOutBuffer)waveOutAction.Data);  	break;  case WaveOutFunction.Exit:  	Exit ();  	return;  case WaveOutFunction.SetVolume:  	SetVolume ((int)waveOutAction.Data);  	break;  }  
Missing Default,NAudio.Gui,LcdPanel,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Gui\LcdPanel.cs,DrawCharacter,The following switch statement is missing a default case: switch (c) {  case ' ':  	break;  case 'A':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [21] = b [22] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'C':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'D':  	b [0] = b [1] = b [2] = true;  	b [5] = b [8] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [28] = true;  	b [30] = b [31] = b [32] = true;  	break;  case 'E':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'F':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = true;  	b [25] = true;  	b [30] = true;  	break;  case 'H':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'I':  	b [1] = b [2] = b [3] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'L':  	b [0] = true;  	b [5] = true;  	b [10] = true;  	b [15] = true;  	b [20] = true;  	b [25] = true;  	b [30] = b [31] = b [32] = b [33] = b [34] = true;  	break;  case 'M':  	b [0] = b [4] = true;  	b [5] = b [6] = b [8] = b [9] = true;  	b [10] = b [12] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'N':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [11] = b [14] = true;  	b [15] = b [17] = b [19] = true;  	b [20] = b [23] = b [24] = true;  	b [25] = b [29] = true;  	b [30] = b [34] = true;  	break;  case 'O':  	b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  case 'R':  	b [0] = b [1] = b [2] = b [3] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [16] = b [17] = b [18] = true;  	b [20] = b [22] = true;  	b [25] = b [28] = true;  	b [30] = b [34] = true;  	break;  case 'S':  	b [1] = b [2] = b [3] = b [4] = true;  	b [5] = true;  	b [10] = true;  	b [16] = b [17] = b [18] = true;  	b [24] = true;  	b [29] = true;  	b [30] = b [31] = b [32] = b [33] = true;  	break;  case 'T':  	b [0] = b [1] = b [2] = b [3] = b [4] = true;  	b [7] = true;  	b [12] = true;  	b [17] = true;  	b [22] = true;  	b [27] = true;  	b [32] = true;  	break;  case 'U':  	b [0] = b [4] = true;  	b [5] = b [9] = true;  	b [10] = b [14] = true;  	b [15] = b [19] = true;  	b [20] = b [24] = true;  	b [25] = b [29] = true;  	b [31] = b [32] = b [33] = true;  	break;  }  
Missing Default,NAudio.Midi,MidiIn,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Midi\MidiIn.cs,Callback,The following switch statement is missing a default case: switch (message) {  case MidiInterop.MidiInMessage.Open:  	// message Parameter 1 & 2 are not used  	break;  case MidiInterop.MidiInMessage.Data:  	// parameter 1 is packed MIDI message  	// parameter 2 is milliseconds since MidiInStart  	if (MessageReceived != null) {  		MessageReceived (this' new MidiInMessageEventArgs (messageParameter1.ToInt32 ()' messageParameter2.ToInt32 ()));  	}  	break;  case MidiInterop.MidiInMessage.Error:  	// parameter 1 is invalid MIDI message  	if (ErrorReceived != null) {  		ErrorReceived (this' new MidiInMessageEventArgs (messageParameter1.ToInt32 ()' messageParameter2.ToInt32 ()));  	}  	break;  case MidiInterop.MidiInMessage.Close:  	// message Parameter 1 & 2 are not used  	break;  case MidiInterop.MidiInMessage.LongData:  	// parameter 1 is pointer to MIDI header  	// parameter 2 is milliseconds since MidiInStart  	break;  case MidiInterop.MidiInMessage.LongError:  	// parameter 1 is pointer to MIDI header  	// parameter 2 is milliseconds since MidiInStart  	break;  case MidiInterop.MidiInMessage.MoreData:  	// parameter 1 is packed MIDI message  	// parameter 2 is milliseconds since MidiInStart  	break;  }  
Missing Default,NAudio.Wave.Asio,ASIODriverExt,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriverExt.cs,AsioMessageCallBack,The following switch statement is missing a default case: switch (selector) {  case ASIOMessageSelector.kAsioSelectorSupported:  	ASIOMessageSelector subValue = (ASIOMessageSelector)Enum.ToObject (typeof(ASIOMessageSelector)' value);  	switch (subValue) {  	case ASIOMessageSelector.kAsioEngineVersion:  		return 1;  	case ASIOMessageSelector.kAsioResetRequest:  		return 0;  	case ASIOMessageSelector.kAsioBufferSizeChange:  		return 0;  	case ASIOMessageSelector.kAsioResyncRequest:  		return 0;  	case ASIOMessageSelector.kAsioLatenciesChanged:  		return 0;  	case ASIOMessageSelector.kAsioSupportsTimeInfo:  		//                            return 1; DON'T SUPPORT FOR NOW. NEED MORE TESTING.  		return 0;  	case ASIOMessageSelector.kAsioSupportsTimeCode:  		//                            return 1; DON'T SUPPORT FOR NOW. NEED MORE TESTING.  		return 0;  	}  	break;  case ASIOMessageSelector.kAsioEngineVersion:  	return 2;  case ASIOMessageSelector.kAsioResetRequest:  	return 1;  case ASIOMessageSelector.kAsioBufferSizeChange:  	return 0;  case ASIOMessageSelector.kAsioResyncRequest:  	return 0;  case ASIOMessageSelector.kAsioLatenciesChanged:  	return 0;  case ASIOMessageSelector.kAsioSupportsTimeInfo:  	return 0;  case ASIOMessageSelector.kAsioSupportsTimeCode:  	return 0;  }  
Missing Default,NAudio.Wave.Asio,ASIODriverExt,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIODriverExt.cs,AsioMessageCallBack,The following switch statement is missing a default case: switch (subValue) {  case ASIOMessageSelector.kAsioEngineVersion:  	return 1;  case ASIOMessageSelector.kAsioResetRequest:  	return 0;  case ASIOMessageSelector.kAsioBufferSizeChange:  	return 0;  case ASIOMessageSelector.kAsioResyncRequest:  	return 0;  case ASIOMessageSelector.kAsioLatenciesChanged:  	return 0;  case ASIOMessageSelector.kAsioSupportsTimeInfo:  	//                            return 1; DON'T SUPPORT FOR NOW. NEED MORE TESTING.  	return 0;  case ASIOMessageSelector.kAsioSupportsTimeCode:  	//                            return 1; DON'T SUPPORT FOR NOW. NEED MORE TESTING.  	return 0;  }  
Missing Default,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following switch statement is missing a default case: switch (waveFormat.BitsPerSample) {  case 16:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToInt2Channels : (SampleConvertor)ConvertorShortToIntGeneric;  	break;  case 32:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToInt2Channels : (SampleConvertor)ConvertorFloatToIntGeneric;  	break;  }  
Missing Default,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following switch statement is missing a default case: switch (waveFormat.BitsPerSample) {  case 16:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorShortToShort2Channels : (SampleConvertor)ConvertorShortToShortGeneric;  	break;  case 32:  	convertor = (is2Channels) ? (SampleConvertor)ConvertorFloatToShort2Channels : (SampleConvertor)ConvertorFloatToShortGeneric;  	break;  }  
Missing Default,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following switch statement is missing a default case: switch (waveFormat.BitsPerSample) {  case 16:  	throw new ArgumentException ("Not a supported conversion");  case 32:  	convertor = ConverterFloatTo24LSBGeneric;  	break;  }  
Missing Default,NAudio.Wave.Asio,ASIOSampleConvertor,C:\repos\lasitsin__GLDNBT\Libs_And_Examples\NAudio-Source\NAudio\Wave\Asio\ASIOSampleConvertor.cs,SelectSampleConvertor,The following switch statement is missing a default case: switch (waveFormat.BitsPerSample) {  case 16:  	throw new ArgumentException ("Not a supported conversion");  case 32:  	convertor = ConverterFloatToFloatGeneric;  	break;  }  
