Implementation smell,Namespace,Class,File,Method,Description
Long Method,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The method has 143 lines of code.
Complex Method,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,Cyclomatic complexity of the method is 22
Complex Method,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,Cyclomatic complexity of the method is 23
Long Statement,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The length of the statement  "          if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (file generated by Visual Studio)."' Path.GetFileName(fullFileName)); } " is 132.
Long Statement,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The length of the statement  "          if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (exclusion specified in options)."' Path.GetFileName(fullFileName)); } " is 131.
Long Statement,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The length of the statement  "          if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (file doesn't exist)."' fileName); } " is 121.
Long Statement,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The length of the statement  "          if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (wrong file format)."' fileName); } " is 120.
Complex Conditional,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The conditional expression  "ext != ".exe" && ext != ".dll" && ext != ".xml" && ext != ".docs""  is complex.
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: if (verboseLevel > 2)        {          Console.WriteLine("ImmDoc.NET");          string yearString;            if (DateTime.Now.Year > 2007)          {            yearString = "2007 - " + DateTime.Now.Year;          }          else          {            yearString = "2007";          }            Console.WriteLine("Copyright (C) " + yearString + " Marek \"Immortal\" Stσj");          Console.WriteLine();        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: if (verboseLevel > 2)        {          Console.WriteLine("ImmDoc.NET");          string yearString;            if (DateTime.Now.Year > 2007)          {            yearString = "2007 - " + DateTime.Now.Year;          }          else          {            yearString = "2007";          }            Console.WriteLine("Copyright (C) " + yearString + " Marek \"Immortal\" Stσj");          Console.WriteLine();        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: if (filesNames.Count == 0)        {          // add files from the current directory          filesNames.AddRange(Directory.GetFiles(Environment.CurrentDirectory' "*.exe"));          filesNames.AddRange(Directory.GetFiles(Environment.CurrentDirectory' "*.dll"));          filesNames.AddRange(Directory.GetFiles(Environment.CurrentDirectory' "*.xml"));          filesNames.AddRange(Directory.GetFiles(Environment.CurrentDirectory' "*.docs"));        }        else        {          // remove files with unknown extensions          indicesToBeRemoved = new List<int>();            for (int i = 0; i < filesNames.Count; i++)          {            string fullFileName = filesNames[i];            string ext = Path.GetExtension(fullFileName).ToLower();              if (ext != ".exe" && ext != ".dll" && ext != ".xml" && ext != ".docs")            {              if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (unsupported type)."' Path.GetFileName(fullFileName)); }                indicesToBeRemoved.Add(i);            }          }            Utils.RemoveItems(filesNames' indicesToBeRemoved);        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < filesNames.Count; i++)        {          string fileName = Path.GetFileName(filesNames[i]);            if (fileName.ToLower() == programExeFileNameLower)          {            if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (program executable)."' fileName); }              indicesToBeRemoved.Add(i);          }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < filesNames.Count; i++)        {          string fullFileName = filesNames[i];            if (fullFileName.ToLower().EndsWith(".vshost.exe"))          {            if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (file generated by Visual Studio)."' Path.GetFileName(fullFileName)); }              indicesToBeRemoved.Add(i);          }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: if (verboseLevel > 2) { Console.WriteLine(); }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: if (verboseLevel > 2)        {          Console.WriteLine();            Console.WriteLine("Processing time  : {0:F2} s"' processingTime);          Console.WriteLine("Preparation time : {0:F2} s"' preparationTime);          Console.WriteLine("Generating time  : {0:F2} s"' generatingTime);          Console.WriteLine("Total time       : {0:F2} s"' (Environment.TickCount - totalStartTime) / 1000.0f);            Console.WriteLine();            Console.WriteLine("Warnings: {0}"' Logger.WarningsCount);          Console.WriteLine("Errors:   {0}"' Logger.ErrorsCount);        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: if (verboseLevel > 1 && Logger.WarningsCount > 0)        {          if (verboseLevel > 2)          {            Console.Error.WriteLine();          }            Logger.WriteWarnings(Console.Error);        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,Main,The following statement contains a magic number: if (!success || Logger.ErrorsCount > 0)        {          if (verboseLevel > 0 && Logger.ErrorsCount > 0)          {            if (verboseLevel > 2 || (verboseLevel > 1 && Logger.WarningsCount > 0))            {              Console.Error.WriteLine();            }              Logger.WriteErrors(Console.Error);          }            Environment.Exit(1);        }        else        {          Environment.Exit(0);        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessOptions,The following statement contains a magic number: foreach (string option in options)        {          string opName;          string opArg = null;          int indexOfColon = option.IndexOf(':');            if (indexOfColon == -1)          {            opName = option.ToLower();          }          else          {            opName = option.Substring(0' indexOfColon).ToLower();            opArg = indexOfColon + 1 < option.Length ? option.Substring(indexOfColon + 1) : null;          }            if (opName == "help" || opName == "h")          {            PrintUsageAndExit();          }          else if (opName == "projectname" || opName == "pn")          {            if (opArg == null) { PrintUsageAndExit(); }              projectName = opArg;          }          else if (opName == "chmname" || opName == "cn")          {            if (opArg == null) { PrintUsageAndExit(); }              chmFileNameWithoutExtension = opArg;              if (chmFileNameWithoutExtension.EndsWith(".chm"' true' null))            {              chmFileNameWithoutExtension = chmFileNameWithoutExtension.Substring(0' chmFileNameWithoutExtension.Length - 4);            }          }          else if (opName == "verboselevel" || opName == "vl")          {            if (opArg == null) { PrintUsageAndExit(); }              if (!Int32.TryParse(opArg' out verboseLevel) || verboseLevel < 0 || verboseLevel > MAX_VERBOSE_LEVEL)            {              PrintUsageAndExit();            }          }          else if (opName == "exclude" || opName == "ex")          {            if (opArg == null) { PrintUsageAndExit(); }              excludedFilesNames[opArg.ToLower()] = true;          }          else if (opName == "excludenamespace" || opName == "exn")          {            if (opArg == null) { PrintUsageAndExit(); }              excludedNamespaces.Add(opArg.ToLower());          }          else if (opName == "outputdirectory" || opName == "od")          {            if (opArg == null) { PrintUsageAndExit(); }              if (Path.GetFileName(opArg) == "")            {              Console.WriteLine("Error: Enter non-empty output directory.");              Environment.Exit(1);            }              outputDirectory = opArg;          }          else if (opName == "forcedelete" || opName == "fd")          {            if (opArg != null) { PrintUsageAndExit(); }              docGenOptions |= DocumentationGenerationOptions.DeleteOutputDirIfItExists;          }          else if (opName == "includeinternalmembers" || opName == "iim")          {            if (opArg != null) { PrintUsageAndExit(); }              docGenOptions |= DocumentationGenerationOptions.IncludeInternalMembers;          }          else if (opName == "includeprivatemembers" || opName == "ipm")          {            if (opArg != null) { PrintUsageAndExit(); }              docGenOptions |= DocumentationGenerationOptions.IncludePrivateMembers;          }          else          {            PrintUsageAndExit();          }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if ((ext != ".exe" && ext != ".dll"))          {            continue;          }            if (excludedFilesNames.ContainsKey(fileName.ToLower()))          {            if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (exclusion specified in options)."' Path.GetFileName(fullFileName)); }              continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted assembly {0} (file doesn't exist)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Processing assembly {0}... "' fileName); }            assembliesInfo.ReadMyAssemblyInfoFromAssembly(fullFileName' excludedNamespaces);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if ((ext != ".exe" && ext != ".dll"))          {            continue;          }            if (excludedFilesNames.ContainsKey(fileName.ToLower()))          {            if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (exclusion specified in options)."' Path.GetFileName(fullFileName)); }              continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted assembly {0} (file doesn't exist)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Processing assembly {0}... "' fileName); }            assembliesInfo.ReadMyAssemblyInfoFromAssembly(fullFileName' excludedNamespaces);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if ((ext != ".exe" && ext != ".dll"))          {            continue;          }            if (excludedFilesNames.ContainsKey(fileName.ToLower()))          {            if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (exclusion specified in options)."' Path.GetFileName(fullFileName)); }              continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted assembly {0} (file doesn't exist)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Processing assembly {0}... "' fileName); }            assembliesInfo.ReadMyAssemblyInfoFromAssembly(fullFileName' excludedNamespaces);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if ((ext != ".exe" && ext != ".dll"))          {            continue;          }            if (excludedFilesNames.ContainsKey(fileName.ToLower()))          {            if (verboseLevel > 2) { Console.WriteLine("Excluded file {0} (exclusion specified in options)."' Path.GetFileName(fullFileName)); }              continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted assembly {0} (file doesn't exist)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Processing assembly {0}... "' fileName); }            assembliesInfo.ReadMyAssemblyInfoFromAssembly(fullFileName' excludedNamespaces);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if (ext != ".xml" || excludedFilesNames.ContainsKey(fileName.ToLower()))          {            continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted documentation file {0} (file doesn't exist)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Processing documentation file {0}... "' fileName); }            assembliesInfo.ReadMyAssemblyInfoFromXmlDocumentation(fullFileName);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if (ext != ".xml" || excludedFilesNames.ContainsKey(fileName.ToLower()))          {            continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted documentation file {0} (file doesn't exist)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Processing documentation file {0}... "' fileName); }            assembliesInfo.ReadMyAssemblyInfoFromXmlDocumentation(fullFileName);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if (ext != ".xml" || excludedFilesNames.ContainsKey(fileName.ToLower()))          {            continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted documentation file {0} (file doesn't exist)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Processing documentation file {0}... "' fileName); }            assembliesInfo.ReadMyAssemblyInfoFromXmlDocumentation(fullFileName);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if (ext != ".docs" || excludedFilesNames.ContainsKey(fileName.ToLower()))          {            continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (file doesn't exist)."' fileName); }              continue;          }            if (!ValidateAdditionalDocumentationFile(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (wrong file format)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Reading additional documentation file {0}... "' fileName); }            assembliesInfo.ReadAdditionalDocumentation(fullFileName);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if (ext != ".docs" || excludedFilesNames.ContainsKey(fileName.ToLower()))          {            continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (file doesn't exist)."' fileName); }              continue;          }            if (!ValidateAdditionalDocumentationFile(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (wrong file format)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Reading additional documentation file {0}... "' fileName); }            assembliesInfo.ReadAdditionalDocumentation(fullFileName);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if (ext != ".docs" || excludedFilesNames.ContainsKey(fileName.ToLower()))          {            continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (file doesn't exist)."' fileName); }              continue;          }            if (!ValidateAdditionalDocumentationFile(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (wrong file format)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Reading additional documentation file {0}... "' fileName); }            assembliesInfo.ReadAdditionalDocumentation(fullFileName);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,ProcessFilesNames,The following statement contains a magic number: foreach (string fullFileName in filesNames)        {          string fileName = Path.GetFileName(fullFileName);          string ext = Path.GetExtension(fileName).ToLower();            if (ext != ".docs" || excludedFilesNames.ContainsKey(fileName.ToLower()))          {            continue;          }            if (!File.Exists(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (file doesn't exist)."' fileName); }              continue;          }            if (!ValidateAdditionalDocumentationFile(fullFileName))          {            if (verboseLevel > 2) { Console.WriteLine("Omitted additional documentation file {0} (wrong file format)."' fileName); }              continue;          }            if (verboseLevel > 2) { Console.Write("Reading additional documentation file {0}... "' fileName); }            assembliesInfo.ReadAdditionalDocumentation(fullFileName);            if (verboseLevel > 2) { Console.WriteLine("DONE"); }        }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,documenter_DirectoryDeleteStarted,The following statement contains a magic number: if (verboseLevel > 2) { Console.Write("Deleting output directory...     "); }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,documenter_DirectoryDeleteFinished,The following statement contains a magic number: if (verboseLevel > 2) { Console.WriteLine("DONE"); }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,documenter_GeneratingStarted,The following statement contains a magic number: if (verboseLevel > 2) { Console.Write("Generating HTML documentation... "); }
Magic Number,Imm.ImmDocNet,Program,C:\repos\marek-stoj_ImmDoc.NET\Src\ImmDocNet\ImmDocNet\Program.cs,documenter_GeneratingFinished,The following statement contains a magic number: if (verboseLevel > 2) { Console.WriteLine("DONE"); }
