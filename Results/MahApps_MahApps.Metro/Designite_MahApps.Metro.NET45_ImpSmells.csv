Implementation smell,Namespace,Class,File,Method,Description
Long Method,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The method has 126 lines of code.
Long Method,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MoveToNextValue,The method has 100 lines of code.
Long Method,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,WaitForButtonPressAsync,The method has 142 lines of code.
Complex Method,MahApps.Metro.Behaviours,StylizedBehaviors,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\StylizedBehaviors.cs,OnPropertyChanged,Cyclomatic complexity of the method is 10
Complex Method,MahApps.Metro.Controls,ClipBorder,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.cs,GenerateGeometry,Cyclomatic complexity of the method is 9
Complex Method,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,Cyclomatic complexity of the method is 9
Complex Method,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,Cyclomatic complexity of the method is 9
Complex Method,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsEqualTo,Cyclomatic complexity of the method is 13
Complex Method,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,ApplyToNavigationButtons,Cyclomatic complexity of the method is 8
Complex Method,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,OnApplyTemplate,Cyclomatic complexity of the method is 10
Complex Method,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnValueChanged,Cyclomatic complexity of the method is 15
Complex Method,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,OnApplyTemplate,Cyclomatic complexity of the method is 8
Long Parameter List,MahApps.Metro.Behaviours,GlowWindowBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\GlowWindowBehavior.cs,AssociatedObjectWindowProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The method has 5 parameters. Parameters: thick' allowNegative' allowNaN' allowPositiveInfinity' allowNegativeInfinity
Long Parameter List,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The method has 5 parameters. Parameters: corner' allowNegative' allowNaN' allowPositiveInfinity' allowNegativeInfinity
Long Parameter List,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,WndProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MoveThumb,The method has 5 parameters. Parameters: x' y' change' orientation' direction
Long Parameter List,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,JumpToNextTick,The method has 5 parameters. Parameters: direction' type' distance' checkingValue' jumpDirectlyToTick
Long Parameter List,MahApps.Metro.Controls.Dialogs,DialogCoordinator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogCoordinator.cs,ShowMessageAsync,The method has 5 parameters. Parameters: context' title' message' style' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,DialogCoordinator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogCoordinator.cs,ShowModalMessageExternal,The method has 5 parameters. Parameters: context' title' message' style' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,DialogCoordinator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogCoordinator.cs,ShowProgressAsync,The method has 5 parameters. Parameters: context' title' message' isCancelable' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,ShowMessageAsync,The method has 5 parameters. Parameters: window' title' message' style' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,ShowProgressAsync,The method has 5 parameters. Parameters: window' title' message' isCancelable' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,ShowModalMessageExternal,The method has 5 parameters. Parameters: window' title' message' style' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,IDialogCoordinator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\IDialogCoordinator.cs,ShowMessageAsync,The method has 5 parameters. Parameters: context' title' message' style' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,IDialogCoordinator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\IDialogCoordinator.cs,ShowModalMessageExternal,The method has 5 parameters. Parameters: context' title' message' style' settings
Long Parameter List,MahApps.Metro.Controls.Dialogs,IDialogCoordinator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\IDialogCoordinator.cs,ShowProgressAsync,The method has 5 parameters. Parameters: context' title' message' isCancelable' settings
Long Identifier,MahApps.Metro.Behaviours,PasswordBoxBindingBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\PasswordBoxBindingBehavior.cs,,The length of the parameter RevealedPasswordTextBoxProperty is 31.
Long Identifier,MahApps.Metro.Controls,Badged,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Badged.cs,,The length of the parameter BadgeChangedStoryboardProperty is 30.
Long Identifier,MahApps.Metro.Controls,ContentControlEx,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ContentControlEx.cs,,The length of the parameter ContentCharacterCasingProperty is 30.
Long Identifier,MahApps.Metro.Controls,CustomValidationPopup,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\CustomValidationPopup.cs,,The length of the parameter CloseOnMouseLeftButtonDownProperty is 34.
Long Identifier,MahApps.Metro.Controls,DropDownButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DropDownButton.cs,IsExpandedPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MahApps.Metro.Controls,DropDownButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DropDownButton.cs,,The length of the parameter ContentTemplateSelectorProperty is 31.
Long Identifier,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,,The length of the parameter hideControlStoryboardCompletedHandler is 37.
Long Identifier,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,,The length of the parameter allowSelectedIndexChangedCallback is 33.
Long Identifier,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,,The length of the parameter MouseHoverBorderEnabledProperty is 31.
Long Identifier,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,,The length of the parameter MouseHoverBorderThicknessProperty is 33.
Long Identifier,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,AutoCloseIntervalChanged,The length of the parameter autoCloseIntervalChangedAction is 30.
Long Identifier,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,,The length of the parameter AnimateOnPositionChangeProperty is 31.
Long Identifier,MahApps.Metro.Controls,FlyoutsControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlyoutsControl.cs,,The length of the parameter OverrideExternalCloseButtonProperty is 35.
Long Identifier,MahApps.Metro.Controls,HamburgerMenu,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HamburgerMenu\HamburgerMenu.cs,,The length of the parameter HamburgerMenuHeaderTemplateProperty is 35.
Long Identifier,MahApps.Metro.Controls,HamburgerMenu,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HamburgerMenu\HamburgerMenu.cs,,The length of the parameter OptionsItemTemplateSelectorProperty is 35.
Long Identifier,MahApps.Metro.Controls,HamburgerMenu,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HamburgerMenu\HamburgerMenu.cs,,The length of the parameter OptionsItemCommandParameterProperty is 35.
Long Identifier,MahApps.Metro.Controls,HamburgerMenu,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HamburgerMenu\HamburgerMenu.cs,,The length of the parameter VerticalScrollBarOnLeftSideProperty is 35.
Long Identifier,MahApps.Metro.Controls,ComboBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\ComboBoxHelper.cs,,The length of the parameter EnableVirtualizationWithGroupingProperty is 40.
Long Identifier,MahApps.Metro.Controls,ControlsHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\ControlsHelper.cs,,The length of the parameter DisabledVisualElementVisibilityProperty is 39.
Long Identifier,MahApps.Metro.Controls,ControlsHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\ControlsHelper.cs,,The length of the parameter ContentCharacterCasingProperty is 30.
Long Identifier,MahApps.Metro.Controls,PasswordBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\PasswordBoxHelper.cs,,The length of the parameter CapsLockWarningToolTipProperty is 30.
Long Identifier,MahApps.Metro.Controls,PasswordBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\PasswordBoxHelper.cs,,The length of the parameter RevealButtonContentTemplateProperty is 35.
Long Identifier,MahApps.Metro.Controls,ScrollBarHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\ScrollBarHelper.cs,,The length of the parameter VerticalScrollBarOnLeftSideProperty is 35.
Long Identifier,MahApps.Metro.Controls,ScrollViewerHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\ScrollViewerHelper.cs,,The length of the parameter VerticalScrollBarOnLeftSideProperty is 35.
Long Identifier,MahApps.Metro.Controls,ScrollViewerHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\ScrollViewerHelper.cs,,The length of the parameter IsHorizontalScrollWheelEnabledProperty is 38.
Long Identifier,MahApps.Metro.Controls,TabControlHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TabControlHelper.cs,,The length of the parameter CloseTabCommandParameterProperty is 32.
Long Identifier,MahApps.Metro.Controls,TabControlHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TabControlHelper.cs,,The length of the parameter UnderlineSelectedBrushProperty is 30.
Long Identifier,MahApps.Metro.Controls,TabControlHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TabControlHelper.cs,,The length of the parameter UnderlineMouseOverBrushProperty is 31.
Long Identifier,MahApps.Metro.Controls,TabControlHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TabControlHelper.cs,,The length of the parameter UnderlineMouseOverSelectedBrushProperty is 39.
Long Identifier,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,,The length of the parameter IsClearTextButtonBehaviorEnabledProperty is 40.
Long Identifier,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,,The length of the parameter ButtonCommandParameterProperty is 30.
Long Identifier,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,,The length of the parameter IsSpellCheckContextMenuEnabledProperty is 38.
Long Identifier,MahApps.Metro.Controls,HotKeyBox,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,,The length of the parameter AreModifierKeysRequiredProperty is 31.
Long Identifier,MahApps.Metro.Controls,MetroTabItem,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroTabItem.cs,,The length of the parameter InternalCloseTabCommandProperty is 31.
Long Identifier,MahApps.Metro.Controls,MetroTabItem,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroTabItem.cs,,The length of the parameter CloseTabCommandParameterProperty is 32.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter PART_MetroActiveDialogContainer is 31.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter PART_MetroInactiveDialogsContainer is 34.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter ShowDialogsOverTitleBarProperty is 31.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter IsMaxRestoreButtonEnabledProperty is 33.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter ShowSystemMenuOnRightClickProperty is 34.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter WindowPlacementSettingsProperty is 31.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter IgnoreTaskbarOnMaximizeProperty is 31.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter WindowTransitionsEnabledProperty is 32.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter NonActiveWindowTitleBrushProperty is 33.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter LeftWindowCommandsOverlayBehaviorProperty is 41.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter RightWindowCommandsOverlayBehaviorProperty is 42.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter WindowButtonCommandsOverlayBehaviorProperty is 43.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter WindowCloseButtonStyleProperty is 30.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter OverrideDefaultWindowCommandsBrushProperty is 42.
Long Identifier,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,,The length of the parameter WindowTransitionCompletedEvent is 30.
Long Identifier,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,,The length of the parameter TrackMouseWheelWhenMouseOverProperty is 36.
Long Identifier,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,,The length of the parameter SnapToMultipleOfIntervalProperty is 32.
Long Identifier,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,,The length of the parameter _internalIntervalMultiplierForCalculation is 41.
Long Identifier,MahApps.Metro.Controls,ProgressRing,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,BindableWidthCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MahApps.Metro.Controls,ProgressRing,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,IsLargeChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MahApps.Metro.Controls,ProgressRing,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,IsActiveChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MaxPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MinPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,,The length of the parameter CentralThumbDragCompletedEvent is 30.
Long Identifier,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,,The length of the parameter AutoToolTipTextConverterProperty is 32.
Long Identifier,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,,The length of the parameter actualWidthPropertyChangeNotifier is 33.
Long Identifier,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,,The length of the parameter actualHeightPropertyChangeNotifier is 34.
Long Identifier,MahApps.Metro.Controls,SplitViewTemplateSettings,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\SplitView\SplitViewTemplateSettings.cs,,The length of the parameter NegativeOpenPaneLengthProperty is 30.
Long Identifier,MahApps.Metro.Controls,SplitViewTemplateSettings,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\SplitView\SplitViewTemplateSettings.cs,,The length of the parameter NegativeOpenPaneLengthMinusCompactLengthProperty is 48.
Long Identifier,MahApps.Metro.Controls,SplitViewTemplateSettings,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\SplitView\SplitViewTemplateSettings.cs,,The length of the parameter OpenPaneLengthMinusCompactLengthProperty is 40.
Long Identifier,MahApps.Metro.Controls,Tile,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Tile.cs,,The length of the parameter HorizontalTitleAlignmentProperty is 32.
Long Identifier,MahApps.Metro.Controls,Tile,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Tile.cs,,The length of the parameter VerticalTitleAlignmentProperty is 30.
Long Identifier,MahApps.Metro.Controls,DateTimePicker,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\DateTimePicker.cs,,The length of the parameter _deactivateWriteValueToTextBox is 30.
Long Identifier,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,,The length of the parameter IsDatePickerVisiblePropertyKey is 30.
Long Identifier,MahApps.Metro.Controls,ToggleSwitch,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitch.cs,,The length of the parameter ThumbIndicatorDisabledBrushProperty is 35.
Long Identifier,MahApps.Metro.Controls,ToggleSwitch,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitch.cs,,The length of the parameter CheckChangedCommandParameterProperty is 36.
Long Identifier,MahApps.Metro.Controls,ToggleSwitch,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitch.cs,,The length of the parameter CheckedCommandParameterProperty is 31.
Long Identifier,MahApps.Metro.Controls,ToggleSwitch,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitch.cs,,The length of the parameter UnCheckedCommandParameterProperty is 33.
Long Identifier,MahApps.Metro.Controls,ToggleSwitch,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitch.cs,,The length of the parameter ToggleSwitchButtonStyleProperty is 31.
Long Identifier,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,,The length of the parameter isCheckedPropertyChangeNotifier is 31.
Long Identifier,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,,The length of the parameter ThumbIndicatorDisabledBrushProperty is 35.
Long Identifier,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,,The length of the parameter PreviousContentPresentationSitePartName is 39.
Long Identifier,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,,The length of the parameter CurrentContentPresentationSitePartName is 38.
Long Identifier,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,,The length of the parameter currentContentPresentationSite is 30.
Long Identifier,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,,The length of the parameter previousContentPresentationSite is 31.
Long Identifier,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,,The length of the parameter allowIsTransitioningPropertyWrite is 33.
Long Identifier,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,,The length of the parameter RestartTransitionOnContentChangeProperty is 40.
Long Identifier,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,,The length of the parameter CustomVisualStatesNameProperty is 30.
Long Identifier,MahApps.Metro.Controls,WindowSettings,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\WindowSettings.cs,,The length of the parameter WindowPlacementSettingsProperty is 31.
Long Identifier,MahApps.Metro.Controls.Dialogs,DialogParticipation,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogParticipation.cs,RegisterPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,,The length of the parameter UsernameCharacterCasingProperty is 31.
Long Identifier,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,,The length of the parameter NegativeButtonButtonVisibilityProperty is 38.
Long Identifier,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,,The length of the parameter RememberCheckBoxVisibilityProperty is 34.
Long Identifier,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,,The length of the parameter RememberCheckBoxCheckedProperty is 31.
Long Identifier,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,,The length of the parameter FirstAuxiliaryButtonTextProperty is 32.
Long Identifier,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,,The length of the parameter SecondAuxiliaryButtonTextProperty is 33.
Long Statement,MahApps.Metro.Behaviours,BorderlessWindowBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\BorderlessWindowBehavior.cs,OnAttached,The length of the statement  "            BindingOperations.SetBinding(this' IgnoreTaskbarOnMaximizeProperty' new Binding { Path = new PropertyPath(MetroWindow.IgnoreTaskbarOnMaximizeProperty)' Source = this.AssociatedObject }); " is 186.
Long Statement,MahApps.Metro.Behaviours,BorderlessWindowBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\BorderlessWindowBehavior.cs,OnAttached,The length of the statement  "            BindingOperations.SetBinding(this' ResizeBorderThicknessProperty' new Binding { Path = new PropertyPath(MetroWindow.ResizeBorderThicknessProperty)' Source = this.AssociatedObject }); " is 182.
Long Statement,MahApps.Metro.Behaviours,BorderlessWindowBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\BorderlessWindowBehavior.cs,OnAttached,The length of the statement  "            BindingOperations.SetBinding(this' GlowBrushProperty' new Binding { Path = new PropertyPath(MetroWindow.GlowBrushProperty)' Source = this.AssociatedObject }); " is 158.
Long Statement,MahApps.Metro.Behaviours,GlowWindowBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\GlowWindowBehavior.cs,StartOpacityStoryboard,The length of the statement  "                                            && this.left.OpacityStoryboard != null && this.right.OpacityStoryboard != null && this.top.OpacityStoryboard != null && this.bottom.OpacityStoryboard != null; " is 158.
Long Statement,MahApps.Metro.Behaviours,PasswordBoxBindingBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\PasswordBoxBindingBehavior.cs,GetPasswordBoxCaretPosition,The length of the statement  "            var value = oStart?.GetType().GetProperty("Offset"' BindingFlags.NonPublic | BindingFlags.Instance)?.GetValue(oStart' null) as int?; " is 132.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "            SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontFamilyProperty' TextElement.FontFamilyProperty); " is 120.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "            SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontWeightProperty' TextElement.FontWeightProperty); " is 120.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "            SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.StringFormatProperty' NumericUpDown.StringFormatProperty); " is 126.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "            SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.HideUpDownButtonsProperty' NumericUpDown.HideUpDownButtonsProperty); " is 136.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "            SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.UpDownButtonsWidthProperty' NumericUpDown.UpDownButtonsWidthProperty); " is 138.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "                SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.ForegroundProperty' TextElement.ForegroundProperty); " is 120.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "                if (!SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.ForegroundProperty' TextElement.ForegroundProperty)) " is 125.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,GenerateNumericUpDown,The length of the statement  "                    ApplyBinding(new Binding(Control.ForegroundProperty.Name) { Source = cell' Mode = BindingMode.OneWay }' numericUpDown' TextElement.ForegroundProperty); " is 151.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,RefreshCellContent,The length of the statement  "                        SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontFamilyProperty' TextElement.FontFamilyProperty); " is 120.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,RefreshCellContent,The length of the statement  "                        SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontWeightProperty' TextElement.FontWeightProperty); " is 120.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,RefreshCellContent,The length of the statement  "                        SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.StringFormatProperty' NumericUpDown.StringFormatProperty); " is 126.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,RefreshCellContent,The length of the statement  "                        SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.HideUpDownButtonsProperty' NumericUpDown.HideUpDownButtonsProperty); " is 136.
Long Statement,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,RefreshCellContent,The length of the statement  "                        SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.UpDownButtonsWidthProperty' NumericUpDown.UpDownButtonsWidthProperty); " is 138.
Long Statement,MahApps.Metro.Controls,DropDownButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DropDownButton.cs,TryRemoveVisualFromOldTree,The length of the statement  "                var fe = LogicalTreeHelper.GetParent(visual) as FrameworkElement ?? VisualTreeHelper.GetParent(visual) as FrameworkElement; " is 123.
Long Statement,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,PrepareContainerForItemOverride,The length of the statement  "                element.SetCurrentValue(DataContextProperty' item); //dont want to set the datacontext to itself. taken from MetroTabControl.cs " is 127.
Long Statement,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,DetectControlButtonsStatus,The length of the statement  "                prev => prev.Visibility = this.CircularNavigation || (this.Items.Count > 0 && this.SelectedIndex > 0) ? activeButtonsVisibility : Visibility.Hidden' " is 148.
Long Statement,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,DetectControlButtonsStatus,The length of the statement  "                next => next.Visibility = this.CircularNavigation || (this.Items.Count > 0 && this.SelectedIndex < this.Items.Count - 1) ? activeButtonsVisibility : Visibility.Hidden' " is 167.
Long Statement,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,OnKeyDown,The length of the statement  "            var canGoPrev = (e.Key == Key.Left && isHorizontal && this.backButton != null && this.backButton.Visibility == Visibility.Visible && this.backButton.IsEnabled) " is 159.
Long Statement,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,OnKeyDown,The length of the statement  "                            || (e.Key == Key.Up && isVertical && this.upButton != null && this.upButton.Visibility == Visibility.Visible && this.upButton.IsEnabled); " is 137.
Long Statement,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,OnKeyDown,The length of the statement  "            var canGoNext = (e.Key == Key.Right && isHorizontal && this.forwardButton != null && this.forwardButton.Visibility == Visibility.Visible && this.forwardButton.IsEnabled) " is 169.
Long Statement,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,OnKeyDown,The length of the statement  "                            || (e.Key == Key.Down && isVertical && this.downButton != null && this.downButton.Visibility == Visibility.Visible && this.downButton.IsEnabled); " is 145.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ChangeFlyoutTheme,The length of the statement  "                        throw new InvalidOperationException("The inverse flyout theme only works if the window theme abides the naming convention. " + " is 126.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,UpdateOpacityChange,The length of the statement  "            if (this.flyoutRoot == null || this.fadeOutFrame == null || System.ComponentModel.DesignerProperties.GetIsInDesignMode(this)) " is 125.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,TryFocusElement,The length of the statement  "                else if (this.flyoutContent == null || !this.flyoutContent.MoveFocus(new TraversalRequest(FocusNavigationDirection.First))) " is 123.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,OnApplyTemplate,The length of the statement  "            if (this.hideFrame == null || this.showFrame == null || this.hideFrameY == null || this.showFrameY == null || this.fadeOutFrame == null) " is 136.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,WindowTitleThumbMoveOnDragDelta,The length of the statement  "            //if (window != null && this.Position != Position.Bottom && (this.Position == Position.Top || (this.dragStartedMousePos.GetValueOrDefault().Y <= window.TitlebarHeight && window.TitlebarHeight > 0))) " is 198.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,WindowTitleThumbMoveOnDragDelta,The length of the statement  "            //if (window != null && this.Position != Position.Bottom && this.dragStartedMousePos.GetValueOrDefault().Y <= window.TitlebarHeight && window.TitlebarHeight > 0) " is 161.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,WindowTitleThumbChangeWindowStateOnMouseDoubleClick,The length of the statement  "            if (window != null && this.Position != Position.Bottom && Mouse.GetPosition((IInputElement)sender).Y <= window.TitlebarHeight && window.TitlebarHeight > 0) " is 155.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,WindowTitleThumbSystemMenuOnMouseRightButtonUp,The length of the statement  "            if (window != null && this.Position != Position.Bottom && Mouse.GetPosition((IInputElement)sender).Y <= window.TitlebarHeight && window.TitlebarHeight > 0) " is 155.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ApplyAnimation,The length of the statement  "            if (this.flyoutRoot == null || this.hideFrame == null || this.showFrame == null || this.hideFrameY == null || this.showFrameY == null || this.fadeOutFrame == null) " is 163.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ApplyAnimation,The length of the statement  "                    this.HorizontalAlignment = this.Margin.Right <= 0 ? (this.HorizontalContentAlignment != HorizontalAlignment.Stretch ? HorizontalAlignment.Left : this.HorizontalContentAlignment) : HorizontalAlignment.Stretch;//HorizontalAlignment.Left; " is 235.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ApplyAnimation,The length of the statement  "                    this.HorizontalAlignment = this.Margin.Left <= 0 ? (this.HorizontalContentAlignment != HorizontalAlignment.Stretch ? HorizontalAlignment.Right : this.HorizontalContentAlignment) : HorizontalAlignment.Stretch;//HorizontalAlignment.Right; " is 236.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ApplyAnimation,The length of the statement  "                    this.VerticalAlignment = this.Margin.Bottom <= 0 ? (this.VerticalContentAlignment != VerticalAlignment.Stretch ? VerticalAlignment.Top : this.VerticalContentAlignment) : VerticalAlignment.Stretch;//VerticalAlignment.Top; " is 220.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ApplyAnimation,The length of the statement  "                    this.VerticalAlignment = this.Margin.Top <= 0 ? (this.VerticalContentAlignment != VerticalAlignment.Stretch ? VerticalAlignment.Bottom : this.VerticalContentAlignment) : VerticalAlignment.Stretch;//VerticalAlignment.Bottom; " is 223.
Long Statement,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,OnRenderSizeChanged,The length of the statement  "            if (this.flyoutRoot == null || this.hideFrame == null || this.showFrame == null || this.hideFrameY == null || this.showFrameY == null) " is 134.
Long Statement,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/MahApps.Metro;component/controls/glowwindow.xaml"' System.UriKind.Relative); " is 122.
Long Statement,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,OnControlWithAutoWatermarkSupportLoaded,The length of the statement  "                var attribute = resolvedProperty.GetCustomAttributes(typeof(DisplayAttribute)' false).FirstOrDefault() as DisplayAttribute; " is 123.
Long Statement,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,ResolvePropertyFromBindingExpression,The length of the statement  "                    var resolvedType = ResolveBinding(bindingExpression.DataItem.GetType()' bindingExpression.ParentBinding.Path.Path.Split('.')); " is 126.
Long Statement,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,IsSpellCheckContextMenuEnabledChanged,The length of the statement  "                throw new InvalidOperationException("The property 'IsSpellCheckContextMenuEnabled' may only be set on TextBoxBase elements."); " is 126.
Long Statement,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,TextBoxBaseContextMenuOpening,The length of the statement  "            var spellingError = textBox != null ? textBox.GetSpellingError(textBox.CaretIndex) : richTextBox?.GetSpellingError(richTextBox.CaretPosition); " is 142.
Long Statement,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,RemoveSpellCheckMenuItems,The length of the statement  "                var spellCheckItems = contextMenu.Items.OfType<FrameworkElement>().Where(item => ReferenceEquals(item.Tag' typeof(Spelling))).ToList(); " is 135.
Long Statement,MahApps.Metro.Controls,TextBoxHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\TextBoxHelper.cs,OnIsMonitoringChanged,The length of the statement  "                    numericUpDown.BeginInvoke(() => OnNumericUpDownValueChaged(numericUpDown' new RoutedEventArgs(NumericUpDown.ValueChangedEvent' numericUpDown))); " is 144.
Long Statement,MahApps.Metro.Controls,HotKeyBox,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,OnGotFocus,The length of the statement  "                        var request = new TraversalRequest((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift ? FocusNavigationDirection.Previous : FocusNavigationDirection.Next); " is 168.
Long Statement,MahApps.Metro.Controls,MetroNavigationWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroNavigationWindow.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/MahApps.Metro;component/themes/metronavigationwindow.xaml"' System.UriKind.Relative); " is 131.
Long Statement,MahApps.Metro.Controls,BaseMetroTabControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroTabControl.cs,GetContainerForItemOverride,The length of the statement  "            return new MetroTabItem(); //Overrides the TabControl's default behavior and returns a MetroTabItem instead of a regular one. " is 125.
Long Statement,MahApps.Metro.Controls,BaseMetroTabControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroTabControl.cs,RaiseTabItemClosingEvent,The length of the statement  "                foreach (TabItemClosingEventHandler subHandler in tabItemClosingEvent.GetInvocationList().OfType<TabItemClosingEventHandler>()) " is 127.
Long Statement,MahApps.Metro.Controls,MetroThumbContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroThumbContentControl.cs,OnMouseMove,The length of the statement  "                    this.RaiseEvent(new DragDeltaEventArgs(horizontalChange' verticalChange) { RoutedEvent = MetroThumbContentControl.DragDeltaEvent }); " is 132.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,SetVisibiltyForAllTitleElements,The length of the statement  "                this.LeftWindowCommandsPresenter.Visibility = this.LeftWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.HiddenTitleBar) ? " is 140.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,SetVisibiltyForAllTitleElements,The length of the statement  "                this.RightWindowCommandsPresenter.Visibility = this.RightWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.HiddenTitleBar) ? " is 142.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,SetVisibiltyForAllTitleElements,The length of the statement  "                this.WindowButtonCommandsPresenter.Visibility = this.WindowButtonCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.HiddenTitleBar) ? " is 144.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,ShowOverlayAsync,The length of the statement  "            if (overlayBox == null) throw new InvalidOperationException("OverlayBox can not be founded in this MetroWindow's template. Are you calling this before the window has loaded?"); " is 176.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HideOverlayAsync,The length of the statement  "            if (overlayBox == null) throw new InvalidOperationException("OverlayBox can not be founded in this MetroWindow's template. Are you calling this before the window has loaded?"); " is 176.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,IsOverlayVisible,The length of the statement  "            if (overlayBox == null) throw new InvalidOperationException("OverlayBox can not be founded in this MetroWindow's template. Are you calling this before the window has loaded?"); " is 176.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,FlyoutsPreviewMouseDown,The length of the statement  "                foreach (var flyout in Flyouts.GetFlyouts().Where(x => x.IsOpen && x.ExternalCloseButton == e.ChangedButton && (!x.IsPinned || Flyouts.OverrideIsPinned))) " is 154.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,OnApplyTemplate,The length of the statement  "                metroContentControl.TransitionCompleted += (sender' args) => this.RaiseEvent(new RoutedEventArgs(WindowTransitionCompletedEvent)); " is 130.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,DoWindowTitleThumbSystemMenuOnMouseRightButtonUp,The length of the statement  "                if ((mousePos.Y <= window.TitlebarHeight && window.TitlebarHeight > 0) || (window.UseNoneWindowStyle && window.TitlebarHeight <= 0)) " is 132.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HandleFlyoutStatusChange,The length of the statement  "                //if the the corresponding behavior has the right flag' set the window commands' and icon zIndex to a number that is higher than the flyout's. " is 142.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HandleFlyoutStatusChange,The length of the statement  "                this.icon?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.IconOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1)); " is 168.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HandleFlyoutStatusChange,The length of the statement  "                this.LeftWindowCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.LeftWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1)); " is 205.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HandleFlyoutStatusChange,The length of the statement  "                this.RightWindowCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.RightWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1)); " is 207.
Long Statement,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HandleFlyoutStatusChange,The length of the statement  "                this.WindowButtonCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.WindowButtonCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1)); " is 209.
Long Statement,MahApps.Metro.Controls,MetroWindowHelpers,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindowHelpers.cs,InvokeActionOnWindowCommands,The length of the statement  "            if (window.LeftWindowCommandsPresenter == null || window.RightWindowCommandsPresenter == null || window.WindowButtonCommands == null) " is 133.
Long Statement,MahApps.Metro.Controls,MultiFrameImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MultiFrameImage.cs,OnRender,The length of the statement  "                    dc.DrawImage(maxFrame' new Rect((RenderSize.Width-maxFrame.Width)/2' (RenderSize.Height - maxFrame.Height) / 2' maxFrame.Width' maxFrame.Height)); " is 146.
Long Statement,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnGotFocus,The length of the statement  "                if ((numericUpDown.InterceptManualEnter || numericUpDown.IsReadOnly) && numericUpDown.Focusable && numericUpDown._valueTextBox != null) " is 135.
Long Statement,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnGotFocus,The length of the statement  "                        var request = new TraversalRequest((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift ? FocusNavigationDirection.Previous : FocusNavigationDirection.Next); " is 168.
Long Statement,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnApplyTemplate,The length of the statement  "                throw new InvalidOperationException(string.Format("You have missed to specify {0}' {1} or {2} in your template"' ElementNumericUp' ElementNumericDown' ElementTextBox)); " is 168.
Long Statement,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,TryFindScrollViewer,The length of the statement  "                _handlesMouseWheelScrolling = new Lazy<PropertyInfo>(() => _scrollViewer.GetType().GetProperties(BindingFlags.NonPublic | BindingFlags.Instance).SingleOrDefault(i => i.Name == "HandlesMouseWheelScrolling")); " is 207.
Long Statement,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnValueTextBoxPaste,The length of the statement  "            string newText = string.Concat(textPresent.Substring(0' textBox.SelectionStart)' text' textPresent.Substring(textBox.SelectionStart + textBox.SelectionLength)); " is 160.
Long Statement,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The length of the statement  "            // Use GetDescendantBounds for sizing and centering since DesiredSize includes layout whitespace' whereas GetDescendantBounds  " is 125.
Long Statement,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The length of the statement  "            // that it's looking at.  See http://blogs.msdn.com/greg_schechter/archive/2007/04/03/camera-construction-in-parallaxui.aspx " is 124.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,ReCalculateSize,The length of the statement  "                        _centerThumb.Width = Math.Max(ActualWidth - (_leftButton.Width + _rightButton.Width + _rightThumb.ActualWidth + _leftThumb.ActualWidth)' 0); " is 140.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,ReCalculateSize,The length of the statement  "                        _centerThumb.Height = Math.Max(ActualHeight - (_leftButton.Height + _rightButton.Height + _rightThumb.ActualHeight + _leftThumb.ActualHeight)' 0); " is 146.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,ReCalculateRangeSelected,The length of the statement  "                    lower = direction == Direction.Increase ? Math.Min(this.UpperValue - this.MinRange' value) : Math.Max(this.Minimum' value); " is 123.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,ReCalculateRangeSelected,The length of the statement  "                    upper = direction == Direction.Increase ? Math.Min(value' this.Maximum) : Math.Max(this.LowerValue + this.MinRange' value); " is 123.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CentralThumbMouseDown,The length of the statement  "                if (Mouse.LeftButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))) " is 124.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CentralThumbMouseDown,The length of the statement  "                else if (Mouse.RightButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))) " is 130.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,LeftThumbDragDelta,The length of the statement  "                    if (currentPoint.X >= 0 && currentPoint.X < _container.ActualWidth - (_rightButton.ActualWidth + _rightThumb.ActualWidth + _centerThumb.MinWidth)) " is 146.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,LeftThumbDragDelta,The length of the statement  "                    if (currentPoint.Y <= _container.ActualHeight && currentPoint.Y > _rightButton.ActualHeight + _rightThumb.ActualHeight + _centerThumb.MinHeight) " is 144.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RightThumbDragDelta,The length of the statement  "                    if (currentPoint.X < _container.ActualWidth && currentPoint.X > _leftButton.ActualWidth + _leftThumb.ActualWidth + _centerThumb.MinWidth) " is 137.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RightThumbDragDelta,The length of the statement  "                    if (currentPoint.Y >= 0 && currentPoint.Y < _container.ActualHeight - (_leftButton.ActualHeight + _leftThumb.ActualHeight + _centerThumb.MinHeight)) " is 148.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CenterThumbDragDelta,The length of the statement  "                            this.JumpToNextTick(localDirection' ButtonType.Both' change' localDirection == Direction.Increase ? this.UpperValue : this.LowerValue' false); " is 142.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CenterThumbDragDelta,The length of the statement  "                            this.JumpToNextTick(localDirection' ButtonType.Both' -change' localDirection == Direction.Increase ? this.UpperValue : this.LowerValue' false); " is 143.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,UpdateEndPoint,The length of the statement  "                    d = this.Orientation == Orientation.Horizontal ? this._leftButton.ActualWidth + this._leftThumb.ActualWidth : this.ActualHeight - (this._leftButton.ActualHeight + this._leftThumb.ActualHeight); " is 193.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,UpdateEndPoint,The length of the statement  "                    d = this.Orientation == Orientation.Horizontal ? this.ActualWidth - this._rightButton.ActualWidth : this._rightButton.ActualHeight; " is 131.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,UpdateEndPoint,The length of the statement  "                    d = this.Orientation == Orientation.Horizontal ? this._leftButton.ActualWidth : this.ActualHeight - this._leftButton.ActualHeight; " is 130.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,UpdateEndPoint,The length of the statement  "                    d = this.Orientation == Orientation.Horizontal ? this.ActualWidth - this._rightButton.ActualWidth - this._rightThumb.ActualWidth : this._rightButton.ActualHeight + this._rightThumb.ActualHeight; " is 194.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CalculateNextTick,The length of the statement  "                var checkingValueChanged = checkingValuePos; // + distance; // <-- introduced by @drayde with #2006 but it breaks the left thumb movement #2880 " is 143.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The length of the statement  "                        return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' -popupSize.Height)' PopupPrimaryAxis.Horizontal) }; " is 166.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The length of the statement  "                    return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(-popupSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) }; " is 165.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The length of the statement  "                        return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' targetSize.Height)' PopupPrimaryAxis.Horizontal) }; " is 166.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The length of the statement  "                    return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(targetSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) }; " is 165.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RaiseValueChangedEvents,The length of the statement  "                slider.OnRangeSelectionChanged(new RangeSelectionChangedEventArgs(slider.LowerValue' slider.UpperValue' slider._oldLower' slider._oldUpper)); " is 141.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RaiseValueChangedEvents,The length of the statement  "                slider.OnRangeParameterChanged(new RangeParameterChangedEventArgs(RangeParameterChangeType.Lower' slider._oldLower' slider.LowerValue)' LowerValueChangedEvent); " is 160.
Long Statement,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RaiseValueChangedEvents,The length of the statement  "                slider.OnRangeParameterChanged(new RangeParameterChangedEventArgs(RangeParameterChangeType.Upper' slider._oldUpper' slider.UpperValue)' UpperValueChangedEvent); " is 160.
Long Statement,MahApps.Metro.Controls,RevealImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RevealImage.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/MahApps.Metro;component/controls/revealimage.xaml"' System.UriKind.Relative); " is 123.
Long Statement,MahApps.Metro.Controls,SplitButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\SplitButton.cs,TryRemoveVisualFromOldTree,The length of the statement  "                var fe = LogicalTreeHelper.GetParent(visual) as FrameworkElement ?? VisualTreeHelper.GetParent(visual) as FrameworkElement; " is 123.
Long Statement,MahApps.Metro.Controls,SplitView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\SplitView\SplitView.cs,ChangeVisualState,The length of the statement  "                this.paneClipRectangle.Rect = new Rect(0' 0' this.OpenPaneLength' (double)this.ActualHeight); // We could also use ActualHeight and subscribe to the SizeChanged property " is 169.
Long Statement,MahApps.Metro.Controls,DateTimePicker,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\DateTimePicker.cs,GetValueForTextBox,The length of the statement  "            var timeFormat = this.SelectedTimeFormat == TimePickerFormat.Long ? formatInfo.LongTimePattern : formatInfo.ShortTimePattern; " is 125.
Long Statement,MahApps.Metro.Controls,DateTimePicker,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\DateTimePicker.cs,GetValueForTextBox,The length of the statement  "            var dateFormat = this.SelectedDateFormat == DatePickerFormat.Long ? formatInfo.LongDatePattern : formatInfo.ShortDatePattern; " is 125.
Long Statement,MahApps.Metro.Controls,DateTimePicker,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\DateTimePicker.cs,OnTextBoxLostFocus,The length of the statement  "            if (DateTime.TryParse(((DatePickerTextBox)sender).Text' SpecificCultureInfo' System.Globalization.DateTimeStyles.None' out ts)) " is 127.
Long Statement,MahApps.Metro.Controls,DateTimePicker,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\DateTimePicker.cs,OnSelectedDateChanged,The length of the statement  "                dateTimePicker.OnSelectedDateChanged(new TimePickerBaseSelectionChangedEventArgs<DateTime?>(SelectedDateChangedEvent' (DateTime?)e.OldValue' (DateTime?)e.NewValue)); " is 165.
Long Statement,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,GetValueForTextBox,The length of the statement  "            var format = SelectedTimeFormat == TimePickerFormat.Long ? string.Intern(SpecificCultureInfo.DateTimeFormat.LongTimePattern) : string.Intern(SpecificCultureInfo.DateTimeFormat.ShortTimePattern); " is 194.
Long Statement,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,OnTextBoxLostFocus,The length of the statement  "            var text = string.Intern($"{DateTime.MinValue.ToString(SpecificCultureInfo.DateTimeFormat.ShortDatePattern)} {((DatePickerTextBox)sender).Text}"); " is 146.
Long Statement,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,OnGotFocus,The length of the statement  "                    var request = new TraversalRequest((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift ? FocusNavigationDirection.Previous : FocusNavigationDirection.Next); " is 168.
Long Statement,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,OnSelectedTimeChanged,The length of the statement  "            timePartPickerBase.OnSelectedTimeChanged(new TimePickerBaseSelectionChangedEventArgs<TimeSpan?>(SelectedTimeChangedEvent' (TimeSpan?)e.OldValue' (TimeSpan?)e.NewValue)); " is 169.
Long Statement,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,SetHourPartValues,The length of the statement  "                    _ampmSwitcher.SelectedValue = timeOfDay.Hours < 12 ? SpecificCultureInfo.DateTimeFormat.AMDesignator : SpecificCultureInfo.DateTimeFormat.PMDesignator; " is 151.
Long Statement,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,UpdateThumb,The length of the statement  "                double destination = IsChecked.GetValueOrDefault() ? ActualWidth - (_SwitchTrack.Margin.Left + _SwitchTrack.Margin.Right + _ThumbIndicator.ActualWidth + _ThumbIndicator.Margin.Left + _ThumbIndicator.Margin.Right) : 0; " is 217.
Long Statement,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_DraggingThumb_DragStarted,The length of the statement  "                double destination = IsChecked.GetValueOrDefault() ? ActualWidth - (_SwitchTrack.Margin.Left + _SwitchTrack.Margin.Right + _ThumbIndicator.ActualWidth + _ThumbIndicator.Margin.Left + _ThumbIndicator.Margin.Right) : 0; " is 217.
Long Statement,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_DraggingThumb_DragDelta,The length of the statement  "                    _ThumbTranslate.X = Math.Min(ActualWidth - (_SwitchTrack.Margin.Left + _SwitchTrack.Margin.Right + _ThumbIndicator.ActualWidth + _ThumbIndicator.Margin.Left + _ThumbIndicator.Margin.Right)' Math.Max(0' lastDragPosition + e.HorizontalChange)); " is 242.
Long Statement,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_SwitchTrack_SizeChanged,The length of the statement  "                double destination = IsChecked.GetValueOrDefault() ? ActualWidth - (_SwitchTrack.Margin.Left + _SwitchTrack.Margin.Right + _ThumbIndicator.ActualWidth + _ThumbIndicator.Margin.Left + _ThumbIndicator.Margin.Right) : 0; " is 217.
Long Statement,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,OnTransitionPropertyChanged,The length of the statement  "                    throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' "Temporary removed exception message"' newTransition)); " is 125.
Long Statement,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,OnApplyTemplate,The length of the statement  "            this.previousContentPresentationSite = this.GetTemplateChild(PreviousContentPresentationSitePartName) as ContentPresenter; " is 122.
Long Statement,MahApps.Metro.Controls,TransitioningContentControl,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TransitioningContentControl.cs,OnApplyTemplate,The length of the statement  "            this.currentContentPresentationSite = this.GetTemplateChild(CurrentContentPresentationSitePartName) as ContentPresenter; " is 120.
Long Statement,MahApps.Metro.Controls,WinApiHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\WinApiHelper.cs,GetPhysicalCursorPos,The length of the statement  "                throw new MahAppsException("Uups' this should not happen! Sorry for this exception! Is this maybe happend on a virtual machine or via remote desktop? Please let us know' thx."' exception); " is 188.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,Initialize,The length of the statement  "            this.DialogSettings = this.ConfigureSettings(settings ?? (owningWindow?.MetroDialogOptions ?? new MetroDialogSettings())); " is 122.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,Initialize,The length of the statement  "                this.Resources.MergedDictionaries.Add(new ResourceDictionary { Source = new Uri("pack://application:'''/MahApps.Metro;component/Styles/Controls.xaml") }); " is 154.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,Initialize,The length of the statement  "            this.Resources.MergedDictionaries.Add(new ResourceDictionary { Source = new Uri("pack://application:'''/MahApps.Metro;component/Styles/Fonts.xaml") }); " is 151.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,Initialize,The length of the statement  "            this.Resources.MergedDictionaries.Add(new ResourceDictionary { Source = new Uri("pack://application:'''/MahApps.Metro;component/Styles/Colors.xaml") }); " is 152.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,Initialize,The length of the statement  "            this.Resources.MergedDictionaries.Add(new ResourceDictionary { Source = new Uri("pack://application:'''/MahApps.Metro;component/Themes/Dialogs/BaseMetroDialog.xaml") }); " is 169.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,Initialize,The length of the statement  "            this.DialogTitleFontSize = (this.TryFindResource("DialogTitleFontSize") as double?).GetValueOrDefault(this.DialogTitleFontSize); " is 128.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,Initialize,The length of the statement  "            this.DialogMessageFontSize = (this.TryFindResource("DialogMessageFontSize") as double?).GetValueOrDefault(this.DialogMessageFontSize); " is 134.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                        this.SetValue(BackgroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "WhiteColorBrush")); " is 144.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                        this.SetValue(ForegroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "BlackBrush")); " is 139.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                            throw new InvalidOperationException("The inverse dialog theme only works if the window theme abides the naming convention. " + " is 126.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                        this.SetValue(BackgroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "BlackColorBrush")); " is 144.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                        this.SetValue(ForegroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "WhiteColorBrush")); " is 144.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                        this.SetValue(BackgroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "HighlightBrush")); " is 143.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                        this.SetValue(ForegroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "IdealForegroundColorBrush")); " is 154.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The length of the statement  "                var glowBrush = ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "AccentColorBrush"); " is 126.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,RequestCloseAsync,The length of the statement  "                return this._WaitForCloseAsync().ContinueWith(x => { this.ParentDialogWindow.Dispatcher.Invoke(new Action(() => { this.ParentDialogWindow.Close(); })); }); " is 155.
Long Statement,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,_WaitForCloseAsync,The length of the statement  "                    throw new InvalidOperationException("Unable to find the dialog closing storyboard. Did you forget to add BaseMetroDialog.xaml to your merged dictionaries?"); " is 157.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogCoordinator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogCoordinator.cs,GetMetroWindow,The length of the statement  "                throw new InvalidOperationException("Context is not registered. Consider using DialogParticipation.Register in XAML to bind in the DataContext."); " is 146.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,HandleOverlayOnHide,The length of the statement  "                return (settings == null || settings.AnimateHide ? window.HideOverlayAsync() : Task.Factory.StartNew(() => window.Dispatcher.Invoke(new Action(window.HideOverlay)))); " is 166.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,HandleOverlayOnShow,The length of the statement  "                return (settings == null || settings.AnimateShow ? window.ShowOverlayAsync() : Task.Factory.StartNew(() => window.Dispatcher.Invoke(new Action(window.ShowOverlay)))); " is 166.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,ShowMetroDialogAsync,The length of the statement  "            if (window.metroActiveDialogContainer.Children.Contains(dialog) || window.metroInactiveDialogContainer.Children.Contains(dialog)) " is 129.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,HideMetroDialogAsync,The length of the statement  "            if (!window.metroActiveDialogContainer.Children.Contains(dialog) && !window.metroInactiveDialogContainer.Children.Contains(dialog)) " is 131.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,SetupExternalDialogWindow,The length of the statement  "                win.Resources.MergedDictionaries.Add(new ResourceDictionary { Source = new Uri("pack://application:'''/MahApps.Metro;component/Styles/Controls.xaml") }); " is 153.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,SetupExternalDialogWindow,The length of the statement  "                win.Resources.MergedDictionaries.Add(new ResourceDictionary { Source = new Uri("pack://application:'''/MahApps.Metro;component/Styles/Fonts.xaml") }); " is 150.
Long Statement,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,SetupExternalDialogWindow,The length of the statement  "                win.Resources.MergedDictionaries.Add(new ResourceDictionary { Source = new Uri("pack://application:'''/MahApps.Metro;component/Styles/Colors.xaml") }); " is 151.
Long Statement,MahApps.Metro.Controls.Dialogs,InputDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\InputDialog.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/MahApps.Metro;component/themes/dialogs/inputdialog.xaml"' System.UriKind.Relative); " is 129.
Long Statement,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/MahApps.Metro;component/themes/dialogs/logindialog.xaml"' System.UriKind.Relative); " is 129.
Long Statement,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,WaitForButtonPressAsync,The length of the statement  "                                                                                                       tcs.TrySetResult(this.ButtonStyle == MessageDialogStyle.Affirmative ? MessageDialogResult.Affirmative : MessageDialogResult.Negative); " is 134.
Long Statement,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,WaitForButtonPressAsync,The length of the statement  "                        tcs.TrySetResult(this.ButtonStyle == MessageDialogStyle.Affirmative ? MessageDialogResult.Affirmative : MessageDialogResult.Negative); " is 134.
Long Statement,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,SetButtonState,The length of the statement  "                    if (md.ButtonStyle == MessageDialogStyle.AffirmativeAndNegativeAndSingleAuxiliary || md.ButtonStyle == MessageDialogStyle.AffirmativeAndNegativeAndDoubleAuxiliary) " is 163.
Long Statement,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/MahApps.Metro;component/themes/dialogs/messagedialog.xaml"' System.UriKind.Relative); " is 131.
Long Statement,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted); " is 136.
Long Statement,MahApps.Metro.Controls.Dialogs,ProgressDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\ProgressDialog.cs,OnLoaded,The length of the statement  "            this.SetResourceReference(ProgressBarForegroundProperty' this.DialogSettings.ColorScheme == MetroDialogColorScheme.Theme ? "AccentColorBrush" : "BlackBrush"); " is 158.
Long Statement,MahApps.Metro.Controls.Dialogs,ProgressDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\ProgressDialog.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/MahApps.Metro;component/themes/dialogs/progressdialog.xaml"' System.UriKind.Relative); " is 132.
Long Statement,MahApps.Metro.Converters,MathConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\MathConverter.cs,DoConvert,The length of the statement  "                var value1 = (firstValue as double?).GetValueOrDefault(System.Convert.ToDouble(firstValue' CultureInfo.InvariantCulture)); " is 122.
Long Statement,MahApps.Metro.Converters,MathConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\MathConverter.cs,DoConvert,The length of the statement  "                var value2 = (secondValue as double?).GetValueOrDefault(System.Convert.ToDouble(secondValue' CultureInfo.InvariantCulture)); " is 124.
Long Statement,MahApps.Metro.Converters,MathConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\MathConverter.cs,DoConvert,The length of the statement  "                Trace.TraceError($"Error while converting: value1={firstValue} value2={secondValue} operation={operation} exception: {e}"); " is 123.
Long Statement,MahApps.Metro.Converters,TimeSpanToStringConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\TimeSpanToStringConverter.cs,Convert,The length of the statement  "            var convert = DateTime.MinValue.Add(timeSpan.GetValueOrDefault()).ToString(culture.DateTimeFormat.LongTimePattern' culture); " is 124.
Long Statement,MahApps.Metro.Converters,TimeSpanToStringConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\TimeSpanToStringConverter.cs,ConvertBack,The length of the statement  "            if (DateTime.TryParseExact(value.ToString()' culture.DateTimeFormat.LongTimePattern' culture' DateTimeStyles.None' out dateTime)) " is 129.
Long Statement,MahApps.Metro,ThemeManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\ThemeManager\ThemeManager.cs,GetAccent,The length of the statement  "            var builtInAccent = Accents.FirstOrDefault(x => AreResourceDictionarySourcesEqual(x.Resources.Source' resources.Source)); " is 121.
Long Statement,MahApps.Metro,ThemeManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\ThemeManager\ThemeManager.cs,ChangeAppStyle,The length of the statement  "                    var oldAccentResource = resources.MergedDictionaries.Where(x => x.Source != null).FirstOrDefault(d => d.Source.ToString().ToLower() == key); " is 140.
Long Statement,MahApps.Metro,ThemeManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\ThemeManager\ThemeManager.cs,ChangeAppStyle,The length of the statement  "                    var oldThemeResource = resources.MergedDictionaries.Where(x => x.Source != null).FirstOrDefault(d => d.Source.ToString().ToLower() == key); " is 139.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro\obj\Debug\NET45\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The conditional expression  "current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight"  is complex.
Complex Conditional,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The conditional expression  "current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "thick.Left < 0d || thick.Right < 0d || thick.Top < 0d || thick.Bottom < 0d"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "IsNaN(thick.Left) || IsNaN(thick.Right)                      || IsNaN(thick.Top) || IsNaN(thick.Bottom)"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "Double.IsPositiveInfinity(thick.Left) || Double.IsPositiveInfinity(thick.Right)                      || Double.IsPositiveInfinity(thick.Top) || Double.IsPositiveInfinity(thick.Bottom)"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "Double.IsNegativeInfinity(thick.Left) || Double.IsNegativeInfinity(thick.Right)                      || Double.IsNegativeInfinity(thick.Top) || Double.IsNegativeInfinity(thick.Bottom)"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "corner.TopLeft < 0d || corner.TopRight < 0d || corner.BottomLeft < 0d || corner.BottomRight < 0d"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "IsNaN(corner.TopLeft) || IsNaN(corner.TopRight) ||                      IsNaN(corner.BottomLeft) || IsNaN(corner.BottomRight)"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "Double.IsPositiveInfinity(corner.TopLeft) || Double.IsPositiveInfinity(corner.TopRight) ||                      Double.IsPositiveInfinity(corner.BottomLeft) || Double.IsPositiveInfinity(corner.BottomRight)"  is complex.
Complex Conditional,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsValid,The conditional expression  "Double.IsNegativeInfinity(corner.TopLeft) || Double.IsNegativeInfinity(corner.TopRight) ||                      Double.IsNegativeInfinity(corner.BottomLeft) || Double.IsNegativeInfinity(corner.BottomRight)"  is complex.
Complex Conditional,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,FlipViewLoaded,The conditional expression  "this.backButton == null || this.forwardButton == null || this.upButton == null || this.downButton == null"  is complex.
Complex Conditional,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,OnApplyTemplate,The conditional expression  "this.hideFrame == null || this.showFrame == null || this.hideFrameY == null || this.showFrameY == null || this.fadeOutFrame == null"  is complex.
Complex Conditional,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,WindowTitleThumbChangeWindowStateOnMouseDoubleClick,The conditional expression  "window != null && this.Position != Position.Bottom && Mouse.GetPosition((IInputElement)sender).Y <= window.TitlebarHeight && window.TitlebarHeight > 0"  is complex.
Complex Conditional,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,WindowTitleThumbSystemMenuOnMouseRightButtonUp,The conditional expression  "window != null && this.Position != Position.Bottom && Mouse.GetPosition((IInputElement)sender).Y <= window.TitlebarHeight && window.TitlebarHeight > 0"  is complex.
Complex Conditional,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ApplyAnimation,The conditional expression  "this.flyoutRoot == null || this.hideFrame == null || this.showFrame == null || this.hideFrameY == null || this.showFrameY == null || this.fadeOutFrame == null"  is complex.
Complex Conditional,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,OnRenderSizeChanged,The conditional expression  "this.flyoutRoot == null || this.hideFrame == null || this.showFrame == null || this.hideFrameY == null || this.showFrameY == null"  is complex.
Complex Conditional,MahApps.Metro.Controls,HamburgerMenu,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HamburgerMenu\HamburgerMenu.cs,ButtonsListView_SelectionChanged,The conditional expression  "Keyboard.IsKeyToggled(Key.Space) ||                      Keyboard.IsKeyToggled(Key.Up) ||                      Keyboard.IsKeyToggled(Key.PageUp) ||                      Keyboard.IsKeyToggled(Key.Down) ||                      Keyboard.IsKeyToggled(Key.PageDown)"  is complex.
Complex Conditional,MahApps.Metro.Controls,HamburgerMenu,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HamburgerMenu\HamburgerMenu.cs,OptionsListView_SelectionChanged,The conditional expression  "Keyboard.IsKeyToggled(Key.Space) ||                      Keyboard.IsKeyToggled(Key.Up) ||                      Keyboard.IsKeyToggled(Key.PageUp) ||                      Keyboard.IsKeyToggled(Key.Down) ||                      Keyboard.IsKeyToggled(Key.PageDown)"  is complex.
Complex Conditional,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The conditional expression  "keyCode == 45 ||                  keyCode == 46 ||                  keyCode == 144 ||                  (33 <= keyCode && keyCode <= 40)"  is complex.
Complex Conditional,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,FlyoutsPreviewMouseDown,The conditional expression  "element.TryFindParent<Flyout>() != null                      || Equals(element' this.overlayBox)                      || element.TryFindParent<BaseMetroDialog>() != null                      || Equals(element.TryFindParent<ContentControl>()' this.icon)                      || element.TryFindParent<WindowCommands>() != null                      || element.TryFindParent<WindowButtonCommands>() != null"  is complex.
Complex Conditional,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,DoWindowTitleThumbSystemMenuOnMouseRightButtonUp,The conditional expression  "(mousePos.Y <= window.TitlebarHeight && window.TitlebarHeight > 0) || (window.UseNoneWindowStyle && window.TitlebarHeight <= 0)"  is complex.
Complex Conditional,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnGotFocus,The conditional expression  "(numericUpDown.InterceptManualEnter || numericUpDown.IsReadOnly) && numericUpDown.Focusable && numericUpDown._valueTextBox != null"  is complex.
Complex Conditional,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnPreviewMouseWheel,The conditional expression  "InterceptMouseWheel && (IsFocused || _valueTextBox.IsFocused || TrackMouseWheelWhenMouseOver)"  is complex.
Complex Conditional,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RaiseValueChangedEvents,The conditional expression  "(lowerValueReCalculated || upperValueReCalculated) && (!lowerValueEquals || !upperValueEquals)"  is complex.
Complex Conditional,MahApps.Metro.Controls,DateTimePicker,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\DateTimePicker.cs,SetDatePartValues,The conditional expression  "(SelectedDate != DisplayDate && SelectedDate != DateTime.MinValue) || (Popup != null && Popup.IsOpen)"  is complex.
Complex Conditional,MahApps.Metro.Converters,MathConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\MathConverter.cs,DoConvert,The conditional expression  "firstValue == null                  || secondValue == null                  || firstValue == DependencyProperty.UnsetValue                  || secondValue == DependencyProperty.UnsetValue                  || firstValue == DBNull.Value                  || secondValue == DBNull.Value"  is complex.
Virtual Method Call from Constructor,MahApps.Metro.Controls,SplitView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\SplitView\SplitView.cs,SplitView,The constructor "SplitView" calls a virtual method "ChangeVisualState".
Empty Catch Block,MahApps.Metro.Controls,FlipView,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\FlipView.cs,ChangeBannerText,The method has an empty catch block.
Empty Catch Block,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,ResetStoryboard,The method has an empty catch block.
Empty Catch Block,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,SetupExternalDialogWindow,The method has an empty catch block.
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Behaviours,TiltBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\TiltBehavior.cs,CompositionTargetRendering,The following statement contains a magic number: if (KeepDragging)              {                  current = Mouse.GetPosition(RotatorParent.Child);                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                          current.Y < (attachedElement).ActualHeight)                      {                          RotatorParent.RotationY = -1 * TiltFactor + current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                          RotatorParent.RotationX = -1 * TiltFactor + current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                      }                  }                  else                  {                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }              else              {                  if (Mouse.LeftButton == MouseButtonState.Pressed)                  {                      if (!isPressed)                      {                          current = Mouse.GetPosition(RotatorParent.Child);                          if (current.X > 0 && current.X < (attachedElement).ActualWidth && current.Y > 0 &&                              current.Y < (attachedElement).ActualHeight)                          {                              RotatorParent.RotationY = -1 * TiltFactor +                                                        current.X * 2 * TiltFactor / (attachedElement).ActualWidth;                              RotatorParent.RotationX = -1 * TiltFactor +                                                        current.Y * 2 * TiltFactor / (attachedElement).ActualHeight;                          }                          isPressed = true;                      }                          if (isPressed && times == 7)                      {                          RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                          RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                      }                      else if (isPressed && times < 7)                      {                          times++;                      }                  }                  else                  {                      isPressed = false;                      times = -1;                      RotatorParent.RotationY = RotatorParent.RotationY - 5 < 0 ? 0 : RotatorParent.RotationY - 5;                      RotatorParent.RotationX = RotatorParent.RotationX - 5 < 0 ? 0 : RotatorParent.RotationX - 5;                  }              }
Magic Number,MahApps.Metro.Controls,BorderInfo,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.cs,BorderInfo,The following statement contains a magic number: var left = 0.5 * borders.Left + padding.Left;
Magic Number,MahApps.Metro.Controls,BorderInfo,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.cs,BorderInfo,The following statement contains a magic number: var top = 0.5 * borders.Top + padding.Top;
Magic Number,MahApps.Metro.Controls,BorderInfo,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.cs,BorderInfo,The following statement contains a magic number: var right = 0.5 * borders.Right + padding.Right;
Magic Number,MahApps.Metro.Controls,BorderInfo,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.cs,BorderInfo,The following statement contains a magic number: var bottom = 0.5 * borders.Bottom + padding.Bottom;
Magic Number,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsCloseTo,The following statement contains a magic number: var eps = (Math.Abs(value1) + Math.Abs(value2) + 10.0) * DBL_EPSILON;
Magic Number,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsOne,The following statement contains a magic number: return Math.Abs(value - 1.0) < 10.0 * DBL_EPSILON;
Magic Number,MahApps.Metro.Controls,Utils,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ClipBorder.Utils.cs,IsZero,The following statement contains a magic number: return Math.Abs(value) < 10.0 * DBL_EPSILON;
Magic Number,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,OverrideFlyoutResources,The following statement contains a magic number: if (accent)              {                  fromColor = (Color)resources["IdealForegroundColor"];                  newBrush = new SolidColorBrush(fromColor);                  newBrush.Freeze();                  resources["FlyoutForegroundBrush"] = newBrush;                  resources["TextBrush"] = newBrush;                  resources["LabelTextBrush"] = newBrush;                    if (resources.Contains("AccentBaseColor"))                  {                      fromColor = (Color)resources["AccentBaseColor"];                  }                  else                  {                      var accentColor = (Color)resources["AccentColor"];                      fromColor = Color.FromArgb(255' accentColor.R' accentColor.G' accentColor.B);                  }                  newBrush = new SolidColorBrush(fromColor);                  newBrush.Freeze();                  resources["HighlightColor"] = fromColor;                  resources["HighlightBrush"] = newBrush;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following statement contains a magic number: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,WndProc,The following statement contains a magic number: switch ((WM)msg)              {                  case WM.SHOWWINDOW:                      if ((int)lParam == 3 && this.Visibility != Visibility.Visible) // 3 == SW_PARENTOPENING                      {                          handled = true; //handle this message so window isn't shown until we want it to                             }                      break;                  case WM.MOUSEACTIVATE:                      handled = true;                      if (this.ownerHandle != IntPtr.Zero)                      {                          NativeMethods.SendMessage(this.ownerHandle' WM.ACTIVATE' wParam' lParam);                      }                      return new IntPtr(3);                  case WM.LBUTTONDOWN:                      if (this.ownerHandle != IntPtr.Zero && UnsafeNativeMethods.GetWindowRect(this.ownerHandle' out rect))                      {                          Point pt;                          if (WinApiHelper.TryGetRelativeMousePosition(this.handle' out pt))                          {                              NativeMethods.PostMessage(this.ownerHandle' WM.NCLBUTTONDOWN' (IntPtr)this.getHitTestValue(pt' rect)' IntPtr.Zero);                          }                      }                      break;                  case WM.NCHITTEST:                      Cursor cursor = null;                      if (this._owner.ResizeMode == ResizeMode.NoResize || this._owner.ResizeMode == ResizeMode.CanMinimize)                      {                          cursor = this._owner.Cursor;                      }                      else                      {                          if (this.ownerHandle != IntPtr.Zero && UnsafeNativeMethods.GetWindowRect(this.ownerHandle' out rect))                          {                              Point pt;                              if (WinApiHelper.TryGetRelativeMousePosition(this.handle' out pt))                              {                                  cursor = this.getCursor(pt' rect);                              }                          }                      }                      if (cursor != null && cursor != this.Cursor)                      {                          this.Cursor = cursor;                      }                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,WndProc,The following statement contains a magic number: switch ((WM)msg)              {                  case WM.SHOWWINDOW:                      if ((int)lParam == 3 && this.Visibility != Visibility.Visible) // 3 == SW_PARENTOPENING                      {                          handled = true; //handle this message so window isn't shown until we want it to                             }                      break;                  case WM.MOUSEACTIVATE:                      handled = true;                      if (this.ownerHandle != IntPtr.Zero)                      {                          NativeMethods.SendMessage(this.ownerHandle' WM.ACTIVATE' wParam' lParam);                      }                      return new IntPtr(3);                  case WM.LBUTTONDOWN:                      if (this.ownerHandle != IntPtr.Zero && UnsafeNativeMethods.GetWindowRect(this.ownerHandle' out rect))                      {                          Point pt;                          if (WinApiHelper.TryGetRelativeMousePosition(this.handle' out pt))                          {                              NativeMethods.PostMessage(this.ownerHandle' WM.NCLBUTTONDOWN' (IntPtr)this.getHitTestValue(pt' rect)' IntPtr.Zero);                          }                      }                      break;                  case WM.NCHITTEST:                      Cursor cursor = null;                      if (this._owner.ResizeMode == ResizeMode.NoResize || this._owner.ResizeMode == ResizeMode.CanMinimize)                      {                          cursor = this._owner.Cursor;                      }                      else                      {                          if (this.ownerHandle != IntPtr.Zero && UnsafeNativeMethods.GetWindowRect(this.ownerHandle' out rect))                          {                              Point pt;                              if (WinApiHelper.TryGetRelativeMousePosition(this.handle' out pt))                              {                                  cursor = this.getCursor(pt' rect);                              }                          }                      }                      if (cursor != null && cursor != this.Cursor)                      {                          this.Cursor = cursor;                      }                      break;              }
Magic Number,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.glowWindow = ((MahApps.Metro.Controls.GlowWindow)(target));              return;              case 2:              this.glow = ((MahApps.Metro.Controls.Glow)(target));              return;              }
Magic Number,MahApps.Metro.Controls,AmPmComparer,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\AmPmComparer.cs,Compare,The following statement contains a magic number: if (x == 12 && y == 12)              {                  return 0;              }              else if (x == 12)              {                  return -1;              }              else if (y == 12)              {                  return 1;              }
Magic Number,MahApps.Metro.Controls,AmPmComparer,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\AmPmComparer.cs,Compare,The following statement contains a magic number: if (x == 12 && y == 12)              {                  return 0;              }              else if (x == 12)              {                  return -1;              }              else if (y == 12)              {                  return 1;              }
Magic Number,MahApps.Metro.Controls,AmPmComparer,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\AmPmComparer.cs,Compare,The following statement contains a magic number: if (x == 12 && y == 12)              {                  return 0;              }              else if (x == 12)              {                  return -1;              }              else if (y == 12)              {                  return 1;              }
Magic Number,MahApps.Metro.Controls,AmPmComparer,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Helper\AmPmComparer.cs,Compare,The following statement contains a magic number: if (x == 12 && y == 12)              {                  return 0;              }              else if (x == 12)              {                  return -1;              }              else if (y == 12)              {                  return 1;              }
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((int) _key*397) ^ (int) _modifierKeys;              }
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: var sb = new StringBuilder(256);
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: scanCode = (scanCode << 16);
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: if (keyCode == 45 ||                  keyCode == 46 ||                  keyCode == 144 ||                  (33 <= keyCode && keyCode <= 40))              {                  // add the extended key flag                  scanCode |= 0x1000000;              }
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: if (keyCode == 45 ||                  keyCode == 46 ||                  keyCode == 144 ||                  (33 <= keyCode && keyCode <= 40))              {                  // add the extended key flag                  scanCode |= 0x1000000;              }
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: if (keyCode == 45 ||                  keyCode == 46 ||                  keyCode == 144 ||                  (33 <= keyCode && keyCode <= 40))              {                  // add the extended key flag                  scanCode |= 0x1000000;              }
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: if (keyCode == 45 ||                  keyCode == 46 ||                  keyCode == 144 ||                  (33 <= keyCode && keyCode <= 40))              {                  // add the extended key flag                  scanCode |= 0x1000000;              }
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: if (keyCode == 45 ||                  keyCode == 46 ||                  keyCode == 144 ||                  (33 <= keyCode && keyCode <= 40))              {                  // add the extended key flag                  scanCode |= 0x1000000;              }
Magic Number,MahApps.Metro.Controls,HotKey,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,GetLocalizedKeyStringUnsafe,The following statement contains a magic number: var resultLength = UnsafeNativeMethods.GetKeyNameText((int)scanCode' sb' 256);
Magic Number,MahApps.Metro.Controls,MetroNavigationWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroNavigationWindow.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PART_ForwardButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.PART_Title = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.PART_Frame = ((System.Windows.Controls.Frame)(target));              return;              }
Magic Number,MahApps.Metro.Controls,MetroNavigationWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroNavigationWindow.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PART_ForwardButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.PART_Title = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.PART_Frame = ((System.Windows.Controls.Frame)(target));              return;              }
Magic Number,MahApps.Metro.Controls,MetroNavigationWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroNavigationWindow.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PART_ForwardButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.PART_Title = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.PART_Frame = ((System.Windows.Controls.Frame)(target));              return;              }
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,ResetStoryboard,The following statement contains a magic number: lock (this.lockme)              {                  //perform calculations                  var containerAnimStart = this.CalcContainerAnimStart(width);                  var containerAnimEnd = this.CalcContainerAnimEnd(width);                  var ellipseAnimWell = this.CalcEllipseAnimWell(width);                  var ellipseAnimEnd = this.CalcEllipseAnimEnd(width);                  //reset the main double animation                  try                  {                      var indeterminate = this.GetIndeterminate();                        if (indeterminate != null && this.indeterminateStoryboard != null)                      {                          var newStoryboard = this.indeterminateStoryboard.Clone();                          var doubleAnim = newStoryboard.Children.First(t => t.Name == "MainDoubleAnim");                          doubleAnim.SetValue(DoubleAnimation.FromProperty' containerAnimStart);                          doubleAnim.SetValue(DoubleAnimation.ToProperty' containerAnimEnd);                            var namesOfElements = new[] { "E1"' "E2"' "E3"' "E4"' "E5" };                          foreach (var elemName in namesOfElements)                          {                              var doubleAnimParent = (DoubleAnimationUsingKeyFrames)newStoryboard.Children.First(t => t.Name == elemName + "Anim");                              DoubleKeyFrame first'                                             second'                                             third;                              if (elemName == "E1")                              {                                  first = doubleAnimParent.KeyFrames[1];                                  second = doubleAnimParent.KeyFrames[2];                                  third = doubleAnimParent.KeyFrames[3];                              }                              else                              {                                  first = doubleAnimParent.KeyFrames[2];                                  second = doubleAnimParent.KeyFrames[3];                                  third = doubleAnimParent.KeyFrames[4];                              }                                first.Value = ellipseAnimWell;                              second.Value = ellipseAnimWell;                              third.Value = ellipseAnimEnd;                              first.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              second.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              third.InvalidateProperty(DoubleKeyFrame.ValueProperty);                                doubleAnimParent.InvalidateProperty(Storyboard.TargetPropertyProperty);                              doubleAnimParent.InvalidateProperty(Storyboard.TargetNameProperty);                          }                            var containingGrid = (FrameworkElement)this.GetTemplateChild("ContainingGrid");                            if (removeOldStoryboard && indeterminate.Storyboard != null)                          {                              // remove the previous storyboard from the Grid #1855                              indeterminate.Storyboard.Stop(containingGrid);                              indeterminate.Storyboard.Remove(containingGrid);                          }                            indeterminate.Storyboard = newStoryboard;                            indeterminate.Storyboard?.Begin(containingGrid' true);                      }                  }                  catch (Exception)                  {                      //we just ignore                   }              }
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,ResetStoryboard,The following statement contains a magic number: lock (this.lockme)              {                  //perform calculations                  var containerAnimStart = this.CalcContainerAnimStart(width);                  var containerAnimEnd = this.CalcContainerAnimEnd(width);                  var ellipseAnimWell = this.CalcEllipseAnimWell(width);                  var ellipseAnimEnd = this.CalcEllipseAnimEnd(width);                  //reset the main double animation                  try                  {                      var indeterminate = this.GetIndeterminate();                        if (indeterminate != null && this.indeterminateStoryboard != null)                      {                          var newStoryboard = this.indeterminateStoryboard.Clone();                          var doubleAnim = newStoryboard.Children.First(t => t.Name == "MainDoubleAnim");                          doubleAnim.SetValue(DoubleAnimation.FromProperty' containerAnimStart);                          doubleAnim.SetValue(DoubleAnimation.ToProperty' containerAnimEnd);                            var namesOfElements = new[] { "E1"' "E2"' "E3"' "E4"' "E5" };                          foreach (var elemName in namesOfElements)                          {                              var doubleAnimParent = (DoubleAnimationUsingKeyFrames)newStoryboard.Children.First(t => t.Name == elemName + "Anim");                              DoubleKeyFrame first'                                             second'                                             third;                              if (elemName == "E1")                              {                                  first = doubleAnimParent.KeyFrames[1];                                  second = doubleAnimParent.KeyFrames[2];                                  third = doubleAnimParent.KeyFrames[3];                              }                              else                              {                                  first = doubleAnimParent.KeyFrames[2];                                  second = doubleAnimParent.KeyFrames[3];                                  third = doubleAnimParent.KeyFrames[4];                              }                                first.Value = ellipseAnimWell;                              second.Value = ellipseAnimWell;                              third.Value = ellipseAnimEnd;                              first.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              second.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              third.InvalidateProperty(DoubleKeyFrame.ValueProperty);                                doubleAnimParent.InvalidateProperty(Storyboard.TargetPropertyProperty);                              doubleAnimParent.InvalidateProperty(Storyboard.TargetNameProperty);                          }                            var containingGrid = (FrameworkElement)this.GetTemplateChild("ContainingGrid");                            if (removeOldStoryboard && indeterminate.Storyboard != null)                          {                              // remove the previous storyboard from the Grid #1855                              indeterminate.Storyboard.Stop(containingGrid);                              indeterminate.Storyboard.Remove(containingGrid);                          }                            indeterminate.Storyboard = newStoryboard;                            indeterminate.Storyboard?.Begin(containingGrid' true);                      }                  }                  catch (Exception)                  {                      //we just ignore                   }              }
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,ResetStoryboard,The following statement contains a magic number: lock (this.lockme)              {                  //perform calculations                  var containerAnimStart = this.CalcContainerAnimStart(width);                  var containerAnimEnd = this.CalcContainerAnimEnd(width);                  var ellipseAnimWell = this.CalcEllipseAnimWell(width);                  var ellipseAnimEnd = this.CalcEllipseAnimEnd(width);                  //reset the main double animation                  try                  {                      var indeterminate = this.GetIndeterminate();                        if (indeterminate != null && this.indeterminateStoryboard != null)                      {                          var newStoryboard = this.indeterminateStoryboard.Clone();                          var doubleAnim = newStoryboard.Children.First(t => t.Name == "MainDoubleAnim");                          doubleAnim.SetValue(DoubleAnimation.FromProperty' containerAnimStart);                          doubleAnim.SetValue(DoubleAnimation.ToProperty' containerAnimEnd);                            var namesOfElements = new[] { "E1"' "E2"' "E3"' "E4"' "E5" };                          foreach (var elemName in namesOfElements)                          {                              var doubleAnimParent = (DoubleAnimationUsingKeyFrames)newStoryboard.Children.First(t => t.Name == elemName + "Anim");                              DoubleKeyFrame first'                                             second'                                             third;                              if (elemName == "E1")                              {                                  first = doubleAnimParent.KeyFrames[1];                                  second = doubleAnimParent.KeyFrames[2];                                  third = doubleAnimParent.KeyFrames[3];                              }                              else                              {                                  first = doubleAnimParent.KeyFrames[2];                                  second = doubleAnimParent.KeyFrames[3];                                  third = doubleAnimParent.KeyFrames[4];                              }                                first.Value = ellipseAnimWell;                              second.Value = ellipseAnimWell;                              third.Value = ellipseAnimEnd;                              first.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              second.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              third.InvalidateProperty(DoubleKeyFrame.ValueProperty);                                doubleAnimParent.InvalidateProperty(Storyboard.TargetPropertyProperty);                              doubleAnimParent.InvalidateProperty(Storyboard.TargetNameProperty);                          }                            var containingGrid = (FrameworkElement)this.GetTemplateChild("ContainingGrid");                            if (removeOldStoryboard && indeterminate.Storyboard != null)                          {                              // remove the previous storyboard from the Grid #1855                              indeterminate.Storyboard.Stop(containingGrid);                              indeterminate.Storyboard.Remove(containingGrid);                          }                            indeterminate.Storyboard = newStoryboard;                            indeterminate.Storyboard?.Begin(containingGrid' true);                      }                  }                  catch (Exception)                  {                      //we just ignore                   }              }
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,ResetStoryboard,The following statement contains a magic number: lock (this.lockme)              {                  //perform calculations                  var containerAnimStart = this.CalcContainerAnimStart(width);                  var containerAnimEnd = this.CalcContainerAnimEnd(width);                  var ellipseAnimWell = this.CalcEllipseAnimWell(width);                  var ellipseAnimEnd = this.CalcEllipseAnimEnd(width);                  //reset the main double animation                  try                  {                      var indeterminate = this.GetIndeterminate();                        if (indeterminate != null && this.indeterminateStoryboard != null)                      {                          var newStoryboard = this.indeterminateStoryboard.Clone();                          var doubleAnim = newStoryboard.Children.First(t => t.Name == "MainDoubleAnim");                          doubleAnim.SetValue(DoubleAnimation.FromProperty' containerAnimStart);                          doubleAnim.SetValue(DoubleAnimation.ToProperty' containerAnimEnd);                            var namesOfElements = new[] { "E1"' "E2"' "E3"' "E4"' "E5" };                          foreach (var elemName in namesOfElements)                          {                              var doubleAnimParent = (DoubleAnimationUsingKeyFrames)newStoryboard.Children.First(t => t.Name == elemName + "Anim");                              DoubleKeyFrame first'                                             second'                                             third;                              if (elemName == "E1")                              {                                  first = doubleAnimParent.KeyFrames[1];                                  second = doubleAnimParent.KeyFrames[2];                                  third = doubleAnimParent.KeyFrames[3];                              }                              else                              {                                  first = doubleAnimParent.KeyFrames[2];                                  second = doubleAnimParent.KeyFrames[3];                                  third = doubleAnimParent.KeyFrames[4];                              }                                first.Value = ellipseAnimWell;                              second.Value = ellipseAnimWell;                              third.Value = ellipseAnimEnd;                              first.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              second.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              third.InvalidateProperty(DoubleKeyFrame.ValueProperty);                                doubleAnimParent.InvalidateProperty(Storyboard.TargetPropertyProperty);                              doubleAnimParent.InvalidateProperty(Storyboard.TargetNameProperty);                          }                            var containingGrid = (FrameworkElement)this.GetTemplateChild("ContainingGrid");                            if (removeOldStoryboard && indeterminate.Storyboard != null)                          {                              // remove the previous storyboard from the Grid #1855                              indeterminate.Storyboard.Stop(containingGrid);                              indeterminate.Storyboard.Remove(containingGrid);                          }                            indeterminate.Storyboard = newStoryboard;                            indeterminate.Storyboard?.Begin(containingGrid' true);                      }                  }                  catch (Exception)                  {                      //we just ignore                   }              }
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,ResetStoryboard,The following statement contains a magic number: lock (this.lockme)              {                  //perform calculations                  var containerAnimStart = this.CalcContainerAnimStart(width);                  var containerAnimEnd = this.CalcContainerAnimEnd(width);                  var ellipseAnimWell = this.CalcEllipseAnimWell(width);                  var ellipseAnimEnd = this.CalcEllipseAnimEnd(width);                  //reset the main double animation                  try                  {                      var indeterminate = this.GetIndeterminate();                        if (indeterminate != null && this.indeterminateStoryboard != null)                      {                          var newStoryboard = this.indeterminateStoryboard.Clone();                          var doubleAnim = newStoryboard.Children.First(t => t.Name == "MainDoubleAnim");                          doubleAnim.SetValue(DoubleAnimation.FromProperty' containerAnimStart);                          doubleAnim.SetValue(DoubleAnimation.ToProperty' containerAnimEnd);                            var namesOfElements = new[] { "E1"' "E2"' "E3"' "E4"' "E5" };                          foreach (var elemName in namesOfElements)                          {                              var doubleAnimParent = (DoubleAnimationUsingKeyFrames)newStoryboard.Children.First(t => t.Name == elemName + "Anim");                              DoubleKeyFrame first'                                             second'                                             third;                              if (elemName == "E1")                              {                                  first = doubleAnimParent.KeyFrames[1];                                  second = doubleAnimParent.KeyFrames[2];                                  third = doubleAnimParent.KeyFrames[3];                              }                              else                              {                                  first = doubleAnimParent.KeyFrames[2];                                  second = doubleAnimParent.KeyFrames[3];                                  third = doubleAnimParent.KeyFrames[4];                              }                                first.Value = ellipseAnimWell;                              second.Value = ellipseAnimWell;                              third.Value = ellipseAnimEnd;                              first.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              second.InvalidateProperty(DoubleKeyFrame.ValueProperty);                              third.InvalidateProperty(DoubleKeyFrame.ValueProperty);                                doubleAnimParent.InvalidateProperty(Storyboard.TargetPropertyProperty);                              doubleAnimParent.InvalidateProperty(Storyboard.TargetNameProperty);                          }                            var containingGrid = (FrameworkElement)this.GetTemplateChild("ContainingGrid");                            if (removeOldStoryboard && indeterminate.Storyboard != null)                          {                              // remove the previous storyboard from the Grid #1855                              indeterminate.Storyboard.Stop(containingGrid);                              indeterminate.Storyboard.Remove(containingGrid);                          }                            indeterminate.Storyboard = newStoryboard;                            indeterminate.Storyboard?.Begin(containingGrid' true);                      }                  }                  catch (Exception)                  {                      //we just ignore                   }              }
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseDiameter,The following statement contains a magic number: this.EllipseDiameter = width <= 180 ? 4 : (width <= 280 ? 5 : 6);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseDiameter,The following statement contains a magic number: this.EllipseDiameter = width <= 180 ? 4 : (width <= 280 ? 5 : 6);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseDiameter,The following statement contains a magic number: this.EllipseDiameter = width <= 180 ? 4 : (width <= 280 ? 5 : 6);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseDiameter,The following statement contains a magic number: this.EllipseDiameter = width <= 180 ? 4 : (width <= 280 ? 5 : 6);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseDiameter,The following statement contains a magic number: this.EllipseDiameter = width <= 180 ? 4 : (width <= 280 ? 5 : 6);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseOffset,The following statement contains a magic number: this.EllipseOffset = width <= 180 ? 4 : (width <= 280 ? 7 : 9);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseOffset,The following statement contains a magic number: this.EllipseOffset = width <= 180 ? 4 : (width <= 280 ? 7 : 9);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseOffset,The following statement contains a magic number: this.EllipseOffset = width <= 180 ? 4 : (width <= 280 ? 7 : 9);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseOffset,The following statement contains a magic number: this.EllipseOffset = width <= 180 ? 4 : (width <= 280 ? 7 : 9);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,SetEllipseOffset,The following statement contains a magic number: this.EllipseOffset = width <= 180 ? 4 : (width <= 280 ? 7 : 9);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimStart,The following statement contains a magic number: return width <= 180 ? -34 : (width <= 280 ? -50.5 : -63);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimStart,The following statement contains a magic number: return width <= 180 ? -34 : (width <= 280 ? -50.5 : -63);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimStart,The following statement contains a magic number: return width <= 180 ? -34 : (width <= 280 ? -50.5 : -63);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimStart,The following statement contains a magic number: return width <= 180 ? -34 : (width <= 280 ? -50.5 : -63);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimStart,The following statement contains a magic number: return width <= 180 ? -34 : (width <= 280 ? -50.5 : -63);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimEnd,The following statement contains a magic number: var firstPart = 0.4352 * width;
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimEnd,The following statement contains a magic number: return width <= 180 ? firstPart - 25.731 : (width <= 280 ? firstPart + 27.84 : firstPart + 58.862);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimEnd,The following statement contains a magic number: return width <= 180 ? firstPart - 25.731 : (width <= 280 ? firstPart + 27.84 : firstPart + 58.862);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimEnd,The following statement contains a magic number: return width <= 180 ? firstPart - 25.731 : (width <= 280 ? firstPart + 27.84 : firstPart + 58.862);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimEnd,The following statement contains a magic number: return width <= 180 ? firstPart - 25.731 : (width <= 280 ? firstPart + 27.84 : firstPart + 58.862);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcContainerAnimEnd,The following statement contains a magic number: return width <= 180 ? firstPart - 25.731 : (width <= 280 ? firstPart + 27.84 : firstPart + 58.862);
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcEllipseAnimWell,The following statement contains a magic number: return width * 1.0 / 3.0;
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcEllipseAnimEnd,The following statement contains a magic number: return width * 2.0 / 3.0;
Magic Number,MahApps.Metro.Controls,MetroProgressBar,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroProgressBar.cs,CalcEllipseAnimEnd,The following statement contains a magic number: return width * 2.0 / 3.0;
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,MetroWindow_SizeChanged,The following statement contains a magic number: var halfDistance = this.ActualWidth / 2;
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,MetroWindow_SizeChanged,The following statement contains a magic number: var distanceToCenter = this.titleBar.DesiredSize.Width / 2;
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,MetroWindow_SizeChanged,The following statement contains a magic number: const double horizontalMargin = 5.0;
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,MetroWindow_SizeChanged,The following statement contains a magic number: if ((dLeft < halfDistance) && (dRight < halfDistance))              {                  Grid.SetColumn(this.titleBar' 0);                  Grid.SetColumnSpan(this.titleBar' 5);              }              else              {                  Grid.SetColumn(this.titleBar' 2);                  Grid.SetColumnSpan(this.titleBar' 1);              }
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,MetroWindow_SizeChanged,The following statement contains a magic number: if ((dLeft < halfDistance) && (dRight < halfDistance))              {                  Grid.SetColumn(this.titleBar' 0);                  Grid.SetColumnSpan(this.titleBar' 5);              }              else              {                  Grid.SetColumn(this.titleBar' 2);                  Grid.SetColumnSpan(this.titleBar' 1);              }
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,IconMouseDown,The following statement contains a magic number: if (e.ChangedButton == MouseButton.Left)              {                  if (e.ClickCount == 2)                  {                      Close();                  }                  else                  {                      ShowSystemMenuPhysicalCoordinates(this' PointToScreen(new Point(0' TitlebarHeight)));                  }              }
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,DoWindowTitleThumbMoveOnDragDelta,The following statement contains a magic number: if (!window.IsWindowDraggable ||                  (!(Math.Abs(dragDeltaEventArgs.HorizontalChange) > 2) && !(Math.Abs(dragDeltaEventArgs.VerticalChange) > 2)))              {                  return;              }
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,DoWindowTitleThumbMoveOnDragDelta,The following statement contains a magic number: if (!window.IsWindowDraggable ||                  (!(Math.Abs(dragDeltaEventArgs.HorizontalChange) > 2) && !(Math.Abs(dragDeltaEventArgs.VerticalChange) > 2)))              {                  return;              }
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HandleFlyoutStatusChange,The following statement contains a magic number: {                  //get it's zindex                  var zIndex = flyout.IsOpen ? Panel.GetZIndex(flyout) + 3 : visibleFlyouts.Count() + 2;                    // Note: ShowWindowCommandsOnTop is here for backwards compatibility reasons                  //if the the corresponding behavior has the right flag' set the window commands' and icon zIndex to a number that is higher than the flyout's.                  this.icon?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.IconOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.LeftWindowCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.LeftWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.RightWindowCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.RightWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.WindowButtonCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.WindowButtonCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.HandleWindowCommandsForFlyouts(visibleFlyouts);              }
Magic Number,MahApps.Metro.Controls,MetroWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindow.cs,HandleFlyoutStatusChange,The following statement contains a magic number: {                  //get it's zindex                  var zIndex = flyout.IsOpen ? Panel.GetZIndex(flyout) + 3 : visibleFlyouts.Count() + 2;                    // Note: ShowWindowCommandsOnTop is here for backwards compatibility reasons                  //if the the corresponding behavior has the right flag' set the window commands' and icon zIndex to a number that is higher than the flyout's.                  this.icon?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.IconOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.LeftWindowCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.LeftWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.RightWindowCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.RightWindowCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.WindowButtonCommandsPresenter?.SetValue(Panel.ZIndexProperty' flyout.IsModal && flyout.IsOpen ? 0 : (this.WindowButtonCommandsOverlayBehavior.HasFlag(WindowCommandsOverlayBehavior.Flyouts) ? zIndex : 1));                  this.HandleWindowCommandsForFlyouts(visibleFlyouts);              }
Magic Number,MahApps.Metro.Controls,MetroWindowHelpers,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindowHelpers.cs,ChangeAllWindowCommandsBrush,The following statement contains a magic number: if (brush == null)              {                  // set the theme to light by default                  window.InvokeActionOnWindowCommands(x => x.SetValue(WindowCommands.ThemeProperty' Theme.Light)'                                                      x => x.SetValue(WindowButtonCommands.ThemeProperty' Theme.Light)' position);                    // clear the foreground property                  window.InvokeActionOnWindowCommands(x => x.ClearValue(Control.ForegroundProperty)' null' position);              }              else              {                  // calculate brush color lightness                  var color = ((SolidColorBrush)brush).Color;                    var r = color.R / 255.0f;                  var g = color.G / 255.0f;                  var b = color.B / 255.0f;                    var max = r;                  var min = r;                    if (g > max) max = g;                  if (b > max) max = b;                    if (g < min) min = g;                  if (b < min) min = b;                    var lightness = (max + min) / 2;                    // set the theme based on color lightness                  if (lightness > 0.1)                  {                      window.InvokeActionOnWindowCommands(x => x.SetValue(WindowCommands.ThemeProperty' Theme.Light)'                                                          x => x.SetValue(WindowButtonCommands.ThemeProperty' Theme.Light)' position);                  }                  else                  {                      window.InvokeActionOnWindowCommands(x => x.SetValue(WindowCommands.ThemeProperty' Theme.Dark)'                                                          x => x.SetValue(WindowButtonCommands.ThemeProperty' Theme.Dark)' position);                  }                    // set the foreground property                  window.InvokeActionOnWindowCommands(x => x.SetValue(Control.ForegroundProperty' brush)' null' position);              }
Magic Number,MahApps.Metro.Controls,MetroWindowHelpers,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroWindowHelpers.cs,ChangeAllWindowCommandsBrush,The following statement contains a magic number: if (brush == null)              {                  // set the theme to light by default                  window.InvokeActionOnWindowCommands(x => x.SetValue(WindowCommands.ThemeProperty' Theme.Light)'                                                      x => x.SetValue(WindowButtonCommands.ThemeProperty' Theme.Light)' position);                    // clear the foreground property                  window.InvokeActionOnWindowCommands(x => x.ClearValue(Control.ForegroundProperty)' null' position);              }              else              {                  // calculate brush color lightness                  var color = ((SolidColorBrush)brush).Color;                    var r = color.R / 255.0f;                  var g = color.G / 255.0f;                  var b = color.B / 255.0f;                    var max = r;                  var min = r;                    if (g > max) max = g;                  if (b > max) max = b;                    if (g < min) min = g;                  if (b < min) min = b;                    var lightness = (max + min) / 2;                    // set the theme based on color lightness                  if (lightness > 0.1)                  {                      window.InvokeActionOnWindowCommands(x => x.SetValue(WindowCommands.ThemeProperty' Theme.Light)'                                                          x => x.SetValue(WindowButtonCommands.ThemeProperty' Theme.Light)' position);                  }                  else                  {                      window.InvokeActionOnWindowCommands(x => x.SetValue(WindowCommands.ThemeProperty' Theme.Dark)'                                                          x => x.SetValue(WindowButtonCommands.ThemeProperty' Theme.Dark)' position);                  }                    // set the foreground property                  window.InvokeActionOnWindowCommands(x => x.SetValue(Control.ForegroundProperty' brush)' null' position);              }
Magic Number,MahApps.Metro.Controls,MultiFrameImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MultiFrameImage.cs,OnRender,The following statement contains a magic number: switch (MultiFrameImageMode) {                  case MultiFrameImageMode.ScaleDownLargerFrame:                      var minSize = Math.Max(RenderSize.Width' RenderSize.Height);                      var minFrame = _frames.FirstOrDefault(f => f.Width >= minSize && f.Height >= minSize) ?? _frames.Last();                      dc.DrawImage(minFrame' new Rect(0' 0' RenderSize.Width' RenderSize.Height));                      break;                  case MultiFrameImageMode.NoScaleSmallerFrame:                      var maxSize = Math.Min(RenderSize.Width' RenderSize.Height);                      var maxFrame = _frames.LastOrDefault(f => f.Width <= maxSize && f.Height >= maxSize) ?? _frames.First();                      dc.DrawImage(maxFrame' new Rect((RenderSize.Width-maxFrame.Width)/2' (RenderSize.Height - maxFrame.Height) / 2' maxFrame.Width' maxFrame.Height));                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MahApps.Metro.Controls,MultiFrameImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MultiFrameImage.cs,OnRender,The following statement contains a magic number: switch (MultiFrameImageMode) {                  case MultiFrameImageMode.ScaleDownLargerFrame:                      var minSize = Math.Max(RenderSize.Width' RenderSize.Height);                      var minFrame = _frames.FirstOrDefault(f => f.Width >= minSize && f.Height >= minSize) ?? _frames.Last();                      dc.DrawImage(minFrame' new Rect(0' 0' RenderSize.Width' RenderSize.Height));                      break;                  case MultiFrameImageMode.NoScaleSmallerFrame:                      var maxSize = Math.Min(RenderSize.Width' RenderSize.Height);                      var maxFrame = _frames.LastOrDefault(f => f.Width <= maxSize && f.Height >= maxSize) ?? _frames.First();                      dc.DrawImage(maxFrame' new Rect((RenderSize.Width-maxFrame.Width)/2' (RenderSize.Height - maxFrame.Height) / 2' maxFrame.Width' maxFrame.Height));                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,ChangeValueWithSpeedUp,The following statement contains a magic number: if (Speedup)              {                  double d = Interval * _internalLargeChange;                  if ((_intervalValueSinceReset += Interval * _internalIntervalMultiplierForCalculation) > d)                  {                      _internalLargeChange *= 10;                      _internalIntervalMultiplierForCalculation *= 10;                  }                    ChangeValueInternal(direction * _internalIntervalMultiplierForCalculation);              }              else              {                  ChangeValueInternal(direction * Interval);              }
Magic Number,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,ChangeValueWithSpeedUp,The following statement contains a magic number: if (Speedup)              {                  double d = Interval * _internalLargeChange;                  if ((_intervalValueSinceReset += Interval * _internalIntervalMultiplierForCalculation) > d)                  {                      _internalLargeChange *= 10;                      _internalIntervalMultiplierForCalculation *= 10;                  }                    ChangeValueInternal(direction * _internalIntervalMultiplierForCalculation);              }              else              {                  ChangeValueInternal(direction * Interval);              }
Magic Number,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,ResetInternal,The following statement contains a magic number: _internalLargeChange = 100 * Interval;
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,CreateVisualChild,The following statement contains a magic number: var m3dGroup = new Model3DGroup              {                  Children =                              {                                  new DirectionalLight(Colors.White' new Vector3D(0' 0' -1))'                                  new DirectionalLight(Colors.White' new Vector3D(0.1' -0.1' 1))'                                  backModel                              }              };
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,CreateVisualChild,The following statement contains a magic number: var m3dGroup = new Model3DGroup              {                  Children =                              {                                  new DirectionalLight(Colors.White' new Vector3D(0' 0' -1))'                                  new DirectionalLight(Colors.White' new Vector3D(0.1' -0.1' 1))'                                  backModel                              }              };
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,SetCachingForObject,The following statement contains a magic number: RenderOptions.SetCacheInvalidationThresholdMinimum(d' 0.5);
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,SetCachingForObject,The following statement contains a magic number: RenderOptions.SetCacheInvalidationThresholdMaximum(d' 2.0);
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The following statement contains a magic number: double fovInRadians = FieldOfView * (Math.PI / 180);
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The following statement contains a magic number: double zValue = w / Math.Tan(fovInRadians / 2) / 2;
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The following statement contains a magic number: double zValue = w / Math.Tan(fovInRadians / 2) / 2;
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The following statement contains a magic number: _viewport3D.Camera = new PerspectiveCamera(new Point3D(w / 2' h / 2' zValue)' -ZAxis' YAxis' FieldOfView);
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The following statement contains a magic number: _viewport3D.Camera = new PerspectiveCamera(new Point3D(w / 2' h / 2' zValue)' -ZAxis' YAxis' FieldOfView);
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The following statement contains a magic number: _rotationTransform.CenterX = w / 2;
Magic Number,MahApps.Metro.Controls,Planerator,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Planerator.cs,Update3D,The following statement contains a magic number: _rotationTransform.CenterY = h / 2;
Magic Number,MahApps.Metro.Controls,ProgressRing,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,SetMaxSideLength,The following statement contains a magic number: MaxSideLength = width <= 20 ? 20 : width;
Magic Number,MahApps.Metro.Controls,ProgressRing,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,SetMaxSideLength,The following statement contains a magic number: MaxSideLength = width <= 20 ? 20 : width;
Magic Number,MahApps.Metro.Controls,ProgressRing,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,SetEllipseDiameter,The following statement contains a magic number: EllipseDiameter =(width / 8)*EllipseDiameterScale;
Magic Number,MahApps.Metro.Controls,ProgressRing,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,SetEllipseOffset,The following statement contains a magic number: EllipseOffset = new Thickness(0' width / 2' 0' 0);
Magic Number,MahApps.Metro.Controls,WidthToMaxSideLengthConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,Convert,The following statement contains a magic number: if (value is double)              {                  var width = (double)value;                  return width <= 20 ? 20 : width;              }
Magic Number,MahApps.Metro.Controls,WidthToMaxSideLengthConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ProgressRing.cs,Convert,The following statement contains a magic number: if (value is double)              {                  var width = (double)value;                  return width <= 20 ? 20 : width;              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RangeSlider,The following statement contains a magic number: MaximumProperty.OverrideMetadata(typeof(RangeSlider)' new FrameworkPropertyMetadata(100.0' FrameworkPropertyMetadataOptions.AffectsMeasure' MaxPropertyChangedCallback' CoerceMaximum));
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,LeftButtonMouseDown,The following statement contains a magic number: if (Mouse.LeftButton == MouseButtonState.Pressed)              {                  var p = Mouse.GetPosition(_visualElementsContainer);                  var change = Orientation == Orientation.Horizontal                      ? _leftButton.ActualWidth - p.X + (_leftThumb.ActualWidth / 2)                      : -(_leftButton.ActualHeight - (ActualHeight - (p.Y + (_leftThumb.ActualHeight / 2))));                  if (!IsSnapToTickEnabled)                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          MoveThumb(_leftButton' _centerThumb' -change' Orientation' out _direction);                          ReCalculateRangeSelected(true' false' _direction);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          MoveThumb(_leftButton' _rightButton' -change' Orientation' out _direction);                          ReCalculateRangeSelected(true' true' _direction);                      }                  }                  else                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Decrease' ButtonType.BottomLeft' -change' this.LowerValue' true);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Decrease' ButtonType.Both' -change' this.LowerValue' true);                      }                  }                  if (!IsMoveToPointEnabled)                  {                      _position = Mouse.GetPosition(_visualElementsContainer);                      _bType = MoveWholeRange ? ButtonType.Both : ButtonType.BottomLeft;                      _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                      _currenValue = LowerValue;                      _isInsideRange = false;                      _direction = Direction.Decrease;                      _timer.Start();                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,LeftButtonMouseDown,The following statement contains a magic number: if (Mouse.LeftButton == MouseButtonState.Pressed)              {                  var p = Mouse.GetPosition(_visualElementsContainer);                  var change = Orientation == Orientation.Horizontal                      ? _leftButton.ActualWidth - p.X + (_leftThumb.ActualWidth / 2)                      : -(_leftButton.ActualHeight - (ActualHeight - (p.Y + (_leftThumb.ActualHeight / 2))));                  if (!IsSnapToTickEnabled)                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          MoveThumb(_leftButton' _centerThumb' -change' Orientation' out _direction);                          ReCalculateRangeSelected(true' false' _direction);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          MoveThumb(_leftButton' _rightButton' -change' Orientation' out _direction);                          ReCalculateRangeSelected(true' true' _direction);                      }                  }                  else                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Decrease' ButtonType.BottomLeft' -change' this.LowerValue' true);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Decrease' ButtonType.Both' -change' this.LowerValue' true);                      }                  }                  if (!IsMoveToPointEnabled)                  {                      _position = Mouse.GetPosition(_visualElementsContainer);                      _bType = MoveWholeRange ? ButtonType.Both : ButtonType.BottomLeft;                      _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                      _currenValue = LowerValue;                      _isInsideRange = false;                      _direction = Direction.Decrease;                      _timer.Start();                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RightButtonMouseDown,The following statement contains a magic number: if (Mouse.LeftButton == MouseButtonState.Pressed)              {                  var p = Mouse.GetPosition(_visualElementsContainer);                  var change = Orientation == Orientation.Horizontal                      ? _rightButton.ActualWidth - (ActualWidth - (p.X + (_rightThumb.ActualWidth / 2)))                      : -(_rightButton.ActualHeight - (p.Y - (_rightThumb.ActualHeight / 2)));                  if (!IsSnapToTickEnabled)                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          MoveThumb(_centerThumb' _rightButton' change' Orientation' out _direction);                          ReCalculateRangeSelected(false' true' _direction);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          MoveThumb(_leftButton' _rightButton' change' Orientation' out _direction);                          ReCalculateRangeSelected(true' true' _direction);                      }                  }                  else                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Increase' ButtonType.TopRight' change' this.UpperValue' true);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Increase' ButtonType.Both' change' this.UpperValue' true);                      }                  }                  if (!IsMoveToPointEnabled)                  {                      _position = Mouse.GetPosition(_visualElementsContainer);                      _bType = MoveWholeRange ? ButtonType.Both : ButtonType.TopRight;                      _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                      _currenValue = UpperValue;                      _direction = Direction.Increase;                      _isInsideRange = false;                      _timer.Start();                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RightButtonMouseDown,The following statement contains a magic number: if (Mouse.LeftButton == MouseButtonState.Pressed)              {                  var p = Mouse.GetPosition(_visualElementsContainer);                  var change = Orientation == Orientation.Horizontal                      ? _rightButton.ActualWidth - (ActualWidth - (p.X + (_rightThumb.ActualWidth / 2)))                      : -(_rightButton.ActualHeight - (p.Y - (_rightThumb.ActualHeight / 2)));                  if (!IsSnapToTickEnabled)                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          MoveThumb(_centerThumb' _rightButton' change' Orientation' out _direction);                          ReCalculateRangeSelected(false' true' _direction);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          MoveThumb(_leftButton' _rightButton' change' Orientation' out _direction);                          ReCalculateRangeSelected(true' true' _direction);                      }                  }                  else                  {                      if (IsMoveToPointEnabled && !MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Increase' ButtonType.TopRight' change' this.UpperValue' true);                      }                      else if (IsMoveToPointEnabled && MoveWholeRange)                      {                          this.JumpToNextTick(Direction.Increase' ButtonType.Both' change' this.UpperValue' true);                      }                  }                  if (!IsMoveToPointEnabled)                  {                      _position = Mouse.GetPosition(_visualElementsContainer);                      _bType = MoveWholeRange ? ButtonType.Both : ButtonType.TopRight;                      _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                      _currenValue = UpperValue;                      _direction = Direction.Increase;                      _isInsideRange = false;                      _timer.Start();                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CentralThumbMouseDown,The following statement contains a magic number: if (ExtendedMode)              {                  if (Mouse.LeftButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? (p.X + (_leftThumb.ActualWidth / 2) - (_leftButton.ActualWidth + _leftThumb.ActualWidth))                          : -(ActualHeight - ((p.Y + (_leftThumb.ActualHeight / 2)) + _leftButton.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_leftButton' _centerThumb' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' false' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.BottomLeft' change' this.LowerValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.Both' change' this.LowerValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.BottomLeft;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = LowerValue;                          _direction = Direction.Increase;                          _isInsideRange = true;                          _timer.Start();                      }                  }                  else if (Mouse.RightButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? ActualWidth - (p.X + (_rightThumb.ActualWidth / 2) + _rightButton.ActualWidth)                          : -(p.Y + (_rightThumb.ActualHeight / 2) - (_rightButton.ActualHeight + _rightThumb.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_centerThumb' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(false' true' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.TopRight' -change' this.UpperValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.Both' -change' this.UpperValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.TopRight;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = UpperValue;                          _direction = Direction.Decrease;                          _isInsideRange = true;                          _timer.Start();                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CentralThumbMouseDown,The following statement contains a magic number: if (ExtendedMode)              {                  if (Mouse.LeftButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? (p.X + (_leftThumb.ActualWidth / 2) - (_leftButton.ActualWidth + _leftThumb.ActualWidth))                          : -(ActualHeight - ((p.Y + (_leftThumb.ActualHeight / 2)) + _leftButton.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_leftButton' _centerThumb' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' false' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.BottomLeft' change' this.LowerValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.Both' change' this.LowerValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.BottomLeft;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = LowerValue;                          _direction = Direction.Increase;                          _isInsideRange = true;                          _timer.Start();                      }                  }                  else if (Mouse.RightButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? ActualWidth - (p.X + (_rightThumb.ActualWidth / 2) + _rightButton.ActualWidth)                          : -(p.Y + (_rightThumb.ActualHeight / 2) - (_rightButton.ActualHeight + _rightThumb.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_centerThumb' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(false' true' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.TopRight' -change' this.UpperValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.Both' -change' this.UpperValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.TopRight;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = UpperValue;                          _direction = Direction.Decrease;                          _isInsideRange = true;                          _timer.Start();                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CentralThumbMouseDown,The following statement contains a magic number: if (ExtendedMode)              {                  if (Mouse.LeftButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? (p.X + (_leftThumb.ActualWidth / 2) - (_leftButton.ActualWidth + _leftThumb.ActualWidth))                          : -(ActualHeight - ((p.Y + (_leftThumb.ActualHeight / 2)) + _leftButton.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_leftButton' _centerThumb' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' false' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.BottomLeft' change' this.LowerValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.Both' change' this.LowerValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.BottomLeft;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = LowerValue;                          _direction = Direction.Increase;                          _isInsideRange = true;                          _timer.Start();                      }                  }                  else if (Mouse.RightButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? ActualWidth - (p.X + (_rightThumb.ActualWidth / 2) + _rightButton.ActualWidth)                          : -(p.Y + (_rightThumb.ActualHeight / 2) - (_rightButton.ActualHeight + _rightThumb.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_centerThumb' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(false' true' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.TopRight' -change' this.UpperValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.Both' -change' this.UpperValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.TopRight;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = UpperValue;                          _direction = Direction.Decrease;                          _isInsideRange = true;                          _timer.Start();                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CentralThumbMouseDown,The following statement contains a magic number: if (ExtendedMode)              {                  if (Mouse.LeftButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? (p.X + (_leftThumb.ActualWidth / 2) - (_leftButton.ActualWidth + _leftThumb.ActualWidth))                          : -(ActualHeight - ((p.Y + (_leftThumb.ActualHeight / 2)) + _leftButton.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_leftButton' _centerThumb' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' false' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.BottomLeft' change' this.LowerValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Increase' ButtonType.Both' change' this.LowerValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.BottomLeft;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = LowerValue;                          _direction = Direction.Increase;                          _isInsideRange = true;                          _timer.Start();                      }                  }                  else if (Mouse.RightButton == MouseButtonState.Pressed && (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))                  {                      _centerThumbBlocked = true;                      var p = Mouse.GetPosition(_visualElementsContainer);                      var change = Orientation == Orientation.Horizontal                          ? ActualWidth - (p.X + (_rightThumb.ActualWidth / 2) + _rightButton.ActualWidth)                          : -(p.Y + (_rightThumb.ActualHeight / 2) - (_rightButton.ActualHeight + _rightThumb.ActualHeight));                      if (!IsSnapToTickEnabled)                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              MoveThumb(_centerThumb' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(false' true' _direction);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              MoveThumb(_leftButton' _rightButton' -change' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                          }                      }                      else                      {                          if (IsMoveToPointEnabled && !MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.TopRight' -change' this.UpperValue' true);                          }                          else if (IsMoveToPointEnabled && MoveWholeRange)                          {                              this.JumpToNextTick(Direction.Decrease' ButtonType.Both' -change' this.UpperValue' true);                          }                      }                      if (!IsMoveToPointEnabled)                      {                          _position = Mouse.GetPosition(_visualElementsContainer);                          _bType = MoveWholeRange ? ButtonType.Both : ButtonType.TopRight;                          _currentpoint = Orientation == Orientation.Horizontal ? _position.X : _position.Y;                          _currenValue = UpperValue;                          _direction = Direction.Decrease;                          _isInsideRange = true;                          _timer.Start();                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MoveToNextValue,The following statement contains a magic number: if (!IsSnapToTickEnabled)              {                  widthChange = SmallChange;                  if (_tickCount > 5)                  {                      widthChange = LargeChange;                  }                  _roundToPrecision = true;                  if (!widthChange.ToString(CultureInfo.InvariantCulture).ToLower().Contains("e") &&                      widthChange.ToString(CultureInfo.InvariantCulture).Contains("."))                  {                      var array = widthChange.ToString(CultureInfo.InvariantCulture).Split('.');                      _precision = array[1].Length;                  }                  else                  {                      _precision = 0;                  }                  //Change value sign according to Horizontal or Vertical orientation                  widthChange = Orientation == Orientation.Horizontal ? widthChange : -widthChange;                  //Change value sign one more time according to Increase or Decrease direction                  widthChange = _direction == Direction.Increase ? widthChange : -widthChange;                  if (result)                  {                      switch (_bType)                      {                          case ButtonType.BottomLeft:                              MoveThumb(_leftButton' _centerThumb' widthChange * _density' Orientation' out _direction);                              ReCalculateRangeSelected(true' false' _direction);                              break;                          case ButtonType.TopRight:                              MoveThumb(_centerThumb' _rightButton' widthChange * _density' Orientation' out _direction);                              ReCalculateRangeSelected(false' true' _direction);                              break;                          case ButtonType.Both:                              MoveThumb(_leftButton' _rightButton' widthChange * _density' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                              break;                      }                  }              }              else              {                  //Get the difference between current and next value                  widthChange = this.CalculateNextTick(this._direction' this._currenValue' 0' true);                  var value = widthChange;                  //Change value sign according to Horizontal or Vertical orientation                  widthChange = Orientation == Orientation.Horizontal ? widthChange : -widthChange;                  if (_direction == Direction.Increase)                  {                      if (result)                      {                          switch (_bType)                          {                              case ButtonType.BottomLeft:                                  MoveThumb(this._leftButton' this._centerThumb' widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(true' false' LowerValue + value' _direction);                                  break;                              case ButtonType.TopRight:                                  MoveThumb(this._centerThumb' this._rightButton' widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(false' true' UpperValue + value' _direction);                                  break;                              case ButtonType.Both:                                  MoveThumb(this._leftButton' this._rightButton' widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(LowerValue + value' UpperValue + value' _direction);                                  break;                          }                      }                  }                  else if (_direction == Direction.Decrease)                  {                      if (result)                      {                          switch (_bType)                          {                              case ButtonType.BottomLeft:                                  MoveThumb(this._leftButton' this._centerThumb' -widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(true' false' LowerValue - value' _direction);                                  break;                              case ButtonType.TopRight:                                  MoveThumb(this._centerThumb' this._rightButton' -widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(false' true' UpperValue - value' _direction);                                  break;                              case ButtonType.Both:                                  MoveThumb(this._leftButton' this._rightButton' -widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(LowerValue - value' UpperValue - value' _direction);                                  break;                          }                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,JumpToNextTick,The following statement contains a magic number: if (jumpDirectlyToTick)              {                  this.SnapToTickHandle(type' direction' difference);              }              else              {                  if (direction == Direction.Increase)                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if (distance > (difference * _density) / 2 || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if ((distance > tickIntervalInPixels / 2) || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }                  else                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if ((distance <= -(difference * _density) / 2) || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if (distance < tickIntervalInPixels / 2 || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,JumpToNextTick,The following statement contains a magic number: if (jumpDirectlyToTick)              {                  this.SnapToTickHandle(type' direction' difference);              }              else              {                  if (direction == Direction.Increase)                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if (distance > (difference * _density) / 2 || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if ((distance > tickIntervalInPixels / 2) || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }                  else                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if ((distance <= -(difference * _density) / 2) || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if (distance < tickIntervalInPixels / 2 || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,JumpToNextTick,The following statement contains a magic number: if (jumpDirectlyToTick)              {                  this.SnapToTickHandle(type' direction' difference);              }              else              {                  if (direction == Direction.Increase)                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if (distance > (difference * _density) / 2 || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if ((distance > tickIntervalInPixels / 2) || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }                  else                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if ((distance <= -(difference * _density) / 2) || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if (distance < tickIntervalInPixels / 2 || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,JumpToNextTick,The following statement contains a magic number: if (jumpDirectlyToTick)              {                  this.SnapToTickHandle(type' direction' difference);              }              else              {                  if (direction == Direction.Increase)                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if (distance > (difference * _density) / 2 || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if ((distance > tickIntervalInPixels / 2) || (distance >= (widthHeight - pos) || distance >= pos))                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }                  else                  {                      if (!IsDoubleCloseToInt(checkingValue / TickFrequency))                      {                          if ((distance <= -(difference * _density) / 2) || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                      else                      {                          if (distance < tickIntervalInPixels / 2 || (UpperValue - LowerValue) < difference)                          {                              this.SnapToTickHandle(type' direction' difference);                          }                      }                  }              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,RelocateAutoToolTip,The following statement contains a magic number: _autoToolTip.HorizontalOffset = offset + 0.001;
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The following statement contains a magic number: switch (AutoToolTipPlacement)              {                  case AutoToolTipPlacement.TopLeft:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at top of thumb                          return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' -popupSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at left of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(-popupSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    case AutoToolTipPlacement.BottomRight:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at bottom of thumb                           return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' targetSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at right of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(targetSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    default:                      return new CustomPopupPlacement[] { };              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The following statement contains a magic number: switch (AutoToolTipPlacement)              {                  case AutoToolTipPlacement.TopLeft:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at top of thumb                          return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' -popupSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at left of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(-popupSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    case AutoToolTipPlacement.BottomRight:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at bottom of thumb                           return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' targetSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at right of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(targetSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    default:                      return new CustomPopupPlacement[] { };              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The following statement contains a magic number: switch (AutoToolTipPlacement)              {                  case AutoToolTipPlacement.TopLeft:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at top of thumb                          return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' -popupSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at left of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(-popupSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    case AutoToolTipPlacement.BottomRight:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at bottom of thumb                           return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' targetSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at right of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(targetSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    default:                      return new CustomPopupPlacement[] { };              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,PopupPlacementCallback,The following statement contains a magic number: switch (AutoToolTipPlacement)              {                  case AutoToolTipPlacement.TopLeft:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at top of thumb                          return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' -popupSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at left of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(-popupSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    case AutoToolTipPlacement.BottomRight:                      if (Orientation == Orientation.Horizontal)                      {                          // Place popup at bottom of thumb                           return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point((targetSize.Width - popupSize.Width) * 0.5' targetSize.Height)' PopupPrimaryAxis.Horizontal) };                      }                      // Place popup at right of thumb                       return new CustomPopupPlacement[] { new CustomPopupPlacement(new Point(targetSize.Width' (targetSize.Height - popupSize.Height) * 0.5)' PopupPrimaryAxis.Vertical) };                    default:                      return new CustomPopupPlacement[] { };              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CoerceMinRangeWidth,The following statement contains a magic number: if (rs._leftThumb != null && rs._rightThumb != null)              {                  double width;                  if (rs.Orientation == Orientation.Horizontal)                  {                      width = rs.ActualWidth - rs._leftThumb.ActualWidth - rs._rightThumb.ActualWidth;                  }                  else                  {                      width = rs.ActualHeight - rs._leftThumb.ActualHeight - rs._rightThumb.ActualHeight;                  }                  return (Double)basevalue > width / 2 ? width / 2 : (Double)basevalue;              }
Magic Number,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,CoerceMinRangeWidth,The following statement contains a magic number: if (rs._leftThumb != null && rs._rightThumb != null)              {                  double width;                  if (rs.Orientation == Orientation.Horizontal)                  {                      width = rs.ActualWidth - rs._leftThumb.ActualWidth - rs._rightThumb.ActualWidth;                  }                  else                  {                      width = rs.ActualHeight - rs._leftThumb.ActualHeight - rs._rightThumb.ActualHeight;                  }                  return (Double)basevalue > width / 2 ? width / 2 : (Double)basevalue;              }
Magic Number,MahApps.Metro.Controls,RevealImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RevealImage.xaml.cs,GridMouseEnter,The following statement contains a magic number: TypewriteTextblock(Text.ToUpper()' textBlock' TimeSpan.FromSeconds(.25));
Magic Number,MahApps.Metro.Controls,RevealImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RevealImage.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.revealImage = ((MahApps.Metro.Controls.RevealImage)(target));              return;              case 2:              this.OnMouseLeave1_BeginStoryboard = ((System.Windows.Media.Animation.BeginStoryboard)(target));              return;              case 3:              this.grid = ((System.Windows.Controls.Grid)(target));                            #line 44 "RevealImage.xaml"              this.grid.MouseEnter += new System.Windows.Input.MouseEventHandler(this.GridMouseEnter);                            #line default              #line hidden              return;              case 4:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 5:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,MahApps.Metro.Controls,RevealImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RevealImage.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.revealImage = ((MahApps.Metro.Controls.RevealImage)(target));              return;              case 2:              this.OnMouseLeave1_BeginStoryboard = ((System.Windows.Media.Animation.BeginStoryboard)(target));              return;              case 3:              this.grid = ((System.Windows.Controls.Grid)(target));                            #line 44 "RevealImage.xaml"              this.grid.MouseEnter += new System.Windows.Input.MouseEventHandler(this.GridMouseEnter);                            #line default              #line hidden              return;              case 4:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 5:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,MahApps.Metro.Controls,RevealImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RevealImage.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.revealImage = ((MahApps.Metro.Controls.RevealImage)(target));              return;              case 2:              this.OnMouseLeave1_BeginStoryboard = ((System.Windows.Media.Animation.BeginStoryboard)(target));              return;              case 3:              this.grid = ((System.Windows.Controls.Grid)(target));                            #line 44 "RevealImage.xaml"              this.grid.MouseEnter += new System.Windows.Input.MouseEventHandler(this.GridMouseEnter);                            #line default              #line hidden              return;              case 4:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 5:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,MahApps.Metro.Controls,RevealImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RevealImage.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.revealImage = ((MahApps.Metro.Controls.RevealImage)(target));              return;              case 2:              this.OnMouseLeave1_BeginStoryboard = ((System.Windows.Media.Animation.BeginStoryboard)(target));              return;              case 3:              this.grid = ((System.Windows.Controls.Grid)(target));                            #line 44 "RevealImage.xaml"              this.grid.MouseEnter += new System.Windows.Input.MouseEventHandler(this.GridMouseEnter);                            #line default              #line hidden              return;              case 4:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 5:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,CreateValueList,The following statement contains a magic number: return Enumerable.Repeat(interval' 60 / interval)                               .Select((value' index) => value * index)                               .ToList();
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,CoerceSource60,The following statement contains a magic number: if (list != null)              {                  return list.Where(i => i >= 0 && i < 60);              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,CoerceSourceHours,The following statement contains a magic number: if (timePickerBase != null && hourList != null)              {                  if (timePickerBase.IsMilitaryTime)                  {                      return hourList.Where(i => i > 0 && i <= 12).OrderBy(i => i' new AmPmComparer());                  }                  return hourList.Where(i => i >= 0 && i < 24);              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,CoerceSourceHours,The following statement contains a magic number: if (timePickerBase != null && hourList != null)              {                  if (timePickerBase.IsMilitaryTime)                  {                      return hourList.Where(i => i > 0 && i <= 12).OrderBy(i => i' new AmPmComparer());                  }                  return hourList.Where(i => i >= 0 && i < 24);              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,GetAmPmOffset,The following statement contains a magic number: if (IsMilitaryTime)              {                  if (currentHour == 12)                  {                      if (Equals(_ampmSwitcher.SelectedItem' SpecificCultureInfo.DateTimeFormat.AMDesignator))                      {                          return -12;                      }                  }                  else if (Equals(_ampmSwitcher.SelectedItem' SpecificCultureInfo.DateTimeFormat.PMDesignator))                  {                      return 12;                  }              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,GetAmPmOffset,The following statement contains a magic number: if (IsMilitaryTime)              {                  if (currentHour == 12)                  {                      if (Equals(_ampmSwitcher.SelectedItem' SpecificCultureInfo.DateTimeFormat.AMDesignator))                      {                          return -12;                      }                  }                  else if (Equals(_ampmSwitcher.SelectedItem' SpecificCultureInfo.DateTimeFormat.PMDesignator))                  {                      return 12;                  }              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,GetAmPmOffset,The following statement contains a magic number: if (IsMilitaryTime)              {                  if (currentHour == 12)                  {                      if (Equals(_ampmSwitcher.SelectedItem' SpecificCultureInfo.DateTimeFormat.AMDesignator))                      {                          return -12;                      }                  }                  else if (Equals(_ampmSwitcher.SelectedItem' SpecificCultureInfo.DateTimeFormat.PMDesignator))                  {                      return 12;                  }              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,SetHourPartValues,The following statement contains a magic number: if (_hourInput != null)              {                  if (IsMilitaryTime)                  {                      _ampmSwitcher.SelectedValue = timeOfDay.Hours < 12 ? SpecificCultureInfo.DateTimeFormat.AMDesignator : SpecificCultureInfo.DateTimeFormat.PMDesignator;                      if (timeOfDay.Hours == 0 || timeOfDay.Hours == 12)                      {                          _hourInput.SelectedValue = 12;                      }                      else                      {                          _hourInput.SelectedValue = timeOfDay.Hours % 12;                      }                  }                  else                  {                      _hourInput.SelectedValue = timeOfDay.Hours;                  }              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,SetHourPartValues,The following statement contains a magic number: if (_hourInput != null)              {                  if (IsMilitaryTime)                  {                      _ampmSwitcher.SelectedValue = timeOfDay.Hours < 12 ? SpecificCultureInfo.DateTimeFormat.AMDesignator : SpecificCultureInfo.DateTimeFormat.PMDesignator;                      if (timeOfDay.Hours == 0 || timeOfDay.Hours == 12)                      {                          _hourInput.SelectedValue = 12;                      }                      else                      {                          _hourInput.SelectedValue = timeOfDay.Hours % 12;                      }                  }                  else                  {                      _hourInput.SelectedValue = timeOfDay.Hours;                  }              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,SetHourPartValues,The following statement contains a magic number: if (_hourInput != null)              {                  if (IsMilitaryTime)                  {                      _ampmSwitcher.SelectedValue = timeOfDay.Hours < 12 ? SpecificCultureInfo.DateTimeFormat.AMDesignator : SpecificCultureInfo.DateTimeFormat.PMDesignator;                      if (timeOfDay.Hours == 0 || timeOfDay.Hours == 12)                      {                          _hourInput.SelectedValue = 12;                      }                      else                      {                          _hourInput.SelectedValue = timeOfDay.Hours % 12;                      }                  }                  else                  {                      _hourInput.SelectedValue = timeOfDay.Hours;                  }              }
Magic Number,MahApps.Metro.Controls,TimePickerBase,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\TimePicker\TimePickerBase.cs,SetHourPartValues,The following statement contains a magic number: if (_hourInput != null)              {                  if (IsMilitaryTime)                  {                      _ampmSwitcher.SelectedValue = timeOfDay.Hours < 12 ? SpecificCultureInfo.DateTimeFormat.AMDesignator : SpecificCultureInfo.DateTimeFormat.PMDesignator;                      if (timeOfDay.Hours == 0 || timeOfDay.Hours == 12)                      {                          _hourInput.SelectedValue = 12;                      }                      else                      {                          _hourInput.SelectedValue = timeOfDay.Hours % 12;                      }                  }                  else                  {                      _hourInput.SelectedValue = timeOfDay.Hours;                  }              }
Magic Number,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,UpdateThumb,The following statement contains a magic number: if (_ThumbTranslate != null && _SwitchTrack != null && _ThumbIndicator != null)              {                  double destination = IsChecked.GetValueOrDefault() ? ActualWidth - (_SwitchTrack.Margin.Left + _SwitchTrack.Margin.Right + _ThumbIndicator.ActualWidth + _ThumbIndicator.Margin.Left + _ThumbIndicator.Margin.Right) : 0;                    _thumbAnimation = new DoubleAnimation();                  _thumbAnimation.To = destination;                  _thumbAnimation.Duration = TimeSpan.FromMilliseconds(500);                  _thumbAnimation.EasingFunction = new ExponentialEase() { Exponent = 9 };                  _thumbAnimation.FillBehavior = FillBehavior.Stop;                    AnimationTimeline currentAnimation = _thumbAnimation;                  _thumbAnimation.Completed += (sender' e) => {                      if (_thumbAnimation != null && currentAnimation == _thumbAnimation)                      {                          _ThumbTranslate.X = destination;                          _thumbAnimation = null;                      }                  };                  _ThumbTranslate.BeginAnimation(TranslateTransform.XProperty' _thumbAnimation);              }
Magic Number,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,UpdateThumb,The following statement contains a magic number: if (_ThumbTranslate != null && _SwitchTrack != null && _ThumbIndicator != null)              {                  double destination = IsChecked.GetValueOrDefault() ? ActualWidth - (_SwitchTrack.Margin.Left + _SwitchTrack.Margin.Right + _ThumbIndicator.ActualWidth + _ThumbIndicator.Margin.Left + _ThumbIndicator.Margin.Right) : 0;                    _thumbAnimation = new DoubleAnimation();                  _thumbAnimation.To = destination;                  _thumbAnimation.Duration = TimeSpan.FromMilliseconds(500);                  _thumbAnimation.EasingFunction = new ExponentialEase() { Exponent = 9 };                  _thumbAnimation.FillBehavior = FillBehavior.Stop;                    AnimationTimeline currentAnimation = _thumbAnimation;                  _thumbAnimation.Completed += (sender' e) => {                      if (_thumbAnimation != null && currentAnimation == _thumbAnimation)                      {                          _ThumbTranslate.X = destination;                          _thumbAnimation = null;                      }                  };                  _ThumbTranslate.BeginAnimation(TranslateTransform.XProperty' _thumbAnimation);              }
Magic Number,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_DraggingThumb_DragDelta,The following statement contains a magic number: if (_lastDragPosition.HasValue)              {                  if (Math.Abs(e.HorizontalChange) > 3)                      _isDragging = true;                  if (_SwitchTrack != null && _ThumbIndicator != null)                  {                      double lastDragPosition = _lastDragPosition.Value;                      _ThumbTranslate.X = Math.Min(ActualWidth - (_SwitchTrack.Margin.Left + _SwitchTrack.Margin.Right + _ThumbIndicator.ActualWidth + _ThumbIndicator.Margin.Left + _ThumbIndicator.Margin.Right)' Math.Max(0' lastDragPosition + e.HorizontalChange));                  }              }
Magic Number,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_DraggingThumb_DragCompleted,The following statement contains a magic number: if (!_isDragging)              {                  OnClick();              }              else if (_ThumbTranslate != null && _SwitchTrack != null)              {                  if (!IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 >= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else if (IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 <= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else                  {                      UpdateThumb();                  }              }
Magic Number,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_DraggingThumb_DragCompleted,The following statement contains a magic number: if (!_isDragging)              {                  OnClick();              }              else if (_ThumbTranslate != null && _SwitchTrack != null)              {                  if (!IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 >= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else if (IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 <= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else                  {                      UpdateThumb();                  }              }
Magic Number,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_DraggingThumb_DragCompleted,The following statement contains a magic number: if (!_isDragging)              {                  OnClick();              }              else if (_ThumbTranslate != null && _SwitchTrack != null)              {                  if (!IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 >= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else if (IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 <= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else                  {                      UpdateThumb();                  }              }
Magic Number,MahApps.Metro.Controls,ToggleSwitchButton,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\ToggleSwitchButton.cs,_DraggingThumb_DragCompleted,The following statement contains a magic number: if (!_isDragging)              {                  OnClick();              }              else if (_ThumbTranslate != null && _SwitchTrack != null)              {                  if (!IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 >= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else if (IsChecked.GetValueOrDefault() && _ThumbTranslate.X + 6.5 <= _SwitchTrack.ActualWidth / 2)                  {                      OnClick();                  }                  else                  {                      UpdateThumb();                  }              }
Magic Number,MahApps.Metro.Controls,WindowButtonCommands,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\WindowButtonCommands.cs,WindowButtonCommands,The following statement contains a magic number: this.Dispatcher.BeginInvoke(DispatcherPriority.Loaded'                                          new Action(() => {                                                         if (string.IsNullOrWhiteSpace(this.Minimize))                                                         {                                                             this.Minimize = GetCaption(900);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Maximize))                                                         {                                                             this.Maximize = GetCaption(901);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Close))                                                         {                                                             this.Close = GetCaption(905);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Restore))                                                         {                                                             this.Restore = GetCaption(903);                                                         }                                                     }));
Magic Number,MahApps.Metro.Controls,WindowButtonCommands,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\WindowButtonCommands.cs,WindowButtonCommands,The following statement contains a magic number: this.Dispatcher.BeginInvoke(DispatcherPriority.Loaded'                                          new Action(() => {                                                         if (string.IsNullOrWhiteSpace(this.Minimize))                                                         {                                                             this.Minimize = GetCaption(900);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Maximize))                                                         {                                                             this.Maximize = GetCaption(901);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Close))                                                         {                                                             this.Close = GetCaption(905);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Restore))                                                         {                                                             this.Restore = GetCaption(903);                                                         }                                                     }));
Magic Number,MahApps.Metro.Controls,WindowButtonCommands,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\WindowButtonCommands.cs,WindowButtonCommands,The following statement contains a magic number: this.Dispatcher.BeginInvoke(DispatcherPriority.Loaded'                                          new Action(() => {                                                         if (string.IsNullOrWhiteSpace(this.Minimize))                                                         {                                                             this.Minimize = GetCaption(900);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Maximize))                                                         {                                                             this.Maximize = GetCaption(901);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Close))                                                         {                                                             this.Close = GetCaption(905);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Restore))                                                         {                                                             this.Restore = GetCaption(903);                                                         }                                                     }));
Magic Number,MahApps.Metro.Controls,WindowButtonCommands,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\WindowButtonCommands.cs,WindowButtonCommands,The following statement contains a magic number: this.Dispatcher.BeginInvoke(DispatcherPriority.Loaded'                                          new Action(() => {                                                         if (string.IsNullOrWhiteSpace(this.Minimize))                                                         {                                                             this.Minimize = GetCaption(900);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Maximize))                                                         {                                                             this.Maximize = GetCaption(901);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Close))                                                         {                                                             this.Close = GetCaption(905);                                                         }                                                         if (string.IsNullOrWhiteSpace(this.Restore))                                                         {                                                             this.Restore = GetCaption(903);                                                         }                                                     }));
Magic Number,MahApps.Metro.Controls,WindowButtonCommands,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\WindowButtonCommands.cs,GetCaption,The following statement contains a magic number: var sb = new StringBuilder(256);
Magic Number,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,SetupAndOpenDialog,The following statement contains a magic number: dialog.MinHeight = window.ActualHeight / 4.0;
Magic Number,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,SetupAndOpenDialog,The following statement contains a magic number: SizeChangedEventHandler sizeHandler = (sender' args) =>              {                  dialog.MinHeight = window.ActualHeight / 4.0;                  dialog.MaxHeight = window.ActualHeight;              };
Magic Number,MahApps.Metro.Controls.Dialogs,DialogManager,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\DialogManager.cs,SetupExternalDialogWindow,The following statement contains a magic number: win.MinHeight = SystemParameters.PrimaryScreenHeight / 4.0;
Magic Number,MahApps.Metro.Controls.Dialogs,InputDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\InputDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,InputDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\InputDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_TextBox2 = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:              this.PART_RememberCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_TextBox2 = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:              this.PART_RememberCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_TextBox2 = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:              this.PART_RememberCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_TextBox2 = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:              this.PART_RememberCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Themes\Dialogs\MessageDialog.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted);                            #line default              #line hidden              return;              case 2:              this.PART_MessageScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 3:              this.PART_MessageTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.PART_FirstAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.PART_SecondAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Themes\Dialogs\MessageDialog.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted);                            #line default              #line hidden              return;              case 2:              this.PART_MessageScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 3:              this.PART_MessageTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.PART_FirstAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.PART_SecondAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Themes\Dialogs\MessageDialog.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted);                            #line default              #line hidden              return;              case 2:              this.PART_MessageScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 3:              this.PART_MessageTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.PART_FirstAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.PART_SecondAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Themes\Dialogs\MessageDialog.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted);                            #line default              #line hidden              return;              case 2:              this.PART_MessageScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 3:              this.PART_MessageTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.PART_FirstAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.PART_SecondAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Themes\Dialogs\MessageDialog.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted);                            #line default              #line hidden              return;              case 2:              this.PART_MessageScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 3:              this.PART_MessageTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.PART_FirstAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.PART_SecondAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Themes\Dialogs\MessageDialog.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted);                            #line default              #line hidden              return;              case 2:              this.PART_MessageScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 3:              this.PART_MessageTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.PART_FirstAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.PART_SecondAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,MahApps.Metro.Controls.Dialogs,ProgressDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\ProgressDialog.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PART_ProgressBar = ((MahApps.Metro.Controls.MetroProgressBar)(target));              return;              }
Magic Number,MahApps.Metro.Converters,BackgroundToForegroundConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\BackgroundToForegroundConverter.cs,IdealTextColor,The following statement contains a magic number: const int nThreshold = 86;
Magic Number,MahApps.Metro.Converters,BackgroundToForegroundConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\BackgroundToForegroundConverter.cs,IdealTextColor,The following statement contains a magic number: var bgDelta = System.Convert.ToInt32((bg.R * 0.299) + (bg.G * 0.587) + (bg.B * 0.114));
Magic Number,MahApps.Metro.Converters,BackgroundToForegroundConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\BackgroundToForegroundConverter.cs,IdealTextColor,The following statement contains a magic number: var bgDelta = System.Convert.ToInt32((bg.R * 0.299) + (bg.G * 0.587) + (bg.B * 0.114));
Magic Number,MahApps.Metro.Converters,BackgroundToForegroundConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\BackgroundToForegroundConverter.cs,IdealTextColor,The following statement contains a magic number: var bgDelta = System.Convert.ToInt32((bg.R * 0.299) + (bg.G * 0.587) + (bg.B * 0.114));
Magic Number,MahApps.Metro.Converters,BackgroundToForegroundConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\BackgroundToForegroundConverter.cs,IdealTextColor,The following statement contains a magic number: var foreColor = (255 - bgDelta < nThreshold) ? Colors.Black : Colors.White;
Magic Number,MahApps.Metro.Converters,MathConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\MathConverter.cs,Convert,The following statement contains a magic number: if (values == null || values.Length < 2)              {                  return Binding.DoNothing;              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: if (value is TimeSpan)              {                  var dateTime = (TimeSpan)value;                    switch ((string)parameter)                  {                      case "h":                          return 360.0 / 12 * dateTime.TotalHours;                      case "m":                          return 360.0 / 60 * dateTime.TotalMinutes;                      case "s":                          return 360.0 / 60 * dateTime.Seconds;                      default:                          throw new ArgumentException("must be \"h\"' \"m\"' or \"s"' nameof(parameter));                  }              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: if (value is TimeSpan)              {                  var dateTime = (TimeSpan)value;                    switch ((string)parameter)                  {                      case "h":                          return 360.0 / 12 * dateTime.TotalHours;                      case "m":                          return 360.0 / 60 * dateTime.TotalMinutes;                      case "s":                          return 360.0 / 60 * dateTime.Seconds;                      default:                          throw new ArgumentException("must be \"h\"' \"m\"' or \"s"' nameof(parameter));                  }              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: if (value is TimeSpan)              {                  var dateTime = (TimeSpan)value;                    switch ((string)parameter)                  {                      case "h":                          return 360.0 / 12 * dateTime.TotalHours;                      case "m":                          return 360.0 / 60 * dateTime.TotalMinutes;                      case "s":                          return 360.0 / 60 * dateTime.Seconds;                      default:                          throw new ArgumentException("must be \"h\"' \"m\"' or \"s"' nameof(parameter));                  }              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: if (value is TimeSpan)              {                  var dateTime = (TimeSpan)value;                    switch ((string)parameter)                  {                      case "h":                          return 360.0 / 12 * dateTime.TotalHours;                      case "m":                          return 360.0 / 60 * dateTime.TotalMinutes;                      case "s":                          return 360.0 / 60 * dateTime.Seconds;                      default:                          throw new ArgumentException("must be \"h\"' \"m\"' or \"s"' nameof(parameter));                  }              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: if (value is TimeSpan)              {                  var dateTime = (TimeSpan)value;                    switch ((string)parameter)                  {                      case "h":                          return 360.0 / 12 * dateTime.TotalHours;                      case "m":                          return 360.0 / 60 * dateTime.TotalMinutes;                      case "s":                          return 360.0 / 60 * dateTime.Seconds;                      default:                          throw new ArgumentException("must be \"h\"' \"m\"' or \"s"' nameof(parameter));                  }              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: if (value is TimeSpan)              {                  var dateTime = (TimeSpan)value;                    switch ((string)parameter)                  {                      case "h":                          return 360.0 / 12 * dateTime.TotalHours;                      case "m":                          return 360.0 / 60 * dateTime.TotalMinutes;                      case "s":                          return 360.0 / 60 * dateTime.Seconds;                      default:                          throw new ArgumentException("must be \"h\"' \"m\"' or \"s"' nameof(parameter));                  }              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: if (value is int)              {                  return 360 / TotalParts * (int)value;              }
Magic Number,MahApps.Metro.Converters,ClockDegreeConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ClockDegreeConverter.cs,Convert,The following statement contains a magic number: return 360 / TotalParts * (double)value;
Magic Number,MahApps.Metro.Converters,MetroTabItemCloseButtonWidthConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\MetroTabItemCloseButtonWidthConverter.cs,Convert,The following statement contains a magic number: return System.Convert.ToInt32(value)*0.5;
Magic Number,MahApps.Metro.Converters,ResizeModeMinMaxButtonVisibilityConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ResizeModeMinMaxButtonVisibilityConverter.cs,Convert,The following statement contains a magic number: if (values != null && !string.IsNullOrEmpty(whichButton))              {                  var showButton = values.Length > 0 && (bool) values[0];                  var useNoneWindowStyle = values.Length > 1 && (bool)values[1];                  var windowResizeMode = values.Length > 2 ? (ResizeMode)values[2] : ResizeMode.CanResize;                    if (whichButton == "CLOSE")                  {                      return useNoneWindowStyle || !showButton ? Visibility.Collapsed : Visibility.Visible;                  }                    switch (windowResizeMode)                  {                      case ResizeMode.NoResize:                          return Visibility.Collapsed;                      case ResizeMode.CanMinimize:                          if (whichButton == "MIN")                          {                              return useNoneWindowStyle || !showButton ? Visibility.Collapsed : Visibility.Visible;                          }                          return Visibility.Collapsed;                      case ResizeMode.CanResize:                      case ResizeMode.CanResizeWithGrip:                      default:                          return useNoneWindowStyle || !showButton ? Visibility.Collapsed : Visibility.Visible;                  }              }
Magic Number,MahApps.Metro.Converters,ResizeModeMinMaxButtonVisibilityConverter,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Converters\ResizeModeMinMaxButtonVisibilityConverter.cs,Convert,The following statement contains a magic number: if (values != null && !string.IsNullOrEmpty(whichButton))              {                  var showButton = values.Length > 0 && (bool) values[0];                  var useNoneWindowStyle = values.Length > 1 && (bool)values[1];                  var windowResizeMode = values.Length > 2 ? (ResizeMode)values[2] : ResizeMode.CanResize;                    if (whichButton == "CLOSE")                  {                      return useNoneWindowStyle || !showButton ? Visibility.Collapsed : Visibility.Visible;                  }                    switch (windowResizeMode)                  {                      case ResizeMode.NoResize:                          return Visibility.Collapsed;                      case ResizeMode.CanMinimize:                          if (whichButton == "MIN")                          {                              return useNoneWindowStyle || !showButton ? Visibility.Collapsed : Visibility.Visible;                          }                          return Visibility.Collapsed;                      case ResizeMode.CanResize:                      case ResizeMode.CanResizeWithGrip:                      default:                          return useNoneWindowStyle || !showButton ? Visibility.Collapsed : Visibility.Visible;                  }              }
Missing Default,MahApps.Metro.Behaviours,GlowWindowBehavior,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Behaviours\GlowWindowBehavior.cs,AssociatedObjectWindowProc,The following switch statement is missing a default case: switch ((WM)msg)              {                  case WM.WINDOWPOSCHANGED:                  case WM.WINDOWPOSCHANGING:                      Assert.IsNotDefault(lParam);                      var wp = (WINDOWPOS)Marshal.PtrToStructure(lParam' typeof(WINDOWPOS));                      if (!wp.Equals(this.prevWindowPos))                      {                          this.UpdateCore();                      }                      this.prevWindowPos = wp;                      break;                  case WM.SIZE:                  case WM.SIZING:                      this.UpdateCore();                      break;              }
Missing Default,MahApps.Metro.Controls,DataGridNumericUpDownColumn,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\DataGridNumericUpDownColumn.cs,RefreshCellContent,The following switch statement is missing a default case: switch (propertyName)                  {                      case nameof(FontFamily):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontFamilyProperty' TextElement.FontFamilyProperty);                          break;                      case nameof(FontSize):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontSizeProperty' TextElement.FontSizeProperty);                          break;                      case nameof(FontStyle):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontStyleProperty' TextElement.FontStyleProperty);                          break;                      case nameof(FontWeight):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.FontWeightProperty' TextElement.FontWeightProperty);                          break;                      case nameof(StringFormat):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.StringFormatProperty' NumericUpDown.StringFormatProperty);                          break;                      case nameof(Minimum):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.MinimumProperty' NumericUpDown.MinimumProperty);                          break;                      case nameof(Maximum):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.MaximumProperty' NumericUpDown.MaximumProperty);                          break;                      case nameof(Interval):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.IntervalProperty' NumericUpDown.IntervalProperty);                          break;                      case nameof(HideUpDownButtons):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.HideUpDownButtonsProperty' NumericUpDown.HideUpDownButtonsProperty);                          break;                      case nameof(UpDownButtonsWidth):                          SyncColumnProperty(this' numericUpDown' DataGridNumericUpDownColumn.UpDownButtonsWidthProperty' NumericUpDown.UpDownButtonsWidthProperty);                          break;                  }
Missing Default,MahApps.Metro.Controls,Flyout,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Flyout.cs,ChangeFlyoutTheme,The following switch statement is missing a default case: switch (this.Theme)              {                  case FlyoutTheme.Accent:                      ThemeManager.ChangeAppStyle(this.Resources' windowAccent' windowTheme);                      this.OverrideFlyoutResources(this.Resources' true);                      break;                    case FlyoutTheme.Adapt:                      ThemeManager.ChangeAppStyle(this.Resources' windowAccent' windowTheme);                      this.OverrideFlyoutResources(this.Resources);                      break;                    case FlyoutTheme.Inverse:                      AppTheme inverseTheme = ThemeManager.GetInverseAppTheme(windowTheme);                        if (inverseTheme == null)                          throw new InvalidOperationException("The inverse flyout theme only works if the window theme abides the naming convention. " +                                                              "See ThemeManager.GetInverseAppTheme for more infos");                        ThemeManager.ChangeAppStyle(this.Resources' windowAccent' inverseTheme);                      this.OverrideFlyoutResources(this.Resources);                      break;                    case FlyoutTheme.Dark:                      ThemeManager.ChangeAppStyle(this.Resources' windowAccent' ThemeManager.GetAppTheme("BaseDark"));                      this.OverrideFlyoutResources(this.Resources);                      break;                    case FlyoutTheme.Light:                      ThemeManager.ChangeAppStyle(this.Resources' windowAccent' ThemeManager.GetAppTheme("BaseLight"));                      this.OverrideFlyoutResources(this.Resources);                      break;              }
Missing Default,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,GlowWindow,The following switch statement is missing a default case: switch (direction)              {                  case GlowDirection.Left:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Right;                      this.getLeft = (rect) => rect.Left - glowSize + 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPLEFT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMLEFT                              : HT.LEFT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeWE;                      break;                  case GlowDirection.Right:                      this.glow.Orientation = Orientation.Vertical;                      this.glow.HorizontalAlignment = HorizontalAlignment.Left;                      this.getLeft = (rect) => rect.Right - 1;                      this.getTop = (rect) => rect.Top - 2;                      this.getWidth = (rect) => glowSize;                      this.getHeight = (rect) => rect.Height + 4;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? HT.TOPRIGHT                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.RIGHT;                      this.getCursor = (p' rect) => new Rect(0' 0' rect.Width' edgeSize).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(0' rect.Height + 4 - edgeSize' rect.Width' edgeSize).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeWE;                      break;                    case GlowDirection.Top:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.TOP' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Bottom;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Top - glowSize + 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.TOPLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.TOPRIGHT                              : HT.TOP;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNWSE                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNESW                              : Cursors.SizeNS;                      break;                  case GlowDirection.Bottom:                      this.PreviewMouseDoubleClick += (sender' e) =>                          {                              if (this.ownerHandle != IntPtr.Zero)                              {                                  NativeMethods.SendMessage(this.ownerHandle' WM.NCLBUTTONDBLCLK' (IntPtr)HT.BOTTOM' IntPtr.Zero);                              }                          };                      this.glow.Orientation = Orientation.Horizontal;                      this.glow.VerticalAlignment = VerticalAlignment.Top;                      this.getLeft = (rect) => rect.Left - 2;                      this.getTop = (rect) => rect.Bottom - 1;                      this.getWidth = (rect) => rect.Width + 4;                      this.getHeight = (rect) => glowSize;                      this.getHitTestValue = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? HT.BOTTOMLEFT                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? HT.BOTTOMRIGHT                              : HT.BOTTOM;                      this.getCursor = (p' rect) => new Rect(0' 0' edgeSize - glowSize' rect.Height).Contains(p)                          ? Cursors.SizeNESW                          : new Rect(rect.Width + 4 - edgeSize + glowSize' 0' edgeSize - glowSize' rect.Height).Contains(p)                              ? Cursors.SizeNWSE                              : Cursors.SizeNS;                      break;              }
Missing Default,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,WndProc,The following switch statement is missing a default case: switch ((WM)msg)              {                  case WM.SHOWWINDOW:                      if ((int)lParam == 3 && this.Visibility != Visibility.Visible) // 3 == SW_PARENTOPENING                      {                          handled = true; //handle this message so window isn't shown until we want it to                             }                      break;                  case WM.MOUSEACTIVATE:                      handled = true;                      if (this.ownerHandle != IntPtr.Zero)                      {                          NativeMethods.SendMessage(this.ownerHandle' WM.ACTIVATE' wParam' lParam);                      }                      return new IntPtr(3);                  case WM.LBUTTONDOWN:                      if (this.ownerHandle != IntPtr.Zero && UnsafeNativeMethods.GetWindowRect(this.ownerHandle' out rect))                      {                          Point pt;                          if (WinApiHelper.TryGetRelativeMousePosition(this.handle' out pt))                          {                              NativeMethods.PostMessage(this.ownerHandle' WM.NCLBUTTONDOWN' (IntPtr)this.getHitTestValue(pt' rect)' IntPtr.Zero);                          }                      }                      break;                  case WM.NCHITTEST:                      Cursor cursor = null;                      if (this._owner.ResizeMode == ResizeMode.NoResize || this._owner.ResizeMode == ResizeMode.CanMinimize)                      {                          cursor = this._owner.Cursor;                      }                      else                      {                          if (this.ownerHandle != IntPtr.Zero && UnsafeNativeMethods.GetWindowRect(this.ownerHandle' out rect))                          {                              Point pt;                              if (WinApiHelper.TryGetRelativeMousePosition(this.handle' out pt))                              {                                  cursor = this.getCursor(pt' rect);                              }                          }                      }                      if (cursor != null && cursor != this.Cursor)                      {                          this.Cursor = cursor;                      }                      break;              }
Missing Default,MahApps.Metro.Controls,GlowWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\GlowWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.glowWindow = ((MahApps.Metro.Controls.GlowWindow)(target));              return;              case 2:              this.glow = ((MahApps.Metro.Controls.Glow)(target));              return;              }
Missing Default,MahApps.Metro.Controls,HotKeyBox,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\HotKeyBox.cs,TextBoxOnPreviewKeyDown2,The following switch statement is missing a default case: switch (key)              {                  case Key.Tab:                  case Key.LeftShift:                  case Key.RightShift:                  case Key.LeftCtrl:                  case Key.RightCtrl:                  case Key.LeftAlt:                  case Key.RightAlt:                  case Key.RWin:                  case Key.LWin:                      return;              }
Missing Default,MahApps.Metro.Controls,MetroNavigationWindow,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\MetroNavigationWindow.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.PART_BackButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PART_ForwardButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.PART_Title = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.PART_Frame = ((System.Windows.Controls.Frame)(target));              return;              }
Missing Default,MahApps.Metro.Controls,NumericUpDown,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\NumericUpDown.cs,OnPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Up:                      ChangeValueWithSpeedUp(true);                      e.Handled = true;                      break;                  case Key.Down:                      ChangeValueWithSpeedUp(false);                      e.Handled = true;                      break;              }
Missing Default,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MoveToNextValue,The following switch statement is missing a default case: switch (_bType)                      {                          case ButtonType.BottomLeft:                              MoveThumb(_leftButton' _centerThumb' widthChange * _density' Orientation' out _direction);                              ReCalculateRangeSelected(true' false' _direction);                              break;                          case ButtonType.TopRight:                              MoveThumb(_centerThumb' _rightButton' widthChange * _density' Orientation' out _direction);                              ReCalculateRangeSelected(false' true' _direction);                              break;                          case ButtonType.Both:                              MoveThumb(_leftButton' _rightButton' widthChange * _density' Orientation' out _direction);                              ReCalculateRangeSelected(true' true' _direction);                              break;                      }
Missing Default,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MoveToNextValue,The following switch statement is missing a default case: switch (_bType)                          {                              case ButtonType.BottomLeft:                                  MoveThumb(this._leftButton' this._centerThumb' widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(true' false' LowerValue + value' _direction);                                  break;                              case ButtonType.TopRight:                                  MoveThumb(this._centerThumb' this._rightButton' widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(false' true' UpperValue + value' _direction);                                  break;                              case ButtonType.Both:                                  MoveThumb(this._leftButton' this._rightButton' widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(LowerValue + value' UpperValue + value' _direction);                                  break;                          }
Missing Default,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,MoveToNextValue,The following switch statement is missing a default case: switch (_bType)                          {                              case ButtonType.BottomLeft:                                  MoveThumb(this._leftButton' this._centerThumb' -widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(true' false' LowerValue - value' _direction);                                  break;                              case ButtonType.TopRight:                                  MoveThumb(this._centerThumb' this._rightButton' -widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(false' true' UpperValue - value' _direction);                                  break;                              case ButtonType.Both:                                  MoveThumb(this._leftButton' this._rightButton' -widthChange * this._density' this.Orientation);                                  ReCalculateRangeSelected(LowerValue - value' UpperValue - value' _direction);                                  break;                          }
Missing Default,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,SnapToTickHandle,The following switch statement is missing a default case: switch (type)                  {                      case ButtonType.TopRight:                          if (UpperValue < Maximum)                          {                              MoveThumb(this._centerThumb' this._rightButton' difference * this._density' this.Orientation);                              ReCalculateRangeSelected(false' true' UpperValue + value' direction);                          }                          break;                      case ButtonType.BottomLeft:                          if (LowerValue < UpperValue - MinRange)                          {                              MoveThumb(this._leftButton' this._centerThumb' difference * this._density' this.Orientation);                              ReCalculateRangeSelected(true' false' LowerValue + value' direction);                          }                          break;                      case ButtonType.Both:                          if (UpperValue < Maximum)                          {                              MoveThumb(this._leftButton' this._rightButton' difference * this._density' this.Orientation);                              ReCalculateRangeSelected(LowerValue + value' UpperValue + value' direction);                          }                          break;                  }
Missing Default,MahApps.Metro.Controls,RangeSlider,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RangeSlider.cs,SnapToTickHandle,The following switch statement is missing a default case: switch (type)                  {                      case ButtonType.TopRight:                          if (UpperValue > LowerValue + MinRange)                          {                              MoveThumb(this._centerThumb' this._rightButton' -difference * this._density' this.Orientation);                              ReCalculateRangeSelected(false' true' UpperValue - value' direction);                          }                          break;                      case ButtonType.BottomLeft:                          if (LowerValue > Minimum)                          {                              MoveThumb(this._leftButton' this._centerThumb' -difference * this._density' this.Orientation);                              ReCalculateRangeSelected(true' false' LowerValue - value' direction);                          }                          break;                      case ButtonType.Both:                          if (LowerValue > Minimum)                          {                              MoveThumb(this._leftButton' this._rightButton' -difference * this._density' this.Orientation);                              ReCalculateRangeSelected(LowerValue - value' UpperValue - value' direction);                          }                          break;                  }
Missing Default,MahApps.Metro.Controls,RevealImage,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\RevealImage.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.revealImage = ((MahApps.Metro.Controls.RevealImage)(target));              return;              case 2:              this.OnMouseLeave1_BeginStoryboard = ((System.Windows.Media.Animation.BeginStoryboard)(target));              return;              case 3:              this.grid = ((System.Windows.Controls.Grid)(target));                            #line 44 "RevealImage.xaml"              this.grid.MouseEnter += new System.Windows.Input.MouseEventHandler(this.GridMouseEnter);                            #line default              #line hidden              return;              case 4:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 5:              this.textBlock = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,MahApps.Metro.Controls.Dialogs,BaseMetroDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\BaseMetroDialog.cs,HandleThemeChange,The following switch statement is missing a default case: switch (this.DialogSettings.ColorScheme)                  {                      case MetroDialogColorScheme.Theme:                          ThemeManager.ChangeAppStyle(this.Resources' windowAccent' theme);                          this.SetValue(BackgroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "WhiteColorBrush"));                          this.SetValue(ForegroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "BlackBrush"));                          break;                      case MetroDialogColorScheme.Inverted:                          var inverseTheme = ThemeManager.GetInverseAppTheme(theme);                          if (inverseTheme == null)                          {                              throw new InvalidOperationException("The inverse dialog theme only works if the window theme abides the naming convention. " +                                                                  "See ThemeManager.GetInverseAppTheme for more infos");                          }                            ThemeManager.ChangeAppStyle(this.Resources' windowAccent' inverseTheme);                          this.SetValue(BackgroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "BlackColorBrush"));                          this.SetValue(ForegroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "WhiteColorBrush"));                          break;                      case MetroDialogColorScheme.Accented:                          ThemeManager.ChangeAppStyle(this.Resources' windowAccent' theme);                          this.SetValue(BackgroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "HighlightBrush"));                          this.SetValue(ForegroundProperty' ThemeManager.GetResourceFromAppStyle(this.OwningWindow ?? Application.Current.MainWindow' "IdealForegroundColorBrush"));                          break;                  }
Missing Default,MahApps.Metro.Controls.Dialogs,InputDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\InputDialog.cs,OnLoaded,The following switch statement is missing a default case: switch (this.DialogSettings.ColorScheme)              {                  case MetroDialogColorScheme.Accented:                      this.PART_NegativeButton.Style = this.FindResource("AccentedDialogHighlightedSquareButton") as Style;                      this.PART_TextBox.SetResourceReference(ForegroundProperty' "BlackColorBrush");                      this.PART_TextBox.SetResourceReference(ControlsHelper.FocusBorderBrushProperty' "TextBoxFocusBorderBrush");                      break;              }
Missing Default,MahApps.Metro.Controls.Dialogs,InputDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\InputDialog.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 3:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,OnLoaded,The following switch statement is missing a default case: switch (this.DialogSettings.ColorScheme)              {                  case MetroDialogColorScheme.Accented:                      this.PART_NegativeButton.Style = this.FindResource("AccentedDialogHighlightedSquareButton") as Style;                      this.PART_TextBox.SetResourceReference(ForegroundProperty' "BlackColorBrush");                      this.PART_TextBox2.SetResourceReference(ForegroundProperty' "BlackColorBrush");                      break;              }
Missing Default,MahApps.Metro.Controls.Dialogs,LoginDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\LoginDialog.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.PART_TextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PART_TextBox2 = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:              this.PART_RememberCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,WaitForButtonPressAsync,The following switch statement is missing a default case: switch (defaultButtonFocus)                                                             {                                                                 case MessageDialogResult.Affirmative:                                                                     this.PART_AffirmativeButton.SetResourceReference(StyleProperty' "AccentedDialogSquareButton");                                                                     KeyboardNavigationEx.Focus(this.PART_AffirmativeButton);                                                                     break;                                                                 case MessageDialogResult.Negative:                                                                     this.PART_NegativeButton.SetResourceReference(StyleProperty' "AccentedDialogSquareButton");                                                                     KeyboardNavigationEx.Focus(this.PART_NegativeButton);                                                                     break;                                                                 case MessageDialogResult.FirstAuxiliary:                                                                     this.PART_FirstAuxiliaryButton.SetResourceReference(StyleProperty' "AccentedDialogSquareButton");                                                                     KeyboardNavigationEx.Focus(this.PART_FirstAuxiliaryButton);                                                                     break;                                                                 case MessageDialogResult.SecondAuxiliary:                                                                     this.PART_SecondAuxiliaryButton.SetResourceReference(StyleProperty' "AccentedDialogSquareButton");                                                                     KeyboardNavigationEx.Focus(this.PART_SecondAuxiliaryButton);                                                                     break;                                                             }
Missing Default,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,SetButtonState,The following switch statement is missing a default case: switch (md.ButtonStyle)              {                  case MessageDialogStyle.Affirmative:                  {                      md.PART_AffirmativeButton.Visibility = Visibility.Visible;                      md.PART_NegativeButton.Visibility = Visibility.Collapsed;                      md.PART_FirstAuxiliaryButton.Visibility = Visibility.Collapsed;                      md.PART_SecondAuxiliaryButton.Visibility = Visibility.Collapsed;                  }                      break;                  case MessageDialogStyle.AffirmativeAndNegativeAndSingleAuxiliary:                  case MessageDialogStyle.AffirmativeAndNegativeAndDoubleAuxiliary:                  case MessageDialogStyle.AffirmativeAndNegative:                  {                      md.PART_AffirmativeButton.Visibility = Visibility.Visible;                      md.PART_NegativeButton.Visibility = Visibility.Visible;                        if (md.ButtonStyle == MessageDialogStyle.AffirmativeAndNegativeAndSingleAuxiliary || md.ButtonStyle == MessageDialogStyle.AffirmativeAndNegativeAndDoubleAuxiliary)                      {                          md.PART_FirstAuxiliaryButton.Visibility = Visibility.Visible;                      }                        if (md.ButtonStyle == MessageDialogStyle.AffirmativeAndNegativeAndDoubleAuxiliary)                      {                          md.PART_SecondAuxiliaryButton.Visibility = Visibility.Visible;                      }                  }                      break;              }
Missing Default,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,SetButtonState,The following switch statement is missing a default case: switch (md.DialogSettings.ColorScheme)              {                  case MetroDialogColorScheme.Accented:                      md.PART_AffirmativeButton.Style = md.FindResource("AccentedDialogHighlightedSquareButton") as Style;                      md.PART_NegativeButton.Style = md.FindResource("AccentedDialogHighlightedSquareButton") as Style;                      md.PART_FirstAuxiliaryButton.Style = md.FindResource("AccentedDialogHighlightedSquareButton") as Style;                      md.PART_SecondAuxiliaryButton.Style = md.FindResource("AccentedDialogHighlightedSquareButton") as Style;                      break;              }
Missing Default,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,IsApplicable,The following switch statement is missing a default case: switch (value)              {                  case MessageDialogResult.Affirmative:                      return this.PART_AffirmativeButton.IsVisible;                  case MessageDialogResult.Negative:                      return this.PART_NegativeButton.IsVisible;                  case MessageDialogResult.FirstAuxiliary:                      return this.PART_FirstAuxiliaryButton.IsVisible;                  case MessageDialogResult.SecondAuxiliary:                      return this.PART_SecondAuxiliaryButton.IsVisible;              }
Missing Default,MahApps.Metro.Controls.Dialogs,MessageDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\MessageDialog.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Themes\Dialogs\MessageDialog.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.OnKeyCopyExecuted);                            #line default              #line hidden              return;              case 2:              this.PART_MessageScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 3:              this.PART_MessageTextBlock = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.PART_AffirmativeButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.PART_FirstAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              case 7:              this.PART_SecondAuxiliaryButton = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,MahApps.Metro.Controls.Dialogs,ProgressDialog,C:\repos\MahApps_MahApps.Metro\src\MahApps.Metro\MahApps.Metro.Shared\Controls\Dialogs\ProgressDialog.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.PART_NegativeButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PART_ProgressBar = ((MahApps.Metro.Controls.MetroProgressBar)(target));              return;              }
