Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WPFExtensions.AttachedBehaviours,TextBoxCommandBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\TextBoxCommandBehaviour.cs,OnAttach,Cyclomatic complexity of the method is 16
Complex Method,WPFExtensions.AttachedBehaviours,TextBoxCommandBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\TextBoxCommandBehaviour.cs,OnDetach,Cyclomatic complexity of the method is 16
Complex Method,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,Mode_PropertyChanged,Cyclomatic complexity of the method is 10
Complex Method,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomControl_MouseUp,Cyclomatic complexity of the method is 12
Complex Method,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomControl_PreviewMouseMove,Cyclomatic complexity of the method is 20
Complex Method,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,OnMouseDown,Cyclomatic complexity of the method is 15
Long Parameter List,WPFExtensions.Collections.ObjectModel,DispatchHandler,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Collections\ObjectModel\DispatchHandler.cs,Invoke,The method has 6 parameters.
Long Parameter List,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,GetCoercedTranslate,The method has 5 parameters.
Long Parameter List,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,StartAnimation,The method has 5 parameters.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "	var enableAnimation = !Element.IsKeyboardFocusWithin && !Element.IsMouseCaptureWithin && !mouseWheelActivated && (DateTime.Now - mouseWheelActivationTime > mouseWheelTrigger); " is 175.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "	if (Math.Abs (e.VerticalOffset - lastVerticalOffset) > double.Epsilon || Math.Abs (e.HorizontalOffset - lastHorizontalOffset) > double.Epsilon) { " is 145.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "		Debug.WriteLine (string.Format ("Clearing: {0}' {1};   {2}' {3}"' e.VerticalOffset' lastVerticalOffset' e.HorizontalOffset' lastHorizontalOffset)); " is 147.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "		Debug.WriteLine (string.Format ("Clearing: {0}' {1};   {2}' {3}"' e.VerticalOffset' lastVerticalOffset' e.HorizontalOffset' lastHorizontalOffset)); " is 147.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "	//Debug.WriteLine( string.Format( "Checkit: {0}' {1};   {2}' {3}"' e.VerticalOffset' lastVerticalOffset' e.HorizontalOffset' lastHorizontalOffset ) ); " is 150.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "		Debug.WriteLine ("Start vertical animation: o {" + e.VerticalOffset + "} c {" + e.VerticalChange + "} l {" + lastVerticalOffset + "}"); " is 135.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "		verticalAnimation = new DoubleAnimation (e.VerticalOffset - e.VerticalChange' e.VerticalOffset' GetDuration (Element)' FillBehavior.HoldEnd) { " is 142.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "		Debug.WriteLine ("Start horizontal animation: o {" + e.HorizontalOffset + "} c {" + e.HorizontalChange + "} l {" + lastHorizontalOffset + "}"); " is 143.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "		horizontalAnimation = new DoubleAnimation (e.HorizontalOffset - e.HorizontalChange' e.HorizontalOffset' GetDuration (Element)' FillBehavior.HoldEnd) { " is 150.
Long Statement,WPFExtensions.AttachedBehaviours,TreeViewSelectionBehaviour,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\TreeViewSelectionBehaviour.cs,SelectedItemRoute_Coerce,The length of the statement  "	throw new NotSupportedException ("This is a one-way dependency property (it behaves like a read-only dependency property' but it can be bound with [Mode=OneWayToSource])."); " is 173.
Long Statement,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,GetCoercedTranslateY,The length of the statement  "	return GetCoercedTranslate (baseValue' zoom' _presenter.ContentSize.Height' _presenter.DesiredSize.Height' ActualHeight); " is 121.
Long Statement,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomControl_MouseWheel,The length of the statement  "	DoZoom (Math.Max (1 / MaxZoomDelta' Math.Min (MaxZoomDelta' e.Delta / 10000.0 * ZoomDeltaMultiplier + 1))' origoPosition' mousePosition' mousePosition); " is 152.
Long Statement,WPFExtensions.Helpers,ExtLogicalTreeHelper,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\ExtLogicalTreeHelper.cs,GetAncestorOfTypeExt,The length of the statement  "	while (result == null && ((newParent = LogicalTreeHelper.GetParent (parent)) != null || (parent is FrameworkElement && (newParent = (parent as FrameworkElement).TemplatedParent) != null) || (parent is FrameworkContentElement && (newParent = (parent as FrameworkContentElement).TemplatedParent) != null))) { " is 306.
Long Statement,WPFExtensions.Helpers,TreeViewHelper,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\TreeViewHelper.cs,GetTreeViewItemRouteForItem,The length of the statement  "		for (FrameworkElement element = selectedTreeViewItem; element != treeView && item != null; item = element.Parent as FrameworkElement) " is 133.
Long Statement,WPFExtensions.Helpers,TreeViewHelper,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\TreeViewHelper.cs,GetItemRouteFromTreeViewItem,The length of the statement  "	for (ItemsControl container = treeViewItem; !(container is TreeView) && parent != null; container = parent' parent = ItemsControl.ItemsControlFromItemContainer (container)) { " is 174.
Long Statement,WPFExtensions.Helpers,TreeViewHelper,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\TreeViewHelper.cs,FindContainerHierarchically,The length of the statement  "		if (childItemsControl != null && (container = childItemsControl.FindContainerHierarchically<TContainer> (selectedItem)) != null) " is 128.
Long Statement,WPFExtensions.ViewModel.Commanding,CommandSinkBinding,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\ViewModel\Commanding\CommandSinkBinding.cs,ProcessCommandSinkChanged,The length of the statement  "		throw new ArgumentException ("The CommandSinkBinding.CommandSink attached property was set on an element that does not support CommandBindings."); " is 146.
Magic Number,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomControl_MouseWheel,The following statement contains a magic number: DoZoom (Math.Max (1 / MaxZoomDelta' Math.Min (MaxZoomDelta' e.Delta / 10000.0 * ZoomDeltaMultiplier + 1))' origoPosition' mousePosition' mousePosition);  
Magic Number,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,DoZoomToFill,The following statement contains a magic number: if (FillRectangle.IsEmpty) {  	var deltaZoom = Math.Min (ActualWidth / _presenter.ContentSize.Width' ActualHeight / _presenter.ContentSize.Height);  	var initialTranslate = GetInitialTranslate ();  	DoZoomAnimation (deltaZoom' initialTranslate.X * deltaZoom' initialTranslate.Y * deltaZoom);  }  else {  	var deltaZoom = Math.Min (ActualWidth / (FillRectangle.Width)' ActualHeight / (FillRectangle.Height));  	var w = FillRectangle.Width - _presenter.DesiredSize.Width;  	var h = FillRectangle.Height - _presenter.DesiredSize.Height;  	var tX = -w / 2.0;  	var tY = -h / 2.0;  	var initialTranslate = new Vector (tX - FillRectangle.Left' tY - FillRectangle.Top);  	initialTranslate *= deltaZoom;  	DoZoomAnimation (deltaZoom' initialTranslate.X' initialTranslate.Y);  }  
Magic Number,WPFExtensions.Controls,ZoomControl,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,DoZoomToFill,The following statement contains a magic number: if (FillRectangle.IsEmpty) {  	var deltaZoom = Math.Min (ActualWidth / _presenter.ContentSize.Width' ActualHeight / _presenter.ContentSize.Height);  	var initialTranslate = GetInitialTranslate ();  	DoZoomAnimation (deltaZoom' initialTranslate.X * deltaZoom' initialTranslate.Y * deltaZoom);  }  else {  	var deltaZoom = Math.Min (ActualWidth / (FillRectangle.Width)' ActualHeight / (FillRectangle.Height));  	var w = FillRectangle.Width - _presenter.DesiredSize.Width;  	var h = FillRectangle.Height - _presenter.DesiredSize.Height;  	var tX = -w / 2.0;  	var tY = -h / 2.0;  	var initialTranslate = new Vector (tX - FillRectangle.Left' tY - FillRectangle.Top);  	initialTranslate *= deltaZoom;  	DoZoomAnimation (deltaZoom' initialTranslate.X' initialTranslate.Y);  }  
Magic Number,WPFExtensions.Converters,DoubleToLog10Converter,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Converters\DoubleToLog10Converter.cs,ConvertBack,The following statement contains a magic number: return Math.Pow (10' val);  
Missing Default,WPFExtensions.Converters,BoolToVisibilityConverter,C:\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Converters\BoolToVisibilityConverter.cs,ConvertBack,The following switch statement is missing a default case: switch (vis) {  case Visibility.Collapsed:  	return false;  case Visibility.Hidden:  	return null;  case Visibility.Visible:  	return true;  }  
