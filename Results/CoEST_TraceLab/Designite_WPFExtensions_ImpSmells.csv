Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,OnMouseDown,Cyclomatic complexity of the method is 9
Long Parameter List,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,GetCoercedTranslate,The method has 5 parameters. Parameters: translate' zoom' contentSize' desiredSize' actualSize
Long Identifier,WPFExtensions.AttachedBehaviours,TreeViewSelectionBehaviour,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\TreeViewSelectionBehaviour.cs,,The length of the parameter AutomaticBringIntoViewSelectedItemProperty is 42.
Long Identifier,WPFExtensions.AttachedBehaviours,TreeViewSelectionBehaviour,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\TreeViewSelectionBehaviour.cs,,The length of the parameter ManageSelectedItemRouteProperty is 31.
Long Identifier,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,,The length of the parameter ZoomBoxBorderThicknessProperty is 30.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "			var enableAnimation = !Element.IsKeyboardFocusWithin && !Element.IsMouseCaptureWithin && !mouseWheelActivated && ( DateTime.Now - mouseWheelActivationTime > mouseWheelTrigger ); " is 177.
Long Statement,WPFExtensions.AttachedBehaviours,AnimatedScrollBehaviour,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\AnimatedScrollBehaviour.cs,ScrollChanged,The length of the statement  "			//Debug.WriteLine( string.Format( "Checkit: {0}' {1};   {2}' {3}"' e.VerticalOffset' lastVerticalOffset' e.HorizontalOffset' lastHorizontalOffset ) ); " is 150.
Long Statement,WPFExtensions.AttachedBehaviours,TreeViewSelectionBehaviour,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\AttachedBehaviours\TreeViewSelectionBehaviour.cs,SelectedItemRoute_Coerce,The length of the statement  "			throw new NotSupportedException( "This is a one-way dependency property (it behaves like a read-only dependency property' but it can be bound with [Mode=OneWayToSource])." ); " is 174.
Long Statement,WPFExtensions.Helpers,ExtLogicalTreeHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\ExtLogicalTreeHelper.cs,GetAncestorOfTypeExt,The length of the statement  "				( parent is FrameworkContentElement && ( newParent = ( parent as FrameworkContentElement ).TemplatedParent ) != null ) ) ) " is 122.
Long Statement,WPFExtensions.Helpers,TreeViewHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\TreeViewHelper.cs,GetTreeViewItemRouteForItem,The length of the statement  "				for ( FrameworkElement element = selectedTreeViewItem; element != treeView && item != null; item = element.Parent as FrameworkElement ) " is 135.
Long Statement,WPFExtensions.Helpers,TreeViewHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\TreeViewHelper.cs,FindContainerHierarchically,The length of the statement  "				if ( childItemsControl != null && ( container = childItemsControl.FindContainerHierarchically<TContainer>( selectedItem ) ) != null ) " is 133.
Long Statement,WPFExtensions.ViewModel.Commanding,CommandSinkBinding,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\ViewModel\Commanding\CommandSinkBinding.cs,ProcessCommandSinkChanged,The length of the statement  "				throw new ArgumentException( "The CommandSinkBinding.CommandSink attached property was set on an element that does not support CommandBindings." ); " is 147.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,WPFExtensions.Helpers,ExtLogicalTreeHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Helpers\ExtLogicalTreeHelper.cs,GetAncestorOfTypeExt,The conditional expression  "result == null && ( ( newParent = LogicalTreeHelper.GetParent( parent ) ) != null ||  				( parent is FrameworkElement && ( newParent = ( parent as FrameworkElement ).TemplatedParent ) != null ) ||  				( parent is FrameworkContentElement && ( newParent = ( parent as FrameworkContentElement ).TemplatedParent ) != null ) )"  is complex.
Magic Number,WPFExtensions.Controls,ZoomContentPresenter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomContentPresenter.cs,MeasureOverride,The following statement contains a magic number: var max = 1000000000;
Magic Number,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomTo,The following statement contains a magic number: var startHandlePosition = new Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);
Magic Number,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomTo,The following statement contains a magic number: var startHandlePosition = new Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);
Magic Number,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomControl_MouseWheel,The following statement contains a magic number: Point origoPosition = new Point(ActualWidth / 2' ActualHeight / 2);
Magic Number,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomControl_MouseWheel,The following statement contains a magic number: Point origoPosition = new Point(ActualWidth / 2' ActualHeight / 2);
Magic Number,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,ZoomControl_MouseWheel,The following statement contains a magic number: DoZoom(                  Math.Max(1 / MaxZoomDelta' Math.Min(MaxZoomDelta' e.Delta / 10000.0 * ZoomDeltaMultiplier + 1))'                  origoPosition'                  mousePosition'                  mousePosition);
Magic Number,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,GetInitialTranslate,The following statement contains a magic number: var tX = -w / 2.0;
Magic Number,WPFExtensions.Controls,ZoomControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Controls\ZoomControl.cs,GetInitialTranslate,The following statement contains a magic number: var tY = -h / 2.0;
Magic Number,WPFExtensions.Converters,DoubleToLog10Converter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Converters\DoubleToLog10Converter.cs,ConvertBack,The following statement contains a magic number: return Math.Pow(10' val);
Missing Default,WPFExtensions.Converters,BoolToVisibilityConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\WPFExtensions\Source\WPFExtensions\Converters\BoolToVisibilityConverter.cs,ConvertBack,The following switch statement is missing a default case: switch ( vis )  			{  				case Visibility.Collapsed:  					return false;  				case Visibility.Hidden:  					return null;  				case Visibility.Visible:  					return true;  			}
