Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tracer,ANCSearcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\ANCTracer\ANCSearcher.cs,search,Cyclomatic complexity of the method is 9
Complex Method,Tracer,Searcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\Searcher.cs,search,Cyclomatic complexity of the method is 8
Long Parameter List,Tracer,ANCTracerComponent,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\ANCTracer\ANCTracerComponent.cs,ComputeTraceability,The method has 5 parameters. Parameters: sourceArtifacts' targetArtifacts' dict' ancTermsWeights' config
Long Statement,Tracer,ANCSearcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\ANCTracer\ANCSearcher.cs,search,The length of the statement  "		    // Iterates over the resulting query terms to compute their weights and the dot product of the query terms x the documents terms " is 128.
Long Statement,Tracer,ANCSearcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\ANCTracer\ANCSearcher.cs,search,The length of the statement  "			    double similarity = _similarityMetric.ComputeSimilarity(intermediateResults[docId]' queryVectorLength' dict.GetDocumentVectorWeight(docId)); " is 140.
Long Statement,Tracer,ANCTracerComponent,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\ANCTracer\ANCTracerComponent.cs,Compute,The length of the statement  "            TLSimilarityMatrix similarityMatrix = ComputeTraceability(sourceArtifacts' targetArtifacts' dict' ancTermsWeights' config); " is 123.
Long Statement,Tracer,Searcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\Searcher.cs,search,The length of the statement  "		    // Iterates over the resulting query terms to compute their weights and the dot product of the query terms x the documents terms " is 128.
Long Statement,Tracer,Searcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\Searcher.cs,search,The length of the statement  "			    double similarity = _similarityMetric.ComputeSimilarity(intermediateResults[docId]' queryVectorLength' dict.GetDocumentVectorWeight(docId)); " is 140.
Long Statement,Tracer,SimilarityMetricFactory,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricFactory.cs,GetSimiliarityMetric,The length of the statement  "                throw new ArgumentException("Similarity metric does not match any of available metrics. Choose from 'Cosine'' 'Dice'' 'Jaccard'' 'SimpleMatching'"); " is 148.
Long Statement,Tracer,SimilarityMetricFactory,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricFactory.cs,GetSimiliarityMetric,The length of the statement  "            SimilarityMetricMethod similarityMethod  = (SimilarityMetricMethod)Enum.Parse(typeof(SimilarityMetricMethod)' method' true); " is 124.
Long Statement,Tracer,SimilarityMetricJaccard,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricJaccard.cs,ComputeSimilarity,The length of the statement  "            return dotProductOfQueryAndDocument / (Math.Pow(queryVectorSize' 2) + Math.Pow(documentVectorSize' 2) - dotProductOfQueryAndDocument); " is 134.
Magic Number,Tracer,ANCSearcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\ANCTracer\ANCSearcher.cs,search,The following statement contains a magic number: foreach (string qterm in queryTermFrequency.Keys) {    			    // Gets the Term from the dictionary  			    TLTermEntry term = dict.GetTermEntry(qterm);  			  			    // It computes the weight of a term -  IE the frequency TIMES the term's specificity.  			    // Note: the specifity of the term is stored in the weight.  			    // 		For the basic dictionary this is just 1  			    //		For the tf-idf dictionary this is the idf  			    // 		For the signal-noise this is the signal  			                      //double weight = queryTermFrequency[qterm] * term.Weight;                  double ancWeight;                  if(ancTermsWeights.TryGetValue(qterm' out ancWeight) == false) ancWeight = 1.0;                                      double weight = queryTermFrequency[qterm] * ancWeight;  			    queryTermWeight.Add(qterm' weight);  			  			    // Updates the document vector length of the query  			    queryVectorLength += Math.Pow(weight' 2);    			    // It now iterates over all the postings that have this term  			    foreach (TLPosting posting in term.Postings) {  				                          string docId = posting.ArtifactId;  		  				    // Calculates the product of the query times the posting for this particular term  				    double r = queryTermWeight[qterm] * posting.Weight;  				    if (intermediateResults.ContainsKey(docId)) {  					    intermediateResults[docId] += r;  				    } else {  				        intermediateResults.Add(docId' r);                      }  			    }  		    }
Magic Number,Tracer,Searcher,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\Searcher.cs,search,The following statement contains a magic number: foreach (string qterm in queryTermFrequency.Keys) {    			    // Gets the Term from the dictionary  			    TLTermEntry term = dict.GetTermEntry(qterm);  			  			    // It computes the weight of a term -  IE the frequency TIMES the term's specificity.  			    // Note: the specifity of the term is stored in the weight.  			    // 		For the basic dictionary this is just 1  			    //		For the tf-idf dictionary this is the idf  			    // 		For the signal-noise this is the signal  			    double weight = queryTermFrequency[qterm] * term.Weight;  			    queryTermWeight.Add(qterm' weight);  			  			    // Updates the document vector length of the query  			    queryVectorLength += Math.Pow(weight' 2);    			    // It now iterates over all the postings that have this term  			    foreach (TLPosting posting in term.Postings) {  				                          string docId = posting.ArtifactId;  		  				    // Calculates the product of the query times the posting for this particular term  				    double r = queryTermWeight[qterm] * posting.Weight;  				    if (intermediateResults.ContainsKey(docId)) {  					    intermediateResults[docId] += r;  				    } else {  				        intermediateResults.Add(docId' r);                      }  			    }  		    }
Magic Number,Tracer,SimilarityMetricDice,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricDice.cs,ComputeSimilarity,The following statement contains a magic number: return (2 * dotProductOfQueryAndDocument) / ( Math.Pow(queryVectorSize'2) + Math.Pow(documentVectorSize' 2) );
Magic Number,Tracer,SimilarityMetricDice,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricDice.cs,ComputeSimilarity,The following statement contains a magic number: return (2 * dotProductOfQueryAndDocument) / ( Math.Pow(queryVectorSize'2) + Math.Pow(documentVectorSize' 2) );
Magic Number,Tracer,SimilarityMetricDice,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricDice.cs,ComputeSimilarity,The following statement contains a magic number: return (2 * dotProductOfQueryAndDocument) / ( Math.Pow(queryVectorSize'2) + Math.Pow(documentVectorSize' 2) );
Magic Number,Tracer,SimilarityMetricJaccard,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricJaccard.cs,ComputeSimilarity,The following statement contains a magic number: return dotProductOfQueryAndDocument / (Math.Pow(queryVectorSize' 2) + Math.Pow(documentVectorSize' 2) - dotProductOfQueryAndDocument);
Magic Number,Tracer,SimilarityMetricJaccard,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\Tracer\similarityMetrics\SimilarityMetricJaccard.cs,ComputeSimilarity,The following statement contains a magic number: return dotProductOfQueryAndDocument / (Math.Pow(queryVectorSize' 2) + Math.Pow(documentVectorSize' 2) - dotProductOfQueryAndDocument);
