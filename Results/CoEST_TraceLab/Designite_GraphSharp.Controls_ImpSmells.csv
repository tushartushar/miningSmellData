Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GraphSharp.Controls,CompoundVertexControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\CompoundVertexControl.cs,OnPositionChanged,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,HighlightTriggerEventHandler,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,ChangeState,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,RecreateGraphElements,Cyclomatic complexity of the method is 11
Long Parameter List,GraphSharp.Controls,IAnimation,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\IAnimation.cs,Animate,The method has 5 parameters. Parameters: context' control' x' y' duration
Long Parameter List,GraphSharp.Controls,VertexControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\VertexControl.cs,ComputeProperty,The method has 5 parameters. Parameters: control' prop' newValue' oldValue' dimension
Long Parameter List,GraphSharp.Controls.Animations,SimpleMoveAnimation,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\Animations\SimpleMoveAnimation.cs,Animate,The method has 5 parameters. Parameters: context' control' x' y' duration
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter AnimationDisablerVertexCountProperty is 36.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter AnimationDisablerEdgeCountProperty is 34.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter EdgeRoutingAlgorithmFactoryProperty is 35.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter EdgeRoutingAlgorithmPropertyKey is 31.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter EdgeRoutingAlgorithmTypeProperty is 32.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter HighlightAlgorithmFactoryProperty is 33.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter HighlightAlgorithmTypeProperty is 30.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter LayoutAlgorithmFactoryProperty is 30.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter LayoutStatusPercentPropertyKey is 30.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter OverlapRemovalAlgorithmFactoryProperty is 38.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter OverlapRemovalAlgorithmProperty is 31.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter OverlapRemovalAlgorithmPropertyKey is 34.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter OverlapRemovalAlgorithmTypeProperty is 35.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter OverlapRemovalConstraintProperty is 32.
Long Identifier,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,,The length of the parameter OverlapRemovalParametersProperty is 32.
Long Statement,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,CreateLayoutContext,The length of the statement  "                return new CompoundLayoutContext<TVertex' TEdge' TGraph>(Graph' positions' sizes' ActualLayoutMode' borders' layoutTypes); " is 122.
Long Statement,GraphSharp.Converters,CoordinatesToPointConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\CoordinatesToPointConverter.cs,Convert,The length of the statement  "			Debug.Assert( values != null && values.Length == 2' "CoordinatesToPointConverter.Convert should get 2 values as input: X and Y coordinates" ); " is 142.
Long Statement,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The length of the statement  "                Debug.Assert(values != null && values.Length == 9' "EdgeRouteToPathConverter should have 9 parameters: pos (1'2)' size (3'4) of source; pos (5'6)' size (7'8) of target; routeInformation (9)."); " is 193.
Long Statement,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The length of the statement  "                Point p1 = GraphConverterHelper.CalculateAttachPoint(sourcePos' sourceSize' (hasRouteInfo ? routeInformation[0] : targetPos)); " is 126.
Long Statement,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The length of the statement  "                Point p2 = GraphConverterHelper.CalculateAttachPoint(targetPos' targetSize' (hasRouteInfo ? routeInformation[routeInformation.Length - 1] : sourcePos)); " is 152.
Long Statement,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The length of the statement  "                Debug.Assert(values != null && values.Length == 9' "EdgeRouteToPathConverter should have 9 parameters: pos (1'2)' size (3'4) of source; pos (5'6)' size (7'8) of target; routeInformation (9)."); " is 193.
Long Statement,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The length of the statement  "                Point p1 = GraphConverterHelper.CalculateAttachPoint(sourcePos' sourceSize' (hasRouteInfo ? routeInformation[0] : targetPos)); " is 126.
Long Statement,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The length of the statement  "                Point p2 = GraphConverterHelper.CalculateAttachPoint(targetPos' targetSize' (hasRouteInfo ? routeInformation[routeInformation.Length - 1] : sourcePos)); " is 152.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,OverlapRemoval,The conditional expression  "OverlapRemovalConstraint == AlgorithmConstraints.Skip                   ||                   (OverlapRemovalConstraint == AlgorithmConstraints.Automatic &&                     (!LayoutAlgorithmFactory.NeedOverlapRemoval(LayoutAlgorithmType) || !isValidAlgorithm))                   || (OverlapRemovalConstraint == AlgorithmConstraints.Must && !isValidAlgorithm)"  is complex.
Empty Catch Block,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,HighlightTriggerEventHandler,The method has an empty catch block.
Empty Catch Block,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,RecreateGraphElements,The method has an empty catch block.
Magic Number,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,CreateOverlapRemovalContext,The following statement contains a magic number: rectangles[vertex] =                      new Rect(                          position.X - size.Width * (float)0.5'                          position.Y - size.Height * (float)0.5'                          size.Width'                          size.Height);
Magic Number,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,CreateOverlapRemovalContext,The following statement contains a magic number: rectangles[vertex] =                      new Rect(                          position.X - size.Width * (float)0.5'                          position.Y - size.Height * (float)0.5'                          size.Width'                          size.Height);
Magic Number,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,GetRelativePosition,The following statement contains a magic number: return vc.TranslatePoint(new Point(vc.ActualWidth / 2.0' vc.ActualHeight / 2.0)' relativeTo);
Magic Number,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,GetRelativePosition,The following statement contains a magic number: return vc.TranslatePoint(new Point(vc.ActualWidth / 2.0' vc.ActualHeight / 2.0)' relativeTo);
Magic Number,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,OnLayoutFinished,The following statement contains a magic number: LayoutStatusPercent = 100;
Magic Number,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,OverlapRemoval,The following statement contains a magic number: result[res.Key] = new Point(                          (res.Value.Left + res.Value.Size.Width * 0.5)'                          (res.Value.Top + res.Value.Size.Height * 0.5));
Magic Number,GraphSharp.Controls,GraphLayout<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.DependencyProperties.cs,OverlapRemoval,The following statement contains a magic number: result[res.Key] = new Point(                          (res.Value.Left + res.Value.Size.Width * 0.5)'                          (res.Value.Top + res.Value.Size.Height * 0.5));
Magic Number,GraphSharp.Controls,FadeTransition,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\Transitions\FadeTransition.cs,Run,The following statement contains a magic number: fadeAnimation.BeginTime = TimeSpan.FromMilliseconds( duration.TotalMilliseconds * ( rounds - 1 ) * 2 );
Magic Number,GraphSharp.Controls,GraphLayout,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.cs,GraphLayout,The following statement contains a magic number: var edges = new IEdge<object>[] {                      new Edge<object>(vertices[0]' vertices[1])'                      new Edge<object>(vertices[1]' vertices[2])'                      new Edge<object>(vertices[1]' vertices[3])'                      new Edge<object>(vertices[3]' vertices[4])'                      new Edge<object>(vertices[0]' vertices[4])'                      new Edge<object>(vertices[4]' vertices[5])                  };
Magic Number,GraphSharp.Controls,GraphLayout,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.cs,GraphLayout,The following statement contains a magic number: var edges = new IEdge<object>[] {                      new Edge<object>(vertices[0]' vertices[1])'                      new Edge<object>(vertices[1]' vertices[2])'                      new Edge<object>(vertices[1]' vertices[3])'                      new Edge<object>(vertices[3]' vertices[4])'                      new Edge<object>(vertices[0]' vertices[4])'                      new Edge<object>(vertices[4]' vertices[5])                  };
Magic Number,GraphSharp.Controls,GraphLayout,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.cs,GraphLayout,The following statement contains a magic number: var edges = new IEdge<object>[] {                      new Edge<object>(vertices[0]' vertices[1])'                      new Edge<object>(vertices[1]' vertices[2])'                      new Edge<object>(vertices[1]' vertices[3])'                      new Edge<object>(vertices[3]' vertices[4])'                      new Edge<object>(vertices[0]' vertices[4])'                      new Edge<object>(vertices[4]' vertices[5])                  };
Magic Number,GraphSharp.Controls,GraphLayout,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.cs,GraphLayout,The following statement contains a magic number: var edges = new IEdge<object>[] {                      new Edge<object>(vertices[0]' vertices[1])'                      new Edge<object>(vertices[1]' vertices[2])'                      new Edge<object>(vertices[1]' vertices[3])'                      new Edge<object>(vertices[3]' vertices[4])'                      new Edge<object>(vertices[0]' vertices[4])'                      new Edge<object>(vertices[4]' vertices[5])                  };
Magic Number,GraphSharp.Controls,GraphLayout,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.cs,GraphLayout,The following statement contains a magic number: var edges = new IEdge<object>[] {                      new Edge<object>(vertices[0]' vertices[1])'                      new Edge<object>(vertices[1]' vertices[2])'                      new Edge<object>(vertices[1]' vertices[3])'                      new Edge<object>(vertices[3]' vertices[4])'                      new Edge<object>(vertices[0]' vertices[4])'                      new Edge<object>(vertices[4]' vertices[5])                  };
Magic Number,GraphSharp.Controls,GraphLayout,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.cs,GraphLayout,The following statement contains a magic number: var edges = new IEdge<object>[] {                      new Edge<object>(vertices[0]' vertices[1])'                      new Edge<object>(vertices[1]' vertices[2])'                      new Edge<object>(vertices[1]' vertices[3])'                      new Edge<object>(vertices[3]' vertices[4])'                      new Edge<object>(vertices[0]' vertices[4])'                      new Edge<object>(vertices[4]' vertices[5])                  };
Magic Number,GraphSharp.Controls,GraphLayout,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\GraphLayout.cs,GraphLayout,The following statement contains a magic number: var edges = new IEdge<object>[] {                      new Edge<object>(vertices[0]' vertices[1])'                      new Edge<object>(vertices[1]' vertices[2])'                      new Edge<object>(vertices[1]' vertices[3])'                      new Edge<object>(vertices[3]' vertices[4])'                      new Edge<object>(vertices[0]' vertices[4])'                      new Edge<object>(vertices[4]' vertices[5])                  };
Magic Number,GraphSharp.Controls,VertexControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\VertexControl.cs,ComputeProperty,The following statement contains a magic number: newValue = newValue - (dimension / 2);
Magic Number,GraphSharp.Controls,VertexControl,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Controls\VertexControl.cs,ComputeProperty,The following statement contains a magic number: 0.0001 < Math.Abs(newValue - (double)control.GetValue(prop))
Magic Number,GraphSharp.Converters,CoordinatesToPointConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\CoordinatesToPointConverter.cs,Convert,The following statement contains a magic number: Debug.Assert( values != null && values.Length == 2' "CoordinatesToPointConverter.Convert should get 2 values as input: X and Y coordinates" );
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: PathFigureCollection pfc = new PathFigureCollection(2);
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Debug.Assert(values != null && values.Length == 9' "EdgeRouteToPathConverter should have 9 parameters: pos (1'2)' size (3'4) of source; pos (5'6)' size (7'8) of target; routeInformation (9).");
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                      Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                      Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                      Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                      Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                  {                      X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                      Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                  {                      X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                      Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                  {                      X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                      Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                  {                      X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                      Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                      Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                      Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                      Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                  {                      //Width = 0.0'                      //Height = 0.0                      Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                      Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                  };
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Point[] routeInformation = (values[8] != DependencyProperty.UnsetValue ? (Point[])values[8] : null);
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Point[] routeInformation = (values[8] != DependencyProperty.UnsetValue ? (Point[])values[8] : null);
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: v = v / v.Length * 6;
Magic Number,GraphSharp.Converters,EdgeRouteToPathConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathConverter.cs,Convert,The following statement contains a magic number: Vector n = new Vector(-v.Y' v.X) * 0.5;
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: var pfc = new PathFigureCollection(2);
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Debug.Assert(values != null && values.Length == 9' "EdgeRouteToPathConverter should have 9 parameters: pos (1'2)' size (3'4) of source; pos (5'6)' size (7'8) of target; routeInformation (9).");
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                                            Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                                            Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                                            Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size sourceSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[2] != DependencyProperty.UnsetValue ? (double)values[2] : 0.0)'                                            Height = (values[3] != DependencyProperty.UnsetValue ? (double)values[3] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                                        {                                            X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                                            Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                                        {                                            X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                                            Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                                        {                                            X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                                            Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Point targetPos = new Point()                                        {                                            X = (values[4] != DependencyProperty.UnsetValue ? (double)values[4] : 0.0)'                                            Y = (values[5] != DependencyProperty.UnsetValue ? (double)values[5] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                                            Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                                            Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                                            Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Size targetSize = new Size()                                        {                                            //Width = 0.0'                                            //Height = 0.0                                            Width = (values[6] != DependencyProperty.UnsetValue ? (double)values[6] : 0.0)'                                            Height = (values[7] != DependencyProperty.UnsetValue ? (double)values[7] : 0.0)                                        };
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Point[] routeInformation = (values[8] != DependencyProperty.UnsetValue ? (Point[])values[8] : null);
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Point[] routeInformation = (values[8] != DependencyProperty.UnsetValue ? (Point[])values[8] : null);
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: v = v / v.Length * 6;
Magic Number,GraphSharp.Converters,EdgeRouteToPathDataConverter,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\EdgeRouteToPathDataConverter.cs,Convert,The following statement contains a magic number: Vector n = new Vector(-v.Y' v.X) * 0.5;
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: double[] sides = new double[4];
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: sides[0] = ( s.X - sourceSize.Width / 2.0 - t.X ) / ( s.X - t.X );
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: sides[1] = ( s.Y - sourceSize.Height / 2.0 - t.Y ) / ( s.Y - t.Y );
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: sides[2] = ( s.X + sourceSize.Width / 2.0 - t.X ) / ( s.X - t.X );
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: sides[2] = ( s.X + sourceSize.Width / 2.0 - t.X ) / ( s.X - t.X );
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: sides[3] = ( s.Y + sourceSize.Height / 2.0 - t.Y ) / ( s.Y - t.Y );
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: sides[3] = ( s.Y + sourceSize.Height / 2.0 - t.Y ) / ( s.Y - t.Y );
Magic Number,GraphSharp.Converters,GraphConverterHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Controls\Converters\GraphConverterHelper.cs,CalculateAttachPoint,The following statement contains a magic number: i < 4
