Implementation smell,Namespace,Class,File,Method,Description
Long Method,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The method has 134 lines of code.
Long Method,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The method has 193 lines of code.
Complex Method,IKVM.StubGen,ClassFileWriter,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,AddField,Cyclomatic complexity of the method is 11
Complex Method,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,LoadFile,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,CanonicalizePath,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,ResolveReference,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,Cyclomatic complexity of the method is 18
Complex Method,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadArrayClass,Cyclomatic complexity of the method is 15
Complex Method,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,Cyclomatic complexity of the method is 52
Complex Method,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,SigDecoderWrapper,Cyclomatic complexity of the method is 27
Complex Method,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,GetModifiers,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,GetName,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,Cyclomatic complexity of the method is 41
Complex Method,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,MakeMethodDescriptor,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,CreateMethodWrapper,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,GetMethodAttributes,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetModifiers,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetModifiers,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Internal,EnumHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,OrBoxedIntegrals,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ConvertValue,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Internal,TypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsAssignableTo,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetModifiers,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetInterfaces,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ParseSig,Cyclomatic complexity of the method is 15
Complex Method,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetNameSigFromMethodBase,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,AddMethodOrConstructor,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,LazyPublishFields,Cyclomatic complexity of the method is 9
Long Parameter List,IKVM.StubGen,ClassFileWriter,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,ClassFileWriter,The method has 5 parameters.
Long Parameter List,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,InterfaceMethodStubHelper,The method has 6 parameters.
Long Parameter List,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,MakeMethodDescriptor,The method has 5 parameters.
Long Parameter List,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,CreateMethodWrapper,The method has 6 parameters.
Long Parameter List,IKVM.Internal,MemberWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,MemberWrapper,The method has 5 parameters.
Long Parameter List,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,Create,The method has 8 parameters.
Long Parameter List,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,MethodWrapper,The method has 8 parameters.
Long Parameter List,IKVM.Internal,SmartMethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,SmartMethodWrapper,The method has 8 parameters.
Long Parameter List,IKVM.Internal,SimpleCallMethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,SimpleCallMethodWrapper,The method has 10 parameters.
Long Parameter List,IKVM.Internal,SmartCallMethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,SmartCallMethodWrapper,The method has 10 parameters.
Long Parameter List,IKVM.Internal,SmartConstructorMethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,SmartConstructorMethodWrapper,The method has 7 parameters.
Long Parameter List,IKVM.Internal,AccessStubMethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,AccessStubMethodWrapper,The method has 10 parameters.
Long Parameter List,IKVM.Internal,AccessStubConstructorMethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,AccessStubConstructorMethodWrapper,The method has 7 parameters.
Long Parameter List,IKVM.Internal,FieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,FieldWrapper,The method has 7 parameters.
Long Parameter List,IKVM.Internal,FieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,FieldWrapper,The method has 6 parameters.
Long Parameter List,IKVM.Internal,FieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,Create,The method has 6 parameters.
Long Parameter List,IKVM.Internal,SimpleFieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,SimpleFieldWrapper,The method has 6 parameters.
Long Parameter List,IKVM.Internal,VolatileLongDoubleFieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,VolatileLongDoubleFieldWrapper,The method has 6 parameters.
Long Parameter List,IKVM.Internal,ConstantFieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,ConstantFieldWrapper,The method has 8 parameters.
Long Parameter List,IKVM.Internal,CompiledAccessStubFieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,CompiledAccessStubFieldWrapper,The method has 6 parameters.
Long Parameter List,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetNameSigFromMethodBase,The method has 6 parameters.
Long Statement,IKVM.StubGen,SerialVersionUID,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\SerialVersionUID.cs,WriteModifiers,The length of the statement  "	Modifiers mods = tw.ReflectiveModifiers & (Modifiers.Public | Modifiers.Final | Modifiers.Interface | Modifiers.Abstract); " is 122.
Long Statement,IKVM.StubGen,SerialVersionUID,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\SerialVersionUID.cs,WriteFields,The length of the statement  "		Modifiers mods = fw.Modifiers & (Modifiers.Public | Modifiers.Private | Modifiers.Protected | Modifiers.Static | Modifiers.Final | Modifiers.Volatile | Modifiers.Transient); " is 173.
Long Statement,IKVM.StubGen,SerialVersionUID,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\SerialVersionUID.cs,WriteConstructors,The length of the statement  "		Modifiers mods = mw.Modifiers & (Modifiers.Public | Modifiers.Private | Modifiers.Protected | Modifiers.Static | Modifiers.Final | Modifiers.Synchronized | Modifiers.Native | Modifiers.Abstract | Modifiers.Strictfp); " is 216.
Long Statement,IKVM.StubGen,SerialVersionUID,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\SerialVersionUID.cs,WriteMethods,The length of the statement  "		Modifiers mods = mw.Modifiers & (Modifiers.Public | Modifiers.Private | Modifiers.Protected | Modifiers.Static | Modifiers.Final | Modifiers.Synchronized | Modifiers.Native | Modifiers.Abstract | Modifiers.Strictfp); " is 216.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,LoadFile,The length of the statement  "				// to avoid problems (i.e. weird exceptions)' we don't allow assemblies to load that reference a newer version of mscorlib " is 122.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,LoadFile,The length of the statement  "						Console.Error.WriteLine ("Error: unable to load assembly '{0}' as it depends on a higher version of mscorlib than the one currently loaded"' path); " is 147.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,LoadFile,The length of the statement  "				EmitWarning (WarningId.LocationIgnored' "assembly \"{0}\" is ignored as previously loaded assembly \"{1}\" has the same identity \"{2}\""' path' asm.Location' asm.FullName); " is 173.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,The length of the statement  "		if (File.Exists (path) && Match (AssemblyName.GetAssemblyName (path)' name' ref previousMatch' ref previousMatchLevel)) { " is 121.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,The length of the statement  "		if (File.Exists (path) && Match (AssemblyName.GetAssemblyName (path)' name' ref previousMatch' ref previousMatchLevel)) { " is 121.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,The length of the statement  "			EmitWarning (WarningId.HigherVersion' "assuming assembly reference \"{0}\" matches \"{1}\"' you may need to supply runtime policy"' previousMatch.FullName' name.FullName); " is 171.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,The length of the statement  "			Console.Error.WriteLine ("Error: Assembly '{0}' uses '{1}' which has a higher version than referenced assembly '{2}'"' args.RequestingAssembly.FullName' name.FullName' previousMatch.FullName); " is 192.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,The length of the statement  "			Console.Error.WriteLine ("Error: Assembly '{0}' was requested which is a higher version than referenced assembly '{1}'"' name.FullName' previousMatch.FullName); " is 160.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,The length of the statement  "	//   1 = lower version match (i.e. not a suitable match' but used in error reporting: something was found but the version was too low) " is 134.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,The length of the statement  "	//   2 = higher version potential match (i.e. we can use this version' but if it is available the exact match will be preferred) " is 128.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,AddLibraryPaths,The length of the statement  "				EmitWarning (WarningId.InvalidLibDirectoryEnvironment' "directory \"{0}\" specified in LIB environment is not valid"' dir); " is 123.
Long Statement,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,FindAssemblyPath,The length of the statement  "				EmitWarning (WarningId.LegacySearchRule' "found assembly \"{0}\" using legacy search rule' please append '.dll' to the reference"' file); " is 137.
Long Statement,IKVM.Internal,AssemblyClassLoader,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\AssemblyClassLoader.cs,DoInitializeExports,The length of the statement  "			if (!(ReflectUtil.IsDynamicAssembly (assemblyLoader.Assembly)) && assemblyLoader.Assembly.GetManifestResourceInfo ("ikvm.exports") != null) { " is 141.
Long Statement,IKVM.Internal,AssemblyClassLoader,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\AssemblyClassLoader.cs,GetWrapperFromAssemblyType,The length of the statement  "								throw new FatalCompilerErrorException(Message.AssemblyContainsDuplicateClassNames' type.FullName' wrapper.TypeAsTBD.FullName' wrapper.Name' type.Assembly.FullName);" is 164.
Long Statement,IKVM.Internal,AssemblyClassLoader,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\AssemblyClassLoader.cs,GetWrapperFromAssemblyType,The length of the statement  "			string msg = String.Format ("\nType \"{0}\" and \"{1}\" both map to the same name \"{2}\".\n"' type.FullName' wrapper.TypeAsTBD.FullName' wrapper.Name); " is 152.
Long Statement,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,CheckDefineClassAllowed,The length of the statement  "	// this hook exists so that AssemblyClassLoader can prevent DefineClass when the name is already present in the assembly " is 120.
Long Statement,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The length of the statement  "		TypeWrapper outer = LoadGenericClass (name.Substring (0' name.Length - DotNetTypeWrapper.DelegateInterfaceSuffix.Length)); " is 122.
Long Statement,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,SetWrapperForClassLoader,The length of the statement  "	#			typeof(java.lang.ClassLoader).GetField("wrapper"' BindingFlags.NonPublic | BindingFlags.Instance).SetValue(javaClassLoader' wrapper);" is 137.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,MangleTypeName,The length of the statement  "		else if ("_0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".IndexOf (c) != -1 || (c == '.' && !escape && !nested)) { " is 131.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "				fieldsList.Add (new ConstantFieldWrapper (this' fieldType' name' fieldType.SigName' Modifiers.Public | Modifiers.Static | Modifiers.Final' fields [i]' val' MemberFlags.None)); " is 175.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "		FieldInfo[] fields = type.GetFields (BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); " is 157.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "				fieldsList.Add (CreateFieldWrapperDotNet (AttributeHelper.GetModifiers (fields [i]' true).Modifiers' fields [i].Name' fields [i].FieldType' fields [i])); " is 153.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "		ConstructorInfo[] constructors = type.GetConstructors (BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); " is 175.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "		MethodInfo[] methods = type.GetMethods (BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); " is 160.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "							// HACK we need to link here' because during a core library build we might reference java.lang.AutoCloseable (via IDisposable) before it has been linked " is 152.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "						if ((!map.TargetMethods [j].IsPublic || map.TargetMethods [j].Name != map.InterfaceMethods [j].Name) && map.TargetMethods [j].DeclaringType == type) { " is 150.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "									throw new InvalidOperationException ("Missing protected method support for " + baseTypeWrapper.Name + "::" + m.Name + m.Signature); " is 131.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "					methodsList.Add("writeReplace()Ljava.lang.Object;"' new SimpleCallMethodWrapper(this' "writeReplace"' "()Ljava.lang.Object;"'" is 125.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The length of the statement  "						typeof(ikvm.@internal.Serialization).GetMethod("writeReplace")' CoreClasses.java.lang.Object.Wrapper' TypeWrapper.EmptyArray'" is 125.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,CreateMethodWrapper,The length of the statement  "		MethodWrapper mw = new SimpleCallMethodWrapper (this' "finalize"' "()V"' (MethodInfo)mb' PrimitiveTypeWrapper.VOID' TypeWrapper.EmptyArray' mods' MemberFlags.None' SimpleOpCode.Call' SimpleOpCode.Callvirt); " is 206.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,CreateMethodWrapper,The length of the statement  "			return new SmartConstructorMethodWrapper (this' name' sig' (ConstructorInfo)mb' argTypeWrappers' mods' MemberFlags.None); " is 121.
Long Statement,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,CreateMethodWrapper,The length of the statement  "			return new SmartCallMethodWrapper (this' name' sig' (MethodInfo)mb' retTypeWrapper' argTypeWrappers' mods' MemberFlags.None' SimpleOpCode.Call' SimpleOpCode.Callvirt); " is 167.
Long Statement,IKVM.Internal,MemberWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,IsAccessibleFrom,The length of the statement  "		return (caller == DeclaringType || IsPublicOrProtectedMemberAccessible (caller' instance) || (IsInternal && DeclaringType.InternalsVisibleTo (caller)) || (!IsPrivate && DeclaringType.IsPackageAccessibleFrom (caller))) // The JVM supports accessing members that have non-public types in their signature from another package' " is 323.
Long Statement,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,Create,The length of the statement  "		return new SmartConstructorMethodWrapper (declaringType' name' sig' (ConstructorInfo)method' parameterTypes' modifiers' flags); " is 127.
Long Statement,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,Create,The length of the statement  "		return new SmartCallMethodWrapper (declaringType' name' sig' (MethodInfo)method' returnType' parameterTypes' modifiers' flags' SimpleOpCode.Call' method.IsStatic ? SimpleOpCode.Call : SimpleOpCode.Callvirt); " is 207.
Long Statement,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,UpdateNonPublicTypeInSignatureFlag,The length of the statement  "	if ((IsPublic || IsProtected) && (returnTypeWrapper != null && parameterTypeWrappers != null) && !(this is AccessStubMethodWrapper) && !(this is AccessStubConstructorMethodWrapper)) { " is 183.
Long Statement,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,AssertLinked,The length of the statement  "	Debug.Assert (parameterTypeWrappers != null && returnTypeWrapper != null' this.DeclaringType.Name + "::" + this.Name + this.Signature); " is 135.
Long Statement,IKVM.Internal,FieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,AssertLinked,The length of the statement  "		Tracer.Error (Tracer.Runtime' "AssertLinked failed: " + this.DeclaringType.Name + "::" + this.Name + " (" + this.Signature + ")"); " is 130.
Long Statement,IKVM.Internal,ReflectUtil,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ReflectUtil.cs,IsDynamicAssembly,The length of the statement  "					get_IsDynamic = (Predicate<Assembly>)Delegate.CreateDelegate(typeof(Predicate<Assembly>)' typeof(Assembly).GetMethod("get_IsDynamic"));" is 135.
Long Statement,IKVM.Internal,Tracer,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\tracer.cs,WriteLine,The length of the statement  "	Trace.WriteLine (string.Format ("[{0:HH':'mm':'ss'.'fffff} {1}] {2}"' DateTime.Now' Thread.CurrentThread.Name' message)); " is 121.
Long Statement,IKVM.Internal,Tracer,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\tracer.cs,MethodInfo,The length of the statement  "	Trace.WriteLine (string.Format ("[{0:HH':'mm':'ss'.'fffff} {1}] {2}"' DateTime.Now' Thread.CurrentThread.Name' message)); " is 121.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HideFromReflection,The length of the statement  "	CustomAttributeBuilder cab = new CustomAttributeBuilder (typeofHideFromReflectionAttribute.GetConstructor (Type.EmptyTypes)' new object[0]); " is 140.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HideFromReflection,The length of the statement  "	CustomAttributeBuilder cab = new CustomAttributeBuilder (typeofHideFromReflectionAttribute.GetConstructor (Type.EmptyTypes)' new object[0]); " is 140.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HideFromReflection,The length of the statement  "	CustomAttributeBuilder cab = new CustomAttributeBuilder (typeofHideFromReflectionAttribute.GetConstructor (Type.EmptyTypes)' new object[0]); " is 140.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HideFromJava,The length of the statement  "		hideFromJavaAttribute = new CustomAttributeBuilder (typeofHideFromJavaAttribute.GetConstructor (Type.EmptyTypes)' new object[0]); " is 129.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HideFromJava,The length of the statement  "		hideFromJavaAttribute = new CustomAttributeBuilder (typeofHideFromJavaAttribute.GetConstructor (Type.EmptyTypes)' new object[0]); " is 129.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HideFromJava,The length of the statement  "		hideFromJavaAttribute = new CustomAttributeBuilder (typeofHideFromJavaAttribute.GetConstructor (Type.EmptyTypes)' new object[0]); " is 129.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HideFromJava,The length of the statement  "		hideFromJavaAttribute = new CustomAttributeBuilder (typeofHideFromJavaAttribute.GetConstructor (Type.EmptyTypes)' new object[0]); " is 129.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsHideFromJava,The length of the statement  "	return type.IsDefined (typeofHideFromJavaAttribute' false) || (type.IsNested && (type.DeclaringType.IsDefined (typeofHideFromJavaAttribute' false) || type.Name.StartsWith ("__<"' StringComparison.Ordinal))); " is 207.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetModifiers,The length of the statement  "	if (parameters.Length > 0 && parameters [parameters.Length - 1].IsDefined (JVM.Import (typeof(ParamArrayAttribute))' false)) { " is 126.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetNameSig,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (member' typeofNameSigAttribute' false)) { " is 120.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetImplements,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofImplementsAttribute' false)) { " is 121.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetNonNestedInnerClasses,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (t' typeofNonNestedInnerClassAttribute' false)) { " is 127.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetNonNestedOuterClasses,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (t' typeofNonNestedOuterClassAttribute' false)) { " is 127.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetSignature,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (member' typeofSignatureAttribute' false)) { " is 122.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetInnerClass,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofInnerClassAttribute' false)) { " is 121.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetRemappedInterfaceMethods,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofRemappedInterfaceMethodAttribute' false)) { " is 134.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetRemappedInterfaceMethods,The length of the statement  "		attrs.Add (new RemappedInterfaceMethodAttribute ((string)args [0].Value' (string)args [1].Value' DecodeArray<string> (args [2]))); " is 130.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetRemappedType,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofRemappedTypeAttribute' false)) { " is 123.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetRemappedClasses,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (coreAssembly' typeofRemappedClassAttribute' false)) { " is 132.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetAnnotationAttributeType,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofAnnotationAttributeAttribute' false)) { " is 130.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetInternalsVisibleToAttributes,The length of the statement  "		if (cad.Constructor.DeclaringType == JVM.Import (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute))) { " is 120.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetJavaModuleAttributes,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (mod' typeofJavaModuleAttribute' false)) { " is 120.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsNoPackagePrefix,The length of the statement  "	return type.IsDefined (typeofNoPackagePrefixAttribute' false) || type.Assembly.IsDefined (typeofNoPackagePrefixAttribute' false); " is 129.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetEnclosingMethodAttribute,The length of the statement  "	foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofEnclosingMethodAttribute' false)) { " is 126.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetEnclosingMethodAttribute,The length of the statement  "		return new EnclosingMethodAttribute ((string)cad.ConstructorArguments [0].Value' (string)cad.ConstructorArguments [1].Value' (string)cad.ConstructorArguments [2].Value); " is 169.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SetRuntimeCompatibilityAttribute,The length of the statement  "	Type runtimeCompatibilityAttribute = JVM.Import (typeof(System.Runtime.CompilerServices.RuntimeCompatibilityAttribute)); " is 120.
Long Statement,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SetRuntimeCompatibilityAttribute,The length of the statement  "	assemblyBuilder.SetCustomAttribute (new CustomAttributeBuilder (runtimeCompatibilityAttribute.GetConstructor (Type.EmptyTypes)' new object[0]' new PropertyInfo[] { " is 163.
Long Statement,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,Load,The length of the statement  "	if (!annotationClass.EndsWith ("$Annotation;") && !annotationClass.EndsWith ("$Annotation$__ReturnValue;") && !annotationClass.EndsWith ("$Annotation$__Multiple;")) { " is 166.
Long Statement,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The length of the statement  "						if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) { " is 184.
Long Statement,IKVM.Internal,TypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsForbiddenTypeParameterType,The length of the statement  "	return type == Types.Void || type == JVM.Import (typeof(ArgIterator)) || type == JVM.Import (typeof(RuntimeArgumentHandle)) || type == JVM.Import (typeof(TypedReference)) || type.ContainsGenericParameters || type.IsByRef; " is 221.
Long Statement,IKVM.Internal,TypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsJavaPrimitive,The length of the statement  "	return type == PrimitiveTypeWrapper.BOOLEAN.TypeAsTBD || type == PrimitiveTypeWrapper.BYTE.TypeAsTBD || type == PrimitiveTypeWrapper.CHAR.TypeAsTBD || type == PrimitiveTypeWrapper.DOUBLE.TypeAsTBD || type == PrimitiveTypeWrapper.FLOAT.TypeAsTBD || type == PrimitiveTypeWrapper.INT.TypeAsTBD || type == PrimitiveTypeWrapper.LONG.TypeAsTBD || type == PrimitiveTypeWrapper.SHORT.TypeAsTBD || type == PrimitiveTypeWrapper.VOID.TypeAsTBD; " is 433.
Long Statement,IKVM.Internal,TypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetMethodWrapper,The length of the statement  "	// We need to get the methods before calling String.IsInterned' because getting them might cause the strings to be interned " is 123.
Long Statement,IKVM.Internal,TypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsPackageAccessibleFrom,The length of the statement  "					// (during compilation we have multiple CompilerClassLoader instances to represent the single shared runtime class loader)" is 122.
Long Statement,IKVM.Internal,TypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsAssignableTo,The length of the statement  "		return (!elem1.IsNonPrimitiveValueType && elem1.IsSubTypeOf (elem2)) || (rank1 == rank2 && elem2.IsGhost && elem1 == CoreClasses.java.lang.Object.Wrapper); " is 155.
Long Statement,IKVM.Internal,TypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetImplementedInterfacesAsTypeWrappers,The length of the statement  "			// for remapped interfaces' we also return the original interface (Java types will ignore it' if it isn't listed in the ImplementsAttribute) " is 140.
Long Statement,IKVM.Internal,PrimitiveTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,IsPrimitiveType,The length of the statement  "	return type == BYTE.type || type == CHAR.type || type == DOUBLE.type || type == FLOAT.type || type == INT.type || type == LONG.type || type == SHORT.type || type == BOOLEAN.type || type == VOID.type; " is 199.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetNameSigFromMethodBase,The length of the statement  "	retType = method is ConstructorInfo ? PrimitiveTypeWrapper.VOID : GetParameterTypeWrapper (((MethodInfo)method).ReturnParameter); " is 129.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,LazyPublishMethods,The length of the statement  "	const BindingFlags flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 146.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,AddMethodOrConstructor,The length of the statement  "				int id = Int32.Parse (name.Substring (NamePrefix.AccessStub.Length' name.IndexOf ('|'' NamePrefix.AccessStub.Length) - NamePrefix.AccessStub.Length)); " is 150.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,AddMethodOrConstructor,The length of the statement  "				MethodInfo nonvirt = type.GetMethod (NamePrefix.NonVirtual + id' BindingFlags.NonPublic | BindingFlags.DeclaredOnly | BindingFlags.Instance); " is 141.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,AddMethodOrConstructor,The length of the statement  "				methods.Add (new AccessStubMethodWrapper (this' name' sig' mi' mi' nonvirt ?? mi' retType' paramTypes' mods.Modifiers & ~Modifiers.Final' flags)); " is 146.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,AddMethodOrConstructor,The length of the statement  "						mw = new AccessStubMethodWrapper (this' name' sig' mi' stubVirt' stubNonVirt ?? stubVirt' retType' paramTypes' mw.Modifiers' flags); " is 132.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,AddMethodOrConstructor,The length of the statement  "						mw = new AccessStubConstructorMethodWrapper (this' sig' (ConstructorInfo)method' stub' paramTypes' mw.Modifiers' flags); " is 120.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetType2AccessStubs,The length of the statement  "	const BindingFlags flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 146.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetType2AccessStub,The length of the statement  "	const BindingFlags flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance; " is 124.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,LazyPublishFields,The length of the statement  "	const BindingFlags flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 146.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,LazyPublishFields,The length of the statement  "	// FXBUG on .NET 3.5 and Mono Type.GetProperties() will not return "duplicate" properties (i.e. that have the same name and type' but differ in custom modifiers). " is 162.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,LazyPublishFields,The length of the statement  "	// .NET 4.0 works as expected. We don't have a workaround' because that would require name mangling again and this situation is very unlikely anyway. " is 149.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,LazyPublishFields,The length of the statement  "					if (properties [i] != null && name == properties [i].Name && MatchTypes (tw' GetPropertyTypeWrapper (properties [i]))) { " is 120.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,TypeWrapperFromModOpt,The length of the statement  "		return ClassLoaderWrapper.GetWrapperFromType (modopt) ?? new UnloadableTypeWrapper (TypeNameUtil.UnmangleNestedTypeName (modopt.Name)' modopt); " is 143.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetPropertyTypeWrapper,The length of the statement  "	return modopt.Length == 0 ? ClassLoaderWrapper.GetWrapperFromType (property.PropertyType) : TypeWrapperFromModOpt (modopt [0]); " is 127.
Long Statement,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetFieldTypeWrapper,The length of the statement  "	return modopt.Length == 0 ? ClassLoaderWrapper.GetWrapperFromType (field.FieldType) : TypeWrapperFromModOpt (modopt [0]); " is 121.
Long Statement,IKVM.Internal,ArrayTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,LazyPublishMembers,The length of the statement  "	MethodWrapper mw = new SimpleCallMethodWrapper (this' "clone"' "()Ljava.lang.Object;"' CloneMethod' CoreClasses.java.lang.Object.Wrapper' TypeWrapper.EmptyArray' Modifiers.Public' MemberFlags.HideFromReflection' SimpleOpCode.Callvirt' SimpleOpCode.Callvirt); " is 258.
Long Statement,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,CriticalFailure,The length of the statement  "				Assembly winForms = IsUnix ? null : Assembly.Load("System.Windows.Forms' Version=1.0.5000.0' Culture=neutral' PublicKeyToken=b77a5c561934e089");" is 144.
Long Statement,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,CriticalFailure,The length of the statement  "		message = String.Format ("****** Critical Failure: {1} ******{0}{0}" + "PLEASE FILE A BUG REPORT FOR IKVM.NET WHEN YOU SEE THIS MESSAGE{0}{0}" + (messageBox != null ? "(on Windows you can use Ctrl+C to copy the contents of this message to the clipboard){0}{0}" : "") + "{2}{0}" + "{3}{0}" + "{4}"' Environment.NewLine' message' x' x != null ? new StackTrace (x' true).ToString () : ""' new StackTrace (true)); " is 409.
Long Statement,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,CriticalFailure,The length of the statement  "				messageBox.InvokeMember ("Show"' System.Reflection.BindingFlags.InvokeMethod | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public' null' null' new object[] { " is 184.
Complex Conditional,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,MangleTypeName,The conditional expression  "c == '+' && !escape && (sb.Length == 0 || sb [sb.Length - 1] != '$')"  is complex.
Complex Conditional,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,MangleTypeName,The conditional expression  ""_0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".IndexOf (c) != -1 || (c == '.' && !escape && !nested)"  is complex.
Complex Conditional,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The conditional expression  "digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1"  is complex.
Complex Conditional,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The conditional expression  "baseMethod != null && baseMethod.IsFinal && !baseMethod.IsStatic && !baseMethod.IsPrivate"  is complex.
Complex Conditional,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,LazyPublishMembers,The conditional expression  "!m.IsStatic && !m.IsFinal && (m.IsPublic || m.IsProtected) && m.Name != "<init>""  is complex.
Complex Conditional,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,InterfaceMethodStubHelper,The conditional expression  "existing == null || existing is ByRefMethodWrapper || existing.IsStatic || !existing.IsPublic"  is complex.
Complex Conditional,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,CreateMethodWrapper,The conditional expression  "name == "Finalize" && sig == "()V" && !mb.IsStatic && IsRemappedImplDerived (TypeAsBaseType)"  is complex.
Complex Conditional,IKVM.Internal,MemberWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,IsPublicOrProtectedMemberAccessible,The conditional expression  "IsPublic || (IsProtected && caller.IsSubTypeOf (DeclaringType) && (IsStatic || instance.IsSubTypeOf (caller)))"  is complex.
Complex Conditional,IKVM.Internal,MethodWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,UpdateNonPublicTypeInSignatureFlag,The conditional expression  "(IsPublic || IsProtected) && (returnTypeWrapper != null && parameterTypeWrappers != null) && !(this is AccessStubMethodWrapper) && !(this is AccessStubConstructorMethodWrapper)"  is complex.
Complex Conditional,IKVM.Internal,FieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,UpdateNonPublicTypeInSignatureFlag,The conditional expression  "(IsPublic || IsProtected) && fieldType != null && !IsAccessStub"  is complex.
Complex Conditional,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetModifiers,The conditional expression  "(mb.IsFinal || (!mb.IsVirtual && ((modifiers & Modifiers.Private) == 0))) && !mb.IsStatic && !mb.IsConstructor"  is complex.
Complex Conditional,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The conditional expression  "val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")"  is complex.
Virtual Method Call from Constructor,IKVM.Internal,CompiledAccessStubFieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,CompiledAccessStubFieldWrapper,The constructor "CompiledAccessStubFieldWrapper" calls a virtual method "GetGetMethod".
Virtual Method Call from Constructor,IKVM.Internal,CompiledAccessStubFieldWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\MemberWrapper.cs,CompiledAccessStubFieldWrapper,The constructor "CompiledAccessStubFieldWrapper" calls a virtual method "GetSetMethod".
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,CanonicalizePath,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,CanonicalizePath,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,CanonicalizePath,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,CanonicalizePath,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,CanonicalizePath,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,CanonicalizePath,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,ResolveReference,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,ResolveReference,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,LoadMscorlib,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,Tracer,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\tracer.cs,Tracer,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,Tracer,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\tracer.cs,Init,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetInternalsVisibleToAttributes,The method has an empty catch block.
Empty Catch Block,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,The method has an empty catch block.
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUInt16,The following statement contains a magic number: stream.WriteByte ((byte)(s >> 8));  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUInt32,The following statement contains a magic number: stream.WriteByte ((byte)(u >> 24));  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUInt32,The following statement contains a magic number: stream.WriteByte ((byte)(u >> 16));  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUInt32,The following statement contains a magic number: stream.WriteByte ((byte)(u >> 8));  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteInt64,The following statement contains a magic number: WriteUInt32 ((uint)(l >> 32));  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: for (int i = 0' e = str.Length; i < e; i++) {  	char ch = str [i];  	if ((ch != 0) && (ch <= 0x7f)) {  		buf [j++] = (byte)ch;  	}  	else if (ch <= 0x7FF) {  		/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  		byte low_six = (byte)(ch & 0x3F);  		buf [j++] = (byte)(high_five | 0xC0);  		/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  		/* 10xxxxxx */}  	else {  		/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  		byte mid_six = (byte)((ch >> 6) & 0x3F);  		byte low_six = (byte)(ch & 0x3f);  		buf [j++] = (byte)(high_four | 0xE0);  		/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  		/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  		/* 10xxxxxx*/}  }  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: for (int i = 0' e = str.Length; i < e; i++) {  	char ch = str [i];  	if ((ch != 0) && (ch <= 0x7f)) {  		buf [j++] = (byte)ch;  	}  	else if (ch <= 0x7FF) {  		/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  		byte low_six = (byte)(ch & 0x3F);  		buf [j++] = (byte)(high_five | 0xC0);  		/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  		/* 10xxxxxx */}  	else {  		/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  		byte mid_six = (byte)((ch >> 6) & 0x3F);  		byte low_six = (byte)(ch & 0x3f);  		buf [j++] = (byte)(high_four | 0xE0);  		/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  		/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  		/* 10xxxxxx*/}  }  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: for (int i = 0' e = str.Length; i < e; i++) {  	char ch = str [i];  	if ((ch != 0) && (ch <= 0x7f)) {  		buf [j++] = (byte)ch;  	}  	else if (ch <= 0x7FF) {  		/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  		byte low_six = (byte)(ch & 0x3F);  		buf [j++] = (byte)(high_five | 0xC0);  		/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  		/* 10xxxxxx */}  	else {  		/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  		byte mid_six = (byte)((ch >> 6) & 0x3F);  		byte low_six = (byte)(ch & 0x3f);  		buf [j++] = (byte)(high_four | 0xE0);  		/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  		/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  		/* 10xxxxxx*/}  }  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: if ((ch != 0) && (ch <= 0x7f)) {  	buf [j++] = (byte)ch;  }  else if (ch <= 0x7FF) {  	/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  	byte low_six = (byte)(ch & 0x3F);  	buf [j++] = (byte)(high_five | 0xC0);  	/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx */}  else {  	/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  	byte mid_six = (byte)((ch >> 6) & 0x3F);  	byte low_six = (byte)(ch & 0x3f);  	buf [j++] = (byte)(high_four | 0xE0);  	/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  	/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx*/}  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: if ((ch != 0) && (ch <= 0x7f)) {  	buf [j++] = (byte)ch;  }  else if (ch <= 0x7FF) {  	/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  	byte low_six = (byte)(ch & 0x3F);  	buf [j++] = (byte)(high_five | 0xC0);  	/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx */}  else {  	/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  	byte mid_six = (byte)((ch >> 6) & 0x3F);  	byte low_six = (byte)(ch & 0x3f);  	buf [j++] = (byte)(high_four | 0xE0);  	/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  	/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx*/}  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: if ((ch != 0) && (ch <= 0x7f)) {  	buf [j++] = (byte)ch;  }  else if (ch <= 0x7FF) {  	/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  	byte low_six = (byte)(ch & 0x3F);  	buf [j++] = (byte)(high_five | 0xC0);  	/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx */}  else {  	/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  	byte mid_six = (byte)((ch >> 6) & 0x3F);  	byte low_six = (byte)(ch & 0x3f);  	buf [j++] = (byte)(high_four | 0xE0);  	/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  	/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx*/}  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: if (ch <= 0x7FF) {  	/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  	byte low_six = (byte)(ch & 0x3F);  	buf [j++] = (byte)(high_five | 0xC0);  	/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx */}  else {  	/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  	byte mid_six = (byte)((ch >> 6) & 0x3F);  	byte low_six = (byte)(ch & 0x3f);  	buf [j++] = (byte)(high_four | 0xE0);  	/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  	/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx*/}  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: if (ch <= 0x7FF) {  	/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  	byte low_six = (byte)(ch & 0x3F);  	buf [j++] = (byte)(high_five | 0xC0);  	/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx */}  else {  	/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  	byte mid_six = (byte)((ch >> 6) & 0x3F);  	byte low_six = (byte)(ch & 0x3f);  	buf [j++] = (byte)(high_four | 0xE0);  	/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  	/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx*/}  
Magic Number,IKVM.StubGen,BigEndianStream,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteUtf8,The following statement contains a magic number: if (ch <= 0x7FF) {  	/* 11 bits or less. */byte high_five = (byte)(ch >> 6);  	byte low_six = (byte)(ch & 0x3F);  	buf [j++] = (byte)(high_five | 0xC0);  	/* 110xxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx */}  else {  	/* possibly full 16 bits. */byte high_four = (byte)(ch >> 12);  	byte mid_six = (byte)((ch >> 6) & 0x3F);  	byte low_six = (byte)(ch & 0x3f);  	buf [j++] = (byte)(high_four | 0xE0);  	/* 1110xxxx */buf [j++] = (byte)(mid_six | 0x80);  	/* 10xxxxxx */buf [j++] = (byte)(low_six | 0x80);  	/* 10xxxxxx*/}  
Magic Number,IKVM.StubGen,ConstantPoolItemMethodref,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,GetHashCode,The following statement contains a magic number: return class_index | (name_and_type_index << 16);  
Magic Number,IKVM.StubGen,ConstantPoolItemNameAndType,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,GetHashCode,The following statement contains a magic number: return name_index | (descriptor_index << 16);  
Magic Number,IKVM.StubGen,ConstantPoolItemDouble,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,GetHashCode,The following statement contains a magic number: return ((int)l) ^ ((int)(l >> 32));  
Magic Number,IKVM.StubGen,ConstantValueAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 (2);  
Magic Number,IKVM.StubGen,StringAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 (2);  
Magic Number,IKVM.StubGen,InnerClassesAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 8 * classes.Count));  
Magic Number,IKVM.StubGen,InnerClassesAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 8 * classes.Count));  
Magic Number,IKVM.StubGen,ExceptionsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 2 * classes.Count));  
Magic Number,IKVM.StubGen,ExceptionsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 2 * classes.Count));  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Add,The following statement contains a magic number: bes.WriteUInt16 ((ushort)((annot.Length - 2) / 2));  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Add,The following statement contains a magic number: bes.WriteUInt16 ((ushort)((annot.Length - 2) / 2));  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Add,The following statement contains a magic number: for (int i = 2; i < annot.Length; i += 2) {  	bes.WriteUInt16 (classFile.AddUtf8 ((string)annot [i]));  	WriteElementValue (bes' annot [i + 1]);  }  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Add,The following statement contains a magic number: for (int i = 2; i < annot.Length; i += 2) {  	bes.WriteUInt16 (classFile.AddUtf8 ((string)annot [i]));  	WriteElementValue (bes' annot [i + 1]);  }  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Add,The following statement contains a magic number: i += 2
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteElementValue,The following statement contains a magic number: if (val is object[]) {  	object[] arr = (object[])val;  	if (AnnotationDefaultAttribute.TAG_ENUM.Equals (arr [0])) {  		bes.WriteByte (AnnotationDefaultAttribute.TAG_ENUM);  		bes.WriteUInt16 (classFile.AddUtf8 ((string)arr [1]));  		bes.WriteUInt16 (classFile.AddUtf8 ((string)arr [2]));  		return;  	}  	else if (AnnotationDefaultAttribute.TAG_ARRAY.Equals (arr [0])) {  		bes.WriteByte (AnnotationDefaultAttribute.TAG_ARRAY);  		object[] elemarr = (object[])arr [1];  		bes.WriteUInt16 ((ushort)elemarr.Length);  		foreach (object elem in elemarr) {  			WriteElementValue (bes' elem);  		}  		return;  	}  }  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteElementValue,The following statement contains a magic number: if (AnnotationDefaultAttribute.TAG_ENUM.Equals (arr [0])) {  	bes.WriteByte (AnnotationDefaultAttribute.TAG_ENUM);  	bes.WriteUInt16 (classFile.AddUtf8 ((string)arr [1]));  	bes.WriteUInt16 (classFile.AddUtf8 ((string)arr [2]));  	return;  }  else if (AnnotationDefaultAttribute.TAG_ARRAY.Equals (arr [0])) {  	bes.WriteByte (AnnotationDefaultAttribute.TAG_ARRAY);  	object[] elemarr = (object[])arr [1];  	bes.WriteUInt16 ((ushort)elemarr.Length);  	foreach (object elem in elemarr) {  		WriteElementValue (bes' elem);  	}  	return;  }  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,WriteElementValue,The following statement contains a magic number: bes.WriteUInt16 (classFile.AddUtf8 ((string)arr [2]));  
Magic Number,IKVM.StubGen,RuntimeVisibleAnnotationsAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(mem.Length + 2));  
Magic Number,IKVM.StubGen,CodeAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 2 + 4 + code.Length + 2 + 2));  
Magic Number,IKVM.StubGen,CodeAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 2 + 4 + code.Length + 2 + 2));  
Magic Number,IKVM.StubGen,CodeAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 2 + 4 + code.Length + 2 + 2));  
Magic Number,IKVM.StubGen,CodeAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 2 + 4 + code.Length + 2 + 2));  
Magic Number,IKVM.StubGen,CodeAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\ClassFileWriter.cs,Write,The following statement contains a magic number: bes.WriteUInt32 ((uint)(2 + 2 + 4 + code.Length + 2 + 2));  
Magic Number,IKVM.StubGen,SerialVersionUID,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\SerialVersionUID.cs,Compute,The following statement contains a magic number: for (int i = 7; i >= 0; i--) {  	hash <<= 8;  	hash |= buf [i];  }  
Magic Number,IKVM.StubGen,SerialVersionUID,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\SerialVersionUID.cs,Compute,The following statement contains a magic number: for (int i = 7; i >= 0; i--) {  	hash <<= 8;  	hash |= buf [i];  }  
Magic Number,IKVM.StubGen,SerialVersionUID,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\SerialVersionUID.cs,Compute,The following statement contains a magic number: hash <<= 8;  
Magic Number,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,The following statement contains a magic number: if (previousMatch != null) {  	if (previousMatchLevel == 2) {  		EmitWarning (WarningId.HigherVersion' "assuming assembly reference \"{0}\" matches \"{1}\"' you may need to supply runtime policy"' previousMatch.FullName' name.FullName);  		return LoadFile (new Uri (previousMatch.CodeBase).LocalPath);  	}  	else if (args.RequestingAssembly != null) {  		Console.Error.WriteLine ("Error: Assembly '{0}' uses '{1}' which has a higher version than referenced assembly '{2}'"' args.RequestingAssembly.FullName' name.FullName' previousMatch.FullName);  	}  	else {  		Console.Error.WriteLine ("Error: Assembly '{0}' was requested which is a higher version than referenced assembly '{1}'"' name.FullName' previousMatch.FullName);  	}  }  else {  	#if STUB_GENERATOR  	return universe.CreateMissingAssembly (args.Name);  	#else  					Console.Error.WriteLine("Error: unable to find assembly '{0}'"' args.Name); 				if (args.RequestingAssembly != null) 				{ 					Console.Error.WriteLine("    (a dependency of '{0}')"' args.RequestingAssembly.FullName); 				} #endif  }  
Magic Number,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,universe_AssemblyResolve,The following statement contains a magic number: if (previousMatchLevel == 2) {  	EmitWarning (WarningId.HigherVersion' "assuming assembly reference \"{0}\" matches \"{1}\"' you may need to supply runtime policy"' previousMatch.FullName' name.FullName);  	return LoadFile (new Uri (previousMatch.CodeBase).LocalPath);  }  else if (args.RequestingAssembly != null) {  	Console.Error.WriteLine ("Error: Assembly '{0}' uses '{1}' which has a higher version than referenced assembly '{2}'"' args.RequestingAssembly.FullName' name.FullName' previousMatch.FullName);  }  else {  	Console.Error.WriteLine ("Error: Assembly '{0}' was requested which is a higher version than referenced assembly '{1}'"' name.FullName' previousMatch.FullName);  }  
Magic Number,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,The following statement contains a magic number: switch (result) {  case AssemblyComparisonResult.EquivalentFullMatch:  case AssemblyComparisonResult.EquivalentPartialMatch:  case AssemblyComparisonResult.EquivalentFXUnified:  case AssemblyComparisonResult.EquivalentPartialFXUnified:  case AssemblyComparisonResult.EquivalentPartialWeakNamed:  case AssemblyComparisonResult.EquivalentWeakNamed:  	return true;  case AssemblyComparisonResult.NonEquivalentPartialVersion:  case AssemblyComparisonResult.NonEquivalentVersion:  	if (bestMatchLevel < 1) {  		bestMatchLevel = 1;  		bestMatch = assemblyDef;  	}  	return false;  case AssemblyComparisonResult.EquivalentUnified:  case AssemblyComparisonResult.EquivalentPartialUnified:  	if (bestMatchLevel < 2) {  		bestMatchLevel = 2;  		bestMatch = assemblyDef;  	}  	return false;  case AssemblyComparisonResult.NonEquivalent:  case AssemblyComparisonResult.Unknown:  	return false;  default:  	throw new NotImplementedException ();  }  
Magic Number,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,The following statement contains a magic number: switch (result) {  case AssemblyComparisonResult.EquivalentFullMatch:  case AssemblyComparisonResult.EquivalentPartialMatch:  case AssemblyComparisonResult.EquivalentFXUnified:  case AssemblyComparisonResult.EquivalentPartialFXUnified:  case AssemblyComparisonResult.EquivalentPartialWeakNamed:  case AssemblyComparisonResult.EquivalentWeakNamed:  	return true;  case AssemblyComparisonResult.NonEquivalentPartialVersion:  case AssemblyComparisonResult.NonEquivalentVersion:  	if (bestMatchLevel < 1) {  		bestMatchLevel = 1;  		bestMatch = assemblyDef;  	}  	return false;  case AssemblyComparisonResult.EquivalentUnified:  case AssemblyComparisonResult.EquivalentPartialUnified:  	if (bestMatchLevel < 2) {  		bestMatchLevel = 2;  		bestMatch = assemblyDef;  	}  	return false;  case AssemblyComparisonResult.NonEquivalent:  case AssemblyComparisonResult.Unknown:  	return false;  default:  	throw new NotImplementedException ();  }  
Magic Number,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,The following statement contains a magic number: if (bestMatchLevel < 2) {  	bestMatchLevel = 2;  	bestMatch = assemblyDef;  }  
Magic Number,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,The following statement contains a magic number: if (bestMatchLevel < 2) {  	bestMatchLevel = 2;  	bestMatch = assemblyDef;  }  
Magic Number,IKVM.Internal,AssemblyResolver,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\ikvmc\AssemblyResolver.cs,Match,The following statement contains a magic number: bestMatchLevel = 2;  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadArrayClass,The following statement contains a magic number: if (name [dims] == 'L') {  	if (!name.EndsWith (";") || name.Length <= dims + 2 || name [dims + 1] == '[') {  		// malformed class name  		return null;  	}  	string elemClass = name.Substring (dims + 1' name.Length - dims - 2);  	// NOTE it's important that we're registered as the initiating loader  	// for the element type here  	TypeWrapper type = LoadClassByDottedNameFast (elemClass);  	if (type != null) {  		type = type.GetClassLoader ().CreateArrayType (name' type' dims);  	}  	return type;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadArrayClass,The following statement contains a magic number: if (name [dims] == 'L') {  	if (!name.EndsWith (";") || name.Length <= dims + 2 || name [dims + 1] == '[') {  		// malformed class name  		return null;  	}  	string elemClass = name.Substring (dims + 1' name.Length - dims - 2);  	// NOTE it's important that we're registered as the initiating loader  	// for the element type here  	TypeWrapper type = LoadClassByDottedNameFast (elemClass);  	if (type != null) {  		type = type.GetClassLoader ().CreateArrayType (name' type' dims);  	}  	return type;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadArrayClass,The following statement contains a magic number: if (!name.EndsWith (";") || name.Length <= dims + 2 || name [dims + 1] == '[') {  	// malformed class name  	return null;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: pos += 5;  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: for (; ;) {  	pos = name.IndexOf ("_$$"' pos);  	if (pos == -1) {  		return null;  	}  	if (name.IndexOf ("_$$_"' pos' 4) == pos) {  		if (nest == 0) {  			typeParamNames.Add (name.Substring (start' pos - start));  			start = pos + 4;  		}  		pos += 4;  	}  	else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  		nest++;  		pos += 5;  	}  	else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  		if (nest == 0) {  			if (pos + 6 != name.Length) {  				return null;  			}  			typeParamNames.Add (name.Substring (start' pos - start));  			break;  		}  		nest--;  		pos += 6;  	}  	else {  		pos += 3;  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$_"' pos' 4) == pos) {  	if (nest == 0) {  		typeParamNames.Add (name.Substring (start' pos - start));  		start = pos + 4;  	}  	pos += 4;  }  else if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (nest == 0) {  	typeParamNames.Add (name.Substring (start' pos - start));  	start = pos + 4;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: start = pos + 4;  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: pos += 4;  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$_"' pos' 5) == pos) {  	nest++;  	pos += 5;  }  else if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: pos += 5;  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (name.IndexOf ("_$$$$_"' pos' 6) == pos) {  	if (nest == 0) {  		if (pos + 6 != name.Length) {  			return null;  		}  		typeParamNames.Add (name.Substring (start' pos - start));  		break;  	}  	nest--;  	pos += 6;  }  else {  	pos += 3;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (nest == 0) {  	if (pos + 6 != name.Length) {  		return null;  	}  	typeParamNames.Add (name.Substring (start' pos - start));  	break;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: if (pos + 6 != name.Length) {  	return null;  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: pos += 6;  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,LoadGenericClass,The following statement contains a magic number: pos += 3;  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,GetGenericClassLoaderByName,The following statement contains a magic number: for (int i = 0; i < name.Length; i++) {  	if (name [i] == '[') {  		if (name [i + 1] == '[') {  			stack.Push (list);  			list = new List<ClassLoaderWrapper> ();  			if (name [i + 2] == '[') {  				i++;  			}  		}  		else {  			int start = i + 1;  			i = name.IndexOf (']'' i);  			list.Add (ClassLoaderWrapper.GetAssemblyClassLoaderByName (name.Substring (start' i - start)));  		}  	}  	else if (name [i] == ']') {  		ClassLoaderWrapper loader = GetGenericClassLoaderByKey (list.ToArray ());  		list = stack.Pop ();  		if (list == null) {  			return loader;  		}  		list.Add (loader);  	}  	else {  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,GetGenericClassLoaderByName,The following statement contains a magic number: if (name [i] == '[') {  	if (name [i + 1] == '[') {  		stack.Push (list);  		list = new List<ClassLoaderWrapper> ();  		if (name [i + 2] == '[') {  			i++;  		}  	}  	else {  		int start = i + 1;  		i = name.IndexOf (']'' i);  		list.Add (ClassLoaderWrapper.GetAssemblyClassLoaderByName (name.Substring (start' i - start)));  	}  }  else if (name [i] == ']') {  	ClassLoaderWrapper loader = GetGenericClassLoaderByKey (list.ToArray ());  	list = stack.Pop ();  	if (list == null) {  		return loader;  	}  	list.Add (loader);  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,GetGenericClassLoaderByName,The following statement contains a magic number: if (name [i + 1] == '[') {  	stack.Push (list);  	list = new List<ClassLoaderWrapper> ();  	if (name [i + 2] == '[') {  		i++;  	}  }  else {  	int start = i + 1;  	i = name.IndexOf (']'' i);  	list.Add (ClassLoaderWrapper.GetAssemblyClassLoaderByName (name.Substring (start' i - start)));  }  
Magic Number,IKVM.Internal,ClassLoaderWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\ClassLoaderWrapper.cs,GetGenericClassLoaderByName,The following statement contains a magic number: if (name [i + 2] == '[') {  	i++;  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: for (int i = NamePrefix.Length; i < name.Length; i++) {  	char c = name [i];  	if (c == '$') {  		if (i + 1 < name.Length && name [i + 1] != '$') {  			sb.Append ('+');  		}  		else {  			i++;  			if (i + 5 > name.Length) {  				return name;  			}  			int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  			if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  				return name;  			}  			sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  		}  	}  	else {  		sb.Append (c);  	}  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: for (int i = NamePrefix.Length; i < name.Length; i++) {  	char c = name [i];  	if (c == '$') {  		if (i + 1 < name.Length && name [i + 1] != '$') {  			sb.Append ('+');  		}  		else {  			i++;  			if (i + 5 > name.Length) {  				return name;  			}  			int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  			if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  				return name;  			}  			sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  		}  	}  	else {  		sb.Append (c);  	}  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: for (int i = NamePrefix.Length; i < name.Length; i++) {  	char c = name [i];  	if (c == '$') {  		if (i + 1 < name.Length && name [i + 1] != '$') {  			sb.Append ('+');  		}  		else {  			i++;  			if (i + 5 > name.Length) {  				return name;  			}  			int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  			if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  				return name;  			}  			sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  		}  	}  	else {  		sb.Append (c);  	}  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: for (int i = NamePrefix.Length; i < name.Length; i++) {  	char c = name [i];  	if (c == '$') {  		if (i + 1 < name.Length && name [i + 1] != '$') {  			sb.Append ('+');  		}  		else {  			i++;  			if (i + 5 > name.Length) {  				return name;  			}  			int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  			int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  			if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  				return name;  			}  			sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  		}  	}  	else {  		sb.Append (c);  	}  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (c == '$') {  	if (i + 1 < name.Length && name [i + 1] != '$') {  		sb.Append ('+');  	}  	else {  		i++;  		if (i + 5 > name.Length) {  			return name;  		}  		int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  		if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  			return name;  		}  		sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  	}  }  else {  	sb.Append (c);  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (c == '$') {  	if (i + 1 < name.Length && name [i + 1] != '$') {  		sb.Append ('+');  	}  	else {  		i++;  		if (i + 5 > name.Length) {  			return name;  		}  		int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  		if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  			return name;  		}  		sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  	}  }  else {  	sb.Append (c);  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (c == '$') {  	if (i + 1 < name.Length && name [i + 1] != '$') {  		sb.Append ('+');  	}  	else {  		i++;  		if (i + 5 > name.Length) {  			return name;  		}  		int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  		if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  			return name;  		}  		sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  	}  }  else {  	sb.Append (c);  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (c == '$') {  	if (i + 1 < name.Length && name [i + 1] != '$') {  		sb.Append ('+');  	}  	else {  		i++;  		if (i + 5 > name.Length) {  			return name;  		}  		int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  		int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  		if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  			return name;  		}  		sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  	}  }  else {  	sb.Append (c);  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (i + 1 < name.Length && name [i + 1] != '$') {  	sb.Append ('+');  }  else {  	i++;  	if (i + 5 > name.Length) {  		return name;  	}  	int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  	if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  		return name;  	}  	sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (i + 1 < name.Length && name [i + 1] != '$') {  	sb.Append ('+');  }  else {  	i++;  	if (i + 5 > name.Length) {  		return name;  	}  	int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  	if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  		return name;  	}  	sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (i + 1 < name.Length && name [i + 1] != '$') {  	sb.Append ('+');  }  else {  	i++;  	if (i + 5 > name.Length) {  		return name;  	}  	int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  	if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  		return name;  	}  	sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (i + 1 < name.Length && name [i + 1] != '$') {  	sb.Append ('+');  }  else {  	i++;  	if (i + 5 > name.Length) {  		return name;  	}  	int digit0 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit1 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit2 = "0123456789ABCDEF".IndexOf (name [++i]);  	int digit3 = "0123456789ABCDEF".IndexOf (name [++i]);  	if (digit0 == -1 || digit1 == -1 || digit2 == -1 || digit3 == -1) {  		return name;  	}  	sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: if (i + 5 > name.Length) {  	return name;  }  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  
Magic Number,IKVM.Internal,DotNetTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\DotNetTypeWrapper.cs,DemangleTypeName,The following statement contains a magic number: sb.Append ((char)((digit0 << 12) + (digit1 << 8) + (digit2 << 4) + digit3));  
Magic Number,IKVM.Internal,Tracer,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\tracer.cs,SetTraceLevel,The following statement contains a magic number: if (trace.Length == 2) {  	level = (System.Diagnostics.TraceLevel)Enum.Parse (typeof(System.Diagnostics.TraceLevel)' trace [1]' true);  }  
Magic Number,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetModifiersAttribute,The following statement contains a magic number: if (attr.Count == 1) {  	IList<CustomAttributeTypedArgument> args = attr [0].ConstructorArguments;  	if (args.Count == 2) {  		return new ModifiersAttribute ((Modifiers)args [0].Value' (bool)args [1].Value);  	}  	return new ModifiersAttribute ((Modifiers)args [0].Value);  }  
Magic Number,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetModifiersAttribute,The following statement contains a magic number: if (args.Count == 2) {  	return new ModifiersAttribute ((Modifiers)args [0].Value' (bool)args [1].Value);  }  
Magic Number,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetRemappedInterfaceMethods,The following statement contains a magic number: foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofRemappedInterfaceMethodAttribute' false)) {  	IList<CustomAttributeTypedArgument> args = cad.ConstructorArguments;  	attrs.Add (new RemappedInterfaceMethodAttribute ((string)args [0].Value' (string)args [1].Value' DecodeArray<string> (args [2])));  }  
Magic Number,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetRemappedInterfaceMethods,The following statement contains a magic number: attrs.Add (new RemappedInterfaceMethodAttribute ((string)args [0].Value' (string)args [1].Value' DecodeArray<string> (args [2])));  
Magic Number,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetEnclosingMethodAttribute,The following statement contains a magic number: foreach (CustomAttributeData cad in CustomAttributeData.__GetCustomAttributes (type' typeofEnclosingMethodAttribute' false)) {  	return new EnclosingMethodAttribute ((string)cad.ConstructorArguments [0].Value' (string)cad.ConstructorArguments [1].Value' (string)cad.ConstructorArguments [2].Value);  }  
Magic Number,IKVM.Internal,AttributeHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,GetEnclosingMethodAttribute,The following statement contains a magic number: return new EnclosingMethodAttribute ((string)cad.ConstructorArguments [0].Value' (string)cad.ConstructorArguments [1].Value' (string)cad.ConstructorArguments [2].Value);  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ConvertValue,The following statement contains a magic number: if (targetType.IsEnum) {  	// TODO check the obj descriptor matches the type we expect  	if (((object[])obj) [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  		object[] arr = (object[])obj;  		object value = null;  		for (int i = 1; i < arr.Length; i++) {  			// TODO check the obj descriptor matches the type we expect  			string s = ((object[])arr [i]) [2].ToString ();  			object newval = LookupEnumValue (targetType' s);  			if (value == null) {  				value = newval;  			}  			else {  				value = EnumHelper.OrBoxedIntegrals (value' newval);  			}  		}  		return value;  	}  	else {  		string s = ((object[])obj) [2].ToString ();  		if (s == "__unspecified") {  			// TODO we should probably return null and handle that  		}  		return LookupEnumValue (targetType' s);  	}  }  else if (targetType == Types.Type) {  	// TODO check the obj descriptor matches the type we expect  	return loader.FieldTypeWrapperFromSig (((string)((object[])obj) [1]).Replace ('/'' '.')).TypeAsTBD;  }  else if (targetType.IsArray) {  	// TODO check the obj descriptor matches the type we expect  	object[] arr = (object[])obj;  	Type elementType = targetType.GetElementType ();  	object[] targetArray = new object[arr.Length - 1];  	for (int i = 1; i < arr.Length; i++) {  		targetArray [i - 1] = ConvertValue (loader' elementType' arr [i]);  	}  	return targetArray;  }  else {  	return obj;  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ConvertValue,The following statement contains a magic number: if (targetType.IsEnum) {  	// TODO check the obj descriptor matches the type we expect  	if (((object[])obj) [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  		object[] arr = (object[])obj;  		object value = null;  		for (int i = 1; i < arr.Length; i++) {  			// TODO check the obj descriptor matches the type we expect  			string s = ((object[])arr [i]) [2].ToString ();  			object newval = LookupEnumValue (targetType' s);  			if (value == null) {  				value = newval;  			}  			else {  				value = EnumHelper.OrBoxedIntegrals (value' newval);  			}  		}  		return value;  	}  	else {  		string s = ((object[])obj) [2].ToString ();  		if (s == "__unspecified") {  			// TODO we should probably return null and handle that  		}  		return LookupEnumValue (targetType' s);  	}  }  else if (targetType == Types.Type) {  	// TODO check the obj descriptor matches the type we expect  	return loader.FieldTypeWrapperFromSig (((string)((object[])obj) [1]).Replace ('/'' '.')).TypeAsTBD;  }  else if (targetType.IsArray) {  	// TODO check the obj descriptor matches the type we expect  	object[] arr = (object[])obj;  	Type elementType = targetType.GetElementType ();  	object[] targetArray = new object[arr.Length - 1];  	for (int i = 1; i < arr.Length; i++) {  		targetArray [i - 1] = ConvertValue (loader' elementType' arr [i]);  	}  	return targetArray;  }  else {  	return obj;  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ConvertValue,The following statement contains a magic number: if (((object[])obj) [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	object[] arr = (object[])obj;  	object value = null;  	for (int i = 1; i < arr.Length; i++) {  		// TODO check the obj descriptor matches the type we expect  		string s = ((object[])arr [i]) [2].ToString ();  		object newval = LookupEnumValue (targetType' s);  		if (value == null) {  			value = newval;  		}  		else {  			value = EnumHelper.OrBoxedIntegrals (value' newval);  		}  	}  	return value;  }  else {  	string s = ((object[])obj) [2].ToString ();  	if (s == "__unspecified") {  		// TODO we should probably return null and handle that  	}  	return LookupEnumValue (targetType' s);  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ConvertValue,The following statement contains a magic number: if (((object[])obj) [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	object[] arr = (object[])obj;  	object value = null;  	for (int i = 1; i < arr.Length; i++) {  		// TODO check the obj descriptor matches the type we expect  		string s = ((object[])arr [i]) [2].ToString ();  		object newval = LookupEnumValue (targetType' s);  		if (value == null) {  			value = newval;  		}  		else {  			value = EnumHelper.OrBoxedIntegrals (value' newval);  		}  	}  	return value;  }  else {  	string s = ((object[])obj) [2].ToString ();  	if (s == "__unspecified") {  		// TODO we should probably return null and handle that  	}  	return LookupEnumValue (targetType' s);  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ConvertValue,The following statement contains a magic number: for (int i = 1; i < arr.Length; i++) {  	// TODO check the obj descriptor matches the type we expect  	string s = ((object[])arr [i]) [2].ToString ();  	object newval = LookupEnumValue (targetType' s);  	if (value == null) {  		value = newval;  	}  	else {  		value = EnumHelper.OrBoxedIntegrals (value' newval);  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (annotations != null) {  	foreach (object[] def in annotations) {  		if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  			for (int i = 2; i < def.Length; i += 2) {  				if (def [i].Equals ("value")) {  					object[] val = def [i + 1] as object[];  					if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  						return true;  					}  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (annotations != null) {  	foreach (object[] def in annotations) {  		if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  			for (int i = 2; i < def.Length; i += 2) {  				if (def [i].Equals ("value")) {  					object[] val = def [i + 1] as object[];  					if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  						return true;  					}  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (annotations != null) {  	foreach (object[] def in annotations) {  		if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  			for (int i = 2; i < def.Length; i += 2) {  				if (def [i].Equals ("value")) {  					object[] val = def [i + 1] as object[];  					if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  						return true;  					}  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (annotations != null) {  	foreach (object[] def in annotations) {  		if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  			for (int i = 2; i < def.Length; i += 2) {  				if (def [i].Equals ("value")) {  					object[] val = def [i + 1] as object[];  					if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  						return true;  					}  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: foreach (object[] def in annotations) {  	if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  		for (int i = 2; i < def.Length; i += 2) {  			if (def [i].Equals ("value")) {  				object[] val = def [i + 1] as object[];  				if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  					return true;  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: foreach (object[] def in annotations) {  	if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  		for (int i = 2; i < def.Length; i += 2) {  			if (def [i].Equals ("value")) {  				object[] val = def [i + 1] as object[];  				if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  					return true;  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: foreach (object[] def in annotations) {  	if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  		for (int i = 2; i < def.Length; i += 2) {  			if (def [i].Equals ("value")) {  				object[] val = def [i + 1] as object[];  				if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  					return true;  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: foreach (object[] def in annotations) {  	if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  		for (int i = 2; i < def.Length; i += 2) {  			if (def [i].Equals ("value")) {  				object[] val = def [i + 1] as object[];  				if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  					return true;  				}  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  	for (int i = 2; i < def.Length; i += 2) {  		if (def [i].Equals ("value")) {  			object[] val = def [i + 1] as object[];  			if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  				return true;  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  	for (int i = 2; i < def.Length; i += 2) {  		if (def [i].Equals ("value")) {  			object[] val = def [i + 1] as object[];  			if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  				return true;  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  	for (int i = 2; i < def.Length; i += 2) {  		if (def [i].Equals ("value")) {  			object[] val = def [i + 1] as object[];  			if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  				return true;  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (def [1].Equals ("Ljava/lang/annotation/Retention;")) {  	for (int i = 2; i < def.Length; i += 2) {  		if (def [i].Equals ("value")) {  			object[] val = def [i + 1] as object[];  			if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  				return true;  			}  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: for (int i = 2; i < def.Length; i += 2) {  	if (def [i].Equals ("value")) {  		object[] val = def [i + 1] as object[];  		if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  			return true;  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: for (int i = 2; i < def.Length; i += 2) {  	if (def [i].Equals ("value")) {  		object[] val = def [i + 1] as object[];  		if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  			return true;  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: for (int i = 2; i < def.Length; i += 2) {  	if (def [i].Equals ("value")) {  		object[] val = def [i + 1] as object[];  		if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  			return true;  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: for (int i = 2; i < def.Length; i += 2) {  	if (def [i].Equals ("value")) {  		object[] val = def [i + 1] as object[];  		if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  			return true;  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: i += 2
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (def [i].Equals ("value")) {  	object[] val = def [i + 1] as object[];  	if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  		return true;  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (def [i].Equals ("value")) {  	object[] val = def [i + 1] as object[];  	if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  		return true;  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  	return true;  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,HasRetentionPolicyRuntime,The following statement contains a magic number: if (val != null && val.Length == 3 && val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM) && val [1].Equals ("Ljava/lang/annotation/RetentionPolicy;") && val [2].Equals ("RUNTIME")) {  	return true;  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,QualifyClassNames,The following statement contains a magic number: for (int i = 3; i < def.Length; i += 2) {  	object[] val = def [i] as object[];  	if (val != null) {  		object[] newval = ValueQualifyClassNames (loader' val);  		if (newval != val) {  			if (!copy) {  				copy = true;  				object[] newdef = new object[def.Length];  				Array.Copy (def' newdef' def.Length);  				def = newdef;  			}  			def [i] = newval;  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,QualifyClassNames,The following statement contains a magic number: for (int i = 3; i < def.Length; i += 2) {  	object[] val = def [i] as object[];  	if (val != null) {  		object[] newval = ValueQualifyClassNames (loader' val);  		if (newval != val) {  			if (!copy) {  				copy = true;  				object[] newdef = new object[def.Length];  				Array.Copy (def' newdef' def.Length);  				def = newdef;  			}  			def [i] = newval;  		}  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,QualifyClassNames,The following statement contains a magic number: i += 2
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_ANNOTATION)) {  	return (object[])QualifyClassNames (loader' val);  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_CLASS)) {  	string sig = (string)val [1];  	if (sig.StartsWith ("L")) {  		TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  		if (tw != null) {  			return new object[] {  				AnnotationDefaultAttribute.TAG_CLASS'  				"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"  			};  		}  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_ANNOTATION)) {  	return (object[])QualifyClassNames (loader' val);  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_CLASS)) {  	string sig = (string)val [1];  	if (sig.StartsWith ("L")) {  		TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  		if (tw != null) {  			return new object[] {  				AnnotationDefaultAttribute.TAG_CLASS'  				"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"  			};  		}  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_ANNOTATION)) {  	return (object[])QualifyClassNames (loader' val);  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_CLASS)) {  	string sig = (string)val [1];  	if (sig.StartsWith ("L")) {  		TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  		if (tw != null) {  			return new object[] {  				AnnotationDefaultAttribute.TAG_CLASS'  				"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"  			};  		}  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_CLASS)) {  	string sig = (string)val [1];  	if (sig.StartsWith ("L")) {  		TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  		if (tw != null) {  			return new object[] {  				AnnotationDefaultAttribute.TAG_CLASS'  				"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"  			};  		}  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_CLASS)) {  	string sig = (string)val [1];  	if (sig.StartsWith ("L")) {  		TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  		if (tw != null) {  			return new object[] {  				AnnotationDefaultAttribute.TAG_CLASS'  				"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"  			};  		}  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_CLASS)) {  	string sig = (string)val [1];  	if (sig.StartsWith ("L")) {  		TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  		if (tw != null) {  			return new object[] {  				AnnotationDefaultAttribute.TAG_CLASS'  				"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"  			};  		}  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (sig.StartsWith ("L")) {  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_CLASS'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"  		};  	}  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (val [0].Equals (AnnotationDefaultAttribute.TAG_ENUM)) {  	string sig = (string)val [1];  	TypeWrapper tw = loader.LoadClassByDottedNameFast (sig.Substring (1' sig.Length - 2).Replace ('/'' '.'));  	if (tw != null) {  		return new object[] {  			AnnotationDefaultAttribute.TAG_ENUM'  			"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  			val [2]  		};  	}  	return val;  }  else if (val [0].Equals (AnnotationDefaultAttribute.TAG_ARRAY)) {  	bool copy = false;  	for (int i = 1; i < val.Length; i++) {  		object[] nval = val [i] as object[];  		if (nval != null) {  			object newnval = ValueQualifyClassNames (loader' nval);  			if (newnval != nval) {  				if (!copy) {  					copy = true;  					object[] newval = new object[val.Length];  					Array.Copy (val' newval' val.Length);  					val = newval;  				}  				val [i] = newnval;  			}  		}  	}  	return val;  }  else {  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: if (tw != null) {  	return new object[] {  		AnnotationDefaultAttribute.TAG_ENUM'  		"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  		val [2]  	};  }  
Magic Number,IKVM.Internal,Annotation,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,ValueQualifyClassNames,The following statement contains a magic number: return new object[] {  	AnnotationDefaultAttribute.TAG_ENUM'  	"L" + tw.TypeAsBaseType.AssemblyQualifiedName.Replace ('.'' '/') + ";"'  	val [2]  };  
Magic Number,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,The following statement contains a magic number: if (sigtype != type.SigName) {  	// if type is an array' we know that it is a ghost array' because arrays of unloadable are compiled  	// as object (not as arrays of object)  	if (type.IsArray) {  		type = GetClassLoader ().FieldTypeWrapperFromSig (sigtype);  	}  	else if (type.IsPrimitive) {  		type = DotNetTypeWrapper.GetWrapperFromDotNetType (type.TypeAsTBD);  		if (sigtype != type.SigName) {  			throw new InvalidOperationException ();  		}  	}  	else if (type.IsNonPrimitiveValueType) {  		// this can't happen and even if it does happen we cannot return  		// UnloadableTypeWrapper because that would result in incorrect code  		// being generated  		throw new InvalidOperationException ();  	}  	else {  		if (sigtype [0] == 'L') {  			sigtype = sigtype.Substring (1' sigtype.Length - 2);  		}  		try {  			TypeWrapper tw = GetClassLoader ().LoadClassByDottedNameFast (sigtype);  			if (tw != null && tw.IsRemapped) {  				type = tw;  				return;  			}  		}  		catch (RetargetableJavaException) {  		}  		type = new UnloadableTypeWrapper (sigtype);  	}  }  
Magic Number,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,The following statement contains a magic number: if (type.IsArray) {  	type = GetClassLoader ().FieldTypeWrapperFromSig (sigtype);  }  else if (type.IsPrimitive) {  	type = DotNetTypeWrapper.GetWrapperFromDotNetType (type.TypeAsTBD);  	if (sigtype != type.SigName) {  		throw new InvalidOperationException ();  	}  }  else if (type.IsNonPrimitiveValueType) {  	// this can't happen and even if it does happen we cannot return  	// UnloadableTypeWrapper because that would result in incorrect code  	// being generated  	throw new InvalidOperationException ();  }  else {  	if (sigtype [0] == 'L') {  		sigtype = sigtype.Substring (1' sigtype.Length - 2);  	}  	try {  		TypeWrapper tw = GetClassLoader ().LoadClassByDottedNameFast (sigtype);  		if (tw != null && tw.IsRemapped) {  			type = tw;  			return;  		}  	}  	catch (RetargetableJavaException) {  	}  	type = new UnloadableTypeWrapper (sigtype);  }  
Magic Number,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,The following statement contains a magic number: if (type.IsPrimitive) {  	type = DotNetTypeWrapper.GetWrapperFromDotNetType (type.TypeAsTBD);  	if (sigtype != type.SigName) {  		throw new InvalidOperationException ();  	}  }  else if (type.IsNonPrimitiveValueType) {  	// this can't happen and even if it does happen we cannot return  	// UnloadableTypeWrapper because that would result in incorrect code  	// being generated  	throw new InvalidOperationException ();  }  else {  	if (sigtype [0] == 'L') {  		sigtype = sigtype.Substring (1' sigtype.Length - 2);  	}  	try {  		TypeWrapper tw = GetClassLoader ().LoadClassByDottedNameFast (sigtype);  		if (tw != null && tw.IsRemapped) {  			type = tw;  			return;  		}  	}  	catch (RetargetableJavaException) {  	}  	type = new UnloadableTypeWrapper (sigtype);  }  
Magic Number,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,The following statement contains a magic number: if (type.IsNonPrimitiveValueType) {  	// this can't happen and even if it does happen we cannot return  	// UnloadableTypeWrapper because that would result in incorrect code  	// being generated  	throw new InvalidOperationException ();  }  else {  	if (sigtype [0] == 'L') {  		sigtype = sigtype.Substring (1' sigtype.Length - 2);  	}  	try {  		TypeWrapper tw = GetClassLoader ().LoadClassByDottedNameFast (sigtype);  		if (tw != null && tw.IsRemapped) {  			type = tw;  			return;  		}  	}  	catch (RetargetableJavaException) {  	}  	type = new UnloadableTypeWrapper (sigtype);  }  
Magic Number,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,The following statement contains a magic number: if (sigtype [0] == 'L') {  	sigtype = sigtype.Substring (1' sigtype.Length - 2);  }  
Magic Number,IKVM.Internal,CompiledTypeWrapper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\TypeWrapper.cs,SigTypePatchUp,The following statement contains a magic number: sigtype = sigtype.Substring (1' sigtype.Length - 2);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,SafeGetAssemblyVersion,The following statement contains a magic number: if (start >= 0) {  	start += 10;  	int end = name.IndexOf ('''' start);  	if (end >= 0) {  		return new Version (name.Substring (start' end - start));  	}  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,SafeGetAssemblyVersion,The following statement contains a magic number: start += 10;  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: foreach (char c in str) {  	key += c;  	key += (key << 12);  	key ^= (key >> 22);  	key += (key << 4);  	key ^= (key >> 9);  	key += (key << 10);  	key ^= (key >> 2);  	key += (key << 7);  	key ^= (key >> 12);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key += (key << 12);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key ^= (key >> 22);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key += (key << 4);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key ^= (key >> 9);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key += (key << 10);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key ^= (key >> 2);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key += (key << 7);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,PersistableHash,The following statement contains a magic number: key ^= (key >> 12);  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,CriticalFailure,The following statement contains a magic number: try {  	Tracer.Error (Tracer.Runtime' "CRITICAL FAILURE: {0}"' message);  	System.Type messageBox = null;  	#if !STUB_GENERATOR  					// NOTE we use reflection to invoke MessageBox.Show' to make sure we run in environments where WinForms isn't available 				Assembly winForms = IsUnix ? null : Assembly.Load("System.Windows.Forms' Version=1.0.5000.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"); 				if(winForms != null) 				{ 					messageBox = winForms.GetType("System.Windows.Forms.MessageBox"); 				} #endif  	message = String.Format ("****** Critical Failure: {1} ******{0}{0}" + "PLEASE FILE A BUG REPORT FOR IKVM.NET WHEN YOU SEE THIS MESSAGE{0}{0}" + (messageBox != null ? "(on Windows you can use Ctrl+C to copy the contents of this message to the clipboard){0}{0}" : "") + "{2}{0}" + "{3}{0}" + "{4}"' Environment.NewLine' message' x' x != null ? new StackTrace (x' true).ToString () : ""' new StackTrace (true));  	if (messageBox != null) {  		try {  			Version ver = SafeGetAssemblyVersion (typeof(JVM).Assembly);  			messageBox.InvokeMember ("Show"' System.Reflection.BindingFlags.InvokeMethod | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public' null' null' new object[] {  				message'  				"IKVM.NET " + ver + " Critical Failure"  			});  		}  		catch {  			Console.Error.WriteLine (message);  		}  	}  	else {  		Console.Error.WriteLine (message);  	}  }  catch (Exception ex) {  	Console.Error.WriteLine (ex);  }  finally {  	Environment.Exit (666);  }  
Magic Number,IKVM.Internal,JVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\vm.cs,CriticalFailure,The following statement contains a magic number: Environment.Exit (666);  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b < 128) {  	return b - 64;  }  else if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: return b - 64;  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  	return ((b & 0x7F) << 8) + table [position++] - 8192;  }  else if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: return ((b & 0x7F) << 8) + table [position++] - 8192;  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: return ((b & 0x7F) << 8) + table [position++] - 8192;  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  	int val = ((b & 0x3F) << 16);  	val += (table [position++] << 8);  	val += table [position++];  	return val - 1048576;  }  else if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: val += (table [position++] << 8);  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: return val - 1048576;  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: if (b == 0xFF) {  	int val = table [position++] << 24;  	val += table [position++] << 16;  	val += table [position++] << 8;  	val += table [position++] << 0;  	return val;  }  else {  	throw new InvalidProgramException ();  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: val += table [position++] << 16;  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,ReadPackedInteger,The following statement contains a magic number: val += table [position++] << 8;  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: if (prevLineNum > 0) {  	line = prevLineNum;  }  else {  	prevLineNum = 4 * -prevLineNum;  	line = -1;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: prevLineNum = 4 * -prevLineNum;  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: while (i < table.Length) {  	byte lead = table [i++];  	int deltaPC = lead & 31;  	int deltaLineNo = (lead >> 5) - 2;  	if (deltaPC == 31) {  		deltaPC = ReadPackedInteger (ref i) + (64 + 31);  	}  	if (deltaLineNo == 5) {  		deltaLineNo = ReadPackedInteger (ref i);  	}  	int currILOffset = prevILOffset + deltaPC;  	if (currILOffset > ilOffset) {  		return line;  	}  	line = prevLineNum + deltaLineNo;  	prevILOffset = currILOffset;  	prevLineNum = line;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: while (i < table.Length) {  	byte lead = table [i++];  	int deltaPC = lead & 31;  	int deltaLineNo = (lead >> 5) - 2;  	if (deltaPC == 31) {  		deltaPC = ReadPackedInteger (ref i) + (64 + 31);  	}  	if (deltaLineNo == 5) {  		deltaLineNo = ReadPackedInteger (ref i);  	}  	int currILOffset = prevILOffset + deltaPC;  	if (currILOffset > ilOffset) {  		return line;  	}  	line = prevLineNum + deltaLineNo;  	prevILOffset = currILOffset;  	prevLineNum = line;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: while (i < table.Length) {  	byte lead = table [i++];  	int deltaPC = lead & 31;  	int deltaLineNo = (lead >> 5) - 2;  	if (deltaPC == 31) {  		deltaPC = ReadPackedInteger (ref i) + (64 + 31);  	}  	if (deltaLineNo == 5) {  		deltaLineNo = ReadPackedInteger (ref i);  	}  	int currILOffset = prevILOffset + deltaPC;  	if (currILOffset > ilOffset) {  		return line;  	}  	line = prevLineNum + deltaLineNo;  	prevILOffset = currILOffset;  	prevLineNum = line;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: while (i < table.Length) {  	byte lead = table [i++];  	int deltaPC = lead & 31;  	int deltaLineNo = (lead >> 5) - 2;  	if (deltaPC == 31) {  		deltaPC = ReadPackedInteger (ref i) + (64 + 31);  	}  	if (deltaLineNo == 5) {  		deltaLineNo = ReadPackedInteger (ref i);  	}  	int currILOffset = prevILOffset + deltaPC;  	if (currILOffset > ilOffset) {  		return line;  	}  	line = prevLineNum + deltaLineNo;  	prevILOffset = currILOffset;  	prevLineNum = line;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: while (i < table.Length) {  	byte lead = table [i++];  	int deltaPC = lead & 31;  	int deltaLineNo = (lead >> 5) - 2;  	if (deltaPC == 31) {  		deltaPC = ReadPackedInteger (ref i) + (64 + 31);  	}  	if (deltaLineNo == 5) {  		deltaLineNo = ReadPackedInteger (ref i);  	}  	int currILOffset = prevILOffset + deltaPC;  	if (currILOffset > ilOffset) {  		return line;  	}  	line = prevLineNum + deltaLineNo;  	prevILOffset = currILOffset;  	prevLineNum = line;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: while (i < table.Length) {  	byte lead = table [i++];  	int deltaPC = lead & 31;  	int deltaLineNo = (lead >> 5) - 2;  	if (deltaPC == 31) {  		deltaPC = ReadPackedInteger (ref i) + (64 + 31);  	}  	if (deltaLineNo == 5) {  		deltaLineNo = ReadPackedInteger (ref i);  	}  	int currILOffset = prevILOffset + deltaPC;  	if (currILOffset > ilOffset) {  		return line;  	}  	line = prevLineNum + deltaLineNo;  	prevILOffset = currILOffset;  	prevLineNum = line;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: while (i < table.Length) {  	byte lead = table [i++];  	int deltaPC = lead & 31;  	int deltaLineNo = (lead >> 5) - 2;  	if (deltaPC == 31) {  		deltaPC = ReadPackedInteger (ref i) + (64 + 31);  	}  	if (deltaLineNo == 5) {  		deltaLineNo = ReadPackedInteger (ref i);  	}  	int currILOffset = prevILOffset + deltaPC;  	if (currILOffset > ilOffset) {  		return line;  	}  	line = prevLineNum + deltaLineNo;  	prevILOffset = currILOffset;  	prevLineNum = line;  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: if (deltaPC == 31) {  	deltaPC = ReadPackedInteger (ref i) + (64 + 31);  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: if (deltaPC == 31) {  	deltaPC = ReadPackedInteger (ref i) + (64 + 31);  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: if (deltaPC == 31) {  	deltaPC = ReadPackedInteger (ref i) + (64 + 31);  }  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: deltaPC = ReadPackedInteger (ref i) + (64 + 31);  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: deltaPC = ReadPackedInteger (ref i) + (64 + 31);  
Magic Number,IKVM.Attributes,LineNumberTableAttribute,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\ikvmstub\..\runtime\attributes.cs,GetLineNumber,The following statement contains a magic number: if (deltaLineNo == 5) {  	deltaLineNo = ReadPackedInteger (ref i);  }  
