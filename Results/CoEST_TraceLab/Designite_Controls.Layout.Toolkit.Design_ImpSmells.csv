Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,Cyclomatic complexity of the method is 10
Long Parameter List,System.Windows.Controls.Layout.Design,AccordionItemMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\AccordionItemMetadata.cs,AccordionItemMetadata,The method has 5 parameters.
Long Parameter List,System.Windows.Controls.Layout.Design,AccordionMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\AccordionMetadata.cs,AccordionMetadata,The method has 5 parameters.
Long Statement,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The length of the statement  "	XDocument xdoc = XDocument.Load (new StreamReader (Assembly.GetExecutingAssembly ().GetManifestResourceStream (XmlResourceName))); " is 130.
Long Statement,System.Windows.Controls.Design.Common,TrueIfSelectedDesignModeValueProvider,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\TrueIfSelectedDesignModeValueProvider.cs,TranslatePropertyValue,The length of the statement  "	Debug.Assert (item != null && !IsIdentifierEmpty (identifier) && typeof(bool).IsAssignableFrom (value.GetType ())' "TranslatePropetyValue is called with invalid parameters!"); " is 175.
Long Statement,System.Windows.Controls.Design.Common,TrueIfSelectedDesignModeValueProvider,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\TrueIfSelectedDesignModeValueProvider.cs,TranslatePropertyValue,The length of the statement  "	Debug.Assert (typeof(T).IsAssignableFrom (item.ItemType)' this.GetType ().ToString () + " shouldn't be applied to this model item!"); " is 133.
Long Statement,System.Windows.Controls.Design.Common,TrueIfSelectedDesignModeValueProvider,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\TrueIfSelectedDesignModeValueProvider.cs,TranslatePropertyValue,The length of the statement  "	Debug.Assert (Identifiers.ContainsKey (item.ItemType) && Identifiers [item.ItemType] == identifier' "The passed in PropertyIdentifier isn't registered!"); " is 154.
Long Statement,System.Windows.Controls.Layout.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\MetadataRegistration.cs,AddAttributes,The length of the statement  "	builder.AddCallback (typeof(SSWCP.AccordionButton)' b => b.AddCustomAttributes (new ToolboxBrowsableAttribute (false))); " is 120.
Long Statement,System.Windows.Controls.Layout.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\MetadataRegistration.cs,AddAttributes,The length of the statement  "	builder.AddCallback (typeof(SSWCP.ExpandableContentControl)' b => b.AddCustomAttributes (new ToolboxBrowsableAttribute (false))); " is 129.
Complex Conditional,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The conditional expression  "t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))"  is complex.
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants ("member")) {  	try {  		string name = (string)member.Attribute ("name");  		bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  		if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  			int lastDot = name.Length;  			string typeName;  			if (isType) {  				typeName = name.Substring (2);  				// skip leading "T:"  			}  			else {  				lastDot = name.LastIndexOf ('.');  				typeName = name.Substring (2' lastDot - 2);  			}  			typeName += AssemblyFullName;  			Type t = Type.GetType (typeName);  			if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  				string desc = ParseDescription (member);  				desc = desc.Trim ();  				desc = string.Join (" "' desc.Split (new char[] {  					' ''  					'\t''  					'\n''  					'\r'  				}' StringSplitOptions.RemoveEmptyEntries));  				if (isType) {  					builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  				}  				else {  					string propName = name.Substring (lastDot + 1);  					PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  					if (pi != null) {  						builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  					}  				}  			}  		}  	}  	catch (Exception e) {  		Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants ("member")) {  	try {  		string name = (string)member.Attribute ("name");  		bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  		if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  			int lastDot = name.Length;  			string typeName;  			if (isType) {  				typeName = name.Substring (2);  				// skip leading "T:"  			}  			else {  				lastDot = name.LastIndexOf ('.');  				typeName = name.Substring (2' lastDot - 2);  			}  			typeName += AssemblyFullName;  			Type t = Type.GetType (typeName);  			if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  				string desc = ParseDescription (member);  				desc = desc.Trim ();  				desc = string.Join (" "' desc.Split (new char[] {  					' ''  					'\t''  					'\n''  					'\r'  				}' StringSplitOptions.RemoveEmptyEntries));  				if (isType) {  					builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  				}  				else {  					string propName = name.Substring (lastDot + 1);  					PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  					if (pi != null) {  						builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  					}  				}  			}  		}  	}  	catch (Exception e) {  		Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants ("member")) {  	try {  		string name = (string)member.Attribute ("name");  		bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  		if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  			int lastDot = name.Length;  			string typeName;  			if (isType) {  				typeName = name.Substring (2);  				// skip leading "T:"  			}  			else {  				lastDot = name.LastIndexOf ('.');  				typeName = name.Substring (2' lastDot - 2);  			}  			typeName += AssemblyFullName;  			Type t = Type.GetType (typeName);  			if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  				string desc = ParseDescription (member);  				desc = desc.Trim ();  				desc = string.Join (" "' desc.Split (new char[] {  					' ''  					'\t''  					'\n''  					'\r'  				}' StringSplitOptions.RemoveEmptyEntries));  				if (isType) {  					builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  				}  				else {  					string propName = name.Substring (lastDot + 1);  					PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  					if (pi != null) {  						builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  					}  				}  			}  		}  	}  	catch (Exception e) {  		Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: try {  	string name = (string)member.Attribute ("name");  	bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  	if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  		int lastDot = name.Length;  		string typeName;  		if (isType) {  			typeName = name.Substring (2);  			// skip leading "T:"  		}  		else {  			lastDot = name.LastIndexOf ('.');  			typeName = name.Substring (2' lastDot - 2);  		}  		typeName += AssemblyFullName;  		Type t = Type.GetType (typeName);  		if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  			string desc = ParseDescription (member);  			desc = desc.Trim ();  			desc = string.Join (" "' desc.Split (new char[] {  				' ''  				'\t''  				'\n''  				'\r'  			}' StringSplitOptions.RemoveEmptyEntries));  			if (isType) {  				builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  			}  			else {  				string propName = name.Substring (lastDot + 1);  				PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  				if (pi != null) {  					builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: try {  	string name = (string)member.Attribute ("name");  	bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  	if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  		int lastDot = name.Length;  		string typeName;  		if (isType) {  			typeName = name.Substring (2);  			// skip leading "T:"  		}  		else {  			lastDot = name.LastIndexOf ('.');  			typeName = name.Substring (2' lastDot - 2);  		}  		typeName += AssemblyFullName;  		Type t = Type.GetType (typeName);  		if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  			string desc = ParseDescription (member);  			desc = desc.Trim ();  			desc = string.Join (" "' desc.Split (new char[] {  				' ''  				'\t''  				'\n''  				'\r'  			}' StringSplitOptions.RemoveEmptyEntries));  			if (isType) {  				builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  			}  			else {  				string propName = name.Substring (lastDot + 1);  				PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  				if (pi != null) {  					builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: try {  	string name = (string)member.Attribute ("name");  	bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  	if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  		int lastDot = name.Length;  		string typeName;  		if (isType) {  			typeName = name.Substring (2);  			// skip leading "T:"  		}  		else {  			lastDot = name.LastIndexOf ('.');  			typeName = name.Substring (2' lastDot - 2);  		}  		typeName += AssemblyFullName;  		Type t = Type.GetType (typeName);  		if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  			string desc = ParseDescription (member);  			desc = desc.Trim ();  			desc = string.Join (" "' desc.Split (new char[] {  				' ''  				'\t''  				'\n''  				'\r'  			}' StringSplitOptions.RemoveEmptyEntries));  			if (isType) {  				builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  			}  			else {  				string propName = name.Substring (lastDot + 1);  				PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  				if (pi != null) {  					builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  	int lastDot = name.Length;  	string typeName;  	if (isType) {  		typeName = name.Substring (2);  		// skip leading "T:"  	}  	else {  		lastDot = name.LastIndexOf ('.');  		typeName = name.Substring (2' lastDot - 2);  	}  	typeName += AssemblyFullName;  	Type t = Type.GetType (typeName);  	if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  		string desc = ParseDescription (member);  		desc = desc.Trim ();  		desc = string.Join (" "' desc.Split (new char[] {  			' ''  			'\t''  			'\n''  			'\r'  		}' StringSplitOptions.RemoveEmptyEntries));  		if (isType) {  			builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  		}  		else {  			string propName = name.Substring (lastDot + 1);  			PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  			if (pi != null) {  				builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  			}  		}  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  	int lastDot = name.Length;  	string typeName;  	if (isType) {  		typeName = name.Substring (2);  		// skip leading "T:"  	}  	else {  		lastDot = name.LastIndexOf ('.');  		typeName = name.Substring (2' lastDot - 2);  	}  	typeName += AssemblyFullName;  	Type t = Type.GetType (typeName);  	if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  		string desc = ParseDescription (member);  		desc = desc.Trim ();  		desc = string.Join (" "' desc.Split (new char[] {  			' ''  			'\t''  			'\n''  			'\r'  		}' StringSplitOptions.RemoveEmptyEntries));  		if (isType) {  			builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  		}  		else {  			string propName = name.Substring (lastDot + 1);  			PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  			if (pi != null) {  				builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  			}  		}  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  	int lastDot = name.Length;  	string typeName;  	if (isType) {  		typeName = name.Substring (2);  		// skip leading "T:"  	}  	else {  		lastDot = name.LastIndexOf ('.');  		typeName = name.Substring (2' lastDot - 2);  	}  	typeName += AssemblyFullName;  	Type t = Type.GetType (typeName);  	if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  		string desc = ParseDescription (member);  		desc = desc.Trim ();  		desc = string.Join (" "' desc.Split (new char[] {  			' ''  			'\t''  			'\n''  			'\r'  		}' StringSplitOptions.RemoveEmptyEntries));  		if (isType) {  			builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  		}  		else {  			string propName = name.Substring (lastDot + 1);  			PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  			if (pi != null) {  				builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  			}  		}  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType) {  	typeName = name.Substring (2);  	// skip leading "T:"  }  else {  	lastDot = name.LastIndexOf ('.');  	typeName = name.Substring (2' lastDot - 2);  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType) {  	typeName = name.Substring (2);  	// skip leading "T:"  }  else {  	lastDot = name.LastIndexOf ('.');  	typeName = name.Substring (2' lastDot - 2);  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType) {  	typeName = name.Substring (2);  	// skip leading "T:"  }  else {  	lastDot = name.LastIndexOf ('.');  	typeName = name.Substring (2' lastDot - 2);  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: typeName = name.Substring (2);  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: typeName = name.Substring (2' lastDot - 2);  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Layout.Design\..\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: typeName = name.Substring (2' lastDot - 2);  
