Implementation smell,Namespace,Class,File,Method,Description
Long Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossCountingAndOptimization,The method has 109 lines of code.
Long Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,BiLayerCrossCount,The method has 118 lines of code.
Long Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,HorizontalPositionAssignmentOnLayer,The method has 147 lines of code.
Complex Method,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,CalculatePosition,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplySpringForces,Cyclomatic complexity of the method is 9
Complex Method,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplyRepulsionForces,Cyclomatic complexity of the method is 9
Complex Method,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,RemoveTreeNodesFromRootGraph,Cyclomatic complexity of the method is 9
Complex Method,GraphSharp.Algorithms.Layout.Contextual,DoubleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Contextual\DoubleTreeLayoutAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 12
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,AddAlternatingLayerToSparseCompactionGraph,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossCountingAndOptimization,Cyclomatic complexity of the method is 11
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,BiLayerCrossCount,Cyclomatic complexity of the method is 23
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoWHOptimizationStep,Cyclomatic complexity of the method is 12
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CreateLayerWHOptInfos,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CreateInitialLayering,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoAlignment,Cyclomatic complexity of the method is 14
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,PrepareForSugiyama,Cyclomatic complexity of the method is 10
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaLayout,Cyclomatic complexity of the method is 9
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,HorizontalPositionAssignmentOnLayer,Cyclomatic complexity of the method is 24
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,CopyPositionsSilent,Cyclomatic complexity of the method is 10
Complex Method,GraphSharp.Algorithms.Layout.Simple.Hierarchical,VertexLayer,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.VertexLayer.cs,FindBestPermutation,Cyclomatic complexity of the method is 9
Complex Method,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,BiLayerCrossCount,Cyclomatic complexity of the method is 14
Complex Method,GraphSharp.Algorithms.Layout,StandardLayoutAlgorithmFactory<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\StandardLayoutAlgorithmFactory.cs,CreateAlgorithm,Cyclomatic complexity of the method is 15
Complex Method,GraphSharp.Algorithms.Layout,StandardLayoutAlgorithmFactory<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\StandardLayoutAlgorithmFactory.cs,CreateParameters,Cyclomatic complexity of the method is 11
Complex Method,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 13
Complex Method,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,Horizontal,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,HorizontalImproved,Cyclomatic complexity of the method is 13
Complex Method,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,Vertical,Cyclomatic complexity of the method is 8
Complex Method,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,VerticalImproved,Cyclomatic complexity of the method is 13
Complex Method,GraphSharp.Algorithms.OverlapRemoval,OneWayFSAAlgorithm<TObject>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OneWayFSAAlgorithm.cs,HorizontalImproved,Cyclomatic complexity of the method is 14
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Tree,BalloonTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\BalloonTreeLayoutAlgorithm.cs,BalloonTreeLayoutAlgorithm,The method has 5 parameters. Parameters: visitedGraph' vertexPositions' vertexSizes' oldParameters' selectedVertex
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Tree,BalloonTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\BalloonTreeLayoutAlgorithm.cs,SecondWalk,The method has 6 parameters. Parameters: v' r' x' y' l' t
Long Parameter List,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,GetSpringForce,The method has 5 parameters. Parameters: idealLength' uPos' vPos' uSize' vSize
Long Parameter List,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,GetRepulsionForce,The method has 5 parameters. Parameters: uPos' vPos' uSize' vSize' repulsionRange
Long Parameter List,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,CompoundFDPLayoutAlgorithm,The method has 6 parameters. Parameters: visitedGraph' vertexSizes' vertexBorders' layoutTypes' vertexPositions' oldParameters
Long Parameter List,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,CompoundVertexData,The method has 7 parameters. Parameters: vertex' movableParent' isFixedToParent' position' size' borders' innerVertexLayoutType
Long Parameter List,GraphSharp.Algorithms.Layout.Compound.FDP,SimpleVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,SimpleVertexData,The method has 5 parameters. Parameters: vertex' movableParent' isFixed' position' size
Long Parameter List,GraphSharp.Algorithms.Layout.Compound,CompoundLayoutContext<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\CompoundLayoutContext.cs,CompoundLayoutContext,The method has 6 parameters. Parameters: graph' positions' sizes' mode' vertexBorders' layoutTypes
Long Parameter List,GraphSharp.Algorithms.Layout.Compound,CompoundLayoutIterationEventArgs<TVertex;TEdge>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\CompoundLayoutIterationEventArgs.cs,CompoundLayoutIterationEventArgs,The method has 5 parameters. Parameters: iteration' statusInPercent' message' vertexPositions' innerCanvasSizes
Long Parameter List,GraphSharp.Algorithms.Layout.Compound,TestingCompoundLayoutIterationEventArgs<TVertex;TEdge;TVertexInfo;TEdgeInfo>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\TestingCompoundLayoutIterationEventArgs.cs,TestingCompoundLayoutIterationEventArgs,The method has 7 parameters. Parameters: iteration' statusInPercent' message' vertexPositions' innerCanvasSizes' vertexInfos' gravitationCenter
Long Parameter List,GraphSharp.Algorithms.Layout.Contextual,DoubleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Contextual\DoubleTreeLayoutAlgorithm.cs,DoubleTreeLayoutAlgorithm,The method has 5 parameters. Parameters: visitedGraph' vertexPositions' vertexSizes' oldParameters' selectedVertex
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,Sweeping,The method has 6 parameters. Parameters: startLayerIndex' endLayerIndex' step' enableSameMeasureOptimization' changed' phase
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CrossingMinimizationBetweenLayers,The method has 6 parameters. Parameters: alternatingLayer' actualLayerIndex' nextLayerIndex' enableSameMeasureOptimization' prevCrossCount' phase
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossCountingAndOptimization,The method has 6 parameters. Parameters: alternatingLayer' nextAlternatingLayer' straightSweep' enableSameMeasureOptimization' reverseVerticesWithSameMeasure' prevCrossCount
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaLayoutAlgorithm,The method has 5 parameters. Parameters: visitedGraph' vertexSizes' vertexPositions' parameters' edgePredicate
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaPhase1Sweep,The method has 6 parameters. Parameters: start' end' step' baryCenter' dirty' byRealPosition
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaPhase2Sweep,The method has 5 parameters. Parameters: start' end' step' baryCenter' byRealPosition
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.Hierarchical,VertexLayer,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.VertexLayer.cs,Measure,The method has 6 parameters. Parameters: vertex' computeUpBaryCenter' computeDownBaryCenter' computeSubBaryCenter' divCount' byRealPosition
Long Parameter List,GraphSharp.Algorithms.Layout,LayoutIterationEventArgs<TVertex;TEdge;TVertexInfo;TEdgeInfo>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutIterationEventArgs.cs,LayoutIterationEventArgs,The method has 6 parameters. Parameters: iteration' statusInPercent' message' vertexPositions' vertexInfos' edgeInfos
Long Parameter List,GraphSharp.Algorithms.Layout,LayoutState<TVertex;TEdge>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutState.cs,LayoutState,The method has 6 parameters. Parameters: positions' overlapRemovedPositions' routeInfos' computationTime' iteration' message
Long Parameter List,GraphSharp.Algorithms.Layout.Simple.FDP,QuadTree,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.QuadTree.cs,QuadTree,The method has 5 parameters. Parameters: index' position' weight' minPos' maxPos
Long Identifier,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,,The length of the parameter _phaseDependentRepulsionMultiplier is 34.
Long Identifier,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutParameters,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutParameters.cs,,The length of the parameter _phase2TemperatureInitialMultiplier is 35.
Long Identifier,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutParameters,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutParameters.cs,,The length of the parameter _phase3TemperatureInitialMultiplier is 35.
Long Identifier,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,AddAlternatingLayerToSparseCompactionGraph,The length of the parameter _sparseCompationGraphEdgesOfLayer is 33.
Long Identifier,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossCountingAndOptimization,The length of the parameter reverseVerticesWithSameMeasure is 30.
Long Identifier,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,,The length of the parameter _sparseCompactionByLayerBackup is 30.
Long Identifier,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,,The length of the parameter GeneralEdgesBetweenDifferentLayersTag is 37.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,GenerateSpanningTree,The length of the statement  "                    var bfsAlgo = new BreadthFirstSearchAlgorithm<TVertex' TEdge>( VisitedGraph' vb' new Dictionary<TVertex' GraphColor>() ); " is 121.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,AssignPositions,The length of the statement  "            bool changeCoordinates = ( Parameters.Direction == LayoutDirection.LeftToRight || Parameters.Direction == LayoutDirection.RightToLeft ); " is 136.
Long Statement,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InitCompoundVertices,The length of the statement  "                    var dataContainer = new CompoundVertexData(vertex' _rootCompoundVertex' false' position' vertexSize' border' layoutType); " is 121.
Long Statement,GraphSharp.Algorithms.Layout.Contextual,ContextualLayoutAlgorithmFactory<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Contextual\ContextualLayoutAlgorithmFactory.cs,CreateAlgorithm,The length of the statement  "					return new DoubleTreeLayoutAlgorithm<TVertex' TEdge' TGraph>( layoutContext.Graph' layoutContext.Positions' layoutContext.Sizes' parameters as DoubleTreeLayoutParameters' layoutContext.SelectedVertex ); " is 202.
Long Statement,GraphSharp.Algorithms.Layout.Contextual,ContextualLayoutAlgorithmFactory<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Contextual\ContextualLayoutAlgorithmFactory.cs,CreateAlgorithm,The length of the statement  "					return new BalloonTreeLayoutAlgorithm<TVertex' TEdge' TGraph>( layoutContext.Graph' layoutContext.Positions' layoutContext.Sizes' parameters as BalloonTreeLayoutParameters' layoutContext.SelectedVertex ); " is 204.
Long Statement,GraphSharp.Algorithms.Layout.Contextual,ContextualLayoutAlgorithmFactory<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Contextual\ContextualLayoutAlgorithmFactory.cs,CreateParameters,The length of the statement  "					return !( oldParameters is DoubleTreeLayoutParameters ) ? new DoubleTreeLayoutParameters() : (DoubleTreeLayoutParameters)( oldParameters as DoubleTreeLayoutParameters ).Clone(); " is 177.
Long Statement,GraphSharp.Algorithms.Layout.Contextual,ContextualLayoutAlgorithmFactory<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Contextual\ContextualLayoutAlgorithmFactory.cs,CreateParameters,The length of the statement  "					return !( oldParameters is BalloonTreeLayoutParameters ) ? new BalloonTreeLayoutParameters() : (BalloonTreeLayoutParameters)( oldParameters as BalloonTreeLayoutParameters ).Clone(); " is 181.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,Sweeping,The length of the statement  "                    prevCrossCount = DoCrossCountingAndOptimization(alternatingLayer' _alternatingLayers[i + step]' (i < i + step)' false' (phase == 2)' int.MaxValue); " is 147.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,Sweeping,The length of the statement  "                int crossCount = CrossingMinimizationBetweenLayers(ref alternatingLayer' i' i + step' enableSameMeasureOptimization' prevCrossCount' phase); " is 140.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CrossingMinimizationBetweenLayers,The length of the statement  "            int crossCount = DoCrossCountingAndOptimization(alternatingLayer' nextAlternatingLayer' straightSweep' enableSameMeasureOptimization' (phase == 2)' prevCrossCount); " is 164.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossCountingAndOptimization,The length of the statement  "            firstLayerSize = lastOnTopLayer.Position + (lastOnTopLayer is ISegmentContainer ? ((ISegmentContainer)lastOnTopLayer).Count : 1); " is 129.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossCountingAndOptimization,The length of the statement  "            secondLayerSize = lastOnBottomLayer.Position + (lastOnBottomLayer is ISegmentContainer ? ((ISegmentContainer)lastOnBottomLayer).Count : 1); " is 139.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossCountingAndOptimization,The length of the statement  "                var verticesWithSameMeasure = FindVerticesWithSameMeasure(nextAlternatingLayer' straightSweep' out ranges' out maxRangeLength); " is 127.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,InitialOrderingOfNextLayer,The length of the statement  "            var vertexStack = new Stack<SugiVertex>(nextLayer.Where(v => v.Type != ignorableVertexType).OrderBy(v => v.MeasuredPosition).Reverse()); " is 136.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CreateLayerWHOptInfos,The length of the statement  "                    if (!double.IsNaN(v.ValuePerCost) && !double.IsPositiveInfinity(v.ValuePerCost) && !double.IsNegativeInfinity(v.ValuePerCost)) " is 126.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CreateDummyVerticesAndSegments,The length of the statement  "                bool notReversed = edge.Source.OriginalVertex == edge.OriginalEdge.Source && edge.Target.OriginalVertex == edge.OriginalEdge.Target; " is 132.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateVerticalPositions,The length of the statement  "                vertex.VerticalPosition = _layerPositions[vertex.LayerIndex] + (vertex.Size.Height <= 0 ? _layerHeights[vertex.LayerIndex] : vertex.Size.Height) / 2.0; " is 151.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,PlaceBlock,The length of the statement  "                        var xDelta = delta + ((wVertex != null ? wVertex.Size.Width : 0.0) + ((pred is SugiVertex) ? ((SugiVertex)pred).Size.Width : u.BlockWidths[modeIndex])) / 2.0; " is 158.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,PrepareForSugiyama,The length of the statement  "            _graph.UnhideEdgesIf( e => e.Type == EdgeTypes.General && _graph.ContainsVertex( e.Source ) && _graph.ContainsVertex( e.Target ) ); " is 131.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,PrepareForSugiyama,The length of the statement  "            _graph.HideEdgesIf( e => ( e.Type == EdgeTypes.General && e.Source.LayerIndex != e.Target.LayerIndex )' GeneralEdgesBetweenDifferentLayersTag ); " is 144.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaPhase1,The length of the statement  "                sweepDownOptimized = SugiyamaPhase1Sweep( startLayerIndex == -1 ? 1 : startLayerIndex' _layers.Count' 1' BaryCenter.Up' dirty' ByRealPosition ); " is 144.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaPhase1,The length of the statement  "            bool sweepUpOptimized = SugiyamaPhase1Sweep( startLayerIndex == -1 ? _layers.Count - 2 : startLayerIndex' -1' -1' BaryCenter.Down' dirty' ByRealPosition ); " is 155.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaLayout,The length of the statement  "            bool baryCenteringByRealPositions = Parameters.PositionCalculationMethod == PositionCalculationMethodTypes.PositionBased; " is 121.
Long Statement,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,CalculateOverlap,The length of the statement  "            return Math.Max( 0' ( ( b.Size.Width + a.Size.Width ) * 0.5 + plusGap + Parameters.HorizontalGap ) - ( b.RealPosition.X - a.RealPosition.X ) ); " is 143.
Long Statement,GraphSharp.Algorithms.Layout,ParameterizedLayoutAlgorithmBase<TVertex;TEdge;TGraph;TVertexInfo;TEdgeInfo;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\ParameterizedLayoutAlgorithmBase.cs,CreateLayoutIterationEventArgs,The length of the statement  "			return new LayoutIterationEventArgs<TVertex' TEdge' TVertexInfo' TEdgeInfo>( iteration' statusInPercent' message' vertexPositions' vertexInfos' edgeInfos ); " is 156.
Long Statement,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,Report,The length of the statement  "            OnIterationEnded( currentIteration' (double)currentIteration / (double)Parameters.MaxIterations' "Iteration " + currentIteration + " finished."' true ); " is 152.
Long Statement,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,AddGravitationDirection,The length of the statement  "			double tmp = Parameters.gravitationMultiplier * repulsionMultiplier * Math.Max( v.RepulsionWeight' 1 ) * Math.Pow( dist' Parameters.attractionExponent - 2 ); " is 157.
Long Statement,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,ComputeRepulsionMultiplier,The length of the statement  "				return attractionSum / Math.Pow( repulsionSum' 2 ) * Math.Pow( repulsionSum' 0.5 * ( Parameters.attractionExponent - Parameters.repulsiveExponent ) ); " is 150.
Long Statement,GraphSharp.Contracts,ICompoundGraphContract<TVertex;TEdge>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Contracts\ICompoundGraphContract.cs,GetParent,The length of the statement  "            //Contract.Ensures( Contract.Result<TVertex>().Equals( default( TVertex ) ) || ithis.ContainsVertex( Contract.Result<TVertex>() ) ); " is 132.
Complex Conditional,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossingMinimizations,The conditional expression  "phase == 1 && (!changed || crossings >= prevCrossings) && phase2iterationLeft > 0"  is complex.
Complex Conditional,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,AssignMeasuresOnNextLayer,The conditional expression  "(straightSweep && vertex.Type == VertexTypes.QVertex)                      || (!straightSweep && vertex.Type == VertexTypes.PVertex)"  is complex.
Complex Conditional,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,PlaceBlock,The conditional expression  "_sparseCompactionGraph.ContainsVertex(w) &&                      ((leftRightMode == LeftRightMode.Left && _sparseCompactionGraph.InDegree(w) > 0)                        || (leftRightMode == LeftRightMode.Right && _sparseCompactionGraph.OutDegree(w) > 0))"  is complex.
Complex Conditional,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoAlignment,The conditional expression  "vertex.Type == VertexTypes.Original                          || vertex.Type == VertexTypes.RVertex                          || (vertex.Type == VertexTypes.PVertex && upperLowerEdges == UpperLowerEdges.Upper)                          || (vertex.Type == VertexTypes.QVertex && upperLowerEdges == UpperLowerEdges.Lower)"  is complex.
Complex Conditional,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoAlignment,The conditional expression  "!edge.Marked &&                                  ((leftRightMode == LeftRightMode.Left && r < neighbour.Position)                                      || (leftRightMode == LeftRightMode.Right && r > neighbour.Position))"  is complex.
Complex Conditional,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,force,The conditional expression  "Gij >= gij && gij > 0 || -Gij <= gij && gij < 0 || gij == 0"  is complex.
Complex Conditional,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,force,The conditional expression  "Gij < gij && gij > 0 || -Gij > gij && gij < 0"  is complex.
Virtual Method Call from Constructor,GraphSharp.Algorithms.Layout.Simple.FDP,FRLayoutParametersBase,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\FRLayoutParametersBase.cs,FRLayoutParametersBase,The constructor "FRLayoutParametersBase" calls a virtual method "UpdateParameters".
Magic Number,GraphSharp.Algorithms.Layout.Simple.Tree,BalloonTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\BalloonTreeLayoutAlgorithm.cs,SetRadius,The following statement contains a magic number: data.r = (int)Math.Max( data.d / 2' Parameters.minRadius );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,CalculatePosition,The following statement contains a magic number: layer.NextPosition += size.Width / 2.0;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,CalculatePosition,The following statement contains a magic number: layer.NextPosition += size.Width / 2.0 + Parameters.VertexGap;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,AssignPositions,The following statement contains a magic number: VertexPositions[v] =                          changeCoordinates                              ? new Point( direction * ( layerSize + size.Height / 2.0 )' d.position )                              : new Point( d.position' direction * ( layerSize + size.Height / 2.0 ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,AssignPositions,The following statement contains a magic number: VertexPositions[v] =                          changeCoordinates                              ? new Point( direction * ( layerSize + size.Height / 2.0 )' d.position )                              : new Point( d.position' direction * ( layerSize + size.Height / 2.0 ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: halfSize[i] = Math.Sqrt( s.Width * s.Width + s.Height * s.Height ) * 0.5;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: perimeter += halfSize[i] * 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: double radius = perimeter / ( 2 * Math.PI );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: a = Math.Sin( halfSize[i] * 0.5 / radius ) * 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: a = Math.Sin( halfSize[i] * 0.5 / radius ) * 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: OnIterationEnded( 0' 50' "Precalculation done."' false );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: radius = angle / ( 2 * Math.PI ) * radius;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: a = Math.Sin( halfSize[i] * 0.5 / radius ) * 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Circular,CircularLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Circular\CircularLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: a = Math.Sin( halfSize[i] * 0.5 / radius ) * 2;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: _maxIterationCounts = new int[3];
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: _maxIterationCounts[2] = Parameters.Phase3Iterations;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: var _temperatureMultipliers = new double[3]                                                {                                                    1.0'                                                     Parameters.Phase2TemperatureInitialMultiplier'                                                    Parameters.Phase3TemperatureInitialMultiplier                                                };
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: double minimalTemperature = initialTemperature * 0.1;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: _phaseDependentRepulsionMultiplier = _phase < 2 ? 0.5 : 1.0;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: _phaseDependentRepulsionMultiplier = _phase < 2 ? 0.5 : 1.0;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: _phase == 2 && !_allTreesGrown && _step % _treeGrowingStep == 0
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: (_step > 0 && true/*error > _errorThresholds[_phase - 1] */) || (_phase == 2 && !_allTreesGrown)
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: _phase <= 3
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,GetSpringForce,The following statement contains a magic number: positionVector = compensationVector * 2;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,GetSpringForce,The following statement contains a magic number: var Fs = Math.Pow(length / (idealLength)' 2) / Parameters.ElasticConstant * F;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,GetRepulsionForce,The following statement contains a magic number: positionVector = compensationVector * 2;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,GetRepulsionForce,The following statement contains a magic number: length = Math.Pow(isSameDirection ? length / (Parameters.IdealEdgeLength * 2.0) : 1 / length' 2);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,GetRepulsionForce,The following statement contains a magic number: length = Math.Pow(isSameDirection ? length / (Parameters.IdealEdgeLength * 2.0) : 1 / length' 2);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplySpringForces,The following statement contains a magic number: var multiplier = (u.Level + v.Level) / 2.0 + 1;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplySpringForces,The following statement contains a magic number: Fs *= 2;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplyRepulsionForces,The following statement contains a magic number: var Fr = GetRepulsionForce(u.Position' v.Position' u.Size' v.Size' repulsionRange) * Math.Pow(u.Level + 1'2);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplyRepulsionForces,The following statement contains a magic number: Fr *= 2;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplyGravitationForces,The following statement contains a magic number: double length = Math.Max(1' Fg.Length / (Parameters.IdealEdgeLength * 2.0));
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplyGravitationForces,The following statement contains a magic number: Fg *= Parameters.GravitationFactor * _gravityForceMagnitude * Math.Pow(u.Level + 1'2) / Math.Pow(length' 0.25);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,ApplyGravitationForces,The following statement contains a magic number: Fg *= Parameters.GravitationFactor * _gravityForceMagnitude * Math.Pow(u.Level + 1'2) / Math.Pow(length' 0.25);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,CalcNodePositionsAndSizes,The following statement contains a magic number: var force = u.ApplyForce(_temperature * Math.Max(1' _step) / 100.0 * Parameters.DisplacementLimitMultiplier);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,Init,The following statement contains a magic number: InitializeWithRandomPositions(100' 100);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundFDPLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.cs,Init,The following statement contains a magic number: InitializeWithRandomPositions(100' 100);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,RecalculateBounds,The following statement contains a magic number: topLeft.X = Math.Min(topLeft.X' child.Position.X - child.Size.Width / 2);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,RecalculateBounds,The following statement contains a magic number: topLeft.Y = Math.Min(topLeft.Y' child.Position.Y - child.Size.Height / 2);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,RecalculateBounds,The following statement contains a magic number: bottomRight.X = Math.Max(bottomRight.X' child.Position.X + child.Size.Width / 2);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,RecalculateBounds,The following statement contains a magic number: bottomRight.Y = Math.Max(bottomRight.Y' child.Position.Y + child.Size.Height / 2);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,RecalculateBounds,The following statement contains a magic number: InnerCanvasCenter = new Point((topLeft.X + bottomRight.X) / 2.0' (topLeft.Y + bottomRight.Y) / 2.0);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,CompoundVertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,RecalculateBounds,The following statement contains a magic number: InnerCanvasCenter = new Point((topLeft.X + bottomRight.X) / 2.0' (topLeft.Y + bottomRight.Y) / 2.0);
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,VertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,ApplyForce,The following statement contains a magic number: var force = _springForce                      + _repulsionForce                      + _gravitationForce                      + _applicationForce                      + 0.5 * _childrenForce;
Magic Number,GraphSharp.Algorithms.Layout.Compound.FDP,VertexData,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Compound\FDP\CompoundFDPLayoutAlgorithm.Data.cs,ApplyForce,The following statement contains a magic number: force += 0.7 * _previousForce;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossingMinimizations,The following statement contains a magic number: int phase1iterationLeft = 100;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossingMinimizations,The following statement contains a magic number: wasPhase2 = (phase == 2);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoCrossingMinimizations,The following statement contains a magic number: phase = 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,Sweeping,The following statement contains a magic number: prevCrossCount = DoCrossCountingAndOptimization(alternatingLayer' _alternatingLayers[i + step]' (i < i + step)' false' (phase == 2)' int.MaxValue);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,Sweeping,The following statement contains a magic number: crossCount < prevCrossCount || phase == 2 || changed
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CrossingMinimizationBetweenLayers,The following statement contains a magic number: int crossCount = DoCrossCountingAndOptimization(alternatingLayer' nextAlternatingLayer' straightSweep' enableSameMeasureOptimization' (phase == 2)' prevCrossCount);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,PermutateSomeHow,The following statement contains a magic number: count <= 4
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,BiLayerCrossCount,The following statement contains a magic number: firstIndex *= 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,BiLayerCrossCount,The following statement contains a magic number: int treeSize = 2 * firstIndex - 1;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,BiLayerCrossCount,The following statement contains a magic number: index % 2 > 0
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,BiLayerCrossCount,The following statement contains a magic number: index = (index - 1) / 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,PlaceQVertices,The following statement contains a magic number: alternatingLayer.Insert(i + 2' sc2);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,AppendSegmentsToAlternatingLayer,The following statement contains a magic number: alternatingLayer.RemoveRange(i' 2);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,AppendSegmentsToAlternatingLayer,The following statement contains a magic number: i -= 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CreateDummyVerticesAndSegments,The following statement contains a magic number: span == 2
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculatePositions,The following statement contains a magic number: Parameters.PositionMode < 0 || Parameters.PositionMode == 2
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculatePositions,The following statement contains a magic number: Parameters.PositionMode < 0 || Parameters.PositionMode == 3
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: Point[] orthoRoutePoints = new Point[2];
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: orthoRoutePoints[sourceIndex] = new Point()                  {                      X = sourceVertex.HorizontalPosition'                      Y = _layerPositions[sourceVertex.LayerIndex] + _layerHeights[sourceVertex.LayerIndex] + Parameters.LayerDistance / 2.0                  };
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: orthoRoutePoints[targetIndex] = new Point()                  {                      X = targetVertex.HorizontalPosition'                      Y = _layerPositions[targetVertex.LayerIndex] - Parameters.LayerDistance / 2.0                  };
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: var routePoints = new Point[kvp.Value.Count + 4];
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: routePoints[kvp.Value.Count + 3] = orthoRoutePoints[1];
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: routePoints[i+2] = new Point(vertex.HorizontalPosition' vertex.VerticalPosition);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: routePoints[1] = new Point(routePoints[2].X' routePoints[0].Y);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: routePoints[kvp.Value.Count + 2] = new Point(routePoints[kvp.Value.Count + 1].X' routePoints[kvp.Value.Count + 3].Y);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoOrthogonalEdgeRouting,The following statement contains a magic number: routePoints[kvp.Value.Count + 2] = new Point(routePoints[kvp.Value.Count + 1].X' routePoints[kvp.Value.Count + 3].Y);
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateRealPositions,The following statement contains a magic number: Debug.WriteLine(string.Format("{0}:\t{1}\t{2}\t{3}\t{4}"'                      vertex.OriginalVertex'                      vertex.HorizontalPositions[0]'                      vertex.HorizontalPositions[1]'                      vertex.HorizontalPositions[2]'                      vertex.HorizontalPositions[3]));
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateRealPositions,The following statement contains a magic number: Debug.WriteLine(string.Format("{0}:\t{1}\t{2}\t{3}\t{4}"'                      vertex.OriginalVertex'                      vertex.HorizontalPositions[0]'                      vertex.HorizontalPositions[1]'                      vertex.HorizontalPositions[2]'                      vertex.HorizontalPositions[3]));
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateRealPositions,The following statement contains a magic number: vertex.HorizontalPosition =                          (vertex.HorizontalPositions[0] + vertex.HorizontalPositions[1]                           + vertex.HorizontalPositions[2] + vertex.HorizontalPositions[3]) / 4.0;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateRealPositions,The following statement contains a magic number: vertex.HorizontalPosition =                          (vertex.HorizontalPositions[0] + vertex.HorizontalPositions[1]                           + vertex.HorizontalPositions[2] + vertex.HorizontalPositions[3]) / 4.0;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateRealPositions,The following statement contains a magic number: vertex.HorizontalPosition =                          (vertex.HorizontalPositions[0] + vertex.HorizontalPositions[1]                           + vertex.HorizontalPositions[2] + vertex.HorizontalPositions[3]) / 4.0;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateVerticalPositions,The following statement contains a magic number: vertex.VerticalPosition = _layerPositions[vertex.LayerIndex] + (vertex.Size.Height <= 0 ? _layerHeights[vertex.LayerIndex] : vertex.Size.Height) / 2.0;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,CalculateHorizontalPositions,The following statement contains a magic number: int modeIndex = (byte)upperLowerEdges * 2 + (byte)leftRightMode;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,PlaceBlock,The following statement contains a magic number: var xDelta = delta + ((wVertex != null ? wVertex.Size.Width : 0.0) + ((pred is SugiVertex) ? ((SugiVertex)pred).Size.Width : u.BlockWidths[modeIndex])) / 2.0;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoAlignment,The following statement contains a magic number: int c1 = (int)Math.Floor((neighbourEdges.Count + 1) / 2.0) - 1;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,EfficientSugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\EfficientSugiyamaLayoutAlgorithm.cs,DoAlignment,The following statement contains a magic number: int c2 = (int)Math.Ceiling((neighbourEdges.Count + 1) / 2.0) - 1;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaDirtyPhase,The following statement contains a magic number: _layers.Count < 2
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaDirtyPhase,The following statement contains a magic number: SugiyamaPhase1Sweep( _layers.Count - 2' -1' -1' BaryCenter.Down' dirty' byRealPosition );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaPhase1,The following statement contains a magic number: _layers.Count < 2
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaPhase1,The following statement contains a magic number: bool sweepUpOptimized = SugiyamaPhase1Sweep( startLayerIndex == -1 ? _layers.Count - 2 : startLayerIndex' -1' -1' BaryCenter.Down' dirty' ByRealPosition );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,SugiyamaPhase2,The following statement contains a magic number: unorderedLayerIndex = SugiyamaPhase2Sweep( _layers.Count - 2' -1' -1' BaryCenter.Down' byRealPosition );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,CalculateOverlap,The following statement contains a magic number: return Math.Max( 0' ( ( b.Size.Width + a.Size.Width ) * 0.5 + plusGap + Parameters.HorizontalGap ) - ( b.RealPosition.X - a.RealPosition.X ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,HorizontalPositionAssignmentOnLayer,The following statement contains a magic number: double leftMove = leftOverlap * 0.5;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,HorizontalPositionAssignmentOnLayer,The following statement contains a magic number: double rightMove = rightOverlap * 0.5;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,HorizontalPositionAssignment,The following statement contains a magic number: HorizontalPositionAssignmentSweep( _layers.Count - 2' -1' -1' BaryCenter.Down );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,AssignPositions,The following statement contains a magic number: v.RealPosition.Y =                          ( ( i == 0 )                              ? ( layerHeight - v.Size.Height )                              : verticalPos + layerHeight * (float)0.5 );
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,CopyPositionsSilent,The following statement contains a magic number: translation.X += Parameters.VerticalGap / 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,CopyPositionsSilent,The following statement contains a magic number: translation.Y += Parameters.HorizontalGap / 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,CopyPositionsSilent,The following statement contains a magic number: pos.X += v.Size.Width * 0.5 + translation.X;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,CopyPositionsSilent,The following statement contains a magic number: pos.Y += v.Size.Height * 0.5 + translation.Y;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,SugiyamaLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: _statusInPercent = 100;
Magic Number,GraphSharp.Algorithms.Layout.Simple.Hierarchical,VertexLayer,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Hierarchical\SugiyamaLayoutAlgorithm.VertexLayer.cs,CalculateSubPriorities,The following statement contains a magic number: var border = (int)Math.Ceiling( count / (float)2.0 );
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,BiLayerCrossCount,The following statement contains a magic number: firstIndex *= 2;
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,BiLayerCrossCount,The following statement contains a magic number: int treeSize = 2 * firstIndex - 1;
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,BiLayerCrossCount,The following statement contains a magic number: index % 2 > 0
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,BiLayerCrossCount,The following statement contains a magic number: index = (index - 1) / 2;
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: double[] sides = new double[4];
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: sides[0] = (s.X - size.Width / 2.0 - t.X) / (s.X - t.X);
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: sides[1] = (s.Y - size.Height / 2.0 - t.Y) / (s.Y - t.Y);
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: sides[2] = (s.X + size.Width / 2.0 - t.X) / (s.X - t.X);
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: sides[2] = (s.X + size.Width / 2.0 - t.X) / (s.X - t.X);
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: sides[3] = (s.Y + size.Height / 2.0 - t.Y) / (s.Y - t.Y);
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: sides[3] = (s.Y + size.Height / 2.0 - t.Y) / (s.Y - t.Y);
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: i < 4
Magic Number,GraphSharp.Algorithms.Layout,LayoutUtil,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\LayoutUtil.cs,GetClippingPoint,The following statement contains a magic number: i < 4
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,FRLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\FRLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: var minimalTemperature = Parameters.InitialTemperature*0.01;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,FRLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\FRLayoutAlgorithm.cs,IterateOne,The following statement contains a magic number: delta = delta / length * Math.Pow(length' 2) / Parameters.ConstantOfAttraction;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,ISOMLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\ISOMLayoutAlgorithm.cs,Adjust,The following statement contains a magic number: _tempPos.X = 0.1 * Parameters.Width + ( _rnd.NextDouble() * 0.8 * Parameters.Width );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,ISOMLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\ISOMLayoutAlgorithm.cs,Adjust,The following statement contains a magic number: _tempPos.X = 0.1 * Parameters.Width + ( _rnd.NextDouble() * 0.8 * Parameters.Width );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,ISOMLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\ISOMLayoutAlgorithm.cs,Adjust,The following statement contains a magic number: _tempPos.Y = 0.1 * Parameters.Height + ( _rnd.NextDouble() * 0.8 * Parameters.Height );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,ISOMLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\ISOMLayoutAlgorithm.cs,Adjust,The following statement contains a magic number: _tempPos.Y = 0.1 * Parameters.Height + ( _rnd.NextDouble() * 0.8 * Parameters.Height );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,ISOMLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\ISOMLayoutAlgorithm.cs,AdjustVertex,The following statement contains a magic number: double factor = adaptation / Math.Pow( 2' currentVid.Distance );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,CalcEnergyIfExchanged,The following statement contains a magic number: energy += k_ij / 2 * ( dx * dx + dy * dy + l_ij * l_ij -                                             2 * l_ij * Math.Sqrt( dx * dx + dy * dy ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,CalcEnergyIfExchanged,The following statement contains a magic number: energy += k_ij / 2 * ( dx * dx + dy * dy + l_ij * l_ij -                                             2 * l_ij * Math.Sqrt( dx * dx + dy * dy ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,CalcEnergy,The following statement contains a magic number: energy += k_ij / 2 * ( dx * dx + dy * dy + l_ij * l_ij -                                             2 * l_ij * Math.Sqrt( dx * dx + dy * dy ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,CalcEnergy,The following statement contains a magic number: energy += k_ij / 2 * ( dx * dx + dy * dy + l_ij * l_ij -                                             2 * l_ij * Math.Sqrt( dx * dx + dy * dy ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,CalcDeltaXY,The following statement contains a magic number: ddd = Math.Pow( d' 3 );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,CalcDeltaXY,The following statement contains a magic number: d2xm += k * ( 1 - l * Math.Pow( dy' 2 ) / ddd );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,KKLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\KKLayoutAlgorithm.cs,CalcDeltaXY,The following statement contains a magic number: d2ym += k * ( 1 - l * Math.Pow( dx' 2 ) / ddd );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: InitializeWithRandomPositions( 1' 1' -0.5' -0.5 );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: InitializeWithRandomPositions( 1' 1' -0.5' -0.5 );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: Parameters.attractionExponent += 1.1 * ( 1.0 - finalRepuExponent );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: Parameters.repulsiveExponent += 0.9 * ( 1.0 - finalRepuExponent );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: step <= 0.6 * Parameters.iterationCount
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: Parameters.iterationCount >= 50 && finalRepuExponent < 1.0
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: bestDir /= 32;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: multiple >= 1 && ( bestMultiple == 0 || bestMultiple / 2 == multiple )
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: multiple <= 128 && bestMultiple == multiple / 2
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,InternalCompute,The following statement contains a magic number: multiple <= 128 && bestMultiple == multiple / 2
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,Report,The following statement contains a magic number: OnIterationEnded( step' step / (double)Parameters.iterationCount * 100' "Iteration " + step + " finished."' true );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,GetDirection,The following statement contains a magic number: length /= quadTree.Width / 8;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,GetDirection,The following statement contains a magic number: length > quadTree.Width / 8
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,AddGravitationDirection,The following statement contains a magic number: double tmp = Parameters.gravitationMultiplier * repulsionMultiplier * Math.Max( v.RepulsionWeight' 1 ) * Math.Pow( dist' Parameters.attractionExponent - 2 );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,AddAttractionDirection,The following statement contains a magic number: double tmp = e.AttractionWeight * Math.Pow( dist' Parameters.attractionExponent - 2 );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,AddRepulsionDirection,The following statement contains a magic number: quadTree.Index < 0 && dist < 2.0 * quadTree.Width
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,AddRepulsionDirection,The following statement contains a magic number: double tmp = repulsionMultiplier * v.RepulsionWeight * quadTree.Weight  				             * Math.Pow( dist' Parameters.repulsiveExponent - 2 );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,GetRepulsionEnergy,The following statement contains a magic number: tree.Index < 0 && dist < ( 2 * tree.Width )
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,ComputeRepulsionMultiplier,The following statement contains a magic number: return attractionSum / Math.Pow( repulsionSum' 2 ) * Math.Pow( repulsionSum' 0.5 * ( Parameters.attractionExponent - Parameters.repulsiveExponent ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,LinLogLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.cs,ComputeRepulsionMultiplier,The following statement contains a magic number: return attractionSum / Math.Pow( repulsionSum' 2 ) * Math.Pow( repulsionSum' 0.5 * ( Parameters.attractionExponent - Parameters.repulsiveExponent ) );
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,QuadTree,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.QuadTree.cs,AddNode2,The following statement contains a magic number: double middleX = ( minPos.X + maxPos.X ) / 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,QuadTree,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.QuadTree.cs,AddNode2,The following statement contains a magic number: double middleY = ( minPos.Y + maxPos.Y ) / 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,QuadTree,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.QuadTree.cs,AddNode2,The following statement contains a magic number: childIndex += 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,QuadTree,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.QuadTree.cs,MoveNode,The following statement contains a magic number: double middleX = ( minPos.X + maxPos.X ) / 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,QuadTree,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\LinLogLayoutAlgorithm.QuadTree.cs,MoveNode,The following statement contains a magic number: double middleY = ( minPos.Y + maxPos.Y ) / 2;
Magic Number,GraphSharp.Algorithms.Layout.Simple.FDP,FRLayoutParametersBase,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\FRLayoutParametersBase.cs,CalculateConstantOfRepulsion,The following statement contains a magic number: ConstantOfRepulsion = Math.Pow( K * _repulsiveMultiplier' 2 );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,force,The following statement contains a magic number: f.X = d.X / adx * ( ( vi.Width + vj.Width ) / 2.0 - adx );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,force,The following statement contains a magic number: f.Y = d.Y / ady * ( ( vi.Height + vj.Height ) / 2.0 - ady );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,force2,The following statement contains a magic number: f.X = ( vi.Width + vj.Width ) / 2.0 - d.X;
Magic Number,GraphSharp.Algorithms.OverlapRemoval,FSAAlgorithm<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\FSAAlgorithm.cs,force2,The following statement contains a magic number: f.Y = ( vi.Height + vj.Height ) / 2.0 - d.Y;
Magic Number,GraphSharp.Algorithms.OverlapRemoval,OneWayFSAAlgorithm<TObject>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OneWayFSAAlgorithm.cs,HorizontalImproved,The following statement contains a magic number: v.Rectangle.X += ( z - i ) * 0.0001;
Magic Number,GraphSharp.Algorithms.OverlapRemoval,OverlapRemovalAlgorithmBase<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OverlapRemovalAlgorithmBase.cs,AddGaps,The following statement contains a magic number: r.Rectangle.Offset( -Parameters.HorizontalGap / 2' -Parameters.VerticalGap / 2 );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,OverlapRemovalAlgorithmBase<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OverlapRemovalAlgorithmBase.cs,AddGaps,The following statement contains a magic number: r.Rectangle.Offset( -Parameters.HorizontalGap / 2' -Parameters.VerticalGap / 2 );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,OverlapRemovalAlgorithmBase<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OverlapRemovalAlgorithmBase.cs,RemoveGaps,The following statement contains a magic number: r.Rectangle.Offset( Parameters.HorizontalGap / 2' Parameters.VerticalGap / 2 );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,OverlapRemovalAlgorithmBase<TObject;TParam>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OverlapRemovalAlgorithmBase.cs,RemoveGaps,The following statement contains a magic number: r.Rectangle.Offset( Parameters.HorizontalGap / 2' Parameters.VerticalGap / 2 );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,OverlapRemovalHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OverlapRemovalHelper.cs,GetCenter,The following statement contains a magic number: return new Point( r.Left + r.Width / 2' r.Top + r.Height / 2 );
Magic Number,GraphSharp.Algorithms.OverlapRemoval,OverlapRemovalHelper,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\OverlapRemoval\OverlapRemovalHelper.cs,GetCenter,The following statement contains a magic number: return new Point( r.Left + r.Width / 2' r.Top + r.Height / 2 );
Missing Default,GraphSharp.Algorithms.Layout.Simple.Tree,SimpleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\Tree\SimpleTreeLayoutAlgorithm.cs,GenerateSpanningTree,The following switch statement is missing a default case: switch ( Parameters.SpanningTreeGeneration )              {                  case SpanningTreeGeneration.BFS:                      var bfsAlgo = new BreadthFirstSearchAlgorithm<TVertex' TEdge>( VisitedGraph' vb' new Dictionary<TVertex' GraphColor>() );                      bfsAlgo.TreeEdge += e => spanningTree.AddEdge( new Edge<TVertex>( e.Source' e.Target ) );                      bfsAlgo.Compute();                      break;                  case SpanningTreeGeneration.DFS:                      var dfsAlgo = new DepthFirstSearchAlgorithm<TVertex' TEdge>( VisitedGraph );                      dfsAlgo.TreeEdge += e => spanningTree.AddEdge( new Edge<TVertex>( e.Source' e.Target ) );                      dfsAlgo.Compute();                      break;              }
Missing Default,GraphSharp.Algorithms.Layout.Contextual,DoubleTreeLayoutAlgorithm<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Contextual\DoubleTreeLayoutAlgorithm.cs,InternalCompute,The following switch statement is missing a default case: switch ( side2Direction )              {                  case LayoutDirection.BottomToTop:                      side1Direction = LayoutDirection.TopToBottom;                      break;                  case LayoutDirection.LeftToRight:                      side1Direction = LayoutDirection.RightToLeft;                      break;                  case LayoutDirection.RightToLeft:                      side1Direction = LayoutDirection.LeftToRight;                      break;                  case LayoutDirection.TopToBottom:                      side1Direction = LayoutDirection.BottomToTop;                      break;              }
Missing Default,GraphSharp.Algorithms.Layout.Simple.FDP,FRLayoutAlgorithm<Vertex;Edge;Graph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp\Algorithms\Layout\Simple\FDP\FRLayoutAlgorithm.cs,InternalCompute,The following switch statement is missing a default case: switch (Parameters._coolingFunction)                  {                      case FRCoolingFunction.Linear:                          _temperature *= (1.0 - (double)i / (double)Parameters._iterationLimit);                          break;                      case FRCoolingFunction.Exponential:                          _temperature *= Parameters._lambda;                          break;                  }
