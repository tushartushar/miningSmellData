Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Common.Design\MetadataBase.cs,AddDescriptions,Cyclomatic complexity of the method is 8
Complex Conditional,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Common.Design\MetadataBase.cs,AddDescriptions,The conditional expression  "t != null && t.IsPublic && t.IsClass &&                               t.IsSubclassOf(typeof(SSW::FrameworkElement))"  is complex.
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants("member"))              {                  try                  {                      string name = (string)member.Attribute("name");                      bool isType = name.StartsWith("T:"' StringComparison.OrdinalIgnoreCase);                      if (isType ||                          name.StartsWith("P:"' StringComparison.OrdinalIgnoreCase))                      {                          int lastDot = name.Length;                          string typeName;                          if (isType)                          {                              typeName = name.Substring(2); // skip leading "T:"                          }                          else                          {                              lastDot = name.LastIndexOf('.');                              typeName = name.Substring(2' lastDot - 2);                          }                          typeName += AssemblyFullName;                            Type t = Type.GetType(typeName);                          if (t != null && t.IsPublic && t.IsClass &&                               t.IsSubclassOf(typeof(SSW::FrameworkElement)))                          {                              string desc = ParseDescription(member);                              desc = desc.Trim();                              desc = string.Join(" "' desc.Split(new char[] { ' '' '\t'' '\n'' '\r' }' StringSplitOptions.RemoveEmptyEntries));                                if (isType)                              {                                  builder.AddCallback(t' b => b.AddCustomAttributes(new DescriptionAttribute(desc)));                              }                              else                              {                                  string propName = name.Substring(lastDot + 1);                                  PropertyInfo pi = t.GetProperty(propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);                                  if (pi != null)                                  {                                      builder.AddCallback(t' b => b.AddCustomAttributes(propName' new DescriptionAttribute(desc)));                                  }                              }                          }                      }                  }                  catch (Exception e)                  {                      Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));                  }              }
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants("member"))              {                  try                  {                      string name = (string)member.Attribute("name");                      bool isType = name.StartsWith("T:"' StringComparison.OrdinalIgnoreCase);                      if (isType ||                          name.StartsWith("P:"' StringComparison.OrdinalIgnoreCase))                      {                          int lastDot = name.Length;                          string typeName;                          if (isType)                          {                              typeName = name.Substring(2); // skip leading "T:"                          }                          else                          {                              lastDot = name.LastIndexOf('.');                              typeName = name.Substring(2' lastDot - 2);                          }                          typeName += AssemblyFullName;                            Type t = Type.GetType(typeName);                          if (t != null && t.IsPublic && t.IsClass &&                               t.IsSubclassOf(typeof(SSW::FrameworkElement)))                          {                              string desc = ParseDescription(member);                              desc = desc.Trim();                              desc = string.Join(" "' desc.Split(new char[] { ' '' '\t'' '\n'' '\r' }' StringSplitOptions.RemoveEmptyEntries));                                if (isType)                              {                                  builder.AddCallback(t' b => b.AddCustomAttributes(new DescriptionAttribute(desc)));                              }                              else                              {                                  string propName = name.Substring(lastDot + 1);                                  PropertyInfo pi = t.GetProperty(propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);                                  if (pi != null)                                  {                                      builder.AddCallback(t' b => b.AddCustomAttributes(propName' new DescriptionAttribute(desc)));                                  }                              }                          }                      }                  }                  catch (Exception e)                  {                      Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));                  }              }
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Common.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants("member"))              {                  try                  {                      string name = (string)member.Attribute("name");                      bool isType = name.StartsWith("T:"' StringComparison.OrdinalIgnoreCase);                      if (isType ||                          name.StartsWith("P:"' StringComparison.OrdinalIgnoreCase))                      {                          int lastDot = name.Length;                          string typeName;                          if (isType)                          {                              typeName = name.Substring(2); // skip leading "T:"                          }                          else                          {                              lastDot = name.LastIndexOf('.');                              typeName = name.Substring(2' lastDot - 2);                          }                          typeName += AssemblyFullName;                            Type t = Type.GetType(typeName);                          if (t != null && t.IsPublic && t.IsClass &&                               t.IsSubclassOf(typeof(SSW::FrameworkElement)))                          {                              string desc = ParseDescription(member);                              desc = desc.Trim();                              desc = string.Join(" "' desc.Split(new char[] { ' '' '\t'' '\n'' '\r' }' StringSplitOptions.RemoveEmptyEntries));                                if (isType)                              {                                  builder.AddCallback(t' b => b.AddCustomAttributes(new DescriptionAttribute(desc)));                              }                              else                              {                                  string propName = name.Substring(lastDot + 1);                                  PropertyInfo pi = t.GetProperty(propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);                                  if (pi != null)                                  {                                      builder.AddCallback(t' b => b.AddCustomAttributes(propName' new DescriptionAttribute(desc)));                                  }                              }                          }                      }                  }                  catch (Exception e)                  {                      Debug.Assert(false' string.Format(CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));                  }              }
Magic Number,System.Windows.Controls.Input.Design,RatingDefaultInitializer,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\Input.Design\RatingDefaultInitializer.cs,InitializeDefaults,The following statement contains a magic number: item.Properties[propertyName].SetValue(5);
